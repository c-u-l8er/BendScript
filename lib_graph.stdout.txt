Compiling 1 file (.ex)

15:20:17.466 [debug] Defining type {:__aliases__, [line: 4, column: 11], [:Graph]} with block: {:__block__, [], [{:graph, [line: 6, column: 5], [{:vertex_map, [line: 6, column: 11], nil}, {:recu, [line: 6, column: 23], [{:edge_list, [line: 6, column: 28], nil}]}, {:metadata, [line: 6, column: 40], nil}]}, {:vertex, [line: 7, column: 5], [{:vertex_id, [line: 7, column: 12], nil}, {:properties, [line: 7, column: 23], nil}, {:recu, [line: 7, column: 35], [{:adjacency, [line: 7, column: 40], nil}]}]}, {:edge, [line: 8, column: 5], [{:source_id, [line: 8, column: 10], nil}, {:target_id, [line: 8, column: 21], nil}, {:edge_weight, [line: 8, column: 32], nil}, {:edge_props, [line: 8, column: 45], nil}]}, {:empty, [line: 9, column: 5], []}]}

15:20:17.467 [debug] Extracted variants: [{:graph, [line: 6, column: 5], [{:vertex_map, [line: 6, column: 11], nil}, {:recu, [line: 6, column: 23], [{:edge_list, [line: 6, column: 28], nil}]}, {:metadata, [line: 6, column: 40], nil}]}, {:vertex, [line: 7, column: 5], [{:vertex_id, [line: 7, column: 12], nil}, {:properties, [line: 7, column: 23], nil}, {:recu, [line: 7, column: 35], [{:adjacency, [line: 7, column: 40], nil}]}]}, {:edge, [line: 8, column: 5], [{:source_id, [line: 8, column: 10], nil}, {:target_id, [line: 8, column: 21], nil}, {:edge_weight, [line: 8, column: 32], nil}, {:edge_props, [line: 8, column: 45], nil}]}, {:empty, [line: 9, column: 5], []}]

15:20:17.467 [debug] Generating constructors for variants: [{:graph, [line: 6, column: 5], [{:vertex_map, [line: 6, column: 11], nil}, {:recu, [line: 6, column: 23], [{:edge_list, [line: 6, column: 28], nil}]}, {:metadata, [line: 6, column: 40], nil}]}, {:vertex, [line: 7, column: 5], [{:vertex_id, [line: 7, column: 12], nil}, {:properties, [line: 7, column: 23], nil}, {:recu, [line: 7, column: 35], [{:adjacency, [line: 7, column: 40], nil}]}]}, {:edge, [line: 8, column: 5], [{:source_id, [line: 8, column: 10], nil}, {:target_id, [line: 8, column: 21], nil}, {:edge_weight, [line: 8, column: 32], nil}, {:edge_props, [line: 8, column: 45], nil}]}, {:empty, [line: 9, column: 5], []}]

15:20:17.467 [debug] Processing variant: {:graph, [line: 6, column: 5], [{:vertex_map, [line: 6, column: 11], nil}, {:recu, [line: 6, column: 23], [{:edge_list, [line: 6, column: 28], nil}]}, {:metadata, [line: 6, column: 40], nil}]}

15:20:17.467 [debug] Constructor: :graph, meta: [line: 6, column: 5], args: [{:vertex_map, [line: 6, column: 11], nil}, {:recu, [line: 6, column: 23], [{:edge_list, [line: 6, column: 28], nil}]}, {:metadata, [line: 6, column: 40], nil}]

15:20:17.467 [debug] Extracting constructor args from: [{:vertex_map, [line: 6, column: 11], nil}, {:recu, [line: 6, column: 23], [{:edge_list, [line: 6, column: 28], nil}]}, {:metadata, [line: 6, column: 40], nil}]

15:20:17.467 [debug] Found value arg: :vertex_map

15:20:17.467 [debug] Found recursive arg: :edge_list

15:20:17.467 [debug] Found value arg: :metadata

15:20:17.467 [debug] Extracted arg_names: [:vertex_map, :edge_list, :metadata]

15:20:17.467 [debug] Generated arg vars: [{:vertex_map, [], nil}, {:edge_list, [], nil}, {:metadata, [], nil}]

15:20:17.467 [debug] Field pairs: [vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]

15:20:17.467 [debug] Processing variant: {:vertex, [line: 7, column: 5], [{:vertex_id, [line: 7, column: 12], nil}, {:properties, [line: 7, column: 23], nil}, {:recu, [line: 7, column: 35], [{:adjacency, [line: 7, column: 40], nil}]}]}

15:20:17.467 [debug] Constructor: :vertex, meta: [line: 7, column: 5], args: [{:vertex_id, [line: 7, column: 12], nil}, {:properties, [line: 7, column: 23], nil}, {:recu, [line: 7, column: 35], [{:adjacency, [line: 7, column: 40], nil}]}]

15:20:17.467 [debug] Extracting constructor args from: [{:vertex_id, [line: 7, column: 12], nil}, {:properties, [line: 7, column: 23], nil}, {:recu, [line: 7, column: 35], [{:adjacency, [line: 7, column: 40], nil}]}]

15:20:17.467 [debug] Found value arg: :vertex_id

15:20:17.467 [debug] Found value arg: :properties

15:20:17.467 [debug] Found recursive arg: :adjacency

15:20:17.467 [debug] Extracted arg_names: [:vertex_id, :properties, :adjacency]

15:20:17.467 [debug] Generated arg vars: [{:vertex_id, [], nil}, {:properties, [], nil}, {:adjacency, [], nil}]

15:20:17.467 [debug] Field pairs: [vertex_id: {:vertex_id, [], nil}, properties: {:properties, [], nil}, adjacency: {:adjacency, [], nil}]

15:20:17.467 [debug] Processing variant: {:edge, [line: 8, column: 5], [{:source_id, [line: 8, column: 10], nil}, {:target_id, [line: 8, column: 21], nil}, {:edge_weight, [line: 8, column: 32], nil}, {:edge_props, [line: 8, column: 45], nil}]}

15:20:17.467 [debug] Constructor: :edge, meta: [line: 8, column: 5], args: [{:source_id, [line: 8, column: 10], nil}, {:target_id, [line: 8, column: 21], nil}, {:edge_weight, [line: 8, column: 32], nil}, {:edge_props, [line: 8, column: 45], nil}]

15:20:17.467 [debug] Extracting constructor args from: [{:source_id, [line: 8, column: 10], nil}, {:target_id, [line: 8, column: 21], nil}, {:edge_weight, [line: 8, column: 32], nil}, {:edge_props, [line: 8, column: 45], nil}]

15:20:17.467 [debug] Found value arg: :source_id

15:20:17.467 [debug] Found value arg: :target_id

15:20:17.467 [debug] Found value arg: :edge_weight

15:20:17.467 [debug] Found value arg: :edge_props

15:20:17.467 [debug] Extracted arg_names: [:source_id, :target_id, :edge_weight, :edge_props]

15:20:17.467 [debug] Generated arg vars: [{:source_id, [], nil}, {:target_id, [], nil}, {:edge_weight, [], nil}, {:edge_props, [], nil}]

15:20:17.467 [debug] Field pairs: [source_id: {:source_id, [], nil}, target_id: {:target_id, [], nil}, edge_weight: {:edge_weight, [], nil}, edge_props: {:edge_props, [], nil}]

15:20:17.467 [debug] Processing variant: {:empty, [line: 9, column: 5], []}

15:20:17.467 [debug] Constructor: :empty, meta: [line: 9, column: 5], args: []

15:20:17.467 [debug] Extracting constructor args from: []

15:20:17.467 [debug] Extracted arg_names: []

15:20:17.467 [debug] Generated arg vars: []

15:20:17.467 [debug] Field pairs: []

15:20:17.474 [debug] Fold expression: {:graph, [line: 25, column: 10], nil}, opts: [], cases: [{:->, [line: 26, column: 52], [[{:case, [line: 26, column: 7], [{:graph, [line: 26, column: 12], [{:vertex_map, [line: 26, column: 18], nil}, {:edge_list, [line: 26, column: 30], nil}, {:metadata, [line: 26, column: 41], nil}]}]}], {{:., [line: 27, column: 14], [{:__aliases__, [line: 27, column: 9], [:Graph]}, :graph]}, [line: 27, column: 15], [{{:., [line: 28, column: 14], [{:__aliases__, [line: 28, column: 11], [:Map]}, :put]}, [line: 28, column: 15], [{:vertex_map, [line: 28, column: 19], nil}, {:id, [line: 28, column: 31], nil}, {{:., [line: 28, column: 40], [{:__aliases__, [line: 28, column: 35], [:Graph]}, :vertex]}, [line: 28, column: 41], [{:id, [line: 28, column: 48], nil}, {:props, [line: 28, column: 52], nil}, {{:., [line: 28, column: 64], [{:__aliases__, [line: 28, column: 59], [:Graph]}, :empty]}, [line: 28, column: 65], []}]}]}, {:edge_list, [line: 29, column: 11], nil}, {:metadata, [line: 30, column: 11], nil}]}]}, {:->, [line: 34, column: 21], [[{:case, [line: 34, column: 7], [{:empty, [line: 34, column: 12], []}]}], {{:., [line: 35, column: 14], [{:__aliases__, [line: 35, column: 9], [:Graph]}, :graph]}, [line: 35, column: 15], [{:%{}, [line: 36, column: 11], [{{:id, [line: 36, column: 13], nil}, {{:., [line: 36, column: 24], [{:__aliases__, [line: 36, column: 19], [:Graph]}, :vertex]}, [line: 36, column: 25], [{:id, [line: 36, column: 32], nil}, {:props, [line: 36, column: 36], nil}, {{:., [line: 36, column: 48], [{:__aliases__, [line: 36, column: 43], [:Graph]}, :empty]}, [line: 36, column: 49], []}]}}]}, {{:., [line: 37, column: 16], [{:__aliases__, [line: 37, column: 11], [:Graph]}, :empty]}, [line: 37, column: 17], []}, {:%{}, [line: 38, column: 11], [type: :directed]}]}]}, {:->, [line: 41, column: 15], [[{:case, [line: 41, column: 7], [{:_, [line: 41, column: 12], nil}]}], {:graph, [line: 42, column: 9], nil}]}]

15:20:17.474 [debug] Extracting cases from list: [{:->, [line: 26, column: 52], [[{:case, [line: 26, column: 7], [{:graph, [line: 26, column: 12], [{:vertex_map, [line: 26, column: 18], nil}, {:edge_list, [line: 26, column: 30], nil}, {:metadata, [line: 26, column: 41], nil}]}]}], {{:., [line: 27, column: 14], [{:__aliases__, [line: 27, column: 9], [:Graph]}, :graph]}, [line: 27, column: 15], [{{:., [line: 28, column: 14], [{:__aliases__, [line: 28, column: 11], [:Map]}, :put]}, [line: 28, column: 15], [{:vertex_map, [line: 28, column: 19], nil}, {:id, [line: 28, column: 31], nil}, {{:., [line: 28, column: 40], [{:__aliases__, [line: 28, column: 35], [:Graph]}, :vertex]}, [line: 28, column: 41], [{:id, [line: 28, column: 48], nil}, {:props, [line: 28, column: 52], nil}, {{:., [line: 28, column: 64], [{:__aliases__, [line: 28, column: 59], [:Graph]}, :empty]}, [line: 28, column: 65], []}]}]}, {:edge_list, [line: 29, column: 11], nil}, {:metadata, [line: 30, column: 11], nil}]}]}, {:->, [line: 34, column: 21], [[{:case, [line: 34, column: 7], [{:empty, [line: 34, column: 12], []}]}], {{:., [line: 35, column: 14], [{:__aliases__, [line: 35, column: 9], [:Graph]}, :graph]}, [line: 35, column: 15], [{:%{}, [line: 36, column: 11], [{{:id, [line: 36, column: 13], nil}, {{:., [line: 36, column: 24], [{:__aliases__, [line: 36, column: 19], [:Graph]}, :vertex]}, [line: 36, column: 25], [{:id, [line: 36, column: 32], nil}, {:props, [line: 36, column: 36], nil}, {{:., [line: 36, column: 48], [{:__aliases__, [line: 36, column: 43], [:Graph]}, :empty]}, [line: 36, column: 49], []}]}}]}, {{:., [line: 37, column: 16], [{:__aliases__, [line: 37, column: 11], [:Graph]}, :empty]}, [line: 37, column: 17], []}, {:%{}, [line: 38, column: 11], [type: :directed]}]}]}, {:->, [line: 41, column: 15], [[{:case, [line: 41, column: 7], [{:_, [line: 41, column: 12], nil}]}], {:graph, [line: 42, column: 9], nil}]}]

15:20:17.474 [debug] Extracted fold cases: [{:->, [line: 26, column: 52], [[{:case, [line: 26, column: 7], [{:graph, [line: 26, column: 12], [{:vertex_map, [line: 26, column: 18], nil}, {:edge_list, [line: 26, column: 30], nil}, {:metadata, [line: 26, column: 41], nil}]}]}], {{:., [line: 27, column: 14], [{:__aliases__, [line: 27, column: 9], [:Graph]}, :graph]}, [line: 27, column: 15], [{{:., [line: 28, column: 14], [{:__aliases__, [line: 28, column: 11], [:Map]}, :put]}, [line: 28, column: 15], [{:vertex_map, [line: 28, column: 19], nil}, {:id, [line: 28, column: 31], nil}, {{:., [line: 28, column: 40], [{:__aliases__, [line: 28, column: 35], [:Graph]}, :vertex]}, [line: 28, column: 41], [{:id, [line: 28, column: 48], nil}, {:props, [line: 28, column: 52], nil}, {{:., [line: 28, column: 64], [{:__aliases__, [line: 28, column: 59], [:Graph]}, :empty]}, [line: 28, column: 65], []}]}]}, {:edge_list, [line: 29, column: 11], nil}, {:metadata, [line: 30, column: 11], nil}]}]}, {:->, [line: 34, column: 21], [[{:case, [line: 34, column: 7], [{:empty, [line: 34, column: 12], []}]}], {{:., [line: 35, column: 14], [{:__aliases__, [line: 35, column: 9], [:Graph]}, :graph]}, [line: 35, column: 15], [{:%{}, [line: 36, column: 11], [{{:id, [line: 36, column: 13], nil}, {{:., [line: 36, column: 24], [{:__aliases__, [line: 36, column: 19], [:Graph]}, :vertex]}, [line: 36, column: 25], [{:id, [line: 36, column: 32], nil}, {:props, [line: 36, column: 36], nil}, {{:., [line: 36, column: 48], [{:__aliases__, [line: 36, column: 43], [:Graph]}, :empty]}, [line: 36, column: 49], []}]}}]}, {{:., [line: 37, column: 16], [{:__aliases__, [line: 37, column: 11], [:Graph]}, :empty]}, [line: 37, column: 17], []}, {:%{}, [line: 38, column: 11], [type: :directed]}]}]}, {:->, [line: 41, column: 15], [[{:case, [line: 41, column: 7], [{:_, [line: 41, column: 12], nil}]}], {:graph, [line: 42, column: 9], nil}]}]

15:20:17.475 [debug] Generating fold cases: [{:->, [line: 26, column: 52], [[{:case, [line: 26, column: 7], [{:graph, [line: 26, column: 12], [{:vertex_map, [line: 26, column: 18], nil}, {:edge_list, [line: 26, column: 30], nil}, {:metadata, [line: 26, column: 41], nil}]}]}], {{:., [line: 27, column: 14], [{:__aliases__, [line: 27, column: 9], [:Graph]}, :graph]}, [line: 27, column: 15], [{{:., [line: 28, column: 14], [{:__aliases__, [line: 28, column: 11], [:Map]}, :put]}, [line: 28, column: 15], [{:vertex_map, [line: 28, column: 19], nil}, {:id, [line: 28, column: 31], nil}, {{:., [line: 28, column: 40], [{:__aliases__, [line: 28, column: 35], [:Graph]}, :vertex]}, [line: 28, column: 41], [{:id, [line: 28, column: 48], nil}, {:props, [line: 28, column: 52], nil}, {{:., [line: 28, column: 64], [{:__aliases__, [line: 28, column: 59], [:Graph]}, :empty]}, [line: 28, column: 65], []}]}]}, {:edge_list, [line: 29, column: 11], nil}, {:metadata, [line: 30, column: 11], nil}]}]}, {:->, [line: 34, column: 21], [[{:case, [line: 34, column: 7], [{:empty, [line: 34, column: 12], []}]}], {{:., [line: 35, column: 14], [{:__aliases__, [line: 35, column: 9], [:Graph]}, :graph]}, [line: 35, column: 15], [{:%{}, [line: 36, column: 11], [{{:id, [line: 36, column: 13], nil}, {{:., [line: 36, column: 24], [{:__aliases__, [line: 36, column: 19], [:Graph]}, :vertex]}, [line: 36, column: 25], [{:id, [line: 36, column: 32], nil}, {:props, [line: 36, column: 36], nil}, {{:., [line: 36, column: 48], [{:__aliases__, [line: 36, column: 43], [:Graph]}, :empty]}, [line: 36, column: 49], []}]}}]}, {{:., [line: 37, column: 16], [{:__aliases__, [line: 37, column: 11], [:Graph]}, :empty]}, [line: 37, column: 17], []}, {:%{}, [line: 38, column: 11], [type: :directed]}]}]}, {:->, [line: 41, column: 15], [[{:case, [line: 41, column: 7], [{:_, [line: 41, column: 12], nil}]}], {:graph, [line: 42, column: 9], nil}]}]

15:20:17.475 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

15:20:17.475 [debug] Transforming recursive refs:
Body: {{:., [line: 27, column: 14], [{:__aliases__, [line: 27, column: 9], [:Graph]}, :graph]}, [line: 27, column: 15], [{{:., [line: 28, column: 14], [{:__aliases__, [line: 28, column: 11], [:Map]}, :put]}, [line: 28, column: 15], [{:vertex_map, [line: 28, column: 19], nil}, {:id, [line: 28, column: 31], nil}, {{:., [line: 28, column: 40], [{:__aliases__, [line: 28, column: 35], [:Graph]}, :vertex]}, [line: 28, column: 41], [{:id, [line: 28, column: 48], nil}, {:props, [line: 28, column: 52], nil}, {{:., [line: 28, column: 64], [{:__aliases__, [line: 28, column: 59], [:Graph]}, :empty]}, [line: 28, column: 65], []}]}]}, {:edge_list, [line: 29, column: 11], nil}, {:metadata, [line: 30, column: 11], nil}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:20:17.475 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:20:17.475 [debug] Transforming recursive refs:
Body: {{:., [line: 35, column: 14], [{:__aliases__, [line: 35, column: 9], [:Graph]}, :graph]}, [line: 35, column: 15], [{:%{}, [line: 36, column: 11], [{{:id, [line: 36, column: 13], nil}, {{:., [line: 36, column: 24], [{:__aliases__, [line: 36, column: 19], [:Graph]}, :vertex]}, [line: 36, column: 25], [{:id, [line: 36, column: 32], nil}, {:props, [line: 36, column: 36], nil}, {{:., [line: 36, column: 48], [{:__aliases__, [line: 36, column: 43], [:Graph]}, :empty]}, [line: 36, column: 49], []}]}}]}, {{:., [line: 37, column: 16], [{:__aliases__, [line: 37, column: 11], [:Graph]}, :empty]}, [line: 37, column: 17], []}, {:%{}, [line: 38, column: 11], [type: :directed]}]}
Bindings: []
State: nil


15:20:17.475 [debug] Generated pattern: {:%{}, [], [variant: :_]} for variant: :_

15:20:17.475 [debug] Transforming recursive refs:
Body: {:graph, [line: 42, column: 9], nil}
Bindings: []
State: nil


15:20:17.475 [debug] Generated fold cases after transformation: [{:->, [line: 26, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {{:., [line: 27, column: 14], [{:__aliases__, [line: 27, column: 9], [:Graph]}, :graph]}, [line: 27, column: 15], [{{:., [line: 28, column: 14], [{:__aliases__, [line: 28, column: 11], [:Map]}, :put]}, [line: 28, column: 15], [{:vertex_map, [line: 28, column: 19], nil}, {:id, [line: 28, column: 31], nil}, {{:., [line: 28, column: 40], [{:__aliases__, [line: 28, column: 35], [:Graph]}, :vertex]}, [line: 28, column: 41], [{:id, [line: 28, column: 48], nil}, {:props, [line: 28, column: 52], nil}, {{:., [line: 28, column: 64], [{:__aliases__, [line: 28, column: 59], [:Graph]}, :empty]}, [line: 28, column: 65], []}]}]}, {:edge_list, [line: 29, column: 11], nil}, {:metadata, [line: 30, column: 11], nil}]}]}, {:->, [line: 34, column: 21], [[{:%{}, [], [variant: :empty]}], {{:., [line: 35, column: 14], [{:__aliases__, [line: 35, column: 9], [:Graph]}, :graph]}, [line: 35, column: 15], [{:%{}, [line: 36, column: 11], [{{:id, [line: 36, column: 13], nil}, {{:., [line: 36, column: 24], [{:__aliases__, [line: 36, column: 19], [:Graph]}, :vertex]}, [line: 36, column: 25], [{:id, [line: 36, column: 32], nil}, {:props, [line: 36, column: 36], nil}, {{:., [line: 36, column: 48], [{:__aliases__, [line: 36, column: 43], [:Graph]}, :empty]}, [line: 36, column: 49], []}]}}]}, {{:., [line: 37, column: 16], [{:__aliases__, [line: 37, column: 11], [:Graph]}, :empty]}, [line: 37, column: 17], []}, {:%{}, [line: 38, column: 11], [type: :directed]}]}]}, {:->, [line: 41, column: 15], [[{:%{}, [], [variant: :_]}], {:graph, [line: 42, column: 9], nil}]}]

15:20:17.475 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 25, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 26, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {{:., [line: 27, column: 14], [{:__aliases__, [line: 27, column: 9], [:Graph]}, :graph]}, [line: 27, column: 15], [{{:., [line: 28, column: 14], [{:__aliases__, [line: 28, column: 11], [:Map]}, :put]}, [line: 28, column: 15], [{:vertex_map, [line: 28, column: 19], nil}, {:id, [line: 28, column: 31], nil}, {{:., [line: 28, column: 40], [{:__aliases__, [line: 28, column: 35], [:Graph]}, :vertex]}, [line: 28, column: 41], [{:id, [line: 28, column: 48], nil}, {:props, [line: 28, column: 52], nil}, {{:., [line: 28, column: 64], [{:__aliases__, [...], ...}, :empty]}, [line: 28, column: 65], []}]}]}, {:edge_list, [line: 29, column: 11], nil}, {:metadata, [line: 30, column: 11], nil}]}]}, {:->, [line: 34, column: 21], [[{:%{}, [], [variant: :empty]}], {{:., [line: 35, column: 14], [{:__aliases__, [line: 35, column: 9], [:Graph]}, :graph]}, [line: 35, column: 15], [{:%{}, [line: 36, column: 11], [{{:id, [line: 36, column: 13], nil}, {{:., [line: 36, column: 24], [{:__aliases__, [line: 36, column: 19], [:Graph]}, :vertex]}, [line: 36, column: 25], [{:id, [line: 36, column: 32], nil}, {:props, [line: 36, column: 36], nil}, {{:., [line: 36, column: 48], [{:__aliases__, ...}, :empty]}, [line: 36, column: 49], []}]}}]}, {{:., [line: 37, column: 16], [{:__aliases__, [line: 37, column: 11], [:Graph]}, :empty]}, [line: 37, column: 17], []}, {:%{}, [line: 38, column: 11], [type: :directed]}]}]}, {:->, [line: 41, column: 15], [[{:%{}, [], [variant: :_]}], {:graph, [line: 42, column: 9], nil}]}]]]}]}]}]}

15:20:17.477 [debug] Fold expression: {:graph, [line: 49, column: 10], nil}, opts: [], cases: [{:->, [line: 50, column: 52], [[{:case, [line: 50, column: 7], [{:graph, [line: 50, column: 12], [{:vertex_map, [line: 50, column: 18], nil}, {:edge_list, [line: 50, column: 30], nil}, {:metadata, [line: 50, column: 41], nil}]}]}], {:__block__, [], [{:=, [line: 51, column: 19], [{:all_edges, [line: 51, column: 9], nil}, {:if, [line: 52, column: 11], [{:==, [line: 52, column: 28], [{{:., [line: 52, column: 22], [{:metadata, [line: 52, column: 14], nil}, :type]}, [no_parens: true, line: 52, column: 23], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 53, column: 26], [{:reverse_edge, [line: 53, column: 13], nil}, {{:., [line: 53, column: 33], [{:__aliases__, [line: 53, column: 28], [:Graph]}, :edge]}, [line: 53, column: 34], [{:to_id, [line: 53, column: 39], nil}, {:from_id, [line: 53, column: 46], nil}, {:weight, [line: 53, column: 55], nil}, {:props, [line: 53, column: 63], nil}]}]}, [{:new_edge, [line: 54, column: 14], nil}, {:reverse_edge, [line: 54, column: 24], nil}]]}, else: [{:new_edge, [line: 56, column: 14], nil}]]]}]}, {:=, [line: 60, column: 23], [{:new_edge_list, [line: 60, column: 9], nil}, {:case, [line: 61, column: 11], [{:edge_list, [line: 61, column: 16], nil}, [do: [{:->, [line: 62, column: 32], [[{:%{}, [line: 62, column: 13], [variant: :empty]}], {:hd, [line: 62, column: 35], [{:all_edges, [line: 62, column: 38], nil}]}]}, {:->, [line: 63, column: 15], [[{:_, [line: 63, column: 13], nil}], {:++, [line: 63, column: 28], [{:all_edges, [line: 63, column: 18], nil}, {{:., [line: 63, column: 35], [{:__aliases__, [line: 63, column: 31], [:List]}, :wrap]}, [line: 63, column: 36], [{:edge_list, [line: 63, column: 41], nil}]}]}]}]]]}]}, {{:., [line: 66, column: 14], [{:__aliases__, [line: 66, column: 9], [:Graph]}, :graph]}, [line: 66, column: 15], [{:vertex_map, [line: 66, column: 21], nil}, {:new_edge_list, [line: 66, column: 33], nil}, {:metadata, [line: 66, column: 48], nil}]}]}]}, {:->, [line: 68, column: 21], [[{:case, [line: 68, column: 7], [{:empty, [line: 68, column: 12], []}]}], {{:., [line: 69, column: 14], [{:__aliases__, [line: 69, column: 9], [:Graph]}, :graph]}, [line: 69, column: 15], [{:%{}, [line: 69, column: 21], []}, {:new_edge, [line: 69, column: 26], nil}, {:%{}, [line: 69, column: 36], [type: :directed]}]}]}, {:->, [line: 71, column: 15], [[{:case, [line: 71, column: 7], [{:_, [line: 71, column: 12], nil}]}], {:graph, [line: 72, column: 9], nil}]}]

15:20:17.477 [debug] Extracting cases from list: [{:->, [line: 50, column: 52], [[{:case, [line: 50, column: 7], [{:graph, [line: 50, column: 12], [{:vertex_map, [line: 50, column: 18], nil}, {:edge_list, [line: 50, column: 30], nil}, {:metadata, [line: 50, column: 41], nil}]}]}], {:__block__, [], [{:=, [line: 51, column: 19], [{:all_edges, [line: 51, column: 9], nil}, {:if, [line: 52, column: 11], [{:==, [line: 52, column: 28], [{{:., [line: 52, column: 22], [{:metadata, [line: 52, column: 14], nil}, :type]}, [no_parens: true, line: 52, column: 23], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 53, column: 26], [{:reverse_edge, [line: 53, column: 13], nil}, {{:., [line: 53, column: 33], [{:__aliases__, [line: 53, column: 28], [:Graph]}, :edge]}, [line: 53, column: 34], [{:to_id, [line: 53, column: 39], nil}, {:from_id, [line: 53, column: 46], nil}, {:weight, [line: 53, column: 55], nil}, {:props, [line: 53, column: 63], nil}]}]}, [{:new_edge, [line: 54, column: 14], nil}, {:reverse_edge, [line: 54, column: 24], nil}]]}, else: [{:new_edge, [line: 56, column: 14], nil}]]]}]}, {:=, [line: 60, column: 23], [{:new_edge_list, [line: 60, column: 9], nil}, {:case, [line: 61, column: 11], [{:edge_list, [line: 61, column: 16], nil}, [do: [{:->, [line: 62, column: 32], [[{:%{}, [line: 62, column: 13], [variant: :empty]}], {:hd, [line: 62, column: 35], [{:all_edges, [line: 62, column: 38], nil}]}]}, {:->, [line: 63, column: 15], [[{:_, [line: 63, column: 13], nil}], {:++, [line: 63, column: 28], [{:all_edges, [line: 63, column: 18], nil}, {{:., [line: 63, column: 35], [{:__aliases__, [line: 63, column: 31], [:List]}, :wrap]}, [line: 63, column: 36], [{:edge_list, [line: 63, column: 41], nil}]}]}]}]]]}]}, {{:., [line: 66, column: 14], [{:__aliases__, [line: 66, column: 9], [:Graph]}, :graph]}, [line: 66, column: 15], [{:vertex_map, [line: 66, column: 21], nil}, {:new_edge_list, [line: 66, column: 33], nil}, {:metadata, [line: 66, column: 48], nil}]}]}]}, {:->, [line: 68, column: 21], [[{:case, [line: 68, column: 7], [{:empty, [line: 68, column: 12], []}]}], {{:., [line: 69, column: 14], [{:__aliases__, [line: 69, column: 9], [:Graph]}, :graph]}, [line: 69, column: 15], [{:%{}, [line: 69, column: 21], []}, {:new_edge, [line: 69, column: 26], nil}, {:%{}, [line: 69, column: 36], [type: :directed]}]}]}, {:->, [line: 71, column: 15], [[{:case, [line: 71, column: 7], [{:_, [line: 71, column: 12], nil}]}], {:graph, [line: 72, column: 9], nil}]}]

15:20:17.477 [debug] Extracted fold cases: [{:->, [line: 50, column: 52], [[{:case, [line: 50, column: 7], [{:graph, [line: 50, column: 12], [{:vertex_map, [line: 50, column: 18], nil}, {:edge_list, [line: 50, column: 30], nil}, {:metadata, [line: 50, column: 41], nil}]}]}], {:__block__, [], [{:=, [line: 51, column: 19], [{:all_edges, [line: 51, column: 9], nil}, {:if, [line: 52, column: 11], [{:==, [line: 52, column: 28], [{{:., [line: 52, column: 22], [{:metadata, [line: 52, column: 14], nil}, :type]}, [no_parens: true, line: 52, column: 23], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 53, column: 26], [{:reverse_edge, [line: 53, column: 13], nil}, {{:., [line: 53, column: 33], [{:__aliases__, [line: 53, column: 28], [:Graph]}, :edge]}, [line: 53, column: 34], [{:to_id, [line: 53, column: 39], nil}, {:from_id, [line: 53, column: 46], nil}, {:weight, [line: 53, column: 55], nil}, {:props, [line: 53, column: 63], nil}]}]}, [{:new_edge, [line: 54, column: 14], nil}, {:reverse_edge, [line: 54, column: 24], nil}]]}, else: [{:new_edge, [line: 56, column: 14], nil}]]]}]}, {:=, [line: 60, column: 23], [{:new_edge_list, [line: 60, column: 9], nil}, {:case, [line: 61, column: 11], [{:edge_list, [line: 61, column: 16], nil}, [do: [{:->, [line: 62, column: 32], [[{:%{}, [line: 62, column: 13], [variant: :empty]}], {:hd, [line: 62, column: 35], [{:all_edges, [line: 62, column: 38], nil}]}]}, {:->, [line: 63, column: 15], [[{:_, [line: 63, column: 13], nil}], {:++, [line: 63, column: 28], [{:all_edges, [line: 63, column: 18], nil}, {{:., [line: 63, column: 35], [{:__aliases__, [line: 63, column: 31], [:List]}, :wrap]}, [line: 63, column: 36], [{:edge_list, [line: 63, column: 41], nil}]}]}]}]]]}]}, {{:., [line: 66, column: 14], [{:__aliases__, [line: 66, column: 9], [:Graph]}, :graph]}, [line: 66, column: 15], [{:vertex_map, [line: 66, column: 21], nil}, {:new_edge_list, [line: 66, column: 33], nil}, {:metadata, [line: 66, column: 48], nil}]}]}]}, {:->, [line: 68, column: 21], [[{:case, [line: 68, column: 7], [{:empty, [line: 68, column: 12], []}]}], {{:., [line: 69, column: 14], [{:__aliases__, [line: 69, column: 9], [:Graph]}, :graph]}, [line: 69, column: 15], [{:%{}, [line: 69, column: 21], []}, {:new_edge, [line: 69, column: 26], nil}, {:%{}, [line: 69, column: 36], [type: :directed]}]}]}, {:->, [line: 71, column: 15], [[{:case, [line: 71, column: 7], [{:_, [line: 71, column: 12], nil}]}], {:graph, [line: 72, column: 9], nil}]}]

15:20:17.477 [debug] Generating fold cases: [{:->, [line: 50, column: 52], [[{:case, [line: 50, column: 7], [{:graph, [line: 50, column: 12], [{:vertex_map, [line: 50, column: 18], nil}, {:edge_list, [line: 50, column: 30], nil}, {:metadata, [line: 50, column: 41], nil}]}]}], {:__block__, [], [{:=, [line: 51, column: 19], [{:all_edges, [line: 51, column: 9], nil}, {:if, [line: 52, column: 11], [{:==, [line: 52, column: 28], [{{:., [line: 52, column: 22], [{:metadata, [line: 52, column: 14], nil}, :type]}, [no_parens: true, line: 52, column: 23], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 53, column: 26], [{:reverse_edge, [line: 53, column: 13], nil}, {{:., [line: 53, column: 33], [{:__aliases__, [line: 53, column: 28], [:Graph]}, :edge]}, [line: 53, column: 34], [{:to_id, [line: 53, column: 39], nil}, {:from_id, [line: 53, column: 46], nil}, {:weight, [line: 53, column: 55], nil}, {:props, [line: 53, column: 63], nil}]}]}, [{:new_edge, [line: 54, column: 14], nil}, {:reverse_edge, [line: 54, column: 24], nil}]]}, else: [{:new_edge, [line: 56, column: 14], nil}]]]}]}, {:=, [line: 60, column: 23], [{:new_edge_list, [line: 60, column: 9], nil}, {:case, [line: 61, column: 11], [{:edge_list, [line: 61, column: 16], nil}, [do: [{:->, [line: 62, column: 32], [[{:%{}, [line: 62, column: 13], [variant: :empty]}], {:hd, [line: 62, column: 35], [{:all_edges, [line: 62, column: 38], nil}]}]}, {:->, [line: 63, column: 15], [[{:_, [line: 63, column: 13], nil}], {:++, [line: 63, column: 28], [{:all_edges, [line: 63, column: 18], nil}, {{:., [line: 63, column: 35], [{:__aliases__, [line: 63, column: 31], [:List]}, :wrap]}, [line: 63, column: 36], [{:edge_list, [line: 63, column: 41], nil}]}]}]}]]]}]}, {{:., [line: 66, column: 14], [{:__aliases__, [line: 66, column: 9], [:Graph]}, :graph]}, [line: 66, column: 15], [{:vertex_map, [line: 66, column: 21], nil}, {:new_edge_list, [line: 66, column: 33], nil}, {:metadata, [line: 66, column: 48], nil}]}]}]}, {:->, [line: 68, column: 21], [[{:case, [line: 68, column: 7], [{:empty, [line: 68, column: 12], []}]}], {{:., [line: 69, column: 14], [{:__aliases__, [line: 69, column: 9], [:Graph]}, :graph]}, [line: 69, column: 15], [{:%{}, [line: 69, column: 21], []}, {:new_edge, [line: 69, column: 26], nil}, {:%{}, [line: 69, column: 36], [type: :directed]}]}]}, {:->, [line: 71, column: 15], [[{:case, [line: 71, column: 7], [{:_, [line: 71, column: 12], nil}]}], {:graph, [line: 72, column: 9], nil}]}]

15:20:17.477 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

15:20:17.478 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 51, column: 19], [{:all_edges, [line: 51, column: 9], nil}, {:if, [line: 52, column: 11], [{:==, [line: 52, column: 28], [{{:., [line: 52, column: 22], [{:metadata, [line: 52, column: 14], nil}, :type]}, [no_parens: true, line: 52, column: 23], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 53, column: 26], [{:reverse_edge, [line: 53, column: 13], nil}, {{:., [line: 53, column: 33], [{:__aliases__, [line: 53, column: 28], [:Graph]}, :edge]}, [line: 53, column: 34], [{:to_id, [line: 53, column: 39], nil}, {:from_id, [line: 53, column: 46], nil}, {:weight, [line: 53, column: 55], nil}, {:props, [line: 53, column: 63], nil}]}]}, [{:new_edge, [line: 54, column: 14], nil}, {:reverse_edge, [line: 54, column: 24], nil}]]}, else: [{:new_edge, [line: 56, column: 14], nil}]]]}]}, {:=, [line: 60, column: 23], [{:new_edge_list, [line: 60, column: 9], nil}, {:case, [line: 61, column: 11], [{:edge_list, [line: 61, column: 16], nil}, [do: [{:->, [line: 62, column: 32], [[{:%{}, [line: 62, column: 13], [variant: :empty]}], {:hd, [line: 62, column: 35], [{:all_edges, [line: 62, column: 38], nil}]}]}, {:->, [line: 63, column: 15], [[{:_, [line: 63, column: 13], nil}], {:++, [line: 63, column: 28], [{:all_edges, [line: 63, column: 18], nil}, {{:., [line: 63, column: 35], [{:__aliases__, [line: 63, column: 31], [:List]}, :wrap]}, [line: 63, column: 36], [{:edge_list, [line: 63, column: 41], nil}]}]}]}]]]}]}, {{:., [line: 66, column: 14], [{:__aliases__, [line: 66, column: 9], [:Graph]}, :graph]}, [line: 66, column: 15], [{:vertex_map, [line: 66, column: 21], nil}, {:new_edge_list, [line: 66, column: 33], nil}, {:metadata, [line: 66, column: 48], nil}]}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:20:17.478 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:20:17.478 [debug] Transforming recursive refs:
Body: {{:., [line: 69, column: 14], [{:__aliases__, [line: 69, column: 9], [:Graph]}, :graph]}, [line: 69, column: 15], [{:%{}, [line: 69, column: 21], []}, {:new_edge, [line: 69, column: 26], nil}, {:%{}, [line: 69, column: 36], [type: :directed]}]}
Bindings: []
State: nil


15:20:17.478 [debug] Generated pattern: {:%{}, [], [variant: :_]} for variant: :_

15:20:17.478 [debug] Transforming recursive refs:
Body: {:graph, [line: 72, column: 9], nil}
Bindings: []
State: nil


15:20:17.478 [debug] Generated fold cases after transformation: [{:->, [line: 50, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 51, column: 19], [{:all_edges, [line: 51, column: 9], nil}, {:if, [line: 52, column: 11], [{:==, [line: 52, column: 28], [{{:., [line: 52, column: 22], [{:metadata, [line: 52, column: 14], nil}, :type]}, [no_parens: true, line: 52, column: 23], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 53, column: 26], [{:reverse_edge, [line: 53, column: 13], nil}, {{:., [line: 53, column: 33], [{:__aliases__, [line: 53, column: 28], [:Graph]}, :edge]}, [line: 53, column: 34], [{:to_id, [line: 53, column: 39], nil}, {:from_id, [line: 53, column: 46], nil}, {:weight, [line: 53, column: 55], nil}, {:props, [line: 53, column: 63], nil}]}]}, [{:new_edge, [line: 54, column: 14], nil}, {:reverse_edge, [line: 54, column: 24], nil}]]}, else: [{:new_edge, [line: 56, column: 14], nil}]]]}]}, {:=, [line: 60, column: 23], [{:new_edge_list, [line: 60, column: 9], nil}, {:case, [line: 61, column: 11], [{:edge_list, [line: 61, column: 16], nil}, [do: [{:->, [line: 62, column: 32], [[{:%{}, [line: 62, column: 13], [variant: :empty]}], {:hd, [line: 62, column: 35], [{:all_edges, [line: 62, column: 38], nil}]}]}, {:->, [line: 63, column: 15], [[{:_, [line: 63, column: 13], nil}], {:++, [line: 63, column: 28], [{:all_edges, [line: 63, column: 18], nil}, {{:., [line: 63, column: 35], [{:__aliases__, [line: 63, column: 31], [:List]}, :wrap]}, [line: 63, column: 36], [{:edge_list, [line: 63, column: 41], nil}]}]}]}]]]}]}, {{:., [line: 66, column: 14], [{:__aliases__, [line: 66, column: 9], [:Graph]}, :graph]}, [line: 66, column: 15], [{:vertex_map, [line: 66, column: 21], nil}, {:new_edge_list, [line: 66, column: 33], nil}, {:metadata, [line: 66, column: 48], nil}]}]}]}, {:->, [line: 68, column: 21], [[{:%{}, [], [variant: :empty]}], {{:., [line: 69, column: 14], [{:__aliases__, [line: 69, column: 9], [:Graph]}, :graph]}, [line: 69, column: 15], [{:%{}, [line: 69, column: 21], []}, {:new_edge, [line: 69, column: 26], nil}, {:%{}, [line: 69, column: 36], [type: :directed]}]}]}, {:->, [line: 71, column: 15], [[{:%{}, [], [variant: :_]}], {:graph, [line: 72, column: 9], nil}]}]

15:20:17.478 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 49, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 50, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 51, column: 19], [{:all_edges, [line: 51, column: 9], nil}, {:if, [line: 52, column: 11], [{:==, [line: 52, column: 28], [{{:., [line: 52, column: 22], [{:metadata, ...}, :type]}, [no_parens: true, line: 52, column: 23], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 53, column: 26], [{...}, ...]}, [{:new_edge, [...], ...}, {:reverse_edge, ...}]]}, else: [{:new_edge, [line: 56, column: 14], nil}]]]}]}, {:=, [line: 60, column: 23], [{:new_edge_list, [line: 60, column: 9], nil}, {:case, [line: 61, column: 11], [{:edge_list, [line: 61, column: 16], nil}, [do: [{:->, [line: 62, column: 32], [[{:%{}, ...}], {:hd, ...}]}, {:->, [line: 63, column: 15], [[{...}], {...}]}]]]}]}, {{:., [line: 66, column: 14], [{:__aliases__, [line: 66, column: 9], [:Graph]}, :graph]}, [line: 66, column: 15], [{:vertex_map, [line: 66, column: 21], nil}, {:new_edge_list, [line: 66, column: 33], nil}, {:metadata, [line: 66, column: 48], nil}]}]}]}, {:->, [line: 68, column: 21], [[{:%{}, [], [variant: :empty]}], {{:., [line: 69, column: 14], [{:__aliases__, [line: 69, column: 9], [:Graph]}, :graph]}, [line: 69, column: 15], [{:%{}, [line: 69, column: 21], []}, {:new_edge, [line: 69, column: 26], nil}, {:%{}, [line: 69, column: 36], [type: :directed]}]}]}, {:->, [line: 71, column: 15], [[{:%{}, [], [variant: :_]}], {:graph, [line: 72, column: 9], nil}]}]]]}]}]}]}

15:20:17.479 [debug] Fold expression: {:graph, [line: 78, column: 10], nil}, opts: [], cases: [{:->, [line: 79, column: 52], [[{:case, [line: 79, column: 7], [{:graph, [line: 79, column: 12], [{:vertex_map, [line: 79, column: 18], nil}, {:edge_list, [line: 79, column: 30], nil}, {:metadata, [line: 79, column: 41], nil}]}]}], {:map_size, [line: 80, column: 9], [{:vertex_map, [line: 80, column: 18], nil}]}]}, {:->, [line: 82, column: 15], [[{:case, [line: 82, column: 7], [{:_, [line: 82, column: 12], nil}]}], 0]}]

15:20:17.479 [debug] Extracting cases from list: [{:->, [line: 79, column: 52], [[{:case, [line: 79, column: 7], [{:graph, [line: 79, column: 12], [{:vertex_map, [line: 79, column: 18], nil}, {:edge_list, [line: 79, column: 30], nil}, {:metadata, [line: 79, column: 41], nil}]}]}], {:map_size, [line: 80, column: 9], [{:vertex_map, [line: 80, column: 18], nil}]}]}, {:->, [line: 82, column: 15], [[{:case, [line: 82, column: 7], [{:_, [line: 82, column: 12], nil}]}], 0]}]

15:20:17.479 [debug] Extracted fold cases: [{:->, [line: 79, column: 52], [[{:case, [line: 79, column: 7], [{:graph, [line: 79, column: 12], [{:vertex_map, [line: 79, column: 18], nil}, {:edge_list, [line: 79, column: 30], nil}, {:metadata, [line: 79, column: 41], nil}]}]}], {:map_size, [line: 80, column: 9], [{:vertex_map, [line: 80, column: 18], nil}]}]}, {:->, [line: 82, column: 15], [[{:case, [line: 82, column: 7], [{:_, [line: 82, column: 12], nil}]}], 0]}]

15:20:17.479 [debug] Generating fold cases: [{:->, [line: 79, column: 52], [[{:case, [line: 79, column: 7], [{:graph, [line: 79, column: 12], [{:vertex_map, [line: 79, column: 18], nil}, {:edge_list, [line: 79, column: 30], nil}, {:metadata, [line: 79, column: 41], nil}]}]}], {:map_size, [line: 80, column: 9], [{:vertex_map, [line: 80, column: 18], nil}]}]}, {:->, [line: 82, column: 15], [[{:case, [line: 82, column: 7], [{:_, [line: 82, column: 12], nil}]}], 0]}]

15:20:17.479 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

15:20:17.479 [debug] Transforming recursive refs:
Body: {:map_size, [line: 80, column: 9], [{:vertex_map, [line: 80, column: 18], nil}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:20:17.479 [debug] Generated pattern: {:%{}, [], [variant: :_]} for variant: :_

15:20:17.479 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil


15:20:17.479 [debug] Generated fold cases after transformation: [{:->, [line: 79, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:map_size, [line: 80, column: 9], [{:vertex_map, [line: 80, column: 18], nil}]}]}, {:->, [line: 82, column: 15], [[{:%{}, [], [variant: :_]}], 0]}]
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 25 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/lib_graph.ex:25: LibGraph.add_vertex/3


15:20:17.479 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 78, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 79, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:map_size, [line: 80, column: 9], [{:vertex_map, [line: 80, column: 18], nil}]}]}, {:->, [line: 82, column: 15], [[{:%{}, [], [variant: :_]}], 0]}]]]}]}]}]}

15:20:17.480 [debug] Fold expression: {:graph, [line: 88, column: 10], nil}, opts: [], cases: [{:->, [line: 89, column: 52], [[{:case, [line: 89, column: 7], [{:graph, [line: 89, column: 12], [{:vertex_map, [line: 89, column: 18], nil}, {:edge_list, [line: 89, column: 30], nil}, {:metadata, [line: 89, column: 41], nil}]}]}], {:__block__, [], [{:=, [line: 90, column: 15], [{:count, [line: 90, column: 9], nil}, {:count_edges, [line: 90, column: 17], [{:edge_list, [line: 90, column: 29], nil}]}]}, {:if, [line: 92, column: 9], [{:==, [line: 92, column: 26], [{{:., [line: 92, column: 20], [{:metadata, [line: 92, column: 12], nil}, :type]}, [no_parens: true, line: 92, column: 21], []}, :undirected]}, [do: {:div, [line: 94, column: 11], [{:count, [line: 94, column: 15], nil}, 2]}, else: {:count, [line: 96, column: 11], nil}]]}]}]}, {:->, [line: 99, column: 15], [[{:case, [line: 99, column: 7], [{:_, [line: 99, column: 12], nil}]}], 0]}]
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 49 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/lib_graph.ex:49: LibGraph.add_edge/5


15:20:17.480 [debug] Extracting cases from list: [{:->, [line: 89, column: 52], [[{:case, [line: 89, column: 7], [{:graph, [line: 89, column: 12], [{:vertex_map, [line: 89, column: 18], nil}, {:edge_list, [line: 89, column: 30], nil}, {:metadata, [line: 89, column: 41], nil}]}]}], {:__block__, [], [{:=, [line: 90, column: 15], [{:count, [line: 90, column: 9], nil}, {:count_edges, [line: 90, column: 17], [{:edge_list, [line: 90, column: 29], nil}]}]}, {:if, [line: 92, column: 9], [{:==, [line: 92, column: 26], [{{:., [line: 92, column: 20], [{:metadata, [line: 92, column: 12], nil}, :type]}, [no_parens: true, line: 92, column: 21], []}, :undirected]}, [do: {:div, [line: 94, column: 11], [{:count, [line: 94, column: 15], nil}, 2]}, else: {:count, [line: 96, column: 11], nil}]]}]}]}, {:->, [line: 99, column: 15], [[{:case, [line: 99, column: 7], [{:_, [line: 99, column: 12], nil}]}], 0]}]

15:20:17.480 [debug] Extracted fold cases: [{:->, [line: 89, column: 52], [[{:case, [line: 89, column: 7], [{:graph, [line: 89, column: 12], [{:vertex_map, [line: 89, column: 18], nil}, {:edge_list, [line: 89, column: 30], nil}, {:metadata, [line: 89, column: 41], nil}]}]}], {:__block__, [], [{:=, [line: 90, column: 15], [{:count, [line: 90, column: 9], nil}, {:count_edges, [line: 90, column: 17], [{:edge_list, [line: 90, column: 29], nil}]}]}, {:if, [line: 92, column: 9], [{:==, [line: 92, column: 26], [{{:., [line: 92, column: 20], [{:metadata, [line: 92, column: 12], nil}, :type]}, [no_parens: true, line: 92, column: 21], []}, :undirected]}, [do: {:div, [line: 94, column: 11], [{:count, [line: 94, column: 15], nil}, 2]}, else: {:count, [line: 96, column: 11], nil}]]}]}]}, {:->, [line: 99, column: 15], [[{:case, [line: 99, column: 7], [{:_, [line: 99, column: 12], nil}]}], 0]}]

15:20:17.480 [debug] Generating fold cases: [{:->, [line: 89, column: 52], [[{:case, [line: 89, column: 7], [{:graph, [line: 89, column: 12], [{:vertex_map, [line: 89, column: 18], nil}, {:edge_list, [line: 89, column: 30], nil}, {:metadata, [line: 89, column: 41], nil}]}]}], {:__block__, [], [{:=, [line: 90, column: 15], [{:count, [line: 90, column: 9], nil}, {:count_edges, [line: 90, column: 17], [{:edge_list, [line: 90, column: 29], nil}]}]}, {:if, [line: 92, column: 9], [{:==, [line: 92, column: 26], [{{:., [line: 92, column: 20], [{:metadata, [line: 92, column: 12], nil}, :type]}, [no_parens: true, line: 92, column: 21], []}, :undirected]}, [do: {:div, [line: 94, column: 11], [{:count, [line: 94, column: 15], nil}, 2]}, else: {:count, [line: 96, column: 11], nil}]]}]}]}, {:->, [line: 99, column: 15], [[{:case, [line: 99, column: 7], [{:_, [line: 99, column: 12], nil}]}], 0]}]

15:20:17.480 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph
    warning: variable "edge_list" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 78 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/lib_graph.ex:78: LibGraph.vertex_count/1


15:20:17.480 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 90, column: 15], [{:count, [line: 90, column: 9], nil}, {:count_edges, [line: 90, column: 17], [{:edge_list, [line: 90, column: 29], nil}]}]}, {:if, [line: 92, column: 9], [{:==, [line: 92, column: 26], [{{:., [line: 92, column: 20], [{:metadata, [line: 92, column: 12], nil}, :type]}, [no_parens: true, line: 92, column: 21], []}, :undirected]}, [do: {:div, [line: 94, column: 11], [{:count, [line: 94, column: 15], nil}, 2]}, else: {:count, [line: 96, column: 11], nil}]]}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:20:17.480 [debug] Generated pattern: {:%{}, [], [variant: :_]} for variant: :_

15:20:17.480 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil


15:20:17.480 [debug] Generated fold cases after transformation: [{:->, [line: 89, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 90, column: 15], [{:count, [line: 90, column: 9], nil}, {:count_edges, [line: 90, column: 17], [{:edge_list, [line: 90, column: 29], nil}]}]}, {:if, [line: 92, column: 9], [{:==, [line: 92, column: 26], [{{:., [line: 92, column: 20], [{:metadata, [line: 92, column: 12], nil}, :type]}, [no_parens: true, line: 92, column: 21], []}, :undirected]}, [do: {:div, [line: 94, column: 11], [{:count, [line: 94, column: 15], nil}, 2]}, else: {:count, [line: 96, column: 11], nil}]]}]}]}, {:->, [line: 99, column: 15], [[{:%{}, [], [variant: :_]}], 0]}]

15:20:17.480 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 88, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 89, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 90, column: 15], [{:count, [line: 90, column: 9], nil}, {:count_edges, [line: 90, column: 17], [{:edge_list, [line: 90, column: 29], nil}]}]}, {:if, [line: 92, column: 9], [{:==, [line: 92, column: 26], [{{:., [line: 92, column: 20], [{:metadata, [line: 92, column: 12], nil}, :type]}, [no_parens: true, line: 92, column: 21], []}, :undirected]}, [do: {:div, [line: 94, column: 11], [{:count, [line: 94, column: 15], nil}, 2]}, else: {:count, [line: 96, column: 11], nil}]]}]}]}, {:->, [line: 99, column: 15], [[{:%{}, [], [variant: :_]}], 0]}]]]}]}]}]}
    warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 78 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/lib_graph.ex:78: LibGraph.vertex_count/1


15:20:17.480 [debug] Fold expression: {:graph, [line: 105, column: 10], nil}, opts: [], cases: [{:->, [line: 106, column: 52], [[{:case, [line: 106, column: 7], [{:graph, [line: 106, column: 12], [{:vertex_map, [line: 106, column: 18], nil}, {:edge_list, [line: 106, column: 30], nil}, {:metadata, [line: 106, column: 41], nil}]}]}], {:case, [line: 107, column: 9], [{{:., [line: 107, column: 17], [{:__aliases__, [line: 107, column: 14], [:Map]}, :get]}, [line: 107, column: 18], [{:vertex_map, [line: 107, column: 22], nil}, {:vertex_id, [line: 107, column: 34], nil}]}, [do: [{:->, [line: 108, column: 15], [[nil], []]}, {:->, [line: 109, column: 18], [[{:vertex, [line: 109, column: 11], nil}], {:extract_neighbors, [line: 109, column: 21], [{:edge_list, [line: 109, column: 39], nil}, {:vertex_id, [line: 109, column: 50], nil}]}]}]]]}]}, {:->, [line: 112, column: 21], [[{:case, [line: 112, column: 7], [{:empty, [line: 112, column: 12], []}]}], []]}, {:->, [line: 115, column: 15], [[{:case, [line: 115, column: 7], [{:_, [line: 115, column: 12], nil}]}], []]}]

15:20:17.480 [debug] Extracting cases from list: [{:->, [line: 106, column: 52], [[{:case, [line: 106, column: 7], [{:graph, [line: 106, column: 12], [{:vertex_map, [line: 106, column: 18], nil}, {:edge_list, [line: 106, column: 30], nil}, {:metadata, [line: 106, column: 41], nil}]}]}], {:case, [line: 107, column: 9], [{{:., [line: 107, column: 17], [{:__aliases__, [line: 107, column: 14], [:Map]}, :get]}, [line: 107, column: 18], [{:vertex_map, [line: 107, column: 22], nil}, {:vertex_id, [line: 107, column: 34], nil}]}, [do: [{:->, [line: 108, column: 15], [[nil], []]}, {:->, [line: 109, column: 18], [[{:vertex, [line: 109, column: 11], nil}], {:extract_neighbors, [line: 109, column: 21], [{:edge_list, [line: 109, column: 39], nil}, {:vertex_id, [line: 109, column: 50], nil}]}]}]]]}]}, {:->, [line: 112, column: 21], [[{:case, [line: 112, column: 7], [{:empty, [line: 112, column: 12], []}]}], []]}, {:->, [line: 115, column: 15], [[{:case, [line: 115, column: 7], [{:_, [line: 115, column: 12], nil}]}], []]}]

15:20:17.481 [debug] Extracted fold cases: [{:->, [line: 106, column: 52], [[{:case, [line: 106, column: 7], [{:graph, [line: 106, column: 12], [{:vertex_map, [line: 106, column: 18], nil}, {:edge_list, [line: 106, column: 30], nil}, {:metadata, [line: 106, column: 41], nil}]}]}], {:case, [line: 107, column: 9], [{{:., [line: 107, column: 17], [{:__aliases__, [line: 107, column: 14], [:Map]}, :get]}, [line: 107, column: 18], [{:vertex_map, [line: 107, column: 22], nil}, {:vertex_id, [line: 107, column: 34], nil}]}, [do: [{:->, [line: 108, column: 15], [[nil], []]}, {:->, [line: 109, column: 18], [[{:vertex, [line: 109, column: 11], nil}], {:extract_neighbors, [line: 109, column: 21], [{:edge_list, [line: 109, column: 39], nil}, {:vertex_id, [line: 109, column: 50], nil}]}]}]]]}]}, {:->, [line: 112, column: 21], [[{:case, [line: 112, column: 7], [{:empty, [line: 112, column: 12], []}]}], []]}, {:->, [line: 115, column: 15], [[{:case, [line: 115, column: 7], [{:_, [line: 115, column: 12], nil}]}], []]}]
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 78 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/lib_graph.ex:78: LibGraph.vertex_count/1


15:20:17.481 [debug] Generating fold cases: [{:->, [line: 106, column: 52], [[{:case, [line: 106, column: 7], [{:graph, [line: 106, column: 12], [{:vertex_map, [line: 106, column: 18], nil}, {:edge_list, [line: 106, column: 30], nil}, {:metadata, [line: 106, column: 41], nil}]}]}], {:case, [line: 107, column: 9], [{{:., [line: 107, column: 17], [{:__aliases__, [line: 107, column: 14], [:Map]}, :get]}, [line: 107, column: 18], [{:vertex_map, [line: 107, column: 22], nil}, {:vertex_id, [line: 107, column: 34], nil}]}, [do: [{:->, [line: 108, column: 15], [[nil], []]}, {:->, [line: 109, column: 18], [[{:vertex, [line: 109, column: 11], nil}], {:extract_neighbors, [line: 109, column: 21], [{:edge_list, [line: 109, column: 39], nil}, {:vertex_id, [line: 109, column: 50], nil}]}]}]]]}]}, {:->, [line: 112, column: 21], [[{:case, [line: 112, column: 7], [{:empty, [line: 112, column: 12], []}]}], []]}, {:->, [line: 115, column: 15], [[{:case, [line: 115, column: 7], [{:_, [line: 115, column: 12], nil}]}], []]}]

15:20:17.481 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

15:20:17.481 [debug] Transforming recursive refs:
Body: {:case, [line: 107, column: 9], [{{:., [line: 107, column: 17], [{:__aliases__, [line: 107, column: 14], [:Map]}, :get]}, [line: 107, column: 18], [{:vertex_map, [line: 107, column: 22], nil}, {:vertex_id, [line: 107, column: 34], nil}]}, [do: [{:->, [line: 108, column: 15], [[nil], []]}, {:->, [line: 109, column: 18], [[{:vertex, [line: 109, column: 11], nil}], {:extract_neighbors, [line: 109, column: 21], [{:edge_list, [line: 109, column: 39], nil}, {:vertex_id, [line: 109, column: 50], nil}]}]}]]]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:20:17.481 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:20:17.481 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


15:20:17.481 [debug] Generated pattern: {:%{}, [], [variant: :_]} for variant: :_

15:20:17.481 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


15:20:17.481 [debug] Generated fold cases after transformation: [{:->, [line: 106, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 107, column: 9], [{{:., [line: 107, column: 17], [{:__aliases__, [line: 107, column: 14], [:Map]}, :get]}, [line: 107, column: 18], [{:vertex_map, [line: 107, column: 22], nil}, {:vertex_id, [line: 107, column: 34], nil}]}, [do: [{:->, [line: 108, column: 15], [[nil], []]}, {:->, [line: 109, column: 18], [[{:vertex, [line: 109, column: 11], nil}], {:extract_neighbors, [line: 109, column: 21], [{:edge_list, [line: 109, column: 39], nil}, {:vertex_id, [line: 109, column: 50], nil}]}]}]]]}]}, {:->, [line: 112, column: 21], [[{:%{}, [], [variant: :empty]}], []]}, {:->, [line: 115, column: 15], [[{:%{}, [], [variant: :_]}], []]}]

15:20:17.481 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 105, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 106, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 107, column: 9], [{{:., [line: 107, column: 17], [{:__aliases__, [line: 107, column: 14], [:Map]}, :get]}, [line: 107, column: 18], [{:vertex_map, [line: 107, column: 22], nil}, {:vertex_id, [line: 107, column: 34], nil}]}, [do: [{:->, [line: 108, column: 15], [[nil], []]}, {:->, [line: 109, column: 18], [[{:vertex, [line: 109, column: 11], nil}], {:extract_neighbors, [line: 109, column: 21], [{:edge_list, [line: 109, column: 39], nil}, {:vertex_id, [line: 109, column: 50], nil}]}]}]]]}]}, {:->, [line: 112, column: 21], [[{:%{}, [], [variant: :empty]}], []]}, {:->, [line: 115, column: 15], [[{:%{}, [], [variant: :_]}], []]}]]]}]}]}]}
    warning: variable "vertex_map" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 88 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/lib_graph.ex:88: LibGraph.edge_count/1


15:20:17.481 [debug] Fold expression: {:graph, [line: 157, column: 10], nil}, opts: [], cases: [{:->, [line: 158, column: 52], [[{:case, [line: 158, column: 7], [{:graph, [line: 158, column: 12], [{:vertex_map, [line: 158, column: 18], nil}, {:edge_list, [line: 158, column: 30], nil}, {:metadata, [line: 158, column: 41], nil}]}]}], {:__block__, [], [{:=, [line: 159, column: 27], [{:{}, [line: 159, column: 9], [{:came_from, [line: 159, column: 10], nil}, {:_, [line: 159, column: 21], nil}, {:_, [line: 159, column: 24], nil}]}, {:find_path, [line: 159, column: 29], [{:vertex_map, [line: 159, column: 39], nil}, {:edge_list, [line: 159, column: 51], nil}, {:start_id, [line: 159, column: 62], nil}, {:end_id, [line: 159, column: 72], nil}]}]}, {:reconstruct_path, [line: 160, column: 9], [{:came_from, [line: 160, column: 26], nil}, {:end_id, [line: 160, column: 37], nil}]}]}]}, {:->, [line: 162, column: 15], [[{:case, [line: 162, column: 7], [{:_, [line: 162, column: 12], nil}]}], []]}]

15:20:17.482 [debug] Extracting cases from list: [{:->, [line: 158, column: 52], [[{:case, [line: 158, column: 7], [{:graph, [line: 158, column: 12], [{:vertex_map, [line: 158, column: 18], nil}, {:edge_list, [line: 158, column: 30], nil}, {:metadata, [line: 158, column: 41], nil}]}]}], {:__block__, [], [{:=, [line: 159, column: 27], [{:{}, [line: 159, column: 9], [{:came_from, [line: 159, column: 10], nil}, {:_, [line: 159, column: 21], nil}, {:_, [line: 159, column: 24], nil}]}, {:find_path, [line: 159, column: 29], [{:vertex_map, [line: 159, column: 39], nil}, {:edge_list, [line: 159, column: 51], nil}, {:start_id, [line: 159, column: 62], nil}, {:end_id, [line: 159, column: 72], nil}]}]}, {:reconstruct_path, [line: 160, column: 9], [{:came_from, [line: 160, column: 26], nil}, {:end_id, [line: 160, column: 37], nil}]}]}]}, {:->, [line: 162, column: 15], [[{:case, [line: 162, column: 7], [{:_, [line: 162, column: 12], nil}]}], []]}]
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 88 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/lib_graph.ex:88: LibGraph.edge_count/1


15:20:17.482 [debug] Extracted fold cases: [{:->, [line: 158, column: 52], [[{:case, [line: 158, column: 7], [{:graph, [line: 158, column: 12], [{:vertex_map, [line: 158, column: 18], nil}, {:edge_list, [line: 158, column: 30], nil}, {:metadata, [line: 158, column: 41], nil}]}]}], {:__block__, [], [{:=, [line: 159, column: 27], [{:{}, [line: 159, column: 9], [{:came_from, [line: 159, column: 10], nil}, {:_, [line: 159, column: 21], nil}, {:_, [line: 159, column: 24], nil}]}, {:find_path, [line: 159, column: 29], [{:vertex_map, [line: 159, column: 39], nil}, {:edge_list, [line: 159, column: 51], nil}, {:start_id, [line: 159, column: 62], nil}, {:end_id, [line: 159, column: 72], nil}]}]}, {:reconstruct_path, [line: 160, column: 9], [{:came_from, [line: 160, column: 26], nil}, {:end_id, [line: 160, column: 37], nil}]}]}]}, {:->, [line: 162, column: 15], [[{:case, [line: 162, column: 7], [{:_, [line: 162, column: 12], nil}]}], []]}]

15:20:17.482 [debug] Generating fold cases: [{:->, [line: 158, column: 52], [[{:case, [line: 158, column: 7], [{:graph, [line: 158, column: 12], [{:vertex_map, [line: 158, column: 18], nil}, {:edge_list, [line: 158, column: 30], nil}, {:metadata, [line: 158, column: 41], nil}]}]}], {:__block__, [], [{:=, [line: 159, column: 27], [{:{}, [line: 159, column: 9], [{:came_from, [line: 159, column: 10], nil}, {:_, [line: 159, column: 21], nil}, {:_, [line: 159, column: 24], nil}]}, {:find_path, [line: 159, column: 29], [{:vertex_map, [line: 159, column: 39], nil}, {:edge_list, [line: 159, column: 51], nil}, {:start_id, [line: 159, column: 62], nil}, {:end_id, [line: 159, column: 72], nil}]}]}, {:reconstruct_path, [line: 160, column: 9], [{:came_from, [line: 160, column: 26], nil}, {:end_id, [line: 160, column: 37], nil}]}]}]}, {:->, [line: 162, column: 15], [[{:case, [line: 162, column: 7], [{:_, [line: 162, column: 12], nil}]}], []]}]

15:20:17.482 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph
     warning: variable "vertex" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 109 │           vertex -> extract_neighbors(edge_list, vertex_id)
     │           ~
     │
     └─ lib/examples/lib_graph.ex:109:11: LibGraph.get_neighbors/2


15:20:17.482 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 159, column: 27], [{:{}, [line: 159, column: 9], [{:came_from, [line: 159, column: 10], nil}, {:_, [line: 159, column: 21], nil}, {:_, [line: 159, column: 24], nil}]}, {:find_path, [line: 159, column: 29], [{:vertex_map, [line: 159, column: 39], nil}, {:edge_list, [line: 159, column: 51], nil}, {:start_id, [line: 159, column: 62], nil}, {:end_id, [line: 159, column: 72], nil}]}]}, {:reconstruct_path, [line: 160, column: 9], [{:came_from, [line: 160, column: 26], nil}, {:end_id, [line: 160, column: 37], nil}]}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:20:17.482 [debug] Generated pattern: {:%{}, [], [variant: :_]} for variant: :_

15:20:17.482 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


15:20:17.482 [debug] Generated fold cases after transformation: [{:->, [line: 158, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 159, column: 27], [{:{}, [line: 159, column: 9], [{:came_from, [line: 159, column: 10], nil}, {:_, [line: 159, column: 21], nil}, {:_, [line: 159, column: 24], nil}]}, {:find_path, [line: 159, column: 29], [{:vertex_map, [line: 159, column: 39], nil}, {:edge_list, [line: 159, column: 51], nil}, {:start_id, [line: 159, column: 62], nil}, {:end_id, [line: 159, column: 72], nil}]}]}, {:reconstruct_path, [line: 160, column: 9], [{:came_from, [line: 160, column: 26], nil}, {:end_id, [line: 160, column: 37], nil}]}]}]}, {:->, [line: 162, column: 15], [[{:%{}, [], [variant: :_]}], []]}]
     warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 105 │     fold graph do
     │     ~~~~~~~~~~~~~
     │
     └─ lib/examples/lib_graph.ex:105: LibGraph.get_neighbors/2


15:20:17.482 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 157, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 158, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 159, column: 27], [{:{}, [line: 159, column: 9], [{:came_from, [line: 159, column: 10], nil}, {:_, [line: 159, column: 21], nil}, {:_, [line: 159, column: 24], nil}]}, {:find_path, [line: 159, column: 29], [{:vertex_map, [line: 159, column: 39], nil}, {:edge_list, [line: 159, column: 51], nil}, {:start_id, [line: 159, column: 62], nil}, {:end_id, [line: 159, column: 72], nil}]}]}, {:reconstruct_path, [line: 160, column: 9], [{:came_from, [line: 160, column: 26], nil}, {:end_id, [line: 160, column: 37], nil}]}]}]}, {:->, [line: 162, column: 15], [[{:%{}, [], [variant: :_]}], []]}]]]}]}]}]}
     warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 105 │     fold graph do
     │     ~~~~~~~~~~~~~
     │
     └─ lib/examples/lib_graph.ex:105: LibGraph.get_neighbors/2


15:20:17.483 [debug] Fold expression: {:graph, [line: 169, column: 10], nil}, opts: [], cases: [{:->, [line: 170, column: 52], [[{:case, [line: 170, column: 7], [{:graph, [line: 170, column: 12], [{:vertex_map, [line: 170, column: 18], nil}, {:edge_list, [line: 170, column: 30], nil}, {:metadata, [line: 170, column: 41], nil}]}]}], {:case, [line: 171, column: 9], [{{:., [line: 171, column: 17], [{:__aliases__, [line: 171, column: 14], [:Map]}, :keys]}, [line: 171, column: 18], [{:vertex_map, [line: 171, column: 23], nil}]}, [do: [{:->, [line: 172, column: 14], [[[]], true]}, {:->, [line: 175, column: 38], [[{:=, [line: 175, column: 23], [[{:|, [line: 175, column: 18], [{:first, [line: 175, column: 12], nil}, {:_, [line: 175, column: 20], nil}]}], {:all_vertices, [line: 175, column: 25], nil}]}], {:__block__, [], [{:=, [line: 176, column: 21], [{:visited, [line: 176, column: 13], nil}, {:depth_first_search, [line: 176, column: 23], [{:vertex_map, [line: 176, column: 42], nil}, {:edge_list, [line: 176, column: 54], nil}, {:first, [line: 176, column: 65], nil}, {{:., [line: 176, column: 78], [{:__aliases__, [line: 176, column: 72], [:MapSet]}, :new]}, [line: 176, column: 79], []}]}]}, {:==, [line: 177, column: 34], [{{:., [line: 177, column: 19], [{:__aliases__, [line: 177, column: 13], [:MapSet]}, :size]}, [line: 177, column: 20], [{:visited, [line: 177, column: 25], nil}]}, {:length, [line: 177, column: 37], [{:all_vertices, [line: 177, column: 44], nil}]}]}]}]}]]]}]}, {:->, [line: 181, column: 21], [[{:case, [line: 181, column: 7], [{:empty, [line: 181, column: 12], []}]}], true]}, {:->, [line: 184, column: 15], [[{:case, [line: 184, column: 7], [{:_, [line: 184, column: 12], nil}]}], true]}]
     warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 157 │     fold graph do
     │     ~~~~~~~~~~~~~
     │
     └─ lib/examples/lib_graph.ex:157: LibGraph.shortest_path/3


15:20:17.483 [debug] Extracting cases from list: [{:->, [line: 170, column: 52], [[{:case, [line: 170, column: 7], [{:graph, [line: 170, column: 12], [{:vertex_map, [line: 170, column: 18], nil}, {:edge_list, [line: 170, column: 30], nil}, {:metadata, [line: 170, column: 41], nil}]}]}], {:case, [line: 171, column: 9], [{{:., [line: 171, column: 17], [{:__aliases__, [line: 171, column: 14], [:Map]}, :keys]}, [line: 171, column: 18], [{:vertex_map, [line: 171, column: 23], nil}]}, [do: [{:->, [line: 172, column: 14], [[[]], true]}, {:->, [line: 175, column: 38], [[{:=, [line: 175, column: 23], [[{:|, [line: 175, column: 18], [{:first, [line: 175, column: 12], nil}, {:_, [line: 175, column: 20], nil}]}], {:all_vertices, [line: 175, column: 25], nil}]}], {:__block__, [], [{:=, [line: 176, column: 21], [{:visited, [line: 176, column: 13], nil}, {:depth_first_search, [line: 176, column: 23], [{:vertex_map, [line: 176, column: 42], nil}, {:edge_list, [line: 176, column: 54], nil}, {:first, [line: 176, column: 65], nil}, {{:., [line: 176, column: 78], [{:__aliases__, [line: 176, column: 72], [:MapSet]}, :new]}, [line: 176, column: 79], []}]}]}, {:==, [line: 177, column: 34], [{{:., [line: 177, column: 19], [{:__aliases__, [line: 177, column: 13], [:MapSet]}, :size]}, [line: 177, column: 20], [{:visited, [line: 177, column: 25], nil}]}, {:length, [line: 177, column: 37], [{:all_vertices, [line: 177, column: 44], nil}]}]}]}]}]]]}]}, {:->, [line: 181, column: 21], [[{:case, [line: 181, column: 7], [{:empty, [line: 181, column: 12], []}]}], true]}, {:->, [line: 184, column: 15], [[{:case, [line: 184, column: 7], [{:_, [line: 184, column: 12], nil}]}], true]}]

15:20:17.483 [debug] Extracted fold cases: [{:->, [line: 170, column: 52], [[{:case, [line: 170, column: 7], [{:graph, [line: 170, column: 12], [{:vertex_map, [line: 170, column: 18], nil}, {:edge_list, [line: 170, column: 30], nil}, {:metadata, [line: 170, column: 41], nil}]}]}], {:case, [line: 171, column: 9], [{{:., [line: 171, column: 17], [{:__aliases__, [line: 171, column: 14], [:Map]}, :keys]}, [line: 171, column: 18], [{:vertex_map, [line: 171, column: 23], nil}]}, [do: [{:->, [line: 172, column: 14], [[[]], true]}, {:->, [line: 175, column: 38], [[{:=, [line: 175, column: 23], [[{:|, [line: 175, column: 18], [{:first, [line: 175, column: 12], nil}, {:_, [line: 175, column: 20], nil}]}], {:all_vertices, [line: 175, column: 25], nil}]}], {:__block__, [], [{:=, [line: 176, column: 21], [{:visited, [line: 176, column: 13], nil}, {:depth_first_search, [line: 176, column: 23], [{:vertex_map, [line: 176, column: 42], nil}, {:edge_list, [line: 176, column: 54], nil}, {:first, [line: 176, column: 65], nil}, {{:., [line: 176, column: 78], [{:__aliases__, [line: 176, column: 72], [:MapSet]}, :new]}, [line: 176, column: 79], []}]}]}, {:==, [line: 177, column: 34], [{{:., [line: 177, column: 19], [{:__aliases__, [line: 177, column: 13], [:MapSet]}, :size]}, [line: 177, column: 20], [{:visited, [line: 177, column: 25], nil}]}, {:length, [line: 177, column: 37], [{:all_vertices, [line: 177, column: 44], nil}]}]}]}]}]]]}]}, {:->, [line: 181, column: 21], [[{:case, [line: 181, column: 7], [{:empty, [line: 181, column: 12], []}]}], true]}, {:->, [line: 184, column: 15], [[{:case, [line: 184, column: 7], [{:_, [line: 184, column: 12], nil}]}], true]}]
     warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 157 │     fold graph do
     │     ~~~~~~~~~~~~~
     │
     └─ lib/examples/lib_graph.ex:157: LibGraph.shortest_path/3


15:20:17.483 [debug] Generating fold cases: [{:->, [line: 170, column: 52], [[{:case, [line: 170, column: 7], [{:graph, [line: 170, column: 12], [{:vertex_map, [line: 170, column: 18], nil}, {:edge_list, [line: 170, column: 30], nil}, {:metadata, [line: 170, column: 41], nil}]}]}], {:case, [line: 171, column: 9], [{{:., [line: 171, column: 17], [{:__aliases__, [line: 171, column: 14], [:Map]}, :keys]}, [line: 171, column: 18], [{:vertex_map, [line: 171, column: 23], nil}]}, [do: [{:->, [line: 172, column: 14], [[[]], true]}, {:->, [line: 175, column: 38], [[{:=, [line: 175, column: 23], [[{:|, [line: 175, column: 18], [{:first, [line: 175, column: 12], nil}, {:_, [line: 175, column: 20], nil}]}], {:all_vertices, [line: 175, column: 25], nil}]}], {:__block__, [], [{:=, [line: 176, column: 21], [{:visited, [line: 176, column: 13], nil}, {:depth_first_search, [line: 176, column: 23], [{:vertex_map, [line: 176, column: 42], nil}, {:edge_list, [line: 176, column: 54], nil}, {:first, [line: 176, column: 65], nil}, {{:., [line: 176, column: 78], [{:__aliases__, [line: 176, column: 72], [:MapSet]}, :new]}, [line: 176, column: 79], []}]}]}, {:==, [line: 177, column: 34], [{{:., [line: 177, column: 19], [{:__aliases__, [line: 177, column: 13], [:MapSet]}, :size]}, [line: 177, column: 20], [{:visited, [line: 177, column: 25], nil}]}, {:length, [line: 177, column: 37], [{:all_vertices, [line: 177, column: 44], nil}]}]}]}]}]]]}]}, {:->, [line: 181, column: 21], [[{:case, [line: 181, column: 7], [{:empty, [line: 181, column: 12], []}]}], true]}, {:->, [line: 184, column: 15], [[{:case, [line: 184, column: 7], [{:_, [line: 184, column: 12], nil}]}], true]}]

15:20:17.483 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

15:20:17.484 [debug] Transforming recursive refs:
Body: {:case, [line: 171, column: 9], [{{:., [line: 171, column: 17], [{:__aliases__, [line: 171, column: 14], [:Map]}, :keys]}, [line: 171, column: 18], [{:vertex_map, [line: 171, column: 23], nil}]}, [do: [{:->, [line: 172, column: 14], [[[]], true]}, {:->, [line: 175, column: 38], [[{:=, [line: 175, column: 23], [[{:|, [line: 175, column: 18], [{:first, [line: 175, column: 12], nil}, {:_, [line: 175, column: 20], nil}]}], {:all_vertices, [line: 175, column: 25], nil}]}], {:__block__, [], [{:=, [line: 176, column: 21], [{:visited, [line: 176, column: 13], nil}, {:depth_first_search, [line: 176, column: 23], [{:vertex_map, [line: 176, column: 42], nil}, {:edge_list, [line: 176, column: 54], nil}, {:first, [line: 176, column: 65], nil}, {{:., [line: 176, column: 78], [{:__aliases__, [line: 176, column: 72], [:MapSet]}, :new]}, [line: 176, column: 79], []}]}]}, {:==, [line: 177, column: 34], [{{:., [line: 177, column: 19], [{:__aliases__, [line: 177, column: 13], [:MapSet]}, :size]}, [line: 177, column: 20], [{:visited, [line: 177, column: 25], nil}]}, {:length, [line: 177, column: 37], [{:all_vertices, [line: 177, column: 44], nil}]}]}]}]}]]]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:20:17.484 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:20:17.484 [debug] Transforming recursive refs:
Body: true
Bindings: []
State: nil


15:20:17.484 [debug] Generated pattern: {:%{}, [], [variant: :_]} for variant: :_

15:20:17.484 [debug] Transforming recursive refs:
Body: true
Bindings: []
State: nil


15:20:17.484 [debug] Generated fold cases after transformation: [{:->, [line: 170, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 171, column: 9], [{{:., [line: 171, column: 17], [{:__aliases__, [line: 171, column: 14], [:Map]}, :keys]}, [line: 171, column: 18], [{:vertex_map, [line: 171, column: 23], nil}]}, [do: [{:->, [line: 172, column: 14], [[[]], true]}, {:->, [line: 175, column: 38], [[{:=, [line: 175, column: 23], [[{:|, [line: 175, column: 18], [{:first, [line: 175, column: 12], nil}, {:_, [line: 175, column: 20], nil}]}], {:all_vertices, [line: 175, column: 25], nil}]}], {:__block__, [], [{:=, [line: 176, column: 21], [{:visited, [line: 176, column: 13], nil}, {:depth_first_search, [line: 176, column: 23], [{:vertex_map, [line: 176, column: 42], nil}, {:edge_list, [line: 176, column: 54], nil}, {:first, [line: 176, column: 65], nil}, {{:., [line: 176, column: 78], [{:__aliases__, [line: 176, column: 72], [:MapSet]}, :new]}, [line: 176, column: 79], []}]}]}, {:==, [line: 177, column: 34], [{{:., [line: 177, column: 19], [{:__aliases__, [line: 177, column: 13], [:MapSet]}, :size]}, [line: 177, column: 20], [{:visited, [line: 177, column: 25], nil}]}, {:length, [line: 177, column: 37], [{:all_vertices, [line: 177, column: 44], nil}]}]}]}]}]]]}]}, {:->, [line: 181, column: 21], [[{:%{}, [], [variant: :empty]}], true]}, {:->, [line: 184, column: 15], [[{:%{}, [], [variant: :_]}], true]}]

15:20:17.484 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 169, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 170, column: 52], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 171, column: 9], [{{:., [line: 171, column: 17], [{:__aliases__, [line: 171, column: 14], [:Map]}, :keys]}, [line: 171, column: 18], [{:vertex_map, [line: 171, column: 23], nil}]}, [do: [{:->, [line: 172, column: 14], [[[]], true]}, {:->, [line: 175, column: 38], [[{:=, [line: 175, column: 23], [[{:|, [line: 175, column: 18], [{:first, ...}, {...}]}], {:all_vertices, [line: 175, column: 25], nil}]}], {:__block__, [], [{:=, [line: 176, column: 21], [{:visited, [...], ...}, {:depth_first_search, ...}]}, {:==, [line: 177, column: 34], [{{...}, ...}, {...}]}]}]}]]]}]}, {:->, [line: 181, column: 21], [[{:%{}, [], [variant: :empty]}], true]}, {:->, [line: 184, column: 15], [[{:%{}, [], [variant: :_]}], true]}]]]}]}]}]}
     warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 169 │     fold graph do
     │     ~~~~~~~~~~~~~
     │
     └─ lib/examples/lib_graph.ex:169: LibGraph.is_connected?/1

     warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 169 │     fold graph do
     │     ~~~~~~~~~~~~~
     │
     └─ lib/examples/lib_graph.ex:169: LibGraph.is_connected?/1

     warning: clauses with the same name and arity (number of arguments) should be grouped together, "defp extract_neighbors/2" was previously defined (lib/examples/lib_graph.ex:121)
     │
 297 │   defp extract_neighbors(edges, vertex_id) do
     │        ~
     │
     └─ lib/examples/lib_graph.ex:297:8

     warning: this clause for extract_neighbors/2 cannot match because a previous clause at line 121 always matches
     │
 297 │   defp extract_neighbors(edges, vertex_id) do
     │        ~
     │
     └─ lib/examples/lib_graph.ex:297:8

     warning: clauses with the same name and arity (number of arguments) should be grouped together, "defp generate_fold_cases/2" was previously defined (lib/ben_ben.ex:134)
     │
 171 │   defp generate_fold_cases({:__block__, _meta, cases}, state) do
     │        ~
     │
     └─ lib/ben_ben.ex:171:8

     warning: variable "other" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 374 │           other ->
     │           ~
     │
     └─ lib/ben_ben.ex:374:11: BenBen.process_constructed/2

     warning: function generate_pattern_match/1 is unused
     │
 225 │   defp generate_pattern_match({name, _, args}) when is_list(args) do
     │        ~
     │
     └─ lib/ben_ben.ex:225:8: BenBen (module)

     warning: function extract_bindings/1 is unused
     │
 250 │   defp extract_bindings(args) do
     │        ~
     │
     └─ lib/ben_ben.ex:250:8: BenBen (module)

    warning: variable "id" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 13 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/my_graph.ex:13: MyGraph.sum/1

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 13 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/my_graph.ex:13: MyGraph.sum/1

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 10 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/my_tree.ex:10: MyTree.sum/1

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 19 │     fold obj do
    │     ~~~~~~~~~~~
    │
    └─ lib/examples/prototypal.ex:19: Prototypal.get_property/2

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 73 │     fold obj do
    │     ~~~~~~~~~~~
    │
    └─ lib/examples/prototypal.ex:73: Prototypal.inspect_object/2

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 87 │     fold obj do
    │     ~~~~~~~~~~~
    │
    └─ lib/examples/prototypal.ex:87: Prototypal.debug_chain/2

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 26 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/tree_operations.ex:26: TreeOperations.map_tree/2

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 38 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/tree_operations.ex:38: TreeOperations.filter_tree/2

     warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 128 │     fold tree do
     │     ~~~~~~~~~~~~
     │
     └─ lib/examples/tree_operations.ex:128: TreeOperations.collect_values/1

    warning: function merge_with_level_increment/2 is unused
    │
 80 │   defp merge_with_level_increment(left_counts, right_counts) do
    │        ~
    │
    └─ lib/examples/tree_operations.ex:80:8: TreeOperations (module)

    warning: function merge_counts/2 is unused
    │
 75 │   defp merge_counts(left_counts, right_counts) do
    │        ~
    │
    └─ lib/examples/tree_operations.ex:75:8: TreeOperations (module)

Generated ben_ben app
Running ExUnit with seed: 549291, max_cases: 48


15:20:17.585 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.585 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.585 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.585 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.585 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.585 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.585 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.585 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.585 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.586 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.586 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.586 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.586 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.586 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.586 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}

15:20:17.586 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.586 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.586 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.586 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.586 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.586 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.586 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, variant: :graph}

15:20:17.586 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}

15:20:17.586 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}

15:20:17.586 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}, variant_type: :graph, state: nil

15:20:17.586 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}
.
15:20:17.586 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.586 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.586 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.586 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.586 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.586 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.586 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.586 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.586 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.586 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.586 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.587 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.587 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.587 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.587 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}

15:20:17.587 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.587 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.587 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.587 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.587 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.587 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.587 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.587 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.587 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}

15:20:17.587 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.587 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}, variant: :graph}

15:20:17.587 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.587 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}

15:20:17.587 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.587 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.587 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.587 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.587 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.587 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.587 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, variant: :graph}

15:20:17.587 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}

15:20:17.587 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}

15:20:17.587 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}

15:20:17.588 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}, variant_type: :graph, state: nil

15:20:17.588 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}

15:20:17.588 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 2, target_id: 3, edge_weight: 1, edge_props: %{}, variant: :edge}, %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}, variant_type: :graph, state: nil

15:20:17.588 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 2, target_id: 3, edge_weight: 1, edge_props: %{}, variant: :edge}, %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}
.
15:20:17.588 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.588 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.588 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.588 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.589 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.589 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.589 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.589 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.589 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.589 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.589 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.589 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.589 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.589 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.589 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}

15:20:17.589 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.589 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.589 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.589 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.589 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.589 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.589 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.589 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.589 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}

15:20:17.589 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.589 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}, variant: :graph}

15:20:17.590 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.590 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}

15:20:17.590 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.590 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.590 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.590 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.590 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.590 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.590 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, variant: :graph}

15:20:17.590 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, variant: :graph}], variant: :graph}

15:20:17.590 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}

15:20:17.590 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}

15:20:17.590 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}, variant_type: :graph, state: nil

15:20:17.590 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}

15:20:17.590 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 2, target_id: 3, edge_weight: 3, edge_props: %{type: "road"}, variant: :edge}, %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}, variant_type: :graph, state: nil

15:20:17.590 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 2, target_id: 3, edge_weight: 3, edge_props: %{type: "road"}, variant: :edge}, %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}

15:20:17.590 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 2, target_id: 3, edge_weight: 3, edge_props: %{type: "road"}, variant: :edge}, %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}, variant_type: :graph, state: nil

15:20:17.590 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 2, target_id: 3, edge_weight: 3, edge_props: %{type: "road"}, variant: :edge}, %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{name: "A"}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{name: "B"}, adjacency: %{variant: :empty}, variant: :vertex}, 3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{3 => %{vertex_id: 3, properties: %{name: "C"}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 5, edge_props: %{type: "road"}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}
.
15:20:17.590 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.590 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.590 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.590 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.590 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.591 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.591 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.591 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, variant: :graph}

15:20:17.591 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}

15:20:17.591 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}, variant_type: :graph, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: [%{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{source_id: 1, target_id: 2, edge_weight: 1, edge_props: %{}, variant: :edge}, variant: :graph}], variant: :graph}], variant: :graph}], variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.591 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.591 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.591 [debug] Recursive field result for edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{1 => %{vertex_id: 1, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}, 2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}, variant_type: :graph, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{metadata: %{type: :directed}, vertex_map: %{2 => %{vertex_id: 2, properties: %{}, adjacency: %{variant: :empty}, variant: :vertex}}, edge_list: %{variant: :empty}, variant: :graph}

15:20:17.591 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil

15:20:17.591 [debug] Processing recursive fields of: %{variant: :empty}

15:20:17.591 [debug] Recursive field result for edge_list: true

15:20:17.591 [debug] Recursive field result for edge_list: true

15:20:17.591 [debug] Recursive field result for edge_list: false
.
Finished in 0.03 seconds (0.00s async, 0.03s sync)
4 tests, 0 failures
