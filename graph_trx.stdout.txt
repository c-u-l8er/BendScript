Compiling 1 file (.ex)

15:14:29.145 [debug] Defining type {:__aliases__, [line: 5], [:Transaction]} with block: {:__block__, [], [{:pending, [line: 7], [{:operations, [line: 7], nil}, {:timestamp, [line: 7], nil}]}, {:committed, [line: 8], [{:changes, [line: 8], nil}, {:timestamp, [line: 8], nil}]}, {:rolled_back, [line: 9], [{:reason, [line: 9], nil}, {:timestamp, [line: 9], nil}]}]}

15:14:29.147 [debug] Extracted variants: [{:pending, [line: 7], [{:operations, [line: 7], nil}, {:timestamp, [line: 7], nil}]}, {:committed, [line: 8], [{:changes, [line: 8], nil}, {:timestamp, [line: 8], nil}]}, {:rolled_back, [line: 9], [{:reason, [line: 9], nil}, {:timestamp, [line: 9], nil}]}]

15:14:29.147 [debug] Generating constructors for variants: [{:pending, [line: 7], [{:operations, [line: 7], nil}, {:timestamp, [line: 7], nil}]}, {:committed, [line: 8], [{:changes, [line: 8], nil}, {:timestamp, [line: 8], nil}]}, {:rolled_back, [line: 9], [{:reason, [line: 9], nil}, {:timestamp, [line: 9], nil}]}]

15:14:29.147 [debug] Processing variant: {:pending, [line: 7], [{:operations, [line: 7], nil}, {:timestamp, [line: 7], nil}]}

15:14:29.147 [debug] Constructor: :pending, meta: [line: 7], args: [{:operations, [line: 7], nil}, {:timestamp, [line: 7], nil}]

15:14:29.147 [debug] Extracting constructor args from: [{:operations, [line: 7], nil}, {:timestamp, [line: 7], nil}]

15:14:29.147 [debug] Found value arg: :operations

15:14:29.147 [debug] Found value arg: :timestamp

15:14:29.147 [debug] Extracted arg_names: [:operations, :timestamp]

15:14:29.147 [debug] Generated arg vars: [{:operations, [], nil}, {:timestamp, [], nil}]

15:14:29.147 [debug] Field pairs: [operations: {:operations, [], nil}, timestamp: {:timestamp, [], nil}]

15:14:29.147 [debug] Processing variant: {:committed, [line: 8], [{:changes, [line: 8], nil}, {:timestamp, [line: 8], nil}]}

15:14:29.147 [debug] Constructor: :committed, meta: [line: 8], args: [{:changes, [line: 8], nil}, {:timestamp, [line: 8], nil}]

15:14:29.147 [debug] Extracting constructor args from: [{:changes, [line: 8], nil}, {:timestamp, [line: 8], nil}]

15:14:29.147 [debug] Found value arg: :changes

15:14:29.147 [debug] Found value arg: :timestamp

15:14:29.147 [debug] Extracted arg_names: [:changes, :timestamp]

15:14:29.147 [debug] Generated arg vars: [{:changes, [], nil}, {:timestamp, [], nil}]

15:14:29.147 [debug] Field pairs: [changes: {:changes, [], nil}, timestamp: {:timestamp, [], nil}]

15:14:29.147 [debug] Processing variant: {:rolled_back, [line: 9], [{:reason, [line: 9], nil}, {:timestamp, [line: 9], nil}]}

15:14:29.147 [debug] Constructor: :rolled_back, meta: [line: 9], args: [{:reason, [line: 9], nil}, {:timestamp, [line: 9], nil}]

15:14:29.147 [debug] Extracting constructor args from: [{:reason, [line: 9], nil}, {:timestamp, [line: 9], nil}]

15:14:29.147 [debug] Found value arg: :reason

15:14:29.147 [debug] Found value arg: :timestamp

15:14:29.148 [debug] Extracted arg_names: [:reason, :timestamp]

15:14:29.148 [debug] Generated arg vars: [{:reason, [], nil}, {:timestamp, [], nil}]

15:14:29.148 [debug] Field pairs: [reason: {:reason, [], nil}, timestamp: {:timestamp, [], nil}]

15:14:29.235 [debug] Fold expression: {{:., [line: 123], [{:state, [line: 123], nil}, :graph]}, [no_parens: true, line: 123], []}, opts: [], cases: [{:->, [line: 124], [[{:case, [line: 124], [{:graph, [line: 124], [{:vertex_map, [line: 124], nil}, {:edge_list, [line: 124], nil}, {:metadata, [line: 124], nil}]}]}], {:execute_query, [line: 125], [{:pattern, [line: 125], nil}, {:vertex_map, [line: 125], nil}, {:edge_list, [line: 125], nil}]}]}, {:->, [line: 127], [[{:case, [line: 127], [{:empty, [line: 127], []}]}], []]}]

15:14:29.235 [debug] Extracting cases from list: [{:->, [line: 124], [[{:case, [line: 124], [{:graph, [line: 124], [{:vertex_map, [line: 124], nil}, {:edge_list, [line: 124], nil}, {:metadata, [line: 124], nil}]}]}], {:execute_query, [line: 125], [{:pattern, [line: 125], nil}, {:vertex_map, [line: 125], nil}, {:edge_list, [line: 125], nil}]}]}, {:->, [line: 127], [[{:case, [line: 127], [{:empty, [line: 127], []}]}], []]}]

15:14:29.235 [debug] Extracted fold cases: [{:->, [line: 124], [[{:case, [line: 124], [{:graph, [line: 124], [{:vertex_map, [line: 124], nil}, {:edge_list, [line: 124], nil}, {:metadata, [line: 124], nil}]}]}], {:execute_query, [line: 125], [{:pattern, [line: 125], nil}, {:vertex_map, [line: 125], nil}, {:edge_list, [line: 125], nil}]}]}, {:->, [line: 127], [[{:case, [line: 127], [{:empty, [line: 127], []}]}], []]}]

15:14:29.236 [debug] Generating fold cases: [{:->, [line: 124], [[{:case, [line: 124], [{:graph, [line: 124], [{:vertex_map, [line: 124], nil}, {:edge_list, [line: 124], nil}, {:metadata, [line: 124], nil}]}]}], {:execute_query, [line: 125], [{:pattern, [line: 125], nil}, {:vertex_map, [line: 125], nil}, {:edge_list, [line: 125], nil}]}]}, {:->, [line: 127], [[{:case, [line: 127], [{:empty, [line: 127], []}]}], []]}]

15:14:29.236 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

15:14:29.236 [debug] Transforming recursive refs:
Body: {:execute_query, [line: 125], [{:pattern, [line: 125], nil}, {:vertex_map, [line: 125], nil}, {:edge_list, [line: 125], nil}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:14:29.236 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:14:29.236 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


15:14:29.236 [debug] Generated fold cases after transformation: [{:->, [line: 124], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:execute_query, [line: 125], [{:pattern, [line: 125], nil}, {:vertex_map, [line: 125], nil}, {:edge_list, [line: 125], nil}]}]}, {:->, [line: 127], [[{:%{}, [], [variant: :empty]}], []]}]

15:14:29.236 [debug] Final quoted expression: {:do_fold, [], [{{:., [line: 123], [{:state, [line: 123], nil}, :graph]}, [no_parens: true, line: 123], []}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 124], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:execute_query, [line: 125], [{:pattern, [line: 125], nil}, {:vertex_map, [line: 125], nil}, {:edge_list, [line: 125], nil}]}]}, {:->, [line: 127], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}
warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/graph_trx.ex:123: GraphTrx.query/2

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  lib/examples/graph_trx.ex:123: GraphTrx.query/2

warning: DistGraphDatabase.rollback_transaction/2 is undefined or private
  lib/cypher_executer.ex:17: CypherExecutor.execute/2

warning: LibGraph.get_vertices/1 is undefined or private
  lib/dist_gdb.ex:654: DistGraphDatabase.query_vertices_with_label/2

Excluding tags: [:skip]

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  test/examples/graph_trx_test.exs:45: GraphTrxTest."test GraphTrx successful transaction"/1

warning: variable "reason" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/examples/graph_trx_test.exs:68: GraphTrxTest."test GraphTrx transaction rollback"/1

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  test/examples/graph_trx_test.exs:78: GraphTrxTest."test GraphTrx schema validation"/1

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  test/examples/graph_trx_test.exs:129: GraphTrxTest."test vertex operations are applied before edge validation"/1

15:14:29.489 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
15:14:29.489 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:14:29.489 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:14:29.489 [debug] Processing recursive fields of: %{variant: :empty}
15:14:29.491 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:14:29.491 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
15:14:29.492 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:14:29.492 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
15:14:29.492 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:14:29.492 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:14:29.492 [debug] Processing recursive fields of: %{variant: :empty}
15:14:29.492 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:14:29.492 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:14:29.492 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:14:29.492 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:14:29.493 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:14:29.493 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:14:29.493 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:14:29.493 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:14:29.493 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:14:29.493 [debug] Processing recursive fields of: %{variant: :empty}
15:14:29.493 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:14:29.493 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:14:29.493 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:14:29.494 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
15:14:29.494 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:14:29.494 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:14:29.494 [debug] Processing recursive fields of: %{variant: :empty}
15:14:29.494 [debug] Recursive field result for edge_list: 0


  1) test vertex operations are applied before edge validation (GraphTrxTest)
     test/examples/graph_trx_test.exs:109
     ** (FunctionClauseError) no function clause matching in GraphTrxTest."test vertex operations are applied before edge validation"/1

     The following arguments were given to GraphTrxTest."test vertex operations are applied before edge validation"/1:
     
         # 1
         %{async: false, case: GraphTrxTest, describe: nil, describe_line: nil, file: "/home/travis/Projects/elixir-macros/test/examples/graph_trx_test.exs", line: 109, module: GraphTrxTest, registered: %{}, test: :"test vertex operations are applied before edge validation", test_type: :test}
     
     code: test "vertex operations are applied before edge validation", %{state: state} do
     stacktrace:
       test/examples/graph_trx_test.exs:109: (test)



  2) test query operations with committed data (GraphTrxTest)
     test/examples/graph_trx_test.exs:175
     ** (FunctionClauseError) no function clause matching in GraphTrxTest."test query operations with committed data"/1

     The following arguments were given to GraphTrxTest."test query operations with committed data"/1:
     
         # 1
         %{async: false, case: GraphTrxTest, describe: nil, describe_line: nil, file: "/home/travis/Projects/elixir-macros/test/examples/graph_trx_test.exs", line: 175, module: GraphTrxTest, registered: %{}, test: :"test query operations with committed data", test_type: :test}
     
     code: test "query operations with committed data", %{state: state} do
     stacktrace:
       test/examples/graph_trx_test.exs:175: (test)

...

  3) test prevents adding edges to non-existent vertices (GraphTrxTest)
     test/examples/graph_trx_test.exs:137
     ** (FunctionClauseError) no function clause matching in GraphTrxTest."test prevents adding edges to non-existent vertices"/1

     The following arguments were given to GraphTrxTest."test prevents adding edges to non-existent vertices"/1:
     
         # 1
         %{async: false, case: GraphTrxTest, describe: nil, describe_line: nil, file: "/home/travis/Projects/elixir-macros/test/examples/graph_trx_test.exs", line: 137, module: GraphTrxTest, registered: %{}, test: :"test prevents adding edges to non-existent vertices", test_type: :test}
     
     code: test "prevents adding edges to non-existent vertices", %{state: state} do
     stacktrace:
       test/examples/graph_trx_test.exs:137: (test)



  4) test handles multiple transactions with vertex and edge operations (GraphTrxTest)
     test/examples/graph_trx_test.exs:145
     ** (FunctionClauseError) no function clause matching in GraphTrxTest."test handles multiple transactions with vertex and edge operations"/1

     The following arguments were given to GraphTrxTest."test handles multiple transactions with vertex and edge operations"/1:
     
         # 1
         %{async: false, case: GraphTrxTest, describe: nil, describe_line: nil, file: "/home/travis/Projects/elixir-macros/test/examples/graph_trx_test.exs", line: 145, module: GraphTrxTest, registered: %{}, test: :"test handles multiple transactions with vertex and edge operations", test_type: :test}
     
     code: test "handles multiple transactions with vertex and edge operations", %{state: state} do
     stacktrace:
       test/examples/graph_trx_test.exs:145: (test)

.
Finished in 0.08 seconds (0.00s async, 0.08s sync)
8 tests, 4 failures

Randomized with seed 371170
