Compiling 3 files (.ex)

17:15:23.895 [debug] Defining type {:__aliases__, [line: 4, column: 11], [:MyGraph]} with block: {:__block__, [], [{:vertex, [line: 6, column: 5], [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]}, {:edge, [line: 8, column: 5], [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]}]}

17:15:23.895 [debug] Defining type {:__aliases__, [line: 4, column: 11], [:MyTree]} with block: {:__block__, [], [{:node, [line: 5, column: 5], [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]}, {:leaf, [line: 6, column: 5], []}]}

17:15:23.896 [debug] Extracted variants: [{:vertex, [line: 6, column: 5], [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]}, {:edge, [line: 8, column: 5], [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]}]

17:15:23.896 [debug] Generating constructors for variants: [{:vertex, [line: 6, column: 5], [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]}, {:edge, [line: 8, column: 5], [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]}]

17:15:23.896 [debug] Processing variant: {:vertex, [line: 6, column: 5], [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]}

17:15:23.896 [debug] Extracted variants: [{:node, [line: 5, column: 5], [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]}, {:leaf, [line: 6, column: 5], []}]

17:15:23.896 [debug] Constructor: :vertex, meta: [line: 6, column: 5], args: [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]

17:15:23.896 [debug] Extracting constructor args from: [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]

17:15:23.896 [debug] Found value arg: :id

17:15:23.896 [debug] Found value arg: :value

17:15:23.896 [debug] Found recursive arg: :edges

17:15:23.896 [debug] Generating constructors for variants: [{:node, [line: 5, column: 5], [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]}, {:leaf, [line: 6, column: 5], []}]

17:15:23.896 [debug] Extracted arg_names: [:id, :value, :edges]

17:15:23.896 [debug] Generated arg vars: [{:id, [], nil}, {:value, [], nil}, {:edges, [], nil}]

17:15:23.896 [debug] Field pairs: [id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]

17:15:23.896 [debug] Processing variant: {:node, [line: 5, column: 5], [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]}

17:15:23.896 [debug] Processing variant: {:edge, [line: 8, column: 5], [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]}

17:15:23.896 [debug] Constructor: :node, meta: [line: 5, column: 5], args: [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]

17:15:23.896 [debug] Constructor: :edge, meta: [line: 8, column: 5], args: [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]

17:15:23.896 [debug] Extracting constructor args from: [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]

17:15:23.896 [debug] Extracting constructor args from: [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]

17:15:23.896 [debug] Found value arg: :to_id

17:15:23.896 [debug] Found value arg: :val

17:15:23.896 [debug] Found value arg: :weight

17:15:23.896 [debug] Found recursive arg: :left

17:15:23.896 [debug] Extracted arg_names: [:to_id, :weight]

17:15:23.896 [debug] Found recursive arg: :right

17:15:23.896 [debug] Extracted arg_names: [:val, :left, :right]

17:15:23.896 [debug] Generated arg vars: [{:to_id, [], nil}, {:weight, [], nil}]

17:15:23.896 [debug] Field pairs: [to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]

17:15:23.896 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

17:15:23.896 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

17:15:23.896 [debug] Processing variant: {:leaf, [line: 6, column: 5], []}

17:15:23.896 [debug] Constructor: :leaf, meta: [line: 6, column: 5], args: []

17:15:23.896 [debug] Extracting constructor args from: []

17:15:23.896 [debug] Extracted arg_names: []

17:15:23.897 [debug] Generated arg vars: []

17:15:23.897 [debug] Field pairs: []

17:15:23.904 [debug] Fold expression: {:graph, [line: 13, column: 10], nil}, opts: [], cases: [{:->, [line: 14, column: 39], [[{:case, [line: 14, column: 7], [{:vertex, [line: 14, column: 12], [{:_id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 24], nil}, {:edges, [line: 14, column: 31], nil}]}]}], {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:recu, [line: 16, column: 17], [{:edges, [line: 16, column: 22], nil}]}]}]}, {:->, [line: 18, column: 34], [[{:case, [line: 18, column: 7], [{:edge, [line: 18, column: 12], [{:_to_id, [line: 18, column: 17], nil}, {:weight, [line: 18, column: 25], nil}]}]}], {:weight, [line: 20, column: 9], nil}]}]

17:15:23.904 [debug] Extracting cases from list: [{:->, [line: 14, column: 39], [[{:case, [line: 14, column: 7], [{:vertex, [line: 14, column: 12], [{:_id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 24], nil}, {:edges, [line: 14, column: 31], nil}]}]}], {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:recu, [line: 16, column: 17], [{:edges, [line: 16, column: 22], nil}]}]}]}, {:->, [line: 18, column: 34], [[{:case, [line: 18, column: 7], [{:edge, [line: 18, column: 12], [{:_to_id, [line: 18, column: 17], nil}, {:weight, [line: 18, column: 25], nil}]}]}], {:weight, [line: 20, column: 9], nil}]}]

17:15:23.904 [debug] Extracted fold cases: [{:->, [line: 14, column: 39], [[{:case, [line: 14, column: 7], [{:vertex, [line: 14, column: 12], [{:_id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 24], nil}, {:edges, [line: 14, column: 31], nil}]}]}], {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:recu, [line: 16, column: 17], [{:edges, [line: 16, column: 22], nil}]}]}]}, {:->, [line: 18, column: 34], [[{:case, [line: 18, column: 7], [{:edge, [line: 18, column: 12], [{:_to_id, [line: 18, column: 17], nil}, {:weight, [line: 18, column: 25], nil}]}]}], {:weight, [line: 20, column: 9], nil}]}]

17:15:23.904 [debug] Generating fold cases: [{:->, [line: 14, column: 39], [[{:case, [line: 14, column: 7], [{:vertex, [line: 14, column: 12], [{:_id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 24], nil}, {:edges, [line: 14, column: 31], nil}]}]}], {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:recu, [line: 16, column: 17], [{:edges, [line: 16, column: 22], nil}]}]}]}, {:->, [line: 18, column: 34], [[{:case, [line: 18, column: 7], [{:edge, [line: 18, column: 12], [{:_to_id, [line: 18, column: 17], nil}, {:weight, [line: 18, column: 25], nil}]}]}], {:weight, [line: 20, column: 9], nil}]}]

17:15:23.904 [debug] Generating pattern match for :vertex with args: [{:_id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 24], nil}, {:edges, [line: 14, column: 31], nil}]

17:15:23.904 [debug] Extracting bindings from args: [{:_id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 24], nil}, {:edges, [line: 14, column: 31], nil}]

17:15:23.904 [debug] Transforming recursive refs in body: {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:recu, [line: 16, column: 17], [{:edges, [line: 16, column: 22], nil}]}]} with bindings: [_id: {:_id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}], state: nil

17:15:23.904 [debug] Processing recursive reference: {:recu, [line: 16, column: 17], [{:edges, [line: 16, column: 22], nil}]}

17:15:23.904 [debug] Transformed recursive reference to: {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

17:15:23.904 [debug] Generating pattern match for :edge with args: [{:_to_id, [line: 18, column: 17], nil}, {:weight, [line: 18, column: 25], nil}]

17:15:23.904 [debug] Extracting bindings from args: [{:_to_id, [line: 18, column: 17], nil}, {:weight, [line: 18, column: 25], nil}]

17:15:23.904 [debug] Transforming recursive refs in body: {:weight, [line: 20, column: 9], nil} with bindings: [_to_id: {:_to_id, [], nil}, weight: {:weight, [], nil}], state: nil

17:15:23.905 [debug] Generated fold cases after transformation: [{:->, [line: 14, column: 39], [[{:%{}, [], [variant: :vertex, _id: {:_id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]}], {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 18, column: 34], [[{:%{}, [], [variant: :edge, _to_id: {:_to_id, [], nil}, weight: {:weight, [], nil}]}], {:weight, [line: 20, column: 9], nil}]}]

17:15:23.905 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 13, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 14, column: 39], [[{:%{}, [], [variant: :vertex, _id: {:_id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]}], {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 18, column: 34], [[{:%{}, [], [variant: :edge, _to_id: {:_to_id, [], nil}, weight: {:weight, [], nil}]}], {:weight, [line: 20, column: 9], nil}]}]]]}]}]}]}

17:15:23.905 [debug] Fold expression: {:tree, [line: 10, column: 10], nil}, opts: [], cases: [{:->, [line: 11, column: 36], [[{:case, [line: 11, column: 7], [{:node, [line: 11, column: 12], [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]}]}, {:->, [line: 12, column: 20], [[{:case, [line: 12, column: 7], [{:leaf, [line: 12, column: 12], []}]}], 0]}]

17:15:23.905 [debug] Extracting cases from list: [{:->, [line: 11, column: 36], [[{:case, [line: 11, column: 7], [{:node, [line: 11, column: 12], [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]}]}, {:->, [line: 12, column: 20], [[{:case, [line: 12, column: 7], [{:leaf, [line: 12, column: 12], []}]}], 0]}]

17:15:23.905 [debug] Extracted fold cases: [{:->, [line: 11, column: 36], [[{:case, [line: 11, column: 7], [{:node, [line: 11, column: 12], [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]}]}, {:->, [line: 12, column: 20], [[{:case, [line: 12, column: 7], [{:leaf, [line: 12, column: 12], []}]}], 0]}]

17:15:23.905 [debug] Generating fold cases: [{:->, [line: 11, column: 36], [[{:case, [line: 11, column: 7], [{:node, [line: 11, column: 12], [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]}]}, {:->, [line: 12, column: 20], [[{:case, [line: 12, column: 7], [{:leaf, [line: 12, column: 12], []}]}], 0]}]

17:15:23.905 [debug] Generating pattern match for :node with args: [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]

17:15:23.905 [debug] Extracting bindings from args: [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]

17:15:23.906 [debug] Transforming recursive refs in body: {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]} with bindings: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}], state: nil

17:15:23.906 [debug] Processing recursive reference: {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}

17:15:23.906 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

17:15:23.906 [debug] Processing recursive reference: {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}

17:15:23.906 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

17:15:23.906 [debug] Generating pattern match for :leaf with args: []

17:15:23.906 [debug] Extracting bindings from args: []

17:15:23.906 [debug] Transforming recursive refs in body: 0 with bindings: [], state: nil

17:15:23.906 [debug] Generated fold cases after transformation: [{:->, [line: 11, column: 36], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 12, column: 20], [[{:%{}, [], [variant: :leaf]}], 0]}]

17:15:23.906 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 10, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 11, column: 36], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 12, column: 20], [[{:%{}, [], [variant: :leaf]}], 0]}]]]}]}]}]}

17:15:23.907 [debug] Bend operation with var: :val, initial: 0

17:15:23.907 [debug] Bend operation with var: :vertex_id, initial: 1

17:15:23.907 [debug] Fork operation with expression: {:+, [line: 19, column: 35], [{:val, [line: 19, column: 31], nil}, 1]}

17:15:23.907 [debug] Fork operation with expression: {:+, [line: 19, column: 50], [{:val, [line: 19, column: 46], nil}, 1]}

17:15:23.907 [debug] Bend operation with var: :to_id, initial: 1

17:15:23.907 [debug] Fork operation with expression: {:+, [line: 52, column: 22], [{:to_id, [line: 52, column: 16], nil}, 1]}
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 10 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/my_tree.ex:10: MyTree.sum/1

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 13 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/my_graph.ex:13: MyGraph.sum/1

Generated ben_ben app

17:15:23.969 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:BinaryTree]} with block: {:__block__, [], [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]}

17:15:23.969 [debug] Extracted variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

17:15:23.969 [debug] Generating constructors for variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

17:15:23.969 [debug] Processing variant: {:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}

17:15:23.969 [debug] Constructor: :node, meta: [line: 7, column: 5], args: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

17:15:23.969 [debug] Extracting constructor args from: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

17:15:23.969 [debug] Found value arg: :val

17:15:23.969 [debug] Found recursive arg: :left

17:15:23.969 [debug] Found recursive arg: :right

17:15:23.969 [debug] Extracted arg_names: [:val, :left, :right]

17:15:23.969 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

17:15:23.969 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

17:15:23.969 [debug] Processing variant: {:leaf, [line: 8, column: 5], []}

17:15:23.969 [debug] Constructor: :leaf, meta: [line: 8, column: 5], args: []

17:15:23.969 [debug] Extracting constructor args from: []

17:15:23.969 [debug] Extracted arg_names: []

17:15:23.970 [debug] Generated arg vars: []

17:15:23.970 [debug] Field pairs: []
Running ExUnit with seed: 948113, max_cases: 48


17:15:23.984 [debug] Fold expression: {:tree, [line: 21, column: 14], nil}, opts: [], cases: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

17:15:23.984 [debug] Extracting cases from list: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

17:15:23.985 [debug] Extracted fold cases: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

17:15:23.985 [debug] Generating fold cases: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

17:15:23.985 [debug] Generating pattern match for :node with args: [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]

17:15:23.985 [debug] Extracting bindings from args: [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 21 │         fold tree do
    │         ~~~~~~~~~~~~
    │
    └─ test/sum_of_tree_test.exs:21: SumOfTreeTest."test fold operations basic sum of tree"/1


17:15:23.985 [debug] Transforming recursive refs in body: {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]} with bindings: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}], state: nil

17:15:23.985 [debug] Processing recursive reference: {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}

17:15:23.985 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

17:15:23.985 [debug] Processing recursive reference: {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}

17:15:23.985 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

17:15:23.985 [debug] Generating pattern match for :leaf with args: []

17:15:23.985 [debug] Extracting bindings from args: []

17:15:23.985 [debug] Transforming recursive refs in body: 0 with bindings: [], state: nil

17:15:23.985 [debug] Generated fold cases after transformation: [{:->, [line: 22, column: 40], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :leaf]}], 0]}]

17:15:23.985 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 21, column: 14], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 22, column: 40], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :leaf]}], 0]}]]]}]}]}]}

17:15:24.005 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 3, variant: :node}, val: 1, variant: :node}, state: nil

17:15:24.005 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 3, variant: :node}, val: 1, variant: :node}

17:15:24.005 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, state: nil

17:15:24.005 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}

17:15:24.005 [debug] do_fold called with data: %{variant: :leaf}, state: nil

17:15:24.005 [debug] Terminal case result: 0

17:15:24.005 [debug] Recursive field result for left: 0

17:15:24.005 [debug] do_fold called with data: %{variant: :leaf}, state: nil

17:15:24.005 [debug] Terminal case result: 0

17:15:24.005 [debug] Recursive field result for right: 0

17:15:24.005 [debug] do_fold called with non-variant data: 2

17:15:24.005 [debug] Non-variant field val result: 2

17:15:24.005 [debug] After processing fields - processed: %{left: 0, right: 0, val: 2, variant: :node}, intermediate_state: nil

17:15:24.005 [debug] do_fold called with non-variant data: 0

17:15:24.005 [debug] do_fold called with non-variant data: 0

17:15:24.006 [debug] Final result after fun: 2 with intermediate_state: nil

17:15:24.006 [debug] Recursive field result for left: 2

17:15:24.006 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 3, variant: :node}, state: nil

17:15:24.006 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 3, variant: :node}

17:15:24.006 [debug] do_fold called with data: %{variant: :leaf}, state: nil

17:15:24.006 [debug] Terminal case result: 0

17:15:24.006 [debug] Recursive field result for left: 0

17:15:24.006 [debug] do_fold called with data: %{variant: :leaf}, state: nil

17:15:24.006 [debug] Terminal case result: 0

17:15:24.006 [debug] Recursive field result for right: 0

17:15:24.006 [debug] do_fold called with non-variant data: 3

17:15:24.006 [debug] Non-variant field val result: 3

17:15:24.006 [debug] After processing fields - processed: %{left: 0, right: 0, val: 3, variant: :node}, intermediate_state: nil

17:15:24.006 [debug] do_fold called with non-variant data: 0
.
17:15:24.006 [debug] do_fold called with non-variant data: 0

17:15:24.006 [debug] Final result after fun: 3 with intermediate_state: nil


17:15:24.006 [debug] Recursive field result for right: 3

17:15:24.006 [debug] do_fold called with non-variant data: 1

17:15:24.006 [debug] Non-variant field val result: 1

17:15:24.006 [debug] After processing fields - processed: %{left: 2, right: 3, val: 1, variant: :node}, intermediate_state: nil

17:15:24.006 [debug] do_fold called with non-variant data: 2

17:15:24.006 [debug] do_fold called with non-variant data: 3

17:15:24.006 [debug] Final result after fun: 6 with intermediate_state: nil
Finished in 0.03 seconds (0.00s async, 0.03s sync)
1 test, 0 failures
