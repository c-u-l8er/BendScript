===> Analyzing applications...
===> Compiling gen_batch_server
src/gen_batch_server.erl:269: Warning: INFO: receive matches any message, this is always fast
src/gen_batch_server.erl:323: Warning: INFO: receive matches any message, this is always fast

===> Analyzing applications...
===> Compiling seshat
===> Analyzing applications...
===> Compiling aten
===> Analyzing applications...
===> Compiling ra
==> uuid
Compiling 1 file (.ex)
warning: use Bitwise is deprecated. import Bitwise instead
  lib/uuid.ex:2: UUID

warning: :crypto.hash/2 defined in application :crypto is used by the current application but the current application does not depend on :crypto. To fix this, you must do one of:

  1. If :crypto is part of Erlang/Elixir, you must include it under :extra_applications inside "def application" in your mix.exs

  2. If :crypto is a dependency, make sure it is listed under "def deps" in your mix.exs

  3. In case you don't want to add a requirement to :crypto, you may optionally skip this warning by adding [xref: [exclude: [:crypto]]] to your "def project" in mix.exs

Invalid call found at 2 locations:
  lib/uuid.ex:498: UUID.namebased_uuid/2
  lib/uuid.ex:502: UUID.namebased_uuid/2

warning: :crypto.strong_rand_bytes/1 defined in application :crypto is used by the current application but the current application does not depend on :crypto. To fix this, you must do one of:

  1. If :crypto is part of Erlang/Elixir, you must include it under :extra_applications inside "def application" in your mix.exs

  2. If :crypto is a dependency, make sure it is listed under "def deps" in your mix.exs

  3. In case you don't want to add a requirement to :crypto, you may optionally skip this warning by adding [xref: [exclude: [:crypto]]] to your "def project" in mix.exs

Invalid call found at 3 locations:
  lib/uuid.ex:340: UUID.uuid4/1
  lib/uuid.ex:469: UUID.uuid1_clockseq/0
  lib/uuid.ex:492: UUID.uuid1_node/1

Generated uuid app
==> ben_ben
Compiling 17 files (.ex)
warning: variable "return" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/cypher_executer.ex:68: CypherExecutor.execute_match_where/5

warning: variable "var" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/cypher_executer.ex:69: CypherExecutor.execute_match_where/5

warning: variable "var" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/cypher_executer.ex:92: CypherExecutor.execute_match/4

warning: variable "return" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/cypher_executer.ex:89: CypherExecutor.execute_match/4

warning: variable "var" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/cypher_executer.ex:100: CypherExecutor.execute_create/3

warning: clauses with the same name and arity (number of arguments) should be grouped together, "defp generate_fold_cases/2" was previously defined (lib/ben_ben.ex:134)
  lib/ben_ben.ex:171

warning: variable "other" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/ben_ben.ex:374: BenBen.process_constructed/2

warning: function extract_bindings/1 is unused
  lib/ben_ben.ex:250

warning: function generate_pattern_match/1 is unused
  lib/ben_ben.ex:225

warning: this clause for generate_fold_cases/2 cannot match because a previous clause at line 134 always matches
  lib/ben_ben.ex:171

warning: this clause for generate_fold_cases/2 cannot match because a previous clause at line 134 always matches
  lib/ben_ben.ex:175


16:42:56.499 [debug] Defining type {:__aliases__, [line: 4], [:Tree]} with block: {:__block__, [], [{:node, [line: 5], [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]}

16:42:56.499 [debug] Defining type {:__aliases__, [line: 5], [:ProtoObject]} with block: {:__block__, [], [{:object, [line: 7], [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]}, {:null, [line: 9], []}]}

16:42:56.499 [debug] Defining type {:__aliases__, [line: 5], [:Transaction]} with block: {:__block__, [], [{:pending, [line: 7], [{:operations, [line: 7], nil}, {:timestamp, [line: 7], nil}]}, {:committed, [line: 8], [{:changes, [line: 8], nil}, {:timestamp, [line: 8], nil}]}, {:rolled_back, [line: 9], [{:reason, [line: 9], nil}, {:timestamp, [line: 9], nil}]}]}

16:42:56.499 [debug] Defining type {:__aliases__, [line: 4], [:Graph]} with block: {:__block__, [], [{:graph, [line: 6], [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]}, {:vertex, [line: 7], [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]}, {:edge, [line: 8], [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]}, {:empty, [line: 9], []}]}

16:42:56.502 [debug] Extracted variants: [{:object, [line: 7], [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]}, {:null, [line: 9], []}]

16:42:56.499 [debug] Defining type {:__aliases__, [line: 4], [:MyTree]} with block: {:__block__, [], [{:node, [line: 5], [{:val, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]}

16:42:56.499 [debug] Defining type {:__aliases__, [line: 4], [:MyGraph]} with block: {:__block__, [], [{:vertex, [line: 6], [{:id, [line: 6], nil}, {:value, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 8], [{:to_id, [line: 8], nil}, {:weight, [line: 8], nil}]}]}

16:42:56.502 [debug] Extracted variants: [{:node, [line: 5], [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]

16:42:56.502 [debug] Generating constructors for variants: [{:object, [line: 7], [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]}, {:null, [line: 9], []}]

16:42:56.502 [debug] Processing variant: {:object, [line: 7], [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]}

16:42:56.502 [debug] Generating constructors for variants: [{:node, [line: 5], [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]

16:42:56.502 [debug] Extracted variants: [{:pending, [line: 7], [{:operations, [line: 7], nil}, {:timestamp, [line: 7], nil}]}, {:committed, [line: 8], [{:changes, [line: 8], nil}, {:timestamp, [line: 8], nil}]}, {:rolled_back, [line: 9], [{:reason, [line: 9], nil}, {:timestamp, [line: 9], nil}]}]

16:42:56.502 [debug] Constructor: :object, meta: [line: 7], args: [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]

16:42:56.502 [debug] Processing variant: {:node, [line: 5], [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}

16:42:56.502 [debug] Constructor: :node, meta: [line: 5], args: [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]

16:42:56.502 [debug] Extracted variants: [{:node, [line: 5], [{:val, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]

16:42:56.502 [debug] Extracted variants: [{:graph, [line: 6], [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]}, {:vertex, [line: 7], [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]}, {:edge, [line: 8], [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]}, {:empty, [line: 9], []}]

16:42:56.502 [debug] Generating constructors for variants: [{:pending, [line: 7], [{:operations, [line: 7], nil}, {:timestamp, [line: 7], nil}]}, {:committed, [line: 8], [{:changes, [line: 8], nil}, {:timestamp, [line: 8], nil}]}, {:rolled_back, [line: 9], [{:reason, [line: 9], nil}, {:timestamp, [line: 9], nil}]}]

16:42:56.502 [debug] Extracted variants: [{:vertex, [line: 6], [{:id, [line: 6], nil}, {:value, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 8], [{:to_id, [line: 8], nil}, {:weight, [line: 8], nil}]}]

16:42:56.502 [debug] Extracting constructor args from: [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]

16:42:56.502 [debug] Found value arg: :props

16:42:56.502 [debug] Extracting constructor args from: [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]

16:42:56.502 [debug] Processing variant: {:pending, [line: 7], [{:operations, [line: 7], nil}, {:timestamp, [line: 7], nil}]}

16:42:56.502 [debug] Found recursive arg: :proto

16:42:56.502 [debug] Found value arg: :value

16:42:56.502 [debug] Extracted arg_names: [:props, :proto]

16:42:56.502 [debug] Constructor: :pending, meta: [line: 7], args: [{:operations, [line: 7], nil}, {:timestamp, [line: 7], nil}]

16:42:56.502 [debug] Found recursive arg: :left

16:42:56.502 [debug] Found recursive arg: :right

16:42:56.502 [debug] Generated arg vars: [{:props, [], nil}, {:proto, [], nil}]

16:42:56.502 [debug] Generating constructors for variants: [{:vertex, [line: 6], [{:id, [line: 6], nil}, {:value, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 8], [{:to_id, [line: 8], nil}, {:weight, [line: 8], nil}]}]

16:42:56.502 [debug] Extracting constructor args from: [{:operations, [line: 7], nil}, {:timestamp, [line: 7], nil}]

16:42:56.502 [debug] Extracted arg_names: [:value, :left, :right]

16:42:56.502 [debug] Found value arg: :operations

16:42:56.502 [debug] Field pairs: [props: {:props, [], nil}, proto: {:proto, [], nil}]

16:42:56.502 [debug] Found value arg: :timestamp

16:42:56.502 [debug] Generated arg vars: [{:value, [], nil}, {:left, [], nil}, {:right, [], nil}]

16:42:56.502 [debug] Extracted arg_names: [:operations, :timestamp]

16:42:56.502 [debug] Processing variant: {:null, [line: 9], []}

16:42:56.502 [debug] Field pairs: [value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

16:42:56.502 [debug] Constructor: :null, meta: [line: 9], args: []

16:42:56.502 [debug] Generating constructors for variants: [{:graph, [line: 6], [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]}, {:vertex, [line: 7], [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]}, {:edge, [line: 8], [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]}, {:empty, [line: 9], []}]

16:42:56.502 [debug] Extracting constructor args from: []

16:42:56.502 [debug] Extracted arg_names: []

16:42:56.502 [debug] Generated arg vars: [{:operations, [], nil}, {:timestamp, [], nil}]

16:42:56.502 [debug] Processing variant: {:leaf, [line: 6], []}

16:42:56.502 [debug] Processing variant: {:vertex, [line: 6], [{:id, [line: 6], nil}, {:value, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}

16:42:56.502 [debug] Generated arg vars: []

16:42:56.502 [debug] Constructor: :leaf, meta: [line: 6], args: []

16:42:56.502 [debug] Field pairs: [operations: {:operations, [], nil}, timestamp: {:timestamp, [], nil}]

16:42:56.502 [debug] Field pairs: []

16:42:56.502 [debug] Generating constructors for variants: [{:node, [line: 5], [{:val, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]

16:42:56.502 [debug] Processing variant: {:graph, [line: 6], [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]}

16:42:56.502 [debug] Processing variant: {:committed, [line: 8], [{:changes, [line: 8], nil}, {:timestamp, [line: 8], nil}]}

16:42:56.502 [debug] Constructor: :vertex, meta: [line: 6], args: [{:id, [line: 6], nil}, {:value, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]

16:42:56.502 [debug] Extracting constructor args from: []

16:42:56.502 [debug] Extracted arg_names: []

16:42:56.502 [debug] Generated arg vars: []

16:42:56.502 [debug] Field pairs: []

16:42:56.502 [debug] Extracting constructor args from: [{:id, [line: 6], nil}, {:value, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]

16:42:56.502 [debug] Constructor: :committed, meta: [line: 8], args: [{:changes, [line: 8], nil}, {:timestamp, [line: 8], nil}]

16:42:56.502 [debug] Extracting constructor args from: [{:changes, [line: 8], nil}, {:timestamp, [line: 8], nil}]

16:42:56.502 [debug] Found value arg: :changes

16:42:56.502 [debug] Found value arg: :id

16:42:56.502 [debug] Constructor: :graph, meta: [line: 6], args: [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]

16:42:56.502 [debug] Found value arg: :value

16:42:56.502 [debug] Processing variant: {:node, [line: 5], [{:val, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}

16:42:56.502 [debug] Found value arg: :timestamp

16:42:56.502 [debug] Found recursive arg: :edges

16:42:56.502 [debug] Extracted arg_names: [:changes, :timestamp]

16:42:56.502 [debug] Extracting constructor args from: [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]

16:42:56.502 [debug] Extracted arg_names: [:id, :value, :edges]

16:42:56.502 [debug] Generated arg vars: [{:changes, [], nil}, {:timestamp, [], nil}]

16:42:56.502 [debug] Field pairs: [changes: {:changes, [], nil}, timestamp: {:timestamp, [], nil}]

16:42:56.502 [debug] Generated arg vars: [{:id, [], nil}, {:value, [], nil}, {:edges, [], nil}]

16:42:56.502 [debug] Processing variant: {:rolled_back, [line: 9], [{:reason, [line: 9], nil}, {:timestamp, [line: 9], nil}]}

16:42:56.502 [debug] Field pairs: [id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]

16:42:56.502 [debug] Constructor: :node, meta: [line: 5], args: [{:val, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]

16:42:56.502 [debug] Found value arg: :vertex_map

16:42:56.502 [debug] Constructor: :rolled_back, meta: [line: 9], args: [{:reason, [line: 9], nil}, {:timestamp, [line: 9], nil}]

16:42:56.502 [debug] Found recursive arg: :edge_list

16:42:56.502 [debug] Processing variant: {:edge, [line: 8], [{:to_id, [line: 8], nil}, {:weight, [line: 8], nil}]}

16:42:56.502 [debug] Extracting constructor args from: [{:reason, [line: 9], nil}, {:timestamp, [line: 9], nil}]

16:42:56.502 [debug] Found value arg: :metadata

16:42:56.502 [debug] Extracting constructor args from: [{:val, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]

16:42:56.502 [debug] Found value arg: :reason

16:42:56.502 [debug] Constructor: :edge, meta: [line: 8], args: [{:to_id, [line: 8], nil}, {:weight, [line: 8], nil}]

16:42:56.502 [debug] Found value arg: :val

16:42:56.502 [debug] Found value arg: :timestamp

16:42:56.502 [debug] Extracting constructor args from: [{:to_id, [line: 8], nil}, {:weight, [line: 8], nil}]

16:42:56.502 [debug] Extracted arg_names: [:reason, :timestamp]

16:42:56.502 [debug] Found value arg: :to_id

16:42:56.502 [debug] Found recursive arg: :left

16:42:56.502 [debug] Extracted arg_names: [:vertex_map, :edge_list, :metadata]

16:42:56.502 [debug] Generated arg vars: [{:vertex_map, [], nil}, {:edge_list, [], nil}, {:metadata, [], nil}]

16:42:56.502 [debug] Generated arg vars: [{:reason, [], nil}, {:timestamp, [], nil}]

16:42:56.502 [debug] Field pairs: [vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]

16:42:56.502 [debug] Field pairs: [reason: {:reason, [], nil}, timestamp: {:timestamp, [], nil}]

16:42:56.502 [debug] Processing variant: {:vertex, [line: 7], [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]}

16:42:56.502 [debug] Found value arg: :weight

16:42:56.502 [debug] Extracted arg_names: [:to_id, :weight]

16:42:56.502 [debug] Constructor: :vertex, meta: [line: 7], args: [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]

16:42:56.502 [debug] Generated arg vars: [{:to_id, [], nil}, {:weight, [], nil}]

16:42:56.502 [debug] Field pairs: [to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]

16:42:56.502 [debug] Found recursive arg: :right

16:42:56.502 [debug] Extracted arg_names: [:val, :left, :right]

16:42:56.502 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

16:42:56.502 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

16:42:56.502 [debug] Extracting constructor args from: [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]

16:42:56.502 [debug] Processing variant: {:leaf, [line: 6], []}

16:42:56.502 [debug] Found value arg: :vertex_id

16:42:56.502 [debug] Found value arg: :properties

16:42:56.502 [debug] Constructor: :leaf, meta: [line: 6], args: []

16:42:56.502 [debug] Found recursive arg: :adjacency

16:42:56.502 [debug] Extracting constructor args from: []

16:42:56.502 [debug] Extracted arg_names: [:vertex_id, :properties, :adjacency]

16:42:56.502 [debug] Extracted arg_names: []

16:42:56.502 [debug] Generated arg vars: []

16:42:56.502 [debug] Field pairs: []

16:42:56.502 [debug] Generated arg vars: [{:vertex_id, [], nil}, {:properties, [], nil}, {:adjacency, [], nil}]

16:42:56.502 [debug] Field pairs: [vertex_id: {:vertex_id, [], nil}, properties: {:properties, [], nil}, adjacency: {:adjacency, [], nil}]

16:42:56.502 [debug] Processing variant: {:edge, [line: 8], [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]}

16:42:56.502 [debug] Constructor: :edge, meta: [line: 8], args: [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]

16:42:56.502 [debug] Extracting constructor args from: [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]

16:42:56.502 [debug] Found value arg: :source_id

16:42:56.502 [debug] Found value arg: :target_id

16:42:56.502 [debug] Found value arg: :edge_weight

16:42:56.502 [debug] Found value arg: :edge_props

16:42:56.502 [debug] Extracted arg_names: [:source_id, :target_id, :edge_weight, :edge_props]

16:42:56.502 [debug] Generated arg vars: [{:source_id, [], nil}, {:target_id, [], nil}, {:edge_weight, [], nil}, {:edge_props, [], nil}]

16:42:56.503 [debug] Field pairs: [source_id: {:source_id, [], nil}, target_id: {:target_id, [], nil}, edge_weight: {:edge_weight, [], nil}, edge_props: {:edge_props, [], nil}]

16:42:56.503 [debug] Processing variant: {:empty, [line: 9], []}

16:42:56.503 [debug] Constructor: :empty, meta: [line: 9], args: []

16:42:56.503 [debug] Extracting constructor args from: []

16:42:56.503 [debug] Extracted arg_names: []

16:42:56.503 [debug] Generated arg vars: []

16:42:56.503 [debug] Field pairs: []

16:42:56.524 [debug] Fold expression: {:graph, [line: 13], nil}, opts: [], cases: [{:->, [line: 14], [[{:case, [line: 14], [{:vertex, [line: 14], [{:id, [line: 14], nil}, {:value, [line: 14], nil}, {:edges, [line: 14], nil}]}]}], {:+, [line: 15], [{:value, [line: 15], nil}, {:recu, [line: 15], [{:edges, [line: 15], nil}]}]}]}, {:->, [line: 17], [[{:case, [line: 17], [{:edge, [line: 17], [{:to_id, [line: 17], nil}, {:weight, [line: 17], nil}]}]}], {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}]}]

16:42:56.524 [debug] Extracting cases from list: [{:->, [line: 14], [[{:case, [line: 14], [{:vertex, [line: 14], [{:id, [line: 14], nil}, {:value, [line: 14], nil}, {:edges, [line: 14], nil}]}]}], {:+, [line: 15], [{:value, [line: 15], nil}, {:recu, [line: 15], [{:edges, [line: 15], nil}]}]}]}, {:->, [line: 17], [[{:case, [line: 17], [{:edge, [line: 17], [{:to_id, [line: 17], nil}, {:weight, [line: 17], nil}]}]}], {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}]}]

16:42:56.524 [debug] Extracted fold cases: [{:->, [line: 14], [[{:case, [line: 14], [{:vertex, [line: 14], [{:id, [line: 14], nil}, {:value, [line: 14], nil}, {:edges, [line: 14], nil}]}]}], {:+, [line: 15], [{:value, [line: 15], nil}, {:recu, [line: 15], [{:edges, [line: 15], nil}]}]}]}, {:->, [line: 17], [[{:case, [line: 17], [{:edge, [line: 17], [{:to_id, [line: 17], nil}, {:weight, [line: 17], nil}]}]}], {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}]}]

16:42:56.524 [debug] Generating fold cases: [{:->, [line: 14], [[{:case, [line: 14], [{:vertex, [line: 14], [{:id, [line: 14], nil}, {:value, [line: 14], nil}, {:edges, [line: 14], nil}]}]}], {:+, [line: 15], [{:value, [line: 15], nil}, {:recu, [line: 15], [{:edges, [line: 15], nil}]}]}]}, {:->, [line: 17], [[{:case, [line: 17], [{:edge, [line: 17], [{:to_id, [line: 17], nil}, {:weight, [line: 17], nil}]}]}], {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}]}]

16:42:56.524 [debug] Generated pattern: {:%{}, [], [variant: :vertex, id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]} for variant: :vertex

16:42:56.524 [debug] Transforming recursive refs:
Body: {:+, [line: 15], [{:value, [line: 15], nil}, {:recu, [line: 15], [{:edges, [line: 15], nil}]}]}
Bindings: [id: true, value: true, edges: true]
State: nil


16:42:56.525 [debug] Processing recursive reference: {:recu, [line: 15], [{:edges, [line: 15], nil}]}

16:42:56.525 [debug] Transformed recursive reference to: {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

16:42:56.525 [debug] Generated pattern: {:%{}, [], [variant: :edge, to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]} for variant: :edge

16:42:56.525 [debug] Transforming recursive refs:
Body: {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}
Bindings: [to_id: true, weight: true]
State: nil


16:42:56.525 [debug] Generated fold cases after transformation: [{:->, [line: 14], [[{:%{}, [], [variant: :vertex, id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]}], {:+, [line: 15], [{:value, [line: 15], nil}, {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 17], [[{:%{}, [], [variant: :edge, to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]}], {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}]}]

16:42:56.525 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 13], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 14], [[{:%{}, [], [variant: :vertex, id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]}], {:+, [line: 15], [{:value, [line: 15], nil}, {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 17], [[{:%{}, [], [variant: :edge, to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]}], {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}]}]]]}]}]}]}
warning: variable "id" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/ben_ben/my_graph.ex:13: MyGraph.sum/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/ben_ben/my_graph.ex:13: MyGraph.sum/1


16:42:56.525 [debug] Bend operation with var: :vertex_id, initial: 1

16:42:56.526 [debug] Fold expression: {:tree, [line: 10], nil}, opts: [], cases: [{:->, [line: 11], [[{:case, [line: 11], [{:node, [line: 11], [{:val, [line: 11], nil}, {:left, [line: 11], nil}, {:right, [line: 11], nil}]}]}], {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:recu, [line: 11], [{:left, [line: 11], nil}]}]}, {:recu, [line: 11], [{:right, [line: 11], nil}]}]}]}, {:->, [line: 12], [[{:case, [line: 12], [{:leaf, [line: 12], []}]}], 0]}]

16:42:56.526 [debug] Extracting cases from list: [{:->, [line: 11], [[{:case, [line: 11], [{:node, [line: 11], [{:val, [line: 11], nil}, {:left, [line: 11], nil}, {:right, [line: 11], nil}]}]}], {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:recu, [line: 11], [{:left, [line: 11], nil}]}]}, {:recu, [line: 11], [{:right, [line: 11], nil}]}]}]}, {:->, [line: 12], [[{:case, [line: 12], [{:leaf, [line: 12], []}]}], 0]}]

16:42:56.526 [debug] Extracted fold cases: [{:->, [line: 11], [[{:case, [line: 11], [{:node, [line: 11], [{:val, [line: 11], nil}, {:left, [line: 11], nil}, {:right, [line: 11], nil}]}]}], {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:recu, [line: 11], [{:left, [line: 11], nil}]}]}, {:recu, [line: 11], [{:right, [line: 11], nil}]}]}]}, {:->, [line: 12], [[{:case, [line: 12], [{:leaf, [line: 12], []}]}], 0]}]

16:42:56.526 [debug] Generating fold cases: [{:->, [line: 11], [[{:case, [line: 11], [{:node, [line: 11], [{:val, [line: 11], nil}, {:left, [line: 11], nil}, {:right, [line: 11], nil}]}]}], {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:recu, [line: 11], [{:left, [line: 11], nil}]}]}, {:recu, [line: 11], [{:right, [line: 11], nil}]}]}]}, {:->, [line: 12], [[{:case, [line: 12], [{:leaf, [line: 12], []}]}], 0]}]

16:42:56.526 [debug] Generated pattern: {:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

16:42:56.526 [debug] Transforming recursive refs:
Body: {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:recu, [line: 11], [{:left, [line: 11], nil}]}]}, {:recu, [line: 11], [{:right, [line: 11], nil}]}]}
Bindings: [val: true, left: true, right: true]
State: nil


16:42:56.526 [debug] Processing recursive reference: {:recu, [line: 11], [{:left, [line: 11], nil}]}

16:42:56.526 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

16:42:56.526 [debug] Processing recursive reference: {:recu, [line: 11], [{:right, [line: 11], nil}]}

16:42:56.526 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

16:42:56.526 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

16:42:56.526 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil


16:42:56.527 [debug] Generated fold cases after transformation: [{:->, [line: 11], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 12], [[{:%{}, [], [variant: :leaf]}], 0]}]

16:42:56.527 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 11], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 12], [[{:%{}, [], [variant: :leaf]}], 0]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/ben_ben/my_tree.ex:10: MyTree.sum/1


16:42:56.527 [debug] Fold expression: {:obj, [line: 19], nil}, opts: [], cases: [{:->, [line: 20], [[{:case, [line: 20], [{:object, [line: 20], [{:props, [line: 20], nil}, {:proto, [line: 20], nil}]}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], nil]}]

16:42:56.527 [debug] Bend operation with var: :val, initial: 0

16:42:56.527 [debug] Extracting cases from list: [{:->, [line: 20], [[{:case, [line: 20], [{:object, [line: 20], [{:props, [line: 20], nil}, {:proto, [line: 20], nil}]}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], nil]}]

16:42:56.527 [debug] Extracted fold cases: [{:->, [line: 20], [[{:case, [line: 20], [{:object, [line: 20], [{:props, [line: 20], nil}, {:proto, [line: 20], nil}]}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], nil]}]

16:42:56.527 [debug] Fork operation with expression: {:+, [line: 19], [{:val, [line: 19], nil}, 1]}

16:42:56.527 [debug] Generating fold cases: [{:->, [line: 20], [[{:case, [line: 20], [{:object, [line: 20], [{:props, [line: 20], nil}, {:proto, [line: 20], nil}]}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], nil]}]

16:42:56.527 [debug] Fork operation with expression: {:+, [line: 19], [{:val, [line: 19], nil}, 1]}

16:42:56.527 [debug] Generated pattern: {:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]} for variant: :object

16:42:56.528 [debug] Transforming recursive refs:
Body: {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}
Bindings: [props: true, proto: true]
State: nil


16:42:56.528 [debug] Processing recursive reference: {:recu, [line: 23], [{:proto, [line: 23], nil}]}

16:42:56.528 [debug] Transformed recursive reference to: {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

16:42:56.528 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

16:42:56.528 [debug] Transforming recursive refs:
Body: nil
Bindings: []
State: nil


16:42:56.528 [debug] Generated fold cases after transformation: [{:->, [line: 20], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:%{}, [], [variant: :null]}], nil]}]

16:42:56.528 [debug] Final quoted expression: {:do_fold, [], [{:obj, [line: 19], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 20], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{...}, ...]], [{:value, ...}]}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:%{}, [], [variant: :null]}], nil]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prototypal.ex:19: Prototypal.get_property/2


16:42:56.529 [debug] Bend operation with var: :level, initial: 0

16:42:56.529 [debug] Fork operation with expression: {:+, [line: 15], [{:level, [line: 15], nil}, 1]}

16:42:56.529 [debug] Fork operation with expression: {:+, [line: 16], [{:level, [line: 16], nil}, 1]}

16:42:56.529 [debug] Fold expression: {:tree, [line: 26], nil}, opts: [], cases: [{:->, [line: 27], [[{:case, [line: 27], [{:node, [line: 27], [{:value, [line: 27], nil}, {:left, [line: 27], nil}, {:right, [line: 27], nil}]}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:case, [line: 31], [{:leaf, [line: 31], []}]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

16:42:56.529 [debug] Extracting cases from list: [{:->, [line: 27], [[{:case, [line: 27], [{:node, [line: 27], [{:value, [line: 27], nil}, {:left, [line: 27], nil}, {:right, [line: 27], nil}]}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:case, [line: 31], [{:leaf, [line: 31], []}]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

16:42:56.530 [debug] Extracted fold cases: [{:->, [line: 27], [[{:case, [line: 27], [{:node, [line: 27], [{:value, [line: 27], nil}, {:left, [line: 27], nil}, {:right, [line: 27], nil}]}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:case, [line: 31], [{:leaf, [line: 31], []}]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

16:42:56.530 [debug] Generating fold cases: [{:->, [line: 27], [[{:case, [line: 27], [{:node, [line: 27], [{:value, [line: 27], nil}, {:left, [line: 27], nil}, {:right, [line: 27], nil}]}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:case, [line: 31], [{:leaf, [line: 31], []}]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

16:42:56.530 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

16:42:56.530 [debug] Transforming recursive refs:
Body: {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}
Bindings: [value: true, left: true, right: true]
State: nil


16:42:56.530 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

16:42:56.530 [debug] Transforming recursive refs:
Body: {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}
Bindings: []
State: nil


16:42:56.530 [debug] Generated fold cases after transformation: [{:->, [line: 27], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

16:42:56.530 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 26], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 27], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/tree_operations.ex:26: TreeOperations.map_tree/2


16:42:56.530 [debug] Fold expression: {:tree, [line: 38], nil}, opts: [], cases: [{:->, [line: 39], [[{:case, [line: 39], [{:node, [line: 39], [{:value, [line: 39], nil}, {:left, [line: 39], nil}, {:right, [line: 39], nil}]}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:case, [line: 49], [{:leaf, [line: 49], []}]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

16:42:56.531 [debug] Extracting cases from list: [{:->, [line: 39], [[{:case, [line: 39], [{:node, [line: 39], [{:value, [line: 39], nil}, {:left, [line: 39], nil}, {:right, [line: 39], nil}]}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:case, [line: 49], [{:leaf, [line: 49], []}]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

16:42:56.531 [debug] Extracted fold cases: [{:->, [line: 39], [[{:case, [line: 39], [{:node, [line: 39], [{:value, [line: 39], nil}, {:left, [line: 39], nil}, {:right, [line: 39], nil}]}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:case, [line: 49], [{:leaf, [line: 49], []}]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

16:42:56.531 [debug] Fold expression: {:graph, [line: 25], nil}, opts: [], cases: [{:->, [line: 26], [[{:case, [line: 26], [{:graph, [line: 26], [{:vertex_map, [line: 26], nil}, {:edge_list, [line: 26], nil}, {:metadata, [line: 26], nil}]}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:case, [line: 34], [{:empty, [line: 34], []}]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]

16:42:56.531 [debug] Generating fold cases: [{:->, [line: 39], [[{:case, [line: 39], [{:node, [line: 39], [{:value, [line: 39], nil}, {:left, [line: 39], nil}, {:right, [line: 39], nil}]}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:case, [line: 49], [{:leaf, [line: 49], []}]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

16:42:56.531 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

16:42:56.531 [debug] Transforming recursive refs:
Body: {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}
Bindings: [value: true, left: true, right: true]
State: nil


16:42:56.531 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

16:42:56.531 [debug] Transforming recursive refs:
Body: {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}
Bindings: []
State: nil


16:42:56.531 [debug] Extracting cases from list: [{:->, [line: 26], [[{:case, [line: 26], [{:graph, [line: 26], [{:vertex_map, [line: 26], nil}, {:edge_list, [line: 26], nil}, {:metadata, [line: 26], nil}]}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:case, [line: 34], [{:empty, [line: 34], []}]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]

16:42:56.531 [debug] Generated fold cases after transformation: [{:->, [line: 39], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

16:42:56.532 [debug] Extracted fold cases: [{:->, [line: 26], [[{:case, [line: 26], [{:graph, [line: 26], [{:vertex_map, [line: 26], nil}, {:edge_list, [line: 26], nil}, {:metadata, [line: 26], nil}]}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:case, [line: 34], [{:empty, [line: 34], []}]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]

16:42:56.532 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 38], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 39], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/tree_operations.ex:38: TreeOperations.filter_tree/2


16:42:56.532 [debug] Generating fold cases: [{:->, [line: 26], [[{:case, [line: 26], [{:graph, [line: 26], [{:vertex_map, [line: 26], nil}, {:edge_list, [line: 26], nil}, {:metadata, [line: 26], nil}]}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:case, [line: 34], [{:empty, [line: 34], []}]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]

16:42:56.532 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

16:42:56.532 [debug] Transforming recursive refs:
Body: {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


16:42:56.532 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

16:42:56.532 [debug] Transforming recursive refs:
Body: {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}
Bindings: []
State: nil


16:42:56.532 [debug] Generated fold cases after transformation: [{:->, [line: 26], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:%{}, [], [variant: :empty]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]

16:42:56.532 [debug] Fold expression: {:tree, [line: 56], nil}, opts: [with: {:%{}, [line: 56], [{0, 1}]}], cases: [{:->, [line: 57], [[{:case, [line: 57], [{:node, [line: 57], [{:value, [line: 57], nil}, {:left, [line: 57], nil}, {:right, [line: 57], nil}]}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:case, [line: 69], [{:leaf, [line: 69], []}]}], {0, {:state, [line: 70], nil}}]}]

16:42:56.532 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 25], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 26], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [...], ...}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:%{}, [], [variant: :empty]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, ...}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:25: LibGraph.add_vertex/3


16:42:56.532 [debug] Extracting cases from list: [{:->, [line: 57], [[{:case, [line: 57], [{:node, [line: 57], [{:value, [line: 57], nil}, {:left, [line: 57], nil}, {:right, [line: 57], nil}]}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:case, [line: 69], [{:leaf, [line: 69], []}]}], {0, {:state, [line: 70], nil}}]}]

16:42:56.533 [debug] Fold expression: {:obj, [line: 73], nil}, opts: [], cases: [{:->, [line: 74], [[{:case, [line: 74], [{:object, [line: 74], [{:props, [line: 74], nil}, {:proto, [line: 74], nil}]}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}]}, {:->, [line: 80], [[{:case, [line: 80], [{:null, [line: 80], []}]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

16:42:56.533 [debug] Fold expression: {:graph, [line: 46], nil}, opts: [], cases: [{:->, [line: 47], [[{:case, [line: 47], [{:graph, [line: 47], [{:vertex_map, [line: 47], nil}, {:edge_list, [line: 47], nil}, {:metadata, [line: 47], nil}]}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:case, [line: 65], [{:empty, [line: 65], []}]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

16:42:56.533 [debug] Extracted fold cases: [{:->, [line: 57], [[{:case, [line: 57], [{:node, [line: 57], [{:value, [line: 57], nil}, {:left, [line: 57], nil}, {:right, [line: 57], nil}]}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:case, [line: 69], [{:leaf, [line: 69], []}]}], {0, {:state, [line: 70], nil}}]}]

16:42:56.533 [debug] Extracting cases from list: [{:->, [line: 74], [[{:case, [line: 74], [{:object, [line: 74], [{:props, [line: 74], nil}, {:proto, [line: 74], nil}]}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}]}, {:->, [line: 80], [[{:case, [line: 80], [{:null, [line: 80], []}]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

16:42:56.533 [debug] Extracting cases from list: [{:->, [line: 47], [[{:case, [line: 47], [{:graph, [line: 47], [{:vertex_map, [line: 47], nil}, {:edge_list, [line: 47], nil}, {:metadata, [line: 47], nil}]}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:case, [line: 65], [{:empty, [line: 65], []}]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

16:42:56.533 [debug] Extracted fold cases: [{:->, [line: 74], [[{:case, [line: 74], [{:object, [line: 74], [{:props, [line: 74], nil}, {:proto, [line: 74], nil}]}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}]}, {:->, [line: 80], [[{:case, [line: 80], [{:null, [line: 80], []}]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

16:42:56.533 [debug] Generating fold cases: [{:->, [line: 57], [[{:case, [line: 57], [{:node, [line: 57], [{:value, [line: 57], nil}, {:left, [line: 57], nil}, {:right, [line: 57], nil}]}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:case, [line: 69], [{:leaf, [line: 69], []}]}], {0, {:state, [line: 70], nil}}]}]

16:42:56.533 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

16:42:56.534 [debug] Extracted fold cases: [{:->, [line: 47], [[{:case, [line: 47], [{:graph, [line: 47], [{:vertex_map, [line: 47], nil}, {:edge_list, [line: 47], nil}, {:metadata, [line: 47], nil}]}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:case, [line: 65], [{:empty, [line: 65], []}]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

16:42:56.534 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}
Bindings: [value: true, left: true, right: true]
State: {:%{}, [line: 56], [{0, 1}]}


16:42:56.534 [debug] Processing recursive reference: {:recu, [line: 58], [{:left, [line: 58], nil}]}

16:42:56.534 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

16:42:56.534 [debug] Processing recursive reference: {:recu, [line: 59], [{:right, [line: 59], nil}]}

16:42:56.534 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

16:42:56.534 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

16:42:56.534 [debug] Generating fold cases: [{:->, [line: 74], [[{:case, [line: 74], [{:object, [line: 74], [{:props, [line: 74], nil}, {:proto, [line: 74], nil}]}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}]}, {:->, [line: 80], [[{:case, [line: 80], [{:null, [line: 80], []}]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

16:42:56.534 [debug] Transforming recursive refs:
Body: {0, {:state, [line: 70], nil}}
Bindings: []
State: {:%{}, [line: 56], [{0, 1}]}


16:42:56.534 [debug] Generated pattern: {:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]} for variant: :object

16:42:56.534 [debug] Generating fold cases: [{:->, [line: 47], [[{:case, [line: 47], [{:graph, [line: 47], [{:vertex_map, [line: 47], nil}, {:edge_list, [line: 47], nil}, {:metadata, [line: 47], nil}]}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:case, [line: 65], [{:empty, [line: 65], []}]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

16:42:56.534 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}
Bindings: [props: true, proto: true]
State: nil


16:42:56.534 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

16:42:56.534 [debug] Processing recursive reference: {:recu, [line: 78], [{:proto, [line: 78], nil}]}

16:42:56.534 [debug] Transformed recursive reference to: {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

16:42:56.534 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

16:42:56.534 [debug] Generated fold cases after transformation: [{:->, [line: 57], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:do_fold, [], [{:left, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:do_fold, [], [{:right, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:%{}, [], [variant: :leaf]}], {0, {:state, [line: 70], nil}}]}]

16:42:56.534 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


16:42:56.534 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}
Bindings: []
State: nil


16:42:56.535 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

16:42:56.535 [debug] Transforming recursive refs:
Body: {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}
Bindings: []
State: nil


16:42:56.535 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 56], nil}, {:%{}, [line: 56], [{0, 1}]}, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 57], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:do_fold, [], [{:left, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:do_fold, [], [{:right, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, ...}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [...]}, [line: 63], [{...}, ...]}, {{:., [...], ...}, [line: 64], [...]}]}, {{:., [line: 65], [{:__aliases__, [...], ...}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:%{}, [], [variant: :leaf]}], {0, {:state, [line: 70], nil}}]}]]]}]}]}]}

16:42:56.535 [debug] Generated fold cases after transformation: [{:->, [line: 74], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 80], [[{:%{}, [], [variant: :null]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

16:42:56.535 [debug] Generated fold cases after transformation: [{:->, [line: 47], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:%{}, [], [variant: :empty]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

16:42:56.535 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 46], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 47], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, ...}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{...}, ...]}, [{:new_edge, [...], ...}, {:reverse_edge, ...}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, ...}], {:hd, ...}]}, {:->, [line: 60], [[{...}], {...}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:%{}, [], [variant: :empty]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]]]}]}]}]}

16:42:56.535 [debug] Final quoted expression: {:do_fold, [], [{:obj, [line: 73], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 74], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [...], ...}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [...]}, [line: 76], [{...}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, ...]}, [line: 77], [{:indent, ...}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 80], [[{:%{}, [], [variant: :null]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, ...]}, [line: 82], [{:indent, ...}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]]]}]}]}]}

16:42:56.535 [debug] Fold expression: {:tree, [line: 128], nil}, opts: [], cases: [{:->, [line: 129], [[{:case, [line: 129], [{:node, [line: 129], [{:value, [line: 129], nil}, {:left, [line: 129], nil}, {:right, [line: 129], nil}]}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:case, [line: 134], [{:leaf, [line: 134], []}]}], []]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:46: LibGraph.add_edge/5


16:42:56.535 [debug] Extracting cases from list: [{:->, [line: 129], [[{:case, [line: 129], [{:node, [line: 129], [{:value, [line: 129], nil}, {:left, [line: 129], nil}, {:right, [line: 129], nil}]}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:case, [line: 134], [{:leaf, [line: 134], []}]}], []]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prototypal.ex:73: Prototypal.inspect_object/2


16:42:56.536 [debug] Extracted fold cases: [{:->, [line: 129], [[{:case, [line: 129], [{:node, [line: 129], [{:value, [line: 129], nil}, {:left, [line: 129], nil}, {:right, [line: 129], nil}]}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:case, [line: 134], [{:leaf, [line: 134], []}]}], []]}]

16:42:56.536 [debug] Fold expression: {:graph, [line: 72], nil}, opts: [], cases: [{:->, [line: 73], [[{:case, [line: 73], [{:graph, [line: 73], [{:vertex_map, [line: 73], nil}, {:edge_list, [line: 73], nil}, {:metadata, [line: 73], nil}]}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:empty, [line: 76], []}]}], 0]}]

16:42:56.536 [debug] Generating fold cases: [{:->, [line: 129], [[{:case, [line: 129], [{:node, [line: 129], [{:value, [line: 129], nil}, {:left, [line: 129], nil}, {:right, [line: 129], nil}]}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:case, [line: 134], [{:leaf, [line: 134], []}]}], []]}]

16:42:56.536 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

16:42:56.536 [debug] Extracting cases from list: [{:->, [line: 73], [[{:case, [line: 73], [{:graph, [line: 73], [{:vertex_map, [line: 73], nil}, {:edge_list, [line: 73], nil}, {:metadata, [line: 73], nil}]}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:empty, [line: 76], []}]}], 0]}]

16:42:56.536 [debug] Extracted fold cases: [{:->, [line: 73], [[{:case, [line: 73], [{:graph, [line: 73], [{:vertex_map, [line: 73], nil}, {:edge_list, [line: 73], nil}, {:metadata, [line: 73], nil}]}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:empty, [line: 76], []}]}], 0]}]

16:42:56.536 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}
Bindings: [value: true, left: true, right: true]
State: nil


16:42:56.536 [debug] Generating fold cases: [{:->, [line: 73], [[{:case, [line: 73], [{:graph, [line: 73], [{:vertex_map, [line: 73], nil}, {:edge_list, [line: 73], nil}, {:metadata, [line: 73], nil}]}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:empty, [line: 76], []}]}], 0]}]

16:42:56.536 [debug] Processing recursive reference: {:recu, [line: 130], [{:left, [line: 130], nil}]}

16:42:56.536 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

16:42:56.536 [debug] Transforming recursive refs:
Body: {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


16:42:56.536 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

16:42:56.536 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

16:42:56.536 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil


16:42:56.536 [debug] Processing recursive reference: {:recu, [line: 131], [{:right, [line: 131], nil}]}

16:42:56.536 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

16:42:56.536 [debug] Generated fold cases after transformation: [{:->, [line: 73], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:%{}, [], [variant: :empty]}], 0]}]

16:42:56.536 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

16:42:56.536 [debug] Fold expression: {:obj, [line: 87], nil}, opts: [], cases: [{:->, [line: 88], [[{:case, [line: 88], [{:object, [line: 88], [{:props, [line: 88], nil}, {:proto, [line: 88], nil}]}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]

16:42:56.536 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


16:42:56.536 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 72], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 73], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:%{}, [], [variant: :empty]}], 0]}]]]}]}]}]}

16:42:56.536 [debug] Generated fold cases after transformation: [{:->, [line: 129], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:%{}, [], [variant: :leaf]}], []]}]

16:42:56.536 [debug] Extracting cases from list: [{:->, [line: 88], [[{:case, [line: 88], [{:object, [line: 88], [{:props, [line: 88], nil}, {:proto, [line: 88], nil}]}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]
warning: variable "edge_list" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:72: LibGraph.vertex_count/1

warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:72: LibGraph.vertex_count/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:72: LibGraph.vertex_count/1


16:42:56.537 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 128], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 129], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, ...}]], [{:value, [], BenBen}]}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:%{}, [], [variant: :leaf]}], []]}]]]}]}]}]}

16:42:56.537 [debug] Extracted fold cases: [{:->, [line: 88], [[{:case, [line: 88], [{:object, [line: 88], [{:props, [line: 88], nil}, {:proto, [line: 88], nil}]}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/tree_operations.ex:128: TreeOperations.collect_values/1


16:42:56.537 [debug] Fold expression: {:graph, [line: 82], nil}, opts: [], cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertex_map, [line: 83], nil}, {:edge_list, [line: 83], nil}, {:metadata, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:case, [line: 93], [{:empty, [line: 93], []}]}], 0]}]

16:42:56.537 [debug] Generating fold cases: [{:->, [line: 88], [[{:case, [line: 88], [{:object, [line: 88], [{:props, [line: 88], nil}, {:proto, [line: 88], nil}]}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]

16:42:56.537 [debug] Generated pattern: {:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]} for variant: :object

16:42:56.537 [debug] Extracting cases from list: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertex_map, [line: 83], nil}, {:edge_list, [line: 83], nil}, {:metadata, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:case, [line: 93], [{:empty, [line: 93], []}]}], 0]}]

16:42:56.537 [debug] Extracted fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertex_map, [line: 83], nil}, {:edge_list, [line: 83], nil}, {:metadata, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:case, [line: 93], [{:empty, [line: 93], []}]}], 0]}]

16:42:56.537 [debug] Transforming recursive refs:
Body: {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}
Bindings: [props: true, proto: true]
State: nil


16:42:56.537 [debug] Processing recursive reference: {:recu, [line: 92], [{:proto, [line: 92], nil}]}

16:42:56.537 [debug] Transformed recursive reference to: {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

16:42:56.537 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

16:42:56.537 [debug] Transforming recursive refs:
Body: {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}
Bindings: []
State: nil


16:42:56.537 [debug] Generating fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertex_map, [line: 83], nil}, {:edge_list, [line: 83], nil}, {:metadata, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:case, [line: 93], [{:empty, [line: 93], []}]}], 0]}]

16:42:56.537 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

16:42:56.537 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


16:42:56.537 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

16:42:56.537 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil


16:42:56.538 [debug] Generated fold cases after transformation: [{:->, [line: 88], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:%{}, [], [variant: :null]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]

16:42:56.538 [debug] Generated fold cases after transformation: [{:->, [line: 83], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:%{}, [], [variant: :empty]}], 0]}]

16:42:56.538 [debug] Final quoted expression: {:do_fold, [], [{:obj, [line: 87], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 88], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [...], ...}, :puts]}, [line: 91], [{:<<>>, [line: 91], [...]}]}, {:do_fold, [], [{:proto, [], ...}, nil, {...}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, ...}, :puts]}, [line: 95], [{:<<>>, [...], ...}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:%{}, [], [variant: :null]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]]]}]}]}]}

16:42:56.538 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 82], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 83], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:%{}, [], [variant: :empty]}], 0]}]]]}]}]}]}
warning: variable "vertex_map" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:82: LibGraph.edge_count/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prototypal.ex:87: Prototypal.debug_chain/2

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:82: LibGraph.edge_count/1


16:42:56.538 [debug] Fold expression: {:graph, [line: 99], nil}, opts: [], cases: [{:->, [line: 100], [[{:case, [line: 100], [{:graph, [line: 100], [{:vertex_map, [line: 100], nil}, {:edge_list, [line: 100], nil}, {:metadata, [line: 100], nil}]}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:case, [line: 106], [{:empty, [line: 106], []}]}], []]}]

16:42:56.538 [debug] Extracting cases from list: [{:->, [line: 100], [[{:case, [line: 100], [{:graph, [line: 100], [{:vertex_map, [line: 100], nil}, {:edge_list, [line: 100], nil}, {:metadata, [line: 100], nil}]}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:case, [line: 106], [{:empty, [line: 106], []}]}], []]}]

16:42:56.539 [debug] Extracted fold cases: [{:->, [line: 100], [[{:case, [line: 100], [{:graph, [line: 100], [{:vertex_map, [line: 100], nil}, {:edge_list, [line: 100], nil}, {:metadata, [line: 100], nil}]}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:case, [line: 106], [{:empty, [line: 106], []}]}], []]}]

16:42:56.539 [debug] Generating fold cases: [{:->, [line: 100], [[{:case, [line: 100], [{:graph, [line: 100], [{:vertex_map, [line: 100], nil}, {:edge_list, [line: 100], nil}, {:metadata, [line: 100], nil}]}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:case, [line: 106], [{:empty, [line: 106], []}]}], []]}]

16:42:56.539 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

16:42:56.539 [debug] Transforming recursive refs:
Body: {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


16:42:56.539 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

16:42:56.539 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


16:42:56.539 [debug] Generated fold cases after transformation: [{:->, [line: 100], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:%{}, [], [variant: :empty]}], []]}]
warning: function merge_counts/2 is unused
  lib/examples/tree_operations.ex:75

warning: function merge_with_level_increment/2 is unused
  lib/examples/tree_operations.ex:80


16:42:56.539 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 99], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 100], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}
warning: variable "vertex" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:103: LibGraph.get_neighbors/2

warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:99: LibGraph.get_neighbors/2

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:99: LibGraph.get_neighbors/2


16:42:56.540 [debug] Fold expression: {:graph, [line: 148], nil}, opts: [], cases: [{:->, [line: 149], [[{:case, [line: 149], [{:graph, [line: 149], [{:vertex_map, [line: 149], nil}, {:edge_list, [line: 149], nil}, {:metadata, [line: 149], nil}]}]}], {:__block__, [], [{:=, [line: 150], [{:{}, [line: 150], [{:came_from, [line: 150], nil}, {:_, [line: 150], nil}, {:_, [line: 150], nil}]}, {:find_path, [line: 150], [{:vertex_map, [line: 150], nil}, {:edge_list, [line: 150], nil}, {:start_id, [line: 150], nil}, {:end_id, [line: 150], nil}]}]}, {:reconstruct_path, [line: 151], [{:came_from, [line: 151], nil}, {:end_id, [line: 151], nil}]}]}]}, {:->, [line: 153], [[{:case, [line: 153], [{:empty, [line: 153], []}]}], []]}]

16:42:56.540 [debug] Extracting cases from list: [{:->, [line: 149], [[{:case, [line: 149], [{:graph, [line: 149], [{:vertex_map, [line: 149], nil}, {:edge_list, [line: 149], nil}, {:metadata, [line: 149], nil}]}]}], {:__block__, [], [{:=, [line: 150], [{:{}, [line: 150], [{:came_from, [line: 150], nil}, {:_, [line: 150], nil}, {:_, [line: 150], nil}]}, {:find_path, [line: 150], [{:vertex_map, [line: 150], nil}, {:edge_list, [line: 150], nil}, {:start_id, [line: 150], nil}, {:end_id, [line: 150], nil}]}]}, {:reconstruct_path, [line: 151], [{:came_from, [line: 151], nil}, {:end_id, [line: 151], nil}]}]}]}, {:->, [line: 153], [[{:case, [line: 153], [{:empty, [line: 153], []}]}], []]}]

16:42:56.540 [debug] Extracted fold cases: [{:->, [line: 149], [[{:case, [line: 149], [{:graph, [line: 149], [{:vertex_map, [line: 149], nil}, {:edge_list, [line: 149], nil}, {:metadata, [line: 149], nil}]}]}], {:__block__, [], [{:=, [line: 150], [{:{}, [line: 150], [{:came_from, [line: 150], nil}, {:_, [line: 150], nil}, {:_, [line: 150], nil}]}, {:find_path, [line: 150], [{:vertex_map, [line: 150], nil}, {:edge_list, [line: 150], nil}, {:start_id, [line: 150], nil}, {:end_id, [line: 150], nil}]}]}, {:reconstruct_path, [line: 151], [{:came_from, [line: 151], nil}, {:end_id, [line: 151], nil}]}]}]}, {:->, [line: 153], [[{:case, [line: 153], [{:empty, [line: 153], []}]}], []]}]

16:42:56.540 [debug] Generating fold cases: [{:->, [line: 149], [[{:case, [line: 149], [{:graph, [line: 149], [{:vertex_map, [line: 149], nil}, {:edge_list, [line: 149], nil}, {:metadata, [line: 149], nil}]}]}], {:__block__, [], [{:=, [line: 150], [{:{}, [line: 150], [{:came_from, [line: 150], nil}, {:_, [line: 150], nil}, {:_, [line: 150], nil}]}, {:find_path, [line: 150], [{:vertex_map, [line: 150], nil}, {:edge_list, [line: 150], nil}, {:start_id, [line: 150], nil}, {:end_id, [line: 150], nil}]}]}, {:reconstruct_path, [line: 151], [{:came_from, [line: 151], nil}, {:end_id, [line: 151], nil}]}]}]}, {:->, [line: 153], [[{:case, [line: 153], [{:empty, [line: 153], []}]}], []]}]

16:42:56.540 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

16:42:56.540 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 150], [{:{}, [line: 150], [{:came_from, [line: 150], nil}, {:_, [line: 150], nil}, {:_, [line: 150], nil}]}, {:find_path, [line: 150], [{:vertex_map, [line: 150], nil}, {:edge_list, [line: 150], nil}, {:start_id, [line: 150], nil}, {:end_id, [line: 150], nil}]}]}, {:reconstruct_path, [line: 151], [{:came_from, [line: 151], nil}, {:end_id, [line: 151], nil}]}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


16:42:56.540 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

16:42:56.540 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


16:42:56.540 [debug] Generated fold cases after transformation: [{:->, [line: 149], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 150], [{:{}, [line: 150], [{:came_from, [line: 150], nil}, {:_, [line: 150], nil}, {:_, [line: 150], nil}]}, {:find_path, [line: 150], [{:vertex_map, [line: 150], nil}, {:edge_list, [line: 150], nil}, {:start_id, [line: 150], nil}, {:end_id, [line: 150], nil}]}]}, {:reconstruct_path, [line: 151], [{:came_from, [line: 151], nil}, {:end_id, [line: 151], nil}]}]}]}, {:->, [line: 153], [[{:%{}, [], [variant: :empty]}], []]}]

16:42:56.540 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 148], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 149], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 150], [{:{}, [line: 150], [{:came_from, [line: 150], nil}, {:_, [line: 150], nil}, {:_, [line: 150], nil}]}, {:find_path, [line: 150], [{:vertex_map, [line: 150], nil}, {:edge_list, [line: 150], nil}, {:start_id, [line: 150], nil}, {:end_id, [line: 150], nil}]}]}, {:reconstruct_path, [line: 151], [{:came_from, [line: 151], nil}, {:end_id, [line: 151], nil}]}]}]}, {:->, [line: 153], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}
warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:148: LibGraph.shortest_path/3

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:148: LibGraph.shortest_path/3


16:42:56.541 [debug] Fold expression: {:graph, [line: 160], nil}, opts: [], cases: [{:->, [line: 161], [[{:case, [line: 161], [{:graph, [line: 161], [{:vertex_map, [line: 161], nil}, {:edge_list, [line: 161], nil}, {:metadata, [line: 161], nil}]}]}], {:case, [line: 162], [{{:., [line: 162], [{:__aliases__, [line: 162], [:Map]}, :keys]}, [line: 162], [{:vertex_map, [line: 162], nil}]}, [do: [{:->, [line: 163], [[[]], true]}, {:->, [line: 166], [[{:=, [line: 166], [[{:|, [line: 166], [{:first, [line: 166], nil}, {:_, [line: 166], nil}]}], {:all_vertices, [line: 166], nil}]}], {:__block__, [], [{:=, [line: 167], [{:visited, [line: 167], nil}, {:depth_first_search, [line: 167], [{:vertex_map, [line: 167], nil}, {:edge_list, [line: 167], nil}, {:first, [line: 167], nil}, {{:., [line: 167], [{:__aliases__, [line: 167], [:MapSet]}, :new]}, [line: 167], []}]}]}, {:==, [line: 168], [{{:., [line: 168], [{:__aliases__, [line: 168], [:MapSet]}, :size]}, [line: 168], [{:visited, [line: 168], nil}]}, {:length, [line: 168], [{:all_vertices, [line: 168], nil}]}]}]}]}]]]}]}, {:->, [line: 172], [[{:case, [line: 172], [{:empty, [line: 172], []}]}], true]}]

16:42:56.541 [debug] Extracting cases from list: [{:->, [line: 161], [[{:case, [line: 161], [{:graph, [line: 161], [{:vertex_map, [line: 161], nil}, {:edge_list, [line: 161], nil}, {:metadata, [line: 161], nil}]}]}], {:case, [line: 162], [{{:., [line: 162], [{:__aliases__, [line: 162], [:Map]}, :keys]}, [line: 162], [{:vertex_map, [line: 162], nil}]}, [do: [{:->, [line: 163], [[[]], true]}, {:->, [line: 166], [[{:=, [line: 166], [[{:|, [line: 166], [{:first, [line: 166], nil}, {:_, [line: 166], nil}]}], {:all_vertices, [line: 166], nil}]}], {:__block__, [], [{:=, [line: 167], [{:visited, [line: 167], nil}, {:depth_first_search, [line: 167], [{:vertex_map, [line: 167], nil}, {:edge_list, [line: 167], nil}, {:first, [line: 167], nil}, {{:., [line: 167], [{:__aliases__, [line: 167], [:MapSet]}, :new]}, [line: 167], []}]}]}, {:==, [line: 168], [{{:., [line: 168], [{:__aliases__, [line: 168], [:MapSet]}, :size]}, [line: 168], [{:visited, [line: 168], nil}]}, {:length, [line: 168], [{:all_vertices, [line: 168], nil}]}]}]}]}]]]}]}, {:->, [line: 172], [[{:case, [line: 172], [{:empty, [line: 172], []}]}], true]}]

16:42:56.541 [debug] Extracted fold cases: [{:->, [line: 161], [[{:case, [line: 161], [{:graph, [line: 161], [{:vertex_map, [line: 161], nil}, {:edge_list, [line: 161], nil}, {:metadata, [line: 161], nil}]}]}], {:case, [line: 162], [{{:., [line: 162], [{:__aliases__, [line: 162], [:Map]}, :keys]}, [line: 162], [{:vertex_map, [line: 162], nil}]}, [do: [{:->, [line: 163], [[[]], true]}, {:->, [line: 166], [[{:=, [line: 166], [[{:|, [line: 166], [{:first, [line: 166], nil}, {:_, [line: 166], nil}]}], {:all_vertices, [line: 166], nil}]}], {:__block__, [], [{:=, [line: 167], [{:visited, [line: 167], nil}, {:depth_first_search, [line: 167], [{:vertex_map, [line: 167], nil}, {:edge_list, [line: 167], nil}, {:first, [line: 167], nil}, {{:., [line: 167], [{:__aliases__, [line: 167], [:MapSet]}, :new]}, [line: 167], []}]}]}, {:==, [line: 168], [{{:., [line: 168], [{:__aliases__, [line: 168], [:MapSet]}, :size]}, [line: 168], [{:visited, [line: 168], nil}]}, {:length, [line: 168], [{:all_vertices, [line: 168], nil}]}]}]}]}]]]}]}, {:->, [line: 172], [[{:case, [line: 172], [{:empty, [line: 172], []}]}], true]}]

16:42:56.541 [debug] Generating fold cases: [{:->, [line: 161], [[{:case, [line: 161], [{:graph, [line: 161], [{:vertex_map, [line: 161], nil}, {:edge_list, [line: 161], nil}, {:metadata, [line: 161], nil}]}]}], {:case, [line: 162], [{{:., [line: 162], [{:__aliases__, [line: 162], [:Map]}, :keys]}, [line: 162], [{:vertex_map, [line: 162], nil}]}, [do: [{:->, [line: 163], [[[]], true]}, {:->, [line: 166], [[{:=, [line: 166], [[{:|, [line: 166], [{:first, [line: 166], nil}, {:_, [line: 166], nil}]}], {:all_vertices, [line: 166], nil}]}], {:__block__, [], [{:=, [line: 167], [{:visited, [line: 167], nil}, {:depth_first_search, [line: 167], [{:vertex_map, [line: 167], nil}, {:edge_list, [line: 167], nil}, {:first, [line: 167], nil}, {{:., [line: 167], [{:__aliases__, [line: 167], [:MapSet]}, :new]}, [line: 167], []}]}]}, {:==, [line: 168], [{{:., [line: 168], [{:__aliases__, [line: 168], [:MapSet]}, :size]}, [line: 168], [{:visited, [line: 168], nil}]}, {:length, [line: 168], [{:all_vertices, [line: 168], nil}]}]}]}]}]]]}]}, {:->, [line: 172], [[{:case, [line: 172], [{:empty, [line: 172], []}]}], true]}]

16:42:56.541 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

16:42:56.542 [debug] Transforming recursive refs:
Body: {:case, [line: 162], [{{:., [line: 162], [{:__aliases__, [line: 162], [:Map]}, :keys]}, [line: 162], [{:vertex_map, [line: 162], nil}]}, [do: [{:->, [line: 163], [[[]], true]}, {:->, [line: 166], [[{:=, [line: 166], [[{:|, [line: 166], [{:first, [line: 166], nil}, {:_, [line: 166], nil}]}], {:all_vertices, [line: 166], nil}]}], {:__block__, [], [{:=, [line: 167], [{:visited, [line: 167], nil}, {:depth_first_search, [line: 167], [{:vertex_map, [line: 167], nil}, {:edge_list, [line: 167], nil}, {:first, [line: 167], nil}, {{:., [line: 167], [{:__aliases__, [line: 167], [:MapSet]}, :new]}, [line: 167], []}]}]}, {:==, [line: 168], [{{:., [line: 168], [{:__aliases__, [line: 168], [:MapSet]}, :size]}, [line: 168], [{:visited, [line: 168], nil}]}, {:length, [line: 168], [{:all_vertices, [line: 168], nil}]}]}]}]}]]]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


16:42:56.542 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

16:42:56.542 [debug] Transforming recursive refs:
Body: true
Bindings: []
State: nil


16:42:56.542 [debug] Generated fold cases after transformation: [{:->, [line: 161], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 162], [{{:., [line: 162], [{:__aliases__, [line: 162], [:Map]}, :keys]}, [line: 162], [{:vertex_map, [line: 162], nil}]}, [do: [{:->, [line: 163], [[[]], true]}, {:->, [line: 166], [[{:=, [line: 166], [[{:|, [line: 166], [{:first, [line: 166], nil}, {:_, [line: 166], nil}]}], {:all_vertices, [line: 166], nil}]}], {:__block__, [], [{:=, [line: 167], [{:visited, [line: 167], nil}, {:depth_first_search, [line: 167], [{:vertex_map, [line: 167], nil}, {:edge_list, [line: 167], nil}, {:first, [line: 167], nil}, {{:., [line: 167], [{:__aliases__, [line: 167], [:MapSet]}, :new]}, [line: 167], []}]}]}, {:==, [line: 168], [{{:., [line: 168], [{:__aliases__, [line: 168], [:MapSet]}, :size]}, [line: 168], [{:visited, [line: 168], nil}]}, {:length, [line: 168], [{:all_vertices, [line: 168], nil}]}]}]}]}]]]}]}, {:->, [line: 172], [[{:%{}, [], [variant: :empty]}], true]}]

16:42:56.542 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 160], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 161], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 162], [{{:., [line: 162], [{:__aliases__, [line: 162], [:Map]}, :keys]}, [line: 162], [{:vertex_map, [line: 162], nil}]}, [do: [{:->, [line: 163], [[[]], true]}, {:->, [line: 166], [[{:=, [line: 166], [[{:|, [line: 166], [{:first, ...}, {...}]}], {:all_vertices, [line: 166], nil}]}], {:__block__, [], [{:=, [line: 167], [{:visited, [...], ...}, {:depth_first_search, ...}]}, {:==, [line: 168], [{{...}, ...}, {...}]}]}]}]]]}]}, {:->, [line: 172], [[{:%{}, [], [variant: :empty]}], true]}]]]}]}]}]}
warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:160: LibGraph.is_connected?/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/lib_graph.ex:160: LibGraph.is_connected?/1

warning: clauses with the same name and arity (number of arguments) should be grouped together, "defp extract_neighbors/2" was previously defined (lib/examples/lib_graph.ex:112)
  lib/examples/lib_graph.ex:285

warning: variable "pid" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/ra_ra.ex:131: RaRa.init/1

warning: variable "last_log_index" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/dist_gdb.ex:543: DistGraphDatabase.handle_vote_request/5

warning: variable "last_log_term" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/dist_gdb.ex:543: DistGraphDatabase.handle_vote_request/5

warning: variable "self_name" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/dist_gdb.ex:544: DistGraphDatabase.handle_vote_request/5

warning: variable "tx_id" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/dist_gdb.ex:626: DistGraphDatabase.apply_log_entries/2

warning: variable "result" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/dist_gdb.ex:631: DistGraphDatabase.apply_log_entries/2

warning: variable "ts" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/graph_database.ex:48: GraphDatabase.commit_transaction/2


16:42:56.567 [debug] Fold expression: {{:., [line: 111], [{:state, [line: 111], nil}, :graph]}, [no_parens: true, line: 111], []}, opts: [], cases: [{:->, [line: 112], [[{:case, [line: 112], [{:graph, [line: 112], [{:vertex_map, [line: 112], nil}, {:edge_list, [line: 112], nil}, {:metadata, [line: 112], nil}]}]}], {:execute_query, [line: 113], [{:pattern, [line: 113], nil}, {:vertex_map, [line: 113], nil}, {:edge_list, [line: 113], nil}]}]}, {:->, [line: 115], [[{:case, [line: 115], [{:empty, [line: 115], []}]}], []]}]

16:42:56.567 [debug] Extracting cases from list: [{:->, [line: 112], [[{:case, [line: 112], [{:graph, [line: 112], [{:vertex_map, [line: 112], nil}, {:edge_list, [line: 112], nil}, {:metadata, [line: 112], nil}]}]}], {:execute_query, [line: 113], [{:pattern, [line: 113], nil}, {:vertex_map, [line: 113], nil}, {:edge_list, [line: 113], nil}]}]}, {:->, [line: 115], [[{:case, [line: 115], [{:empty, [line: 115], []}]}], []]}]

16:42:56.567 [debug] Extracted fold cases: [{:->, [line: 112], [[{:case, [line: 112], [{:graph, [line: 112], [{:vertex_map, [line: 112], nil}, {:edge_list, [line: 112], nil}, {:metadata, [line: 112], nil}]}]}], {:execute_query, [line: 113], [{:pattern, [line: 113], nil}, {:vertex_map, [line: 113], nil}, {:edge_list, [line: 113], nil}]}]}, {:->, [line: 115], [[{:case, [line: 115], [{:empty, [line: 115], []}]}], []]}]

16:42:56.567 [debug] Generating fold cases: [{:->, [line: 112], [[{:case, [line: 112], [{:graph, [line: 112], [{:vertex_map, [line: 112], nil}, {:edge_list, [line: 112], nil}, {:metadata, [line: 112], nil}]}]}], {:execute_query, [line: 113], [{:pattern, [line: 113], nil}, {:vertex_map, [line: 113], nil}, {:edge_list, [line: 113], nil}]}]}, {:->, [line: 115], [[{:case, [line: 115], [{:empty, [line: 115], []}]}], []]}]

16:42:56.567 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

16:42:56.567 [debug] Transforming recursive refs:
Body: {:execute_query, [line: 113], [{:pattern, [line: 113], nil}, {:vertex_map, [line: 113], nil}, {:edge_list, [line: 113], nil}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


16:42:56.567 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

16:42:56.567 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


16:42:56.567 [debug] Generated fold cases after transformation: [{:->, [line: 112], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:execute_query, [line: 113], [{:pattern, [line: 113], nil}, {:vertex_map, [line: 113], nil}, {:edge_list, [line: 113], nil}]}]}, {:->, [line: 115], [[{:%{}, [], [variant: :empty]}], []]}]

16:42:56.567 [debug] Final quoted expression: {:do_fold, [], [{{:., [line: 111], [{:state, [line: 111], nil}, :graph]}, [no_parens: true, line: 111], []}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 112], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:execute_query, [line: 113], [{:pattern, [line: 113], nil}, {:vertex_map, [line: 113], nil}, {:edge_list, [line: 113], nil}]}]}, {:->, [line: 115], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}
warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/graph_database.ex:111: GraphDatabase.query/2

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  lib/examples/graph_database.ex:111: GraphDatabase.query/2

warning: variable "edge_list" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/graph_database.ex:203: GraphDatabase.execute_query/3

warning: variable "pattern" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/graph_database.ex:203: GraphDatabase.execute_query/3

warning: variable "vertex_map" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/graph_database.ex:203: GraphDatabase.execute_query/3

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/graph_database.ex:209: GraphDatabase.validate_edge/4

warning: function add_cluster_monitors/2 is unused
  lib/dist_gdb.ex:665

warning: function safe_call/3 is unused
  lib/dist_gdb.ex:695

warning: this clause for extract_neighbors/2 cannot match because a previous clause at line 112 always matches
  lib/examples/lib_graph.ex:285

warning: DistGraphDatabase.rollback_transaction/2 is undefined or private
  lib/cypher_executer.ex:17: CypherExecutor.execute/2

warning: LibGraph.get_vertices/1 is undefined or private
  lib/dist_gdb.ex:654: DistGraphDatabase.query_vertices_with_label/2

Generated ben_ben app
16:42:56.948 [debug] Starting RaRa.Application
16:42:56.953 [debug] Starting RaRa.Supervisor
16:42:56.953 [debug] Initializing RaRa.Supervisor
16:42:56.953 [debug] RaRa.Application started successfully
16:42:56.964 [notice] Can't set short node name!
Please check your configuration

** (ArgumentError) errors were found at the given arguments:

  * 1st argument: the node name is not part of a distributed system

    :erlang.set_cookie(:nonode@nohost, :test_cookie)
    (elixir 1.14.0) lib/code.ex:1245: Code.require_file/2
    (elixir 1.14.0) lib/enum.ex:975: Enum."-each/2-lists^foreach/1-0-"/2
