     warning: clauses with the same name and arity (number of arguments) should be grouped together, "defp generate_fold_cases/2" was previously defined (lib/ben_ben.ex:127)
     │
 164 │   defp generate_fold_cases({:__block__, _meta, cases}, state) do
     │        ~
     │
     └─ lib/ben_ben.ex:164:8

     warning: variable "other" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 364 │           other ->
     │           ~
     │
     └─ lib/ben_ben.ex:364:11: BenBen.process_constructed/2

     warning: function generate_pattern_match/1 is unused
     │
 215 │   defp generate_pattern_match({name, _, args}) when is_list(args) do
     │        ~
     │
     └─ lib/ben_ben.ex:215:8: BenBen (module)

     warning: function extract_bindings/1 is unused
     │
 240 │   defp extract_bindings(args) do
     │        ~
     │
     └─ lib/ben_ben.ex:240:8: BenBen (module)

    warning: variable "id" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 13 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/my_graph.ex:13: MyGraph.sum/1

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 13 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/my_graph.ex:13: MyGraph.sum/1

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 10 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/my_tree.ex:10: MyTree.sum/1

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 26 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/tree_operations.ex:26: TreeOperations.map_tree/2

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 38 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/tree_operations.ex:38: TreeOperations.filter_tree/2

     warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 128 │     fold tree do
     │     ~~~~~~~~~~~~
     │
     └─ lib/examples/tree_operations.ex:128: TreeOperations.collect_values/1

    warning: function merge_with_level_increment/2 is unused
    │
 80 │   defp merge_with_level_increment(left_counts, right_counts) do
    │        ~
    │
    └─ lib/examples/tree_operations.ex:80:8: TreeOperations (module)

    warning: function merge_counts/2 is unused
    │
 75 │   defp merge_counts(left_counts, right_counts) do
    │        ~
    │
    └─ lib/examples/tree_operations.ex:75:8: TreeOperations (module)

Running ExUnit with seed: 276731, max_cases: 48


12:36:41.299 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:BinaryTree]} with block: {:__block__, [], [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]}

12:36:41.299 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:BinaryTree]} with block: {:__block__, [], [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]}

12:36:41.299 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:LinkedList]} with block: {:__block__, [], [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]}

12:36:41.299 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:LinkedList]} with block: {:__block__, [], [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]}

12:36:41.301 [debug] Extracted variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

12:36:41.301 [debug] Extracted variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

12:36:41.301 [debug] Extracted variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

12:36:41.299 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:BinaryTree]} with block: {:__block__, [], [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]}

12:36:41.301 [debug] Extracted variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

12:36:41.301 [debug] Generating constructors for variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

12:36:41.301 [debug] Generating constructors for variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

12:36:41.301 [debug] Extracted variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

12:36:41.301 [debug] Processing variant: {:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}

12:36:41.301 [debug] Generating constructors for variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

12:36:41.301 [debug] Processing variant: {:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}

12:36:41.301 [debug] Processing variant: {:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}

12:36:41.301 [debug] Constructor: :node, meta: [line: 7, column: 5], args: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

12:36:41.301 [debug] Constructor: :cons, meta: [line: 7, column: 5], args: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

12:36:41.301 [debug] Generating constructors for variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

12:36:41.301 [debug] Extracting constructor args from: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

12:36:41.301 [debug] Extracting constructor args from: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

12:36:41.301 [debug] Constructor: :cons, meta: [line: 7, column: 5], args: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

12:36:41.301 [debug] Processing variant: {:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}

12:36:41.301 [debug] Generating constructors for variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

12:36:41.301 [debug] Found value arg: :head

12:36:41.301 [debug] Found recursive arg: :tail

12:36:41.301 [debug] Extracted arg_names: [:head, :tail]

12:36:41.301 [debug] Extracting constructor args from: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

12:36:41.301 [debug] Constructor: :node, meta: [line: 7, column: 5], args: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

12:36:41.301 [debug] Processing variant: {:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}

12:36:41.301 [debug] Found value arg: :val

12:36:41.301 [debug] Generated arg vars: [{:head, [], nil}, {:tail, [], nil}]

12:36:41.301 [debug] Found value arg: :head

12:36:41.301 [debug] Extracting constructor args from: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

12:36:41.301 [debug] Found recursive arg: :left

12:36:41.301 [debug] Found recursive arg: :right

12:36:41.301 [debug] Found value arg: :val

12:36:41.301 [debug] Found recursive arg: :tail

12:36:41.301 [debug] Field pairs: [head: {:head, [], nil}, tail: {:tail, [], nil}]

12:36:41.301 [debug] Extracted arg_names: [:val, :left, :right]

12:36:41.301 [debug] Extracted arg_names: [:head, :tail]

12:36:41.301 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

12:36:41.301 [debug] Processing variant: {:null, [line: 8, column: 5], []}

12:36:41.301 [debug] Found recursive arg: :left

12:36:41.301 [debug] Found recursive arg: :right

12:36:41.301 [debug] Constructor: :null, meta: [line: 8, column: 5], args: []

12:36:41.301 [debug] Generated arg vars: [{:head, [], nil}, {:tail, [], nil}]

12:36:41.301 [debug] Constructor: :node, meta: [line: 7, column: 5], args: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

12:36:41.301 [debug] Field pairs: [head: {:head, [], nil}, tail: {:tail, [], nil}]

12:36:41.302 [debug] Processing variant: {:null, [line: 8, column: 5], []}

12:36:41.301 [debug] Extracting constructor args from: []

12:36:41.302 [debug] Extracted arg_names: []

12:36:41.302 [debug] Constructor: :null, meta: [line: 8, column: 5], args: []

12:36:41.302 [debug] Extracting constructor args from: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

12:36:41.302 [debug] Extracting constructor args from: []

12:36:41.302 [debug] Extracted arg_names: []

12:36:41.301 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

12:36:41.302 [debug] Generated arg vars: []

12:36:41.302 [debug] Found value arg: :val

12:36:41.301 [debug] Extracted arg_names: [:val, :left, :right]

12:36:41.302 [debug] Generated arg vars: []

12:36:41.302 [debug] Processing variant: {:leaf, [line: 8, column: 5], []}

12:36:41.302 [debug] Found recursive arg: :left

12:36:41.302 [debug] Field pairs: []

12:36:41.302 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

12:36:41.302 [debug] Field pairs: []

12:36:41.302 [debug] Found recursive arg: :right

12:36:41.302 [debug] Constructor: :leaf, meta: [line: 8, column: 5], args: []

12:36:41.302 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

12:36:41.302 [debug] Extracting constructor args from: []

12:36:41.302 [debug] Extracted arg_names: [:val, :left, :right]

12:36:41.302 [debug] Processing variant: {:leaf, [line: 8, column: 5], []}

12:36:41.302 [debug] Extracted arg_names: []

12:36:41.302 [debug] Constructor: :leaf, meta: [line: 8, column: 5], args: []

12:36:41.302 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

12:36:41.302 [debug] Generated arg vars: []

12:36:41.302 [debug] Extracting constructor args from: []

12:36:41.302 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

12:36:41.302 [debug] Field pairs: []

12:36:41.302 [debug] Extracted arg_names: []

12:36:41.302 [debug] Generated arg vars: []

12:36:41.302 [debug] Field pairs: []

12:36:41.302 [debug] Processing variant: {:leaf, [line: 8, column: 5], []}

12:36:41.302 [debug] Constructor: :leaf, meta: [line: 8, column: 5], args: []

12:36:41.302 [debug] Extracting constructor args from: []

12:36:41.302 [debug] Extracted arg_names: []

12:36:41.302 [debug] Generated arg vars: []

12:36:41.302 [debug] Field pairs: []
    warning: unused import BenBen
    │
  3 │   import BenBen
    │   ~
    │
    └─ test/my_graph2_test.exs:3:3

    warning: unused import BenBen
    │
  3 │   import BenBen
    │   ~
    │
    └─ test/my_tree_test.exs:3:3

    warning: unused import BenBen
    │
  3 │   import BenBen
    │   ~
    │
    └─ test/my_graph_test.exs:3:3


12:36:41.317 [debug] Fold expression: {:list, [line: 17, column: 14], nil}, opts: [with: 0], cases: [{:->, [line: 18, column: 34], [[{:case, [line: 18, column: 11], [{:cons, [line: 18, column: 16], [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:null, [line: 23, column: 16], []}]}], {0, {:state, [line: 24, column: 17], nil}}]}]

12:36:41.318 [debug] Extracting cases from list: [{:->, [line: 18, column: 34], [[{:case, [line: 18, column: 11], [{:cons, [line: 18, column: 16], [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:null, [line: 23, column: 16], []}]}], {0, {:state, [line: 24, column: 17], nil}}]}]

12:36:41.318 [debug] Bend operation with var: :val, initial: 0

12:36:41.318 [debug] Extracted fold cases: [{:->, [line: 18, column: 34], [[{:case, [line: 18, column: 11], [{:cons, [line: 18, column: 16], [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:null, [line: 23, column: 16], []}]}], {0, {:state, [line: 24, column: 17], nil}}]}]

12:36:41.318 [debug] Generating fold cases: [{:->, [line: 18, column: 34], [[{:case, [line: 18, column: 11], [{:cons, [line: 18, column: 16], [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:null, [line: 23, column: 16], []}]}], {0, {:state, [line: 24, column: 17], nil}}]}]

12:36:41.318 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

12:36:41.318 [debug] Transforming recursive refs in body: {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]} with bindings: [head: true, tail: true], state: 0

12:36:41.318 [debug] Processing recursive reference: {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}

12:36:41.318 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

12:36:41.318 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

12:36:41.318 [debug] Transforming recursive refs in body: {0, {:state, [line: 24, column: 17], nil}} with bindings: [], state: 0

12:36:41.318 [debug] Generated fold cases after transformation: [{:->, [line: 18, column: 34], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :null]}], {0, {:state, [line: 24, column: 17], nil}}]}]

12:36:41.318 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 17, column: 14], nil}, 0, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 18, column: 34], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :null]}], {0, {:state, [line: 24, column: 17], nil}}]}]]]}]}]}]}
    warning: variable "new_state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 19 │             {tail_value, new_state} = recu(tail)
    │                          ~
    │
    └─ test/fold_with_state_test.exs:19:26: FoldWithStateTest."test fold operations fold with state"/1


12:36:41.319 [debug] Fold expression: {:tree, [line: 21, column: 14], nil}, opts: [], cases: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

12:36:41.319 [debug] Extracting cases from list: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

12:36:41.320 [debug] Extracted fold cases: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

12:36:41.320 [debug] Generating fold cases: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

12:36:41.320 [debug] Generated pattern: {:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

12:36:41.320 [debug] Bend operation with var: :val, initial: 1

12:36:41.320 [debug] Transforming recursive refs in body: {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]} with bindings: [val: true, left: true, right: true], state: nil

12:36:41.320 [debug] Processing recursive reference: {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}

12:36:41.320 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

12:36:41.320 [debug] Processing recursive reference: {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}

12:36:41.320 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

12:36:41.320 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

12:36:41.320 [debug] Transforming recursive refs in body: 0 with bindings: [], state: nil

12:36:41.320 [debug] Generated fold cases after transformation: [{:->, [line: 22, column: 40], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :leaf]}], 0]}]

12:36:41.320 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 21, column: 14], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 22, column: 40], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :leaf]}], 0]}]]]}]}]}]}
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 21 │         fold tree do
    │         ~~~~~~~~~~~~
    │
    └─ test/sum_of_tree_test.exs:21: SumOfTreeTest."test fold operations basic sum of tree"/1


12:36:41.322 [debug] Fork operation with expression: {:+, [line: 16, column: 43], [{:val, [line: 16, column: 39], nil}, 1]}

12:36:41.322 [debug] Fork operation with expression: {:+, [line: 16, column: 43], [{:val, [line: 16, column: 39], nil}, 1]}

12:36:41.322 [debug] Fork operation with expression: {:+, [line: 16, column: 58], [{:val, [line: 16, column: 54], nil}, 1]}
========
%{
  id: 1,
  value: 10,
  edges: %{variant: :edge, weight: 5, to_id: 2},
  variant: :vertex
}
========

12:36:41.365 [debug] do_fold called with data: %{id: 1, value: 10, edges: %{variant: :edge, weight: 5, to_id: 2}, variant: :vertex}, variant_type: :vertex, state: nil

12:36:41.365 [debug] Processing recursive fields of: %{id: 1, value: 10, edges: %{variant: :edge, weight: 5, to_id: 2}, variant: :vertex}
.
12:36:41.365 [debug] do_fold called with data: %{variant: :edge, weight: 5, to_id: 2}, variant_type: :edge, state: nil

12:36:41.365 [debug] Processing recursive fields of: %{variant: :edge, weight: 5, to_id: 2}

12:36:41.365 [debug] Recursive field result for edges: 5

12:36:41.365 [debug] do_fold called with non-variant data: 5

12:36:41.366 [debug] Bend initial value: 0

12:36:41.366 [debug] Executing bend with initial: 0

12:36:41.366 [debug] Executing fun with value: 0

12:36:41.366 [debug] Evaluating bend block with value: 0

12:36:41.367 [debug] Block returned: %{left: {:fork, 1}, right: {:fork, 1}, val: 0, variant: :node}

12:36:41.367 [debug] Fun returned result: %{left: {:fork, 1}, right: {:fork, 1}, val: 0, variant: :node}

12:36:41.367 [debug] Processing constructed value: %{left: {:fork, 1}, right: {:fork, 1}, val: 0, variant: :node}

12:36:41.367 [debug] Executing bend with initial: 1

12:36:41.367 [debug] Executing fun with value: 1

12:36:41.367 [debug] Evaluating bend block with value: 1

12:36:41.367 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}

12:36:41.367 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}

12:36:41.367 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}

12:36:41.367 [debug] Executing bend with initial: 2

12:36:41.367 [debug] Executing fun with value: 2

12:36:41.367 [debug] Evaluating bend block with value: 2

12:36:41.367 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}

12:36:41.367 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}

12:36:41.367 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}

12:36:41.367 [debug] Executing bend with initial: 3

12:36:41.367 [debug] Executing fun with value: 3

12:36:41.367 [debug] Evaluating bend block with value: 3

12:36:41.367 [debug] Block returned: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}

12:36:41.367 [debug] Fun returned result: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}

12:36:41.367 [debug] Processing constructed value: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}

12:36:41.367 [debug] Executing bend with initial: 4

12:36:41.367 [debug] Executing fun with value: 4

12:36:41.367 [debug] Evaluating bend block with value: 4

12:36:41.367 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}

12:36:41.367 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}

12:36:41.367 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}

12:36:41.367 [debug] Executing bend with initial: 5

12:36:41.367 [debug] Executing fun with value: 5

12:36:41.367 [debug] Evaluating bend block with value: 5

12:36:41.367 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}

12:36:41.367 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}

12:36:41.367 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}

12:36:41.367 [debug] Executing bend with initial: 6

12:36:41.367 [debug] Executing fun with value: 6

12:36:41.367 [debug] Evaluating bend block with value: 6

12:36:41.367 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}

12:36:41.367 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}

12:36:41.367 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}

12:36:41.367 [debug] Executing bend with initial: 7

12:36:41.367 [debug] Executing fun with value: 7

12:36:41.367 [debug] Evaluating bend block with value: 7

12:36:41.367 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

12:36:41.367 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

12:36:41.367 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

12:36:41.367 [debug] Executing bend with initial: 8

12:36:41.367 [debug] Executing fun with value: 8

12:36:41.367 [debug] Evaluating bend block with value: 8

12:36:41.367 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.367 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.367 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.367 [debug] Executing bend with initial: 9

12:36:41.367 [debug] Executing fun with value: 9

12:36:41.367 [debug] Evaluating bend block with value: 9

12:36:41.367 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.367 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.368 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.368 [debug] Executing bend with initial: 10

12:36:41.368 [debug] Executing fun with value: 10

12:36:41.368 [debug] Evaluating bend block with value: 10

12:36:41.368 [debug] Block returned: %{variant: :leaf}

12:36:41.368 [debug] Fun returned result: %{variant: :leaf}

12:36:41.368 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.368 [debug] do_bend final result: %{variant: :leaf}

12:36:41.368 [debug] Executing bend with initial: 10

12:36:41.368 [debug] Executing fun with value: 10

12:36:41.368 [debug] Evaluating bend block with value: 10

12:36:41.368 [debug] Block returned: %{variant: :leaf}

12:36:41.368 [debug] Fun returned result: %{variant: :leaf}

12:36:41.368 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.368 [debug] do_bend final result: %{variant: :leaf}

12:36:41.368 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

12:36:41.368 [debug] Executing bend with initial: 9

12:36:41.368 [debug] Executing fun with value: 9

12:36:41.368 [debug] Evaluating bend block with value: 9

12:36:41.368 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.368 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.368 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.368 [debug] Executing bend with initial: 10

12:36:41.368 [debug] Executing fun with value: 10

12:36:41.368 [debug] Evaluating bend block with value: 10

12:36:41.368 [debug] Block returned: %{variant: :leaf}

12:36:41.368 [debug] Fun returned result: %{variant: :leaf}

12:36:41.368 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.368 [debug] do_bend final result: %{variant: :leaf}

12:36:41.368 [debug] Executing bend with initial: 10

12:36:41.368 [debug] Executing fun with value: 10

12:36:41.368 [debug] Evaluating bend block with value: 10

12:36:41.368 [debug] Block returned: %{variant: :leaf}

12:36:41.368 [debug] Fun returned result: %{variant: :leaf}

12:36:41.368 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.368 [debug] do_bend final result: %{variant: :leaf}

12:36:41.368 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

12:36:41.368 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}

12:36:41.368 [debug] Executing bend with initial: 8

12:36:41.368 [debug] Executing fun with value: 8

12:36:41.368 [debug] Evaluating bend block with value: 8

12:36:41.368 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.368 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.368 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.368 [debug] Executing bend with initial: 9

12:36:41.368 [debug] Executing fun with value: 9

12:36:41.368 [debug] Evaluating bend block with value: 9

12:36:41.368 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.368 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.368 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.368 [debug] Executing bend with initial: 10

12:36:41.368 [debug] Executing fun with value: 10

12:36:41.368 [debug] Evaluating bend block with value: 10

12:36:41.368 [debug] Block returned: %{variant: :leaf}

12:36:41.368 [debug] Fun returned result: %{variant: :leaf}

12:36:41.368 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.368 [debug] do_bend final result: %{variant: :leaf}

12:36:41.369 [debug] Executing bend with initial: 10

12:36:41.369 [debug] Executing fun with value: 10

12:36:41.369 [debug] Evaluating bend block with value: 10

12:36:41.369 [debug] Block returned: %{variant: :leaf}

12:36:41.369 [debug] Fun returned result: %{variant: :leaf}

12:36:41.369 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.369 [debug] do_bend final result: %{variant: :leaf}

12:36:41.369 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

12:36:41.369 [debug] Executing bend with initial: 9

12:36:41.369 [debug] Executing fun with value: 9

12:36:41.369 [debug] Evaluating bend block with value: 9

12:36:41.369 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.369 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.369 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.369 [debug] Executing bend with initial: 10

12:36:41.369 [debug] Executing fun with value: 10

12:36:41.369 [debug] Evaluating bend block with value: 10

12:36:41.369 [debug] Block returned: %{variant: :leaf}

12:36:41.369 [debug] Fun returned result: %{variant: :leaf}

12:36:41.369 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.369 [debug] do_bend final result: %{variant: :leaf}

12:36:41.369 [debug] Executing bend with initial: 10

12:36:41.369 [debug] Executing fun with value: 10

12:36:41.369 [debug] Evaluating bend block with value: 10

12:36:41.369 [debug] Block returned: %{variant: :leaf}

12:36:41.369 [debug] Fun returned result: %{variant: :leaf}

12:36:41.369 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.369 [debug] do_bend final result: %{variant: :leaf}

12:36:41.369 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

12:36:41.369 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}

12:36:41.369 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}

12:36:41.369 [debug] Executing bend with initial: 7

12:36:41.369 [debug] Executing fun with value: 7

12:36:41.369 [debug] Evaluating bend block with value: 7

12:36:41.369 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

12:36:41.369 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

12:36:41.369 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

12:36:41.369 [debug] Executing bend with initial: 8

12:36:41.369 [debug] Executing fun with value: 8

12:36:41.369 [debug] Evaluating bend block with value: 8

12:36:41.369 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.369 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.369 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.369 [debug] Executing bend with initial: 9

12:36:41.369 [debug] Executing fun with value: 9

12:36:41.369 [debug] Evaluating bend block with value: 9

12:36:41.369 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.369 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.369 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.369 [debug] Executing bend with initial: 10

12:36:41.369 [debug] Executing fun with value: 10

12:36:41.369 [debug] Evaluating bend block with value: 10

12:36:41.369 [debug] Block returned: %{variant: :leaf}

12:36:41.369 [debug] Fun returned result: %{variant: :leaf}

12:36:41.369 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.369 [debug] do_bend final result: %{variant: :leaf}

12:36:41.369 [debug] Executing bend with initial: 10

12:36:41.369 [debug] Executing fun with value: 10

12:36:41.369 [debug] Evaluating bend block with value: 10

12:36:41.369 [debug] Block returned: %{variant: :leaf}

12:36:41.369 [debug] Fun returned result: %{variant: :leaf}

12:36:41.369 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.369 [debug] do_bend final result: %{variant: :leaf}

12:36:41.369 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

12:36:41.369 [debug] Executing bend with initial: 9

12:36:41.369 [debug] Executing fun with value: 9

12:36:41.369 [debug] Evaluating bend block with value: 9

12:36:41.369 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.369 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.369 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.369 [debug] Executing bend with initial: 10

12:36:41.369 [debug] Executing fun with value: 10

12:36:41.369 [debug] Evaluating bend block with value: 10

12:36:41.369 [debug] Block returned: %{variant: :leaf}

12:36:41.369 [debug] Fun returned result: %{variant: :leaf}

12:36:41.369 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.369 [debug] do_bend final result: %{variant: :leaf}

12:36:41.370 [debug] Executing bend with initial: 10

12:36:41.370 [debug] Executing fun with value: 10

12:36:41.370 [debug] Evaluating bend block with value: 10

12:36:41.370 [debug] Block returned: %{variant: :leaf}

12:36:41.370 [debug] Fun returned result: %{variant: :leaf}

12:36:41.370 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.370 [debug] do_bend final result: %{variant: :leaf}

12:36:41.370 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

12:36:41.370 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}

12:36:41.370 [debug] Executing bend with initial: 8

12:36:41.370 [debug] Executing fun with value: 8

12:36:41.370 [debug] Evaluating bend block with value: 8

12:36:41.370 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.370 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.370 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.370 [debug] Executing bend with initial: 9

12:36:41.370 [debug] Executing fun with value: 9

12:36:41.370 [debug] Evaluating bend block with value: 9

12:36:41.370 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.370 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.370 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.370 [debug] Executing bend with initial: 10

12:36:41.370 [debug] Executing fun with value: 10

12:36:41.370 [debug] Evaluating bend block with value: 10

12:36:41.370 [debug] Block returned: %{variant: :leaf}

12:36:41.370 [debug] Fun returned result: %{variant: :leaf}

12:36:41.370 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.370 [debug] do_bend final result: %{variant: :leaf}

12:36:41.370 [debug] Executing bend with initial: 10

12:36:41.370 [debug] Executing fun with value: 10

12:36:41.370 [debug] Evaluating bend block with value: 10

12:36:41.370 [debug] Block returned: %{variant: :leaf}

12:36:41.370 [debug] Fun returned result: %{variant: :leaf}

12:36:41.370 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.370 [debug] do_bend final result: %{variant: :leaf}

12:36:41.370 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

12:36:41.370 [debug] Executing bend with initial: 9

12:36:41.370 [debug] Executing fun with value: 9

12:36:41.370 [debug] Evaluating bend block with value: 9

12:36:41.370 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.370 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.370 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.370 [debug] Executing bend with initial: 10

12:36:41.370 [debug] Executing fun with value: 10

12:36:41.370 [debug] Evaluating bend block with value: 10

12:36:41.370 [debug] Block returned: %{variant: :leaf}

12:36:41.370 [debug] Fun returned result: %{variant: :leaf}

12:36:41.370 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.370 [debug] do_bend final result: %{variant: :leaf}

12:36:41.370 [debug] Executing bend with initial: 10

12:36:41.370 [debug] Executing fun with value: 10

12:36:41.370 [debug] Evaluating bend block with value: 10

12:36:41.370 [debug] Block returned: %{variant: :leaf}

12:36:41.370 [debug] Fun returned result: %{variant: :leaf}

12:36:41.370 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.370 [debug] do_bend final result: %{variant: :leaf}

12:36:41.370 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

12:36:41.370 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}

12:36:41.370 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}

12:36:41.370 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}

12:36:41.370 [debug] Executing bend with initial: 6

12:36:41.370 [debug] Executing fun with value: 6

12:36:41.370 [debug] Evaluating bend block with value: 6

12:36:41.370 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}

12:36:41.370 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}

12:36:41.370 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}

12:36:41.370 [debug] Executing bend with initial: 7

12:36:41.370 [debug] Executing fun with value: 7

12:36:41.370 [debug] Evaluating bend block with value: 7

12:36:41.370 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

12:36:41.371 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

12:36:41.371 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

12:36:41.371 [debug] Executing bend with initial: 8

12:36:41.371 [debug] Executing fun with value: 8

12:36:41.371 [debug] Evaluating bend block with value: 8

12:36:41.371 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.371 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.371 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.371 [debug] Executing bend with initial: 9

12:36:41.371 [debug] Executing fun with value: 9

12:36:41.371 [debug] Evaluating bend block with value: 9

12:36:41.371 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.371 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.371 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.371 [debug] Executing bend with initial: 10

12:36:41.371 [debug] Executing fun with value: 10

12:36:41.371 [debug] Evaluating bend block with value: 10

12:36:41.371 [debug] Block returned: %{variant: :leaf}

12:36:41.371 [debug] Fun returned result: %{variant: :leaf}

12:36:41.371 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.371 [debug] do_bend final result: %{variant: :leaf}

12:36:41.371 [debug] Executing bend with initial: 10

12:36:41.371 [debug] Executing fun with value: 10

12:36:41.371 [debug] Evaluating bend block with value: 10

12:36:41.371 [debug] Block returned: %{variant: :leaf}

12:36:41.371 [debug] Fun returned result: %{variant: :leaf}

12:36:41.371 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.371 [debug] do_bend final result: %{variant: :leaf}

12:36:41.371 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

12:36:41.371 [debug] Executing bend with initial: 9

12:36:41.371 [debug] Executing fun with value: 9

12:36:41.371 [debug] Evaluating bend block with value: 9

12:36:41.371 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.371 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.371 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.371 [debug] Executing bend with initial: 10

12:36:41.371 [debug] Executing fun with value: 10

12:36:41.371 [debug] Evaluating bend block with value: 10

12:36:41.371 [debug] Block returned: %{variant: :leaf}

12:36:41.371 [debug] Fun returned result: %{variant: :leaf}

12:36:41.371 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.371 [debug] do_bend final result: %{variant: :leaf}

12:36:41.371 [debug] Executing bend with initial: 10

12:36:41.371 [debug] Executing fun with value: 10

12:36:41.371 [debug] Evaluating bend block with value: 10

12:36:41.371 [debug] Block returned: %{variant: :leaf}

12:36:41.371 [debug] Fun returned result: %{variant: :leaf}

12:36:41.371 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.371 [debug] do_bend final result: %{variant: :leaf}

12:36:41.371 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

12:36:41.371 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}

12:36:41.371 [debug] Executing bend with initial: 8

12:36:41.371 [debug] Executing fun with value: 8

12:36:41.371 [debug] Evaluating bend block with value: 8

12:36:41.371 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.371 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.371 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

12:36:41.371 [debug] Executing bend with initial: 9

12:36:41.371 [debug] Executing fun with value: 9

12:36:41.371 [debug] Evaluating bend block with value: 9

12:36:41.371 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.371 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.371 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.371 [debug] Executing bend with initial: 10

12:36:41.371 [debug] Executing fun with value: 10

12:36:41.371 [debug] Evaluating bend block with value: 10

12:36:41.371 [debug] Block returned: %{variant: :leaf}

12:36:41.371 [debug] Fun returned result: %{variant: :leaf}

12:36:41.371 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.371 [debug] do_bend final result: %{variant: :leaf}

12:36:41.371 [debug] Executing bend with initial: 10

12:36:41.371 [debug] Executing fun with value: 10

12:36:41.371 [debug] Evaluating bend block with value: 10

12:36:41.371 [debug] Block returned: %{variant: :leaf}

12:36:41.371 [debug] Fun returned result: %{variant: :leaf}

12:36:41.371 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.371 [debug] do_bend final result: %{variant: :leaf}

12:36:41.371 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

12:36:41.371 [debug] Executing bend with initial: 9

12:36:41.371 [debug] Executing fun with value: 9

12:36:41.371 [debug] Evaluating bend block with value: 9

12:36:41.371 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.371 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.371 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

12:36:41.371 [debug] Executing bend with initial: 10

12:36:41.371 [debug] Executing fun with value: 10

12:36:41.371 [debug] Evaluating bend block with value: 10

12:36:41.371 [debug] Block returned: %{variant: :leaf}

12:36:41.371 [debug] Fun returned result: %{variant: :leaf}

12:36:41.371 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.371 [debug] do_bend final result: %{variant: :leaf}

12:36:41.371 [debug] Executing bend with initial: 10

12:36:41.371 [debug] Executing fun with value: 10

12:36:41.371 [debug] Evaluating bend block with value: 10

12:36:41.371 [debug] Block returned: %{variant: :leaf}

12:36:41.371 [debug] Fun returned result: %{variant: :leaf}

12:36:41.371 [debug] Processing constructed value: %{variant: :leaf}

12:36:41.372 [debug] do_bend final result: %{variant: :leaf}

12:36:41.372 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

12:36:41.372 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}

12:36:41.372 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}

12:36:41.372 [debug] Executing bend with initial: 7

12:36:41.372 [debug] Executing fun with value: 7

12:36:41.372 [debug] Evaluating bend block with value: 7

12:36:41.372 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

12:36:41.372 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

12:36:41.372 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

12:36:41.372 [debug] Executing bend with initial: 8

12:36:41.372 [debug] Executing fun with value: 8

12:36:41.372 [debug] Evaluating bend block with value: 8

12:36:41.372 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
.12
%{
  id: 1,
  value: 10,
  edges: %{variant: :edge, weight: 2, to_id: 2},
  variant: :vertex
}
...........
Finished in 0.4 seconds (0.00s async, 0.4s sync)
13 tests, 0 failures
