Excluding tags: [:skip]

warning: unused import Prototypal
  test/examples/prototypal_test.exs:3

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  test/examples/graffiti_test.exs:52: GraffitiTest."test basic transaction operations successful transaction"/1

warning: variable "reason" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/examples/graffiti_test.exs:75: GraffitiTest."test basic transaction operations transaction rollback"/1

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  test/examples/graffiti_test.exs:85: GraffitiTest."test basic transaction operations schema validation"/1

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  test/examples/graffiti_test.exs:143: GraffitiTest."test advanced transaction operations vertex operations are applied before edge validation"/1

warning: function join_and_verify/4 is unused
  test/dist_gdb/dist_graph_database_test.exs:107

warning: variable "node1" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/cypher/spaceship_queries_test.exs:10: SpaceshipQueriesTest.__ex_unit_setup_0/1

warning: default values for the optional arguments in join_cluster_with_retry/4 are never used
  test/dist_gdb/dist_graph_database_test.exs:174

warning: variable "node2" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/cypher/spaceship_queries_test.exs:11: SpaceshipQueriesTest.__ex_unit_setup_0/1

warning: function wait_for_cluster_size/4 is unused
  test/dist_gdb/dist_graph_database_test.exs:80

warning: variable "node3" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/cypher/spaceship_queries_test.exs:12: SpaceshipQueriesTest.__ex_unit_setup_0/1

warning: variable "created_ships" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/cypher/spaceship_queries_test.exs:47: SpaceshipQueriesTest."test SpaceshipQueries creates and retrieves spaceships"/1

warning: variable "ship_id" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/cypher/spaceship_queries_test.exs:75: SpaceshipQueriesTest."test SpaceshipQueries creates spaceship with properties"/1

11:56:00.872 [debug] Defining type {:__aliases__, [line: 6], [:LinkedList]} with block: {:__block__, [], [{:cons, [line: 7], [{:head, [line: 7], nil}, {:recu, [line: 7], [{:tail, [line: 7], nil}]}]}, {:null, [line: 8], []}]}
11:56:00.872 [debug] Defining type {:__aliases__, [line: 6], [:BinaryTree]} with block: {:__block__, [], [{:node, [line: 7], [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]}, {:leaf, [line: 8], []}]}
11:56:00.891 [debug] Extracted variants: [{:cons, [line: 7], [{:head, [line: 7], nil}, {:recu, [line: 7], [{:tail, [line: 7], nil}]}]}, {:null, [line: 8], []}]
11:56:00.891 [debug] Extracted variants: [{:node, [line: 7], [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]}, {:leaf, [line: 8], []}]
11:56:00.872 [debug] Defining type {:__aliases__, [line: 6], [:LinkedList]} with block: {:__block__, [], [{:cons, [line: 7], [{:head, [line: 7], nil}, {:recu, [line: 7], [{:tail, [line: 7], nil}]}]}, {:null, [line: 8], []}]}
11:56:00.892 [debug] Extracted variants: [{:cons, [line: 7], [{:head, [line: 7], nil}, {:recu, [line: 7], [{:tail, [line: 7], nil}]}]}, {:null, [line: 8], []}]
11:56:00.872 [debug] Defining type {:__aliases__, [line: 6], [:BinaryTree]} with block: {:__block__, [], [{:node, [line: 7], [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]}, {:leaf, [line: 8], []}]}
11:56:00.892 [debug] Generating constructors for variants: [{:node, [line: 7], [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]}, {:leaf, [line: 8], []}]
11:56:00.892 [debug] Extracted variants: [{:node, [line: 7], [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]}, {:leaf, [line: 8], []}]
11:56:00.892 [debug] Generating constructors for variants: [{:cons, [line: 7], [{:head, [line: 7], nil}, {:recu, [line: 7], [{:tail, [line: 7], nil}]}]}, {:null, [line: 8], []}]
11:56:00.892 [debug] Processing variant: {:node, [line: 7], [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]}
11:56:00.892 [debug] Processing variant: {:cons, [line: 7], [{:head, [line: 7], nil}, {:recu, [line: 7], [{:tail, [line: 7], nil}]}]}
11:56:00.892 [debug] Constructor: :node, meta: [line: 7], args: [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]
11:56:00.892 [debug] Constructor: :cons, meta: [line: 7], args: [{:head, [line: 7], nil}, {:recu, [line: 7], [{:tail, [line: 7], nil}]}]
11:56:00.892 [debug] Generating constructors for variants: [{:cons, [line: 7], [{:head, [line: 7], nil}, {:recu, [line: 7], [{:tail, [line: 7], nil}]}]}, {:null, [line: 8], []}]
11:56:00.892 [debug] Extracting constructor args from: [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]
11:56:00.892 [debug] Found value arg: :val
11:56:00.892 [debug] Found recursive arg: :left
11:56:00.892 [debug] Found recursive arg: :right
11:56:00.892 [debug] Generating constructors for variants: [{:node, [line: 7], [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]}, {:leaf, [line: 8], []}]
11:56:00.892 [debug] Processing variant: {:cons, [line: 7], [{:head, [line: 7], nil}, {:recu, [line: 7], [{:tail, [line: 7], nil}]}]}
11:56:00.892 [debug] Extracting constructor args from: [{:head, [line: 7], nil}, {:recu, [line: 7], [{:tail, [line: 7], nil}]}]
11:56:00.872 [debug] Defining type {:__aliases__, [line: 6], [:BinaryTree]} with block: {:__block__, [], [{:node, [line: 7], [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]}, {:leaf, [line: 8], []}]}
11:56:00.892 [debug] Extracted arg_names: [:val, :left, :right]
11:56:00.892 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]
11:56:00.892 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]
11:56:00.892 [debug] Processing variant: {:leaf, [line: 8], []}
11:56:00.892 [debug] Constructor: :leaf, meta: [line: 8], args: []
11:56:00.892 [debug] Constructor: :cons, meta: [line: 7], args: [{:head, [line: 7], nil}, {:recu, [line: 7], [{:tail, [line: 7], nil}]}]
11:56:00.892 [debug] Extracting constructor args from: []
11:56:00.892 [debug] Extracted variants: [{:node, [line: 7], [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]}, {:leaf, [line: 8], []}]
11:56:00.892 [debug] Found value arg: :head
11:56:00.892 [debug] Found recursive arg: :tail
11:56:00.892 [debug] Extracting constructor args from: [{:head, [line: 7], nil}, {:recu, [line: 7], [{:tail, [line: 7], nil}]}]
11:56:00.892 [debug] Extracted arg_names: [:head, :tail]
11:56:00.892 [debug] Found value arg: :head
11:56:00.892 [debug] Generated arg vars: [{:head, [], nil}, {:tail, [], nil}]
11:56:00.892 [debug] Processing variant: {:node, [line: 7], [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]}
11:56:00.892 [debug] Found recursive arg: :tail
11:56:00.892 [debug] Field pairs: [head: {:head, [], nil}, tail: {:tail, [], nil}]
11:56:00.892 [debug] Processing variant: {:null, [line: 8], []}
11:56:00.892 [debug] Extracted arg_names: [:head, :tail]
11:56:00.892 [debug] Generated arg vars: [{:head, [], nil}, {:tail, [], nil}]
11:56:00.892 [debug] Generating constructors for variants: [{:node, [line: 7], [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]}, {:leaf, [line: 8], []}]
11:56:00.892 [debug] Field pairs: [head: {:head, [], nil}, tail: {:tail, [], nil}]
11:56:00.892 [debug] Processing variant: {:null, [line: 8], []}
11:56:00.892 [debug] Constructor: :null, meta: [line: 8], args: []
11:56:00.892 [debug] Constructor: :null, meta: [line: 8], args: []
11:56:00.892 [debug] Constructor: :node, meta: [line: 7], args: [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]
11:56:00.892 [debug] Extracting constructor args from: []
11:56:00.892 [debug] Processing variant: {:node, [line: 7], [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]}
11:56:00.892 [debug] Extracting constructor args from: []
11:56:00.892 [debug] Extracted arg_names: []
11:56:00.892 [debug] Extracted arg_names: []
11:56:00.892 [debug] Extracting constructor args from: [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]
11:56:00.892 [debug] Generated arg vars: []
11:56:00.892 [debug] Extracted arg_names: []
11:56:00.892 [debug] Constructor: :node, meta: [line: 7], args: [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]
11:56:00.892 [debug] Field pairs: []
11:56:00.892 [debug] Generated arg vars: []
11:56:00.892 [debug] Found value arg: :val
11:56:00.892 [debug] Field pairs: []
11:56:00.892 [debug] Found recursive arg: :left
11:56:00.893 [debug] Found recursive arg: :right
11:56:00.893 [debug] Extracting constructor args from: [{:val, [line: 7], nil}, {:recu, [line: 7], [{:left, [line: 7], nil}]}, {:recu, [line: 7], [{:right, [line: 7], nil}]}]
11:56:00.893 [debug] Found value arg: :val
11:56:00.893 [debug] Found recursive arg: :left
11:56:00.893 [debug] Found recursive arg: :right
11:56:00.893 [debug] Extracted arg_names: [:val, :left, :right]
11:56:00.893 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]
11:56:00.893 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]
11:56:00.893 [debug] Processing variant: {:leaf, [line: 8], []}
11:56:00.893 [debug] Constructor: :leaf, meta: [line: 8], args: []
11:56:00.893 [debug] Extracting constructor args from: []
11:56:00.893 [debug] Generated arg vars: []
11:56:00.893 [debug] Extracted arg_names: []
11:56:00.893 [debug] Field pairs: []
11:56:00.893 [debug] Generated arg vars: []
11:56:00.893 [debug] Field pairs: []
11:56:00.893 [debug] Extracted arg_names: [:val, :left, :right]
11:56:00.893 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]
11:56:00.893 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]
11:56:00.893 [debug] Processing variant: {:leaf, [line: 8], []}
11:56:00.893 [debug] Constructor: :leaf, meta: [line: 8], args: []
11:56:00.893 [debug] Extracting constructor args from: []
11:56:00.893 [debug] Extracted arg_names: []
11:56:00.893 [debug] Generated arg vars: []
11:56:00.893 [debug] Field pairs: []
..11:56:00.946 [debug] Fold expression: {:list, [line: 17], nil}, opts: [with: 0], cases: [{:->, [line: 18], [[{:case, [line: 18], [{:cons, [line: 18], [{:head, [line: 18], nil}, {:tail, [line: 18], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19], [{{:tail_value, [line: 19], nil}, {:new_state, [line: 19], nil}}, {:recu, [line: 19], [{:tail, [line: 19], nil}]}]}, {:=, [line: 20], [{:new_sum, [line: 20], nil}, {:+, [line: 20], [{:head, [line: 20], nil}, {:tail_value, [line: 20], nil}]}]}, {{:head, [line: 21], nil}, {:new_sum, [line: 21], nil}}]}]}, {:->, [line: 23], [[{:case, [line: 23], [{:null, [line: 23], []}]}], {0, {:state, [line: 24], nil}}]}]
11:56:00.947 [debug] Extracting cases from list: [{:->, [line: 18], [[{:case, [line: 18], [{:cons, [line: 18], [{:head, [line: 18], nil}, {:tail, [line: 18], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19], [{{:tail_value, [line: 19], nil}, {:new_state, [line: 19], nil}}, {:recu, [line: 19], [{:tail, [line: 19], nil}]}]}, {:=, [line: 20], [{:new_sum, [line: 20], nil}, {:+, [line: 20], [{:head, [line: 20], nil}, {:tail_value, [line: 20], nil}]}]}, {{:head, [line: 21], nil}, {:new_sum, [line: 21], nil}}]}]}, {:->, [line: 23], [[{:case, [line: 23], [{:null, [line: 23], []}]}], {0, {:state, [line: 24], nil}}]}]
11:56:00.947 [debug] Extracted fold cases: [{:->, [line: 18], [[{:case, [line: 18], [{:cons, [line: 18], [{:head, [line: 18], nil}, {:tail, [line: 18], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19], [{{:tail_value, [line: 19], nil}, {:new_state, [line: 19], nil}}, {:recu, [line: 19], [{:tail, [line: 19], nil}]}]}, {:=, [line: 20], [{:new_sum, [line: 20], nil}, {:+, [line: 20], [{:head, [line: 20], nil}, {:tail_value, [line: 20], nil}]}]}, {{:head, [line: 21], nil}, {:new_sum, [line: 21], nil}}]}]}, {:->, [line: 23], [[{:case, [line: 23], [{:null, [line: 23], []}]}], {0, {:state, [line: 24], nil}}]}]
11:56:00.947 [debug] Generating fold cases: [{:->, [line: 18], [[{:case, [line: 18], [{:cons, [line: 18], [{:head, [line: 18], nil}, {:tail, [line: 18], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19], [{{:tail_value, [line: 19], nil}, {:new_state, [line: 19], nil}}, {:recu, [line: 19], [{:tail, [line: 19], nil}]}]}, {:=, [line: 20], [{:new_sum, [line: 20], nil}, {:+, [line: 20], [{:head, [line: 20], nil}, {:tail_value, [line: 20], nil}]}]}, {{:head, [line: 21], nil}, {:new_sum, [line: 21], nil}}]}]}, {:->, [line: 23], [[{:case, [line: 23], [{:null, [line: 23], []}]}], {0, {:state, [line: 24], nil}}]}]
11:56:00.947 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons
11:56:00.947 [debug] Transforming recursive refs:
Body: {:__block__, [line: 11], [{:=, [line: 19], [{{:tail_value, [line: 19], nil}, {:new_state, [line: 19], nil}}, {:recu, [line: 19], [{:tail, [line: 19], nil}]}]}, {:=, [line: 20], [{:new_sum, [line: 20], nil}, {:+, [line: 20], [{:head, [line: 20], nil}, {:tail_value, [line: 20], nil}]}]}, {{:head, [line: 21], nil}, {:new_sum, [line: 21], nil}}]}
Bindings: [head: true, tail: true]
State: 0

11:56:00.947 [debug] Processing recursive reference: {:recu, [line: 19], [{:tail, [line: 19], nil}]}
11:56:00.947 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}
11:56:00.947 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null
11:56:00.947 [debug] Transforming recursive refs:
Body: {0, {:state, [line: 24], nil}}
Bindings: []
State: 0

11:56:00.947 [debug] Generated fold cases after transformation: [{:->, [line: 18], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [line: 11], [{:=, [line: 19], [{{:tail_value, [line: 19], nil}, {:new_state, [line: 19], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 20], [{:new_sum, [line: 20], nil}, {:+, [line: 20], [{:head, [line: 20], nil}, {:tail_value, [line: 20], nil}]}]}, {{:head, [line: 21], nil}, {:new_sum, [line: 21], nil}}]}]}, {:->, [line: 23], [[{:%{}, [], [variant: :null]}], {0, {:state, [line: 24], nil}}]}]
11:56:00.948 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 17], nil}, 0, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 18], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [line: 11], [{:=, [line: 19], [{{:tail_value, [line: 19], nil}, {:new_state, [line: 19], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 20], [{:new_sum, [line: 20], nil}, {:+, [line: 20], [{:head, [line: 20], nil}, {:tail_value, [line: 20], nil}]}]}, {{:head, [line: 21], nil}, {:new_sum, [line: 21], nil}}]}]}, {:->, [line: 23], [[{:%{}, [], [variant: :null]}], {0, {:state, [line: 24], nil}}]}]]]}]}]}]}
warning: variable "new_state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/ben_ben/fold_with_state_test.exs:19: FoldWithStateTest."test fold operations fold with state"/1

11:56:00.949 [debug] Bend operation with var: :val, initial: 0
11:56:00.950 [debug] Fork operation with expression: {:+, [line: 16], [{:val, [line: 16], nil}, 1]}
11:56:00.950 [debug] Fork operation with expression: {:+, [line: 16], [{:val, [line: 16], nil}, 1]}
11:56:00.952 [debug] Fold expression: {:tree, [line: 21], nil}, opts: [], cases: [{:->, [line: 22], [[{:case, [line: 22], [{:node, [line: 22], [{:val, [line: 22], nil}, {:left, [line: 22], nil}, {:right, [line: 22], nil}]}]}], {:+, [line: 22], [{:+, [line: 22], [{:val, [line: 22], nil}, {:recu, [line: 22], [{:left, [line: 22], nil}]}]}, {:recu, [line: 22], [{:right, [line: 22], nil}]}]}]}, {:->, [line: 23], [[{:case, [line: 23], [{:leaf, [line: 23], []}]}], 0]}]
11:56:00.952 [debug] Extracting cases from list: [{:->, [line: 22], [[{:case, [line: 22], [{:node, [line: 22], [{:val, [line: 22], nil}, {:left, [line: 22], nil}, {:right, [line: 22], nil}]}]}], {:+, [line: 22], [{:+, [line: 22], [{:val, [line: 22], nil}, {:recu, [line: 22], [{:left, [line: 22], nil}]}]}, {:recu, [line: 22], [{:right, [line: 22], nil}]}]}]}, {:->, [line: 23], [[{:case, [line: 23], [{:leaf, [line: 23], []}]}], 0]}]
11:56:00.952 [debug] Extracted fold cases: [{:->, [line: 22], [[{:case, [line: 22], [{:node, [line: 22], [{:val, [line: 22], nil}, {:left, [line: 22], nil}, {:right, [line: 22], nil}]}]}], {:+, [line: 22], [{:+, [line: 22], [{:val, [line: 22], nil}, {:recu, [line: 22], [{:left, [line: 22], nil}]}]}, {:recu, [line: 22], [{:right, [line: 22], nil}]}]}]}, {:->, [line: 23], [[{:case, [line: 23], [{:leaf, [line: 23], []}]}], 0]}]
11:56:00.952 [debug] Generating fold cases: [{:->, [line: 22], [[{:case, [line: 22], [{:node, [line: 22], [{:val, [line: 22], nil}, {:left, [line: 22], nil}, {:right, [line: 22], nil}]}]}], {:+, [line: 22], [{:+, [line: 22], [{:val, [line: 22], nil}, {:recu, [line: 22], [{:left, [line: 22], nil}]}]}, {:recu, [line: 22], [{:right, [line: 22], nil}]}]}]}, {:->, [line: 23], [[{:case, [line: 23], [{:leaf, [line: 23], []}]}], 0]}]
11:56:00.952 [debug] Generated pattern: {:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node
11:56:00.952 [debug] Transforming recursive refs:
Body: {:+, [line: 22], [{:+, [line: 22], [{:val, [line: 22], nil}, {:recu, [line: 22], [{:left, [line: 22], nil}]}]}, {:recu, [line: 22], [{:right, [line: 22], nil}]}]}
Bindings: [val: true, left: true, right: true]
State: nil

11:56:00.952 [debug] Processing recursive reference: {:recu, [line: 22], [{:left, [line: 22], nil}]}
11:56:00.952 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}
11:56:00.952 [debug] Processing recursive reference: {:recu, [line: 22], [{:right, [line: 22], nil}]}
11:56:00.953 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}
11:56:00.953 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf
11:56:00.953 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil

11:56:00.953 [debug] Bend operation with var: :val, initial: 1
11:56:00.953 [debug] Generated fold cases after transformation: [{:->, [line: 22], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 22], [{:+, [line: 22], [{:val, [line: 22], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 23], [[{:%{}, [], [variant: :leaf]}], 0]}]
11:56:00.953 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 21], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 22], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 22], [{:+, [line: 22], [{:val, [line: 22], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 23], [[{:%{}, [], [variant: :leaf]}], 0]}]]]}]}]}]}
11:56:00.953 [debug] Fork operation with expression: {:+, [line: 16], [{:val, [line: 16], nil}, 1]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/ben_ben/sum_of_tree_test.exs:21: SumOfTreeTest."test fold operations basic sum of tree"/1

warning: DistGraphDatabase.begin_transaction/1 is undefined (module DistGraphDatabase is not available or is yet to be defined)
  test/cypher/spaceship_queries_test.exs:22: SpaceshipQueriesTest.__ex_unit_setup_0/1

warning: DistGraphDatabase.commit_transaction/2 is undefined (module DistGraphDatabase is not available or is yet to be defined)
  test/cypher/spaceship_queries_test.exs:31: SpaceshipQueriesTest.__ex_unit_setup_0/1

warning: DistGraphDatabase.define_schema/4 is undefined (module DistGraphDatabase is not available or is yet to be defined)
  test/cypher/spaceship_queries_test.exs:25: SpaceshipQueriesTest.__ex_unit_setup_0/1

warning: DistGraphDatabase.join_cluster/2 is undefined (module DistGraphDatabase is not available or is yet to be defined)
Invalid call found at 2 locations:
  test/cypher/spaceship_queries_test.exs:15: SpaceshipQueriesTest.__ex_unit_setup_0/1
  test/cypher/spaceship_queries_test.exs:16: SpaceshipQueriesTest.__ex_unit_setup_0/1

warning: DistGraphDatabase.start_link/1 is undefined (module DistGraphDatabase is not available or is yet to be defined)
Invalid call found at 3 locations:
  test/cypher/spaceship_queries_test.exs:10: SpaceshipQueriesTest.__ex_unit_setup_0/1
  test/cypher/spaceship_queries_test.exs:11: SpaceshipQueriesTest.__ex_unit_setup_0/1
  test/cypher/spaceship_queries_test.exs:12: SpaceshipQueriesTest.__ex_unit_setup_0/1

warning: DistGraphDatabase.add_vertex/5 is undefined (module DistGraphDatabase is not available or is yet to be defined)
Invalid call found at 4 locations:
  test/dist_gdb/dist_graph_database_test.exs:262: DistGraphDatabaseTest."test distributed transaction"/1
  test/dist_gdb/dist_graph_database_test.exs:289: DistGraphDatabaseTest."test schema validation"/1
  test/dist_gdb/dist_graph_database_test.exs:309: DistGraphDatabaseTest."test fault tolerance"/1
  test/dist_gdb/dist_graph_database_test.exs:342: DistGraphDatabaseTest."test node recovery"/1

warning: DistGraphDatabase.begin_transaction/1 is undefined (module DistGraphDatabase is not available or is yet to be defined)
Invalid call found at 5 locations:
  test/dist_gdb/dist_graph_database_test.exs:60: DistGraphDatabaseTest.__ex_unit_setup_0/1
  test/dist_gdb/dist_graph_database_test.exs:258: DistGraphDatabaseTest."test distributed transaction"/1
  test/dist_gdb/dist_graph_database_test.exs:285: DistGraphDatabaseTest."test schema validation"/1
  test/dist_gdb/dist_graph_database_test.exs:305: DistGraphDatabaseTest."test fault tolerance"/1
  test/dist_gdb/dist_graph_database_test.exs:339: DistGraphDatabaseTest."test node recovery"/1

warning: DistGraphDatabase.commit_transaction/2 is undefined (module DistGraphDatabase is not available or is yet to be defined)
Invalid call found at 5 locations:
  test/dist_gdb/dist_graph_database_test.exs:71: DistGraphDatabaseTest.__ex_unit_setup_0/1
  test/dist_gdb/dist_graph_database_test.exs:268: DistGraphDatabaseTest."test distributed transaction"/1
  test/dist_gdb/dist_graph_database_test.exs:299: DistGraphDatabaseTest."test schema validation"/1
  test/dist_gdb/dist_graph_database_test.exs:314: DistGraphDatabaseTest."test fault tolerance"/1
  test/dist_gdb/dist_graph_database_test.exs:347: DistGraphDatabaseTest."test node recovery"/1

warning: DistGraphDatabase.define_schema/4 is undefined (module DistGraphDatabase is not available or is yet to be defined)
  test/dist_gdb/dist_graph_database_test.exs:63: DistGraphDatabaseTest.__ex_unit_setup_0/1

warning: DistGraphDatabase.get_leader/1 is undefined (module DistGraphDatabase is not available or is yet to be defined)
Invalid call found at 2 locations:
  test/dist_gdb/dist_graph_database_test.exs:55: DistGraphDatabaseTest.__ex_unit_setup_0/1
  test/dist_gdb/dist_graph_database_test.exs:247: DistGraphDatabaseTest."test leader election"/1

warning: DistGraphDatabase.join_cluster/2 is undefined (module DistGraphDatabase is not available or is yet to be defined)
Invalid call found at 2 locations:
  test/dist_gdb/dist_graph_database_test.exs:110: DistGraphDatabaseTest.join_and_verify/4
  test/dist_gdb/dist_graph_database_test.exs:185: DistGraphDatabaseTest.join_cluster_with_retry/4

warning: DistGraphDatabase.query/2 is undefined (module DistGraphDatabase is not available or is yet to be defined)
Invalid call found at 5 locations:
  test/dist_gdb/dist_graph_database_test.exs:276: DistGraphDatabaseTest."test distributed transaction"/1
  test/dist_gdb/dist_graph_database_test.exs:326: DistGraphDatabaseTest."test fault tolerance"/1
  test/dist_gdb/dist_graph_database_test.exs:327: DistGraphDatabaseTest."test fault tolerance"/1
  test/dist_gdb/dist_graph_database_test.exs:353: DistGraphDatabaseTest."test node recovery"/1
  test/dist_gdb/dist_graph_database_test.exs:372: DistGraphDatabaseTest."test node recovery"/1

warning: DistGraphDatabase.start_link/2 is undefined (module DistGraphDatabase is not available or is yet to be defined)
Invalid call found at 2 locations:
  test/dist_gdb/dist_graph_database_test.exs:22: DistGraphDatabaseTest.__ex_unit_setup_0/1
  test/dist_gdb/dist_graph_database_test.exs:360: DistGraphDatabaseTest."test node recovery"/1

warning: DistGraphDatabase.via_tuple/2 is undefined (module DistGraphDatabase is not available or is yet to be defined)
Invalid call found at 2 locations:
  test/dist_gdb/dist_graph_database_test.exs:320: DistGraphDatabaseTest."test fault tolerance"/1
  test/dist_gdb/dist_graph_database_test.exs:356: DistGraphDatabaseTest."test node recovery"/1

........11:56:05.922 [debug] Bend initial value: 1
11:56:05.922 [debug] Executing bend with initial: 1
11:56:05.922 [debug] Executing fun with value: 1
11:56:05.922 [debug] Evaluating bend block with value: 1
11:56:05.924 [debug] Block returned: %{head: 1, tail: {:fork, 2}, variant: :cons}
11:56:05.924 [debug] Fun returned result: %{head: 1, tail: {:fork, 2}, variant: :cons}
11:56:05.924 [debug] Processing constructed value: %{head: 1, tail: {:fork, 2}, variant: :cons}
11:56:05.924 [debug] Executing bend with initial: 2
11:56:05.924 [debug] Executing fun with value: 2
11:56:05.924 [debug] Evaluating bend block with value: 2
11:56:05.924 [debug] Block returned: %{head: 2, tail: {:fork, 3}, variant: :cons}
11:56:05.924 [debug] Fun returned result: %{head: 2, tail: {:fork, 3}, variant: :cons}
11:56:05.924 [debug] Processing constructed value: %{head: 2, tail: {:fork, 3}, variant: :cons}
11:56:05.924 [debug] Executing bend with initial: 3
11:56:05.924 [debug] Executing fun with value: 3
11:56:05.924 [debug] Evaluating bend block with value: 3
11:56:05.924 [debug] Block returned: %{head: 3, tail: {:fork, 4}, variant: :cons}
11:56:05.924 [debug] Fun returned result: %{head: 3, tail: {:fork, 4}, variant: :cons}
11:56:05.924 [debug] Processing constructed value: %{head: 3, tail: {:fork, 4}, variant: :cons}
11:56:05.924 [debug] Executing bend with initial: 4
11:56:05.924 [debug] Executing fun with value: 4
11:56:05.924 [debug] Evaluating bend block with value: 4
11:56:05.924 [debug] Block returned: %{variant: :null}
11:56:05.924 [debug] Fun returned result: %{variant: :null}
11:56:05.924 [debug] Processing constructed value: %{variant: :null}
11:56:05.924 [debug] do_bend final result: %{variant: :null}
11:56:05.924 [debug] do_bend final result: %{head: 3, tail: %{variant: :null}, variant: :cons}
11:56:05.924 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:05.924 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:05.924 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
.11:56:05.925 [debug] Bend initial value: 0
11:56:05.925 [debug] Executing bend with initial: 0
11:56:05.925 [debug] Executing fun with value: 0
11:56:05.925 [debug] Evaluating bend block with value: 0
11:56:05.925 [debug] Block returned: %{left: {:fork, 1}, right: {:fork, 1}, val: 0, variant: :node}
11:56:05.925 [debug] Fun returned result: %{left: {:fork, 1}, right: {:fork, 1}, val: 0, variant: :node}
11:56:05.925 [debug] Processing constructed value: %{left: {:fork, 1}, right: {:fork, 1}, val: 0, variant: :node}
11:56:05.925 [debug] Executing bend with initial: 1
11:56:05.925 [debug] Executing fun with value: 1
11:56:05.925 [debug] Evaluating bend block with value: 1
11:56:05.925 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}
11:56:05.925 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}
11:56:05.925 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}
11:56:05.925 [debug] Executing bend with initial: 2
11:56:05.925 [debug] Executing fun with value: 2
11:56:05.925 [debug] Evaluating bend block with value: 2
11:56:05.925 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:05.925 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:05.925 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:05.925 [debug] Executing bend with initial: 3
11:56:05.925 [debug] Executing fun with value: 3
11:56:05.925 [debug] Evaluating bend block with value: 3
11:56:05.925 [debug] Block returned: %{variant: :leaf}
11:56:05.925 [debug] Fun returned result: %{variant: :leaf}
11:56:05.925 [debug] Processing constructed value: %{variant: :leaf}
11:56:05.925 [debug] do_bend final result: %{variant: :leaf}
11:56:05.925 [debug] Executing bend with initial: 3
11:56:05.925 [debug] Executing fun with value: 3
11:56:05.925 [debug] Evaluating bend block with value: 3
11:56:05.925 [debug] Block returned: %{variant: :leaf}
11:56:05.925 [debug] Fun returned result: %{variant: :leaf}
11:56:05.925 [debug] Processing constructed value: %{variant: :leaf}
11:56:05.925 [debug] do_bend final result: %{variant: :leaf}
11:56:05.925 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}
11:56:05.925 [debug] Executing bend with initial: 2
11:56:05.925 [debug] Executing fun with value: 2
11:56:05.925 [debug] Evaluating bend block with value: 2
11:56:05.925 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:05.925 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:05.925 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:05.926 [debug] Executing bend with initial: 3
11:56:05.926 [debug] Executing fun with value: 3
11:56:05.926 [debug] Evaluating bend block with value: 3
11:56:05.926 [debug] Block returned: %{variant: :leaf}
11:56:05.926 [debug] Fun returned result: %{variant: :leaf}
11:56:05.926 [debug] Processing constructed value: %{variant: :leaf}
11:56:05.926 [debug] do_bend final result: %{variant: :leaf}
11:56:05.926 [debug] Executing bend with initial: 3
11:56:05.926 [debug] Executing fun with value: 3
11:56:05.926 [debug] Evaluating bend block with value: 3
11:56:05.926 [debug] Block returned: %{variant: :leaf}
11:56:05.926 [debug] Fun returned result: %{variant: :leaf}
11:56:05.926 [debug] Processing constructed value: %{variant: :leaf}
11:56:05.926 [debug] do_bend final result: %{variant: :leaf}
11:56:05.926 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}
11:56:05.926 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, val: 1, variant: :node}
11:56:05.926 [debug] Executing bend with initial: 1
11:56:05.926 [debug] Executing fun with value: 1
11:56:05.926 [debug] Evaluating bend block with value: 1
11:56:05.926 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}
11:56:05.926 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}
11:56:05.926 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}
11:56:05.926 [debug] Executing bend with initial: 2
11:56:05.926 [debug] Executing fun with value: 2
11:56:05.926 [debug] Evaluating bend block with value: 2
11:56:05.926 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:05.926 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:05.926 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:05.926 [debug] Executing bend with initial: 3
11:56:05.926 [debug] Executing fun with value: 3
11:56:05.926 [debug] Evaluating bend block with value: 3
11:56:05.926 [debug] Block returned: %{variant: :leaf}
11:56:05.926 [debug] Fun returned result: %{variant: :leaf}
11:56:05.926 [debug] Processing constructed value: %{variant: :leaf}
11:56:05.926 [debug] do_bend final result: %{variant: :leaf}
11:56:05.926 [debug] Executing bend with initial: 3
11:56:05.926 [debug] Executing fun with value: 3
11:56:05.926 [debug] Evaluating bend block with value: 3
11:56:05.926 [debug] Block returned: %{variant: :leaf}
11:56:05.926 [debug] Fun returned result: %{variant: :leaf}
11:56:05.926 [debug] Processing constructed value: %{variant: :leaf}
11:56:05.926 [debug] do_bend final result: %{variant: :leaf}
11:56:05.926 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}
11:56:05.926 [debug] Executing bend with initial: 2
11:56:05.926 [debug] Executing fun with value: 2
11:56:05.926 [debug] Evaluating bend block with value: 2
11:56:05.926 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:05.926 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:05.926 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:05.926 [debug] Executing bend with initial: 3
11:56:05.926 [debug] Executing fun with value: 3
11:56:05.926 [debug] Evaluating bend block with value: 3
11:56:05.926 [debug] Block returned: %{variant: :leaf}
11:56:05.926 [debug] Fun returned result: %{variant: :leaf}
11:56:05.926 [debug] Processing constructed value: %{variant: :leaf}
11:56:05.926 [debug] do_bend final result: %{variant: :leaf}
11:56:05.926 [debug] Executing bend with initial: 3
11:56:05.926 [debug] Executing fun with value: 3
11:56:05.926 [debug] Evaluating bend block with value: 3
11:56:05.926 [debug] Block returned: %{variant: :leaf}
11:56:05.927 [debug] Fun returned result: %{variant: :leaf}
11:56:05.927 [debug] Processing constructed value: %{variant: :leaf}
11:56:05.927 [debug] do_bend final result: %{variant: :leaf}
11:56:05.927 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}
11:56:05.927 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, val: 1, variant: :node}
11:56:05.927 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, val: 1, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, val: 1, variant: :node}, val: 0, variant: :node}
11:56:05.927 [debug] Final bend result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, val: 1, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, val: 1, variant: :node}, val: 0, variant: :node}
.11:56:05.927 [debug] Setting up test state
11:56:05.932 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
11:56:05.934 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:05.934 [debug] Returning context with state
11:56:05.946 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:05.946 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:05.946 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.946 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.948 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
11:56:05.948 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
11:56:05.948 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
11:56:05.948 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
11:56:05.948 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
11:56:05.948 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.948 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.948 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.948 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.949 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.949 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.949 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.949 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.949 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.949 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.949 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.949 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.949 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
11:56:05.949 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.949 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.949 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.950 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.950 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.950 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.950 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.950 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.950 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, variant_type: :graph, state: nil
11:56:05.950 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
11:56:05.950 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.950 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.950 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.950 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.950 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.951 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.951 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.951 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.951 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.952 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.952 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.952 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.952 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.952 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.952 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.952 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.952 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.952 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.952 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:05.952 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.952 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.952 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.953 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.953 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.953 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.954 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.954 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.955 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.955 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.955 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.956 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.956 [debug] Executing query with pattern: [:person, :works_at, %{industry: "Software"}]
11:56:05.956 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1737050165956, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
11:56:05.957 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.957 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.957 [debug] Processing graph with:
11:56:05.957 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
11:56:05.957 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:05.958 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:05.958 [debug] Processing list of edges
11:56:05.958 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
11:56:05.958 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
11:56:05.958 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
11:56:05.958 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
11:56:05.958 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
11:56:05.958 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.958 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:05.958 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:05.958 [debug] Executing query with pattern: [:person, :works_at, %{industry: "Software"}]
11:56:05.958 [debug] Querying with pattern:
  From: :person
  Edge: :works_at
  To: %{industry: "Software"}

11:56:05.959 [debug] Found matching pattern for p2 -> c1
11:56:05.959 [debug] Found matching pattern for p1 -> c1
11:56:05.959 [debug] Query results: [{"p2", :works_at, "c1"}, {"p1", :works_at, "c1"}]
11:56:05.959 [debug] Executing query with pattern: [%{role: "Developer"}, :works_at, :company]
11:56:05.960 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1737050165956, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
11:56:05.960 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.961 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.961 [debug] Processing graph with:
11:56:05.961 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
11:56:05.961 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:05.962 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:05.962 [debug] Processing list of edges
11:56:05.962 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
11:56:05.962 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
11:56:05.962 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
11:56:05.962 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
11:56:05.962 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
11:56:05.962 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.962 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:05.962 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:05.962 [debug] Executing query with pattern: [%{role: "Developer"}, :works_at, :company]
11:56:05.962 [debug] Querying with pattern:
  From: %{role: "Developer"}
  Edge: :works_at
  To: :company

11:56:05.962 [debug] Pattern match failed for p2 -> c1
11:56:05.962 [debug] Found matching pattern for p1 -> c1
11:56:05.962 [debug] Query results: [{"p1", :works_at, "c1"}]
.11:56:05.962 [debug] Setting up test state
11:56:05.962 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
11:56:05.963 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:05.963 [debug] Returning context with state
11:56:05.963 [debug] Starting edge validation test with state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
.11:56:05.963 [debug] Setting up test state
11:56:05.963 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
11:56:05.963 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:05.963 [debug] Returning context with state
11:56:05.963 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:05.963 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:05.963 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.963 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.963 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
11:56:05.964 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
11:56:05.964 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
11:56:05.964 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
11:56:05.964 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
11:56:05.964 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.964 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.964 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.964 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.964 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.964 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.964 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.964 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.964 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.964 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.965 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.965 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.965 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
11:56:05.965 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.965 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.965 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.965 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.965 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.965 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.965 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.966 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.966 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, variant_type: :graph, state: nil
11:56:05.966 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
11:56:05.966 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.966 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.966 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.966 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.966 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.966 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.966 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.967 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.967 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.967 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.967 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.967 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.967 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.967 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.967 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.967 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.967 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.967 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.967 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:05.968 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.968 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.968 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.968 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.968 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.969 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.969 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.970 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.970 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.970 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.971 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.971 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.971 [debug] Executing query with pattern: [%{role: "Developer"}, :works_at, %{industry: "Software"}]
11:56:05.972 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1737050165971, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
11:56:05.972 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.972 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.973 [debug] Processing graph with:
11:56:05.973 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
11:56:05.973 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:05.973 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:05.973 [debug] Processing list of edges
11:56:05.973 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
11:56:05.973 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
11:56:05.973 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
11:56:05.973 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
11:56:05.973 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
11:56:05.974 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.974 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:05.974 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:05.974 [debug] Executing query with pattern: [%{role: "Developer"}, :works_at, %{industry: "Software"}]
11:56:05.974 [debug] Querying with pattern:
  From: %{role: "Developer"}
  Edge: :works_at
  To: %{industry: "Software"}

11:56:05.974 [debug] Pattern match failed for p2 -> c1
11:56:05.974 [debug] Found matching pattern for p1 -> c1
11:56:05.974 [debug] Query results: [{"p1", :works_at, "c1"}]
11:56:05.974 [debug] Executing query with pattern: [%{role: "Manager"}, :works_on, %{status: "Active"}]
11:56:05.974 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1737050165971, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
11:56:05.975 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.975 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.975 [debug] Processing graph with:
11:56:05.975 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
11:56:05.975 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:05.976 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:05.976 [debug] Processing list of edges
11:56:05.976 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
11:56:05.976 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
11:56:05.976 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
11:56:05.976 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
11:56:05.976 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
11:56:05.976 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.976 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:05.976 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:05.976 [debug] Executing query with pattern: [%{role: "Manager"}, :works_on, %{status: "Active"}]
11:56:05.976 [debug] Querying with pattern:
  From: %{role: "Manager"}
  Edge: :works_on
  To: %{status: "Active"}

11:56:05.976 [debug] Pattern match failed for p1 -> proj1
11:56:05.976 [debug] Query results: []
.11:56:05.976 [debug] Setting up test state
11:56:05.977 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
11:56:05.977 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:05.977 [debug] Returning context with state
11:56:05.977 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:05.977 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:05.977 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.977 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.977 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
11:56:05.977 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
11:56:05.977 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
11:56:05.977 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
11:56:05.977 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
11:56:05.977 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.977 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.977 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.978 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.978 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.978 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.978 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.978 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.978 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.978 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.978 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.978 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.978 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
11:56:05.978 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.978 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.979 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.979 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.979 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.979 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.979 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.979 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.979 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, variant_type: :graph, state: nil
11:56:05.979 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
11:56:05.979 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.979 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.979 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.979 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.980 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.980 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.980 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.980 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.980 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.981 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.981 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.981 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.981 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.981 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.981 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.981 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.981 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.981 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.981 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:05.981 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.981 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.982 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.982 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.982 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.983 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.983 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.983 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.984 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.984 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.984 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.985 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.985 [debug] Executing query with pattern: [:person, :reports_to, :person]
11:56:05.985 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1737050165985, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
11:56:05.986 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.986 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.986 [debug] Processing graph with:
11:56:05.986 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
11:56:05.986 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:05.987 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:05.987 [debug] Processing list of edges
11:56:05.987 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
11:56:05.987 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
11:56:05.987 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
11:56:05.987 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
11:56:05.987 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
11:56:05.987 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.987 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:05.987 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:05.987 [debug] Executing query with pattern: [:person, :reports_to, :person]
11:56:05.987 [debug] Querying with pattern:
  From: :person
  Edge: :reports_to
  To: :person

11:56:05.987 [debug] Query results: []
11:56:05.987 [debug] Executing query with pattern: [%{role: "Designer"}, :works_at, %{industry: "Software"}]
11:56:05.988 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1737050165985, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
11:56:05.988 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.989 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.989 [debug] Processing graph with:
11:56:05.989 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
11:56:05.989 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:05.989 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:05.989 [debug] Processing list of edges
11:56:05.989 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
11:56:05.990 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
11:56:05.990 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
11:56:05.990 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
11:56:05.990 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
11:56:05.990 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.990 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:05.990 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:05.990 [debug] Executing query with pattern: [%{role: "Designer"}, :works_at, %{industry: "Software"}]
11:56:05.990 [debug] Querying with pattern:
  From: %{role: "Designer"}
  Edge: :works_at
  To: %{industry: "Software"}

11:56:05.990 [debug] Pattern match failed for p2 -> c1
11:56:05.990 [debug] Pattern match failed for p1 -> c1
11:56:05.990 [debug] Query results: []
.11:56:05.990 [debug] Setting up test state
11:56:05.990 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
11:56:05.990 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:05.990 [debug] Returning context with state
11:56:05.990 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:05.990 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:05.990 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.990 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.990 [debug] Recursive field result for edge_list: 0
.11:56:05.991 [debug] Setting up test state
11:56:05.991 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
11:56:05.991 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:05.991 [debug] Returning context with state
.11:56:05.991 [debug] Setting up test state
11:56:05.991 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
11:56:05.991 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:05.991 [debug] Returning context with state
.11:56:05.991 [debug] Setting up test state
11:56:05.991 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
11:56:05.991 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:05.991 [debug] Returning context with state
11:56:05.991 [debug] Starting multiple transactions test with state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:05.991 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:05.991 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:05.991 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.991 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.991 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
11:56:05.992 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
11:56:05.992 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
11:56:05.992 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
11:56:05.992 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
11:56:05.992 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.992 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.992 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:05.992 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:05.992 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
11:56:05.992 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:05.992 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
11:56:05.992 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:05.992 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
11:56:05.992 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:05.992 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.992 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.992 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:05.992 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:05.992 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
.11:56:05.993 [debug] Setting up test state
11:56:05.993 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
11:56:05.993 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:05.993 [debug] Returning context with state
11:56:05.993 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:05.993 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:05.993 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.993 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.993 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
11:56:05.993 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
11:56:05.993 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
11:56:05.993 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
11:56:05.993 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
11:56:05.993 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.993 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.993 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.994 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.994 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.994 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.994 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.994 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.994 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.994 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.994 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.994 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.994 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
11:56:05.994 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.994 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.994 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.995 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.995 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.995 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.995 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
11:56:05.995 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
11:56:05.995 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, variant_type: :graph, state: nil
11:56:05.995 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
11:56:05.995 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.995 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.995 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.995 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.995 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.996 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.996 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.996 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.996 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.996 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.997 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.997 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.997 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.997 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.997 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.997 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.997 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:05.997 [debug] Processing recursive fields of: %{variant: :empty}
11:56:05.997 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:05.997 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.997 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.997 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.998 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.998 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.998 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.999 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:05.999 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:05.999 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:06.000 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:06.000 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:06.001 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:06.001 [debug] Executing query with pattern: [:person, :knows, :person]
11:56:06.001 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1737050166001, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
11:56:06.001 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:06.002 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:06.002 [debug] Processing graph with:
11:56:06.002 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
11:56:06.002 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:06.003 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:06.003 [debug] Processing list of edges
11:56:06.003 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
11:56:06.003 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
11:56:06.003 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
11:56:06.003 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
11:56:06.003 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
11:56:06.003 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:06.003 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:06.003 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:06.003 [debug] Executing query with pattern: [:person, :knows, :person]
11:56:06.003 [debug] Querying with pattern:
  From: :person
  Edge: :knows
  To: :person

11:56:06.003 [debug] Found matching pattern for p1 -> p2
11:56:06.003 [debug] Query results: [{"p1", :knows, "p2"}]
11:56:06.003 [debug] Executing query with pattern: [:person, :works_at, :company]
11:56:06.004 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1737050166001, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
11:56:06.004 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:06.004 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:06.004 [debug] Processing graph with:
11:56:06.004 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
11:56:06.005 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:06.005 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:06.005 [debug] Processing list of edges
11:56:06.005 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
11:56:06.005 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
11:56:06.005 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
11:56:06.005 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
11:56:06.005 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
11:56:06.005 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:06.005 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:06.006 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:06.006 [debug] Executing query with pattern: [:person, :works_at, :company]
11:56:06.006 [debug] Querying with pattern:
  From: :person
  Edge: :works_at
  To: :company

11:56:06.006 [debug] Found matching pattern for p2 -> c1
11:56:06.006 [debug] Found matching pattern for p1 -> c1
11:56:06.006 [debug] Query results: [{"p2", :works_at, "c1"}, {"p1", :works_at, "c1"}]
11:56:06.006 [debug] Executing query with pattern: [:company, :owns, :project]
11:56:06.006 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1737050166001, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
11:56:06.006 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
11:56:06.007 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:06.007 [debug] Processing graph with:
11:56:06.007 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
11:56:06.007 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:06.007 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
11:56:06.007 [debug] Processing list of edges
11:56:06.007 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
11:56:06.007 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
11:56:06.008 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
11:56:06.008 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
11:56:06.008 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
11:56:06.008 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
11:56:06.008 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:06.008 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
11:56:06.008 [debug] Executing query with pattern: [:company, :owns, :project]
11:56:06.008 [debug] Querying with pattern:
  From: :company
  Edge: :owns
  To: :project

11:56:06.008 [debug] Found matching pattern for c1 -> proj1
11:56:06.008 [debug] Query results: [{"c1", :owns, "proj1"}]
.11:56:06.008 [debug] Setting up test state
11:56:06.008 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
11:56:06.008 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:06.008 [debug] Returning context with state
11:56:06.008 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:06.008 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.008 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.008 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.008 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
11:56:06.009 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
11:56:06.009 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
11:56:06.009 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
11:56:06.009 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
11:56:06.009 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.009 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.009 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.009 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.009 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
11:56:06.009 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.009 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
11:56:06.009 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.009 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
11:56:06.009 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.009 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.009 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.009 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.009 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.009 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
.11:56:06.009 [debug] Setting up test state
11:56:06.010 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
11:56:06.010 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:06.010 [debug] Returning context with state
11:56:06.010 [debug] Starting query operations test with state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:06.010 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:06.010 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.010 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.010 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.010 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
11:56:06.010 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
11:56:06.010 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
11:56:06.010 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
11:56:06.010 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
11:56:06.010 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.010 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.010 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.010 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.010 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
11:56:06.011 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.011 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
11:56:06.011 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.011 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
11:56:06.011 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.011 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.011 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.011 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.011 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.011 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.011 [debug] Executing query with pattern: [:person, :knows, :person]
11:56:06.012 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, transactions: %{1 => %{changes: [{:edge_added, "1", "2"}, {:vertex_added, "2"}, {:vertex_added, "1"}], timestamp: 1737050166011, variant: :committed}}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 1}
11:56:06.012 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
11:56:06.012 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.012 [debug] Processing graph with:
11:56:06.012 [debug]   vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}
11:56:06.012 [debug]   edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}]
11:56:06.012 [debug] Extracting edges from: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}]
11:56:06.012 [debug] Processing list of edges
11:56:06.012 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}
11:56:06.012 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.012 [debug] Extracted edges result: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}]
11:56:06.012 [debug] Extracted edges: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}]
11:56:06.012 [debug] Executing query with pattern: [:person, :knows, :person]
11:56:06.012 [debug] Querying with pattern:
  From: :person
  Edge: :knows
  To: :person

11:56:06.012 [debug] Found matching pattern for 1 -> 2
11:56:06.012 [debug] Query results: [{"1", :knows, "2"}]
.11:56:06.013 [debug] Setting up test state
11:56:06.013 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
11:56:06.013 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:06.013 [debug] Returning context with state
11:56:06.013 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
11:56:06.013 [debug] Transaction started with id: 1
11:56:06.013 [debug] First vertex added, state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{1 => %{operations: [{:add_vertex, :person, "1", %{age: 30, name: "Alice"}}], timestamp: 1737050166013, variant: :pending}}, locks: %{{:vertex, "1"} => 1}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 1}
11:56:06.013 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:06.013 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.013 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.013 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.013 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
11:56:06.013 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
11:56:06.013 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
11:56:06.013 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
11:56:06.013 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
11:56:06.013 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.013 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.013 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.013 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.013 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
11:56:06.014 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.014 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
11:56:06.014 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.014 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
11:56:06.014 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.014 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.014 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.014 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.014 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
11:56:06.014 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
..11:56:06.015 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 3, variant: :node}, val: 1, variant: :node}, variant_type: :node, state: nil
11:56:06.015 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 3, variant: :node}, val: 1, variant: :node}
11:56:06.015 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, variant_type: :node, state: nil
11:56:06.015 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}
11:56:06.015 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.015 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.015 [debug] Recursive field result for left: 0
11:56:06.015 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.015 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.015 [debug] Recursive field result for right: 0
11:56:06.015 [debug] do_fold called with non-variant data: 0
11:56:06.015 [debug] do_fold called with non-variant data: 0
11:56:06.015 [debug] Recursive field result for left: 2
11:56:06.015 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 3, variant: :node}, variant_type: :node, state: nil
11:56:06.015 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 3, variant: :node}
11:56:06.015 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.015 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.015 [debug] Recursive field result for left: 0
11:56:06.015 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.015 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.015 [debug] Recursive field result for right: 0
11:56:06.015 [debug] do_fold called with non-variant data: 0
11:56:06.015 [debug] do_fold called with non-variant data: 0
11:56:06.015 [debug] Recursive field result for right: 3
11:56:06.015 [debug] do_fold called with non-variant data: 2
11:56:06.015 [debug] do_fold called with non-variant data: 3
.11:56:06.015 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 0
11:56:06.015 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.015 [debug] do_fold called with data: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 0
11:56:06.015 [debug] Processing recursive fields of: %{head: 2, tail: %{variant: :null}, variant: :cons}
11:56:06.015 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 0
11:56:06.015 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.015 [debug] Recursive field result for tail: {0, 0}
11:56:06.015 [debug] do_fold called with non-variant data: 0
11:56:06.015 [debug] Recursive field result for tail: {2, 2}
11:56:06.015 [debug] do_fold called with non-variant data: 2
.11:56:06.016 [debug] Bend initial value: []
11:56:06.016 [debug] Executing bend with initial: []
11:56:06.016 [debug] Executing fun with value: []
11:56:06.016 [debug] Evaluating bend block with value: []
11:56:06.017 [debug] Block returned: %{variant: :null}
11:56:06.017 [debug] Fun returned result: %{variant: :null}
11:56:06.017 [debug] Processing constructed value: %{variant: :null}
11:56:06.017 [debug] do_bend final result: %{variant: :null}
11:56:06.017 [debug] Final bend result: %{variant: :null}
11:56:06.017 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 0
11:56:06.017 [debug] Processing recursive fields of: %{variant: :null}
.11:56:06.017 [debug] Bend initial value: ["a", "b", "c"]
11:56:06.017 [debug] Executing bend with initial: ["a", "b", "c"]
11:56:06.017 [debug] Executing fun with value: ["a", "b", "c"]
11:56:06.017 [debug] Evaluating bend block with value: ["a", "b", "c"]
11:56:06.017 [debug] Block returned: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
11:56:06.017 [debug] Fun returned result: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
11:56:06.017 [debug] Processing constructed value: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
11:56:06.017 [debug] Executing bend with initial: ["b", "c"]
11:56:06.017 [debug] Executing fun with value: ["b", "c"]
11:56:06.017 [debug] Evaluating bend block with value: ["b", "c"]
11:56:06.017 [debug] Block returned: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
11:56:06.017 [debug] Fun returned result: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
11:56:06.017 [debug] Processing constructed value: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
11:56:06.017 [debug] Executing bend with initial: ["c"]
11:56:06.017 [debug] Executing fun with value: ["c"]
11:56:06.017 [debug] Evaluating bend block with value: ["c"]
11:56:06.017 [debug] Block returned: %{head: "c", tail: {:fork, []}, variant: :cons}
11:56:06.017 [debug] Fun returned result: %{head: "c", tail: {:fork, []}, variant: :cons}
11:56:06.017 [debug] Processing constructed value: %{head: "c", tail: {:fork, []}, variant: :cons}
11:56:06.017 [debug] Executing bend with initial: []
11:56:06.017 [debug] Executing fun with value: []
11:56:06.017 [debug] Evaluating bend block with value: []
11:56:06.017 [debug] Block returned: %{variant: :null}
11:56:06.017 [debug] Fun returned result: %{variant: :null}
11:56:06.017 [debug] Processing constructed value: %{variant: :null}
11:56:06.017 [debug] do_bend final result: %{variant: :null}
11:56:06.017 [debug] do_bend final result: %{head: "c", tail: %{variant: :null}, variant: :cons}
11:56:06.018 [debug] do_bend final result: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.018 [debug] do_bend final result: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.018 [debug] Final bend result: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.018 [debug] do_fold called with data: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.018 [debug] Processing recursive fields of: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.018 [debug] do_fold called with data: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.018 [debug] Processing recursive fields of: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.018 [debug] do_fold called with data: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.018 [debug] Processing recursive fields of: %{head: "c", tail: %{variant: :null}, variant: :cons}
11:56:06.018 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.018 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.018 [debug] Recursive field result for tail: %{variant: :null}
11:56:06.028 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: "c", tail: %{variant: :null}, variant: :cons}
11:56:06.028 [debug] Recursive field result for tail: %{head: "C", tail: %{variant: :null}, variant: :cons}
11:56:06.028 [debug] do_fold called with non-function: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: "b", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.028 [debug] Recursive field result for tail: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.028 [debug] do_fold called with non-function: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: "a", tail: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.028 [debug] do_fold called with data: %{head: "A", tail: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.028 [debug] Processing recursive fields of: %{head: "A", tail: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.028 [debug] do_fold called with data: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.028 [debug] Processing recursive fields of: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.028 [debug] do_fold called with data: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.028 [debug] Processing recursive fields of: %{head: "C", tail: %{variant: :null}, variant: :cons}
11:56:06.028 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.028 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.028 [debug] Recursive field result for tail: []
11:56:06.028 [debug] do_fold called with non-variant data: []
11:56:06.028 [debug] Recursive field result for tail: ["C"]
11:56:06.028 [debug] do_fold called with non-variant data: ["C"]
11:56:06.028 [debug] Recursive field result for tail: ["B", "C"]
11:56:06.028 [debug] do_fold called with non-variant data: ["B", "C"]
.11:56:06.029 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:56:06.029 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:56:06.029 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:56:06.029 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:56:06.029 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.029 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.029 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.029 [debug] Executing bend with initial: [2, 3, 4, 5]
11:56:06.029 [debug] Executing fun with value: [2, 3, 4, 5]
11:56:06.029 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:56:06.029 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.029 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.029 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.029 [debug] Executing bend with initial: [3, 4, 5]
11:56:06.029 [debug] Executing fun with value: [3, 4, 5]
11:56:06.029 [debug] Evaluating bend block with value: [3, 4, 5]
11:56:06.029 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.029 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.029 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.029 [debug] Executing bend with initial: [4, 5]
11:56:06.029 [debug] Executing fun with value: [4, 5]
11:56:06.029 [debug] Evaluating bend block with value: [4, 5]
11:56:06.029 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.029 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.029 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.029 [debug] Executing bend with initial: [5]
11:56:06.029 [debug] Executing fun with value: [5]
11:56:06.029 [debug] Evaluating bend block with value: [5]
11:56:06.029 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.029 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.029 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.029 [debug] Executing bend with initial: []
11:56:06.029 [debug] Executing fun with value: []
11:56:06.029 [debug] Evaluating bend block with value: []
11:56:06.029 [debug] Block returned: %{variant: :null}
11:56:06.029 [debug] Fun returned result: %{variant: :null}
11:56:06.029 [debug] Processing constructed value: %{variant: :null}
11:56:06.029 [debug] do_bend final result: %{variant: :null}
11:56:06.029 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.029 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.029 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.029 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.029 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.029 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.029 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.030 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.030 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.030 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.030 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.030 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.030 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.030 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.030 [debug] Recursive field result for tail: %{variant: :null}
11:56:06.030 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.030 [debug] Recursive field result for tail: %{head: 10, tail: %{variant: :null}, variant: :cons}
11:56:06.030 [debug] do_fold called with non-function: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 4, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] Recursive field result for tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] do_fold called with non-function: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 3, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] Recursive field result for tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] do_fold called with non-function: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 2, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] Recursive field result for tail: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] do_fold called with non-function: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 1, tail: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] do_fold called with data: %{head: 2, tail: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.030 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] do_fold called with data: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.030 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] do_fold called with data: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.030 [debug] Processing recursive fields of: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] do_fold called with data: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.030 [debug] Processing recursive fields of: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.030 [debug] do_fold called with data: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.030 [debug] Processing recursive fields of: %{head: 10, tail: %{variant: :null}, variant: :cons}
11:56:06.030 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.030 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.030 [debug] Recursive field result for tail: []
11:56:06.031 [debug] do_fold called with non-variant data: []
11:56:06.031 [debug] Recursive field result for tail: '\n'
11:56:06.031 [debug] do_fold called with non-variant data: '\n'
11:56:06.031 [debug] Recursive field result for tail: '\b\n'
11:56:06.031 [debug] do_fold called with non-variant data: '\b\n'
11:56:06.031 [debug] Recursive field result for tail: [6, 8, 10]
11:56:06.031 [debug] do_fold called with non-variant data: [6, 8, 10]
11:56:06.031 [debug] Recursive field result for tail: [4, 6, 8, 10]
11:56:06.031 [debug] do_fold called with non-variant data: [4, 6, 8, 10]
.11:56:06.031 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:56:06.031 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:56:06.031 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:56:06.031 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:56:06.031 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.031 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.031 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.031 [debug] Executing bend with initial: [2, 3, 4, 5]
11:56:06.031 [debug] Executing fun with value: [2, 3, 4, 5]
11:56:06.031 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:56:06.031 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.031 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.031 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.031 [debug] Executing bend with initial: [3, 4, 5]
11:56:06.031 [debug] Executing fun with value: [3, 4, 5]
11:56:06.031 [debug] Evaluating bend block with value: [3, 4, 5]
11:56:06.031 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.031 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.031 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.031 [debug] Executing bend with initial: [4, 5]
11:56:06.031 [debug] Executing fun with value: [4, 5]
11:56:06.031 [debug] Evaluating bend block with value: [4, 5]
11:56:06.031 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.031 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.031 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.031 [debug] Executing bend with initial: [5]
11:56:06.031 [debug] Executing fun with value: [5]
11:56:06.031 [debug] Evaluating bend block with value: [5]
11:56:06.031 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.031 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.031 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.031 [debug] Executing bend with initial: []
11:56:06.031 [debug] Executing fun with value: []
11:56:06.031 [debug] Evaluating bend block with value: []
11:56:06.031 [debug] Block returned: %{variant: :null}
11:56:06.031 [debug] Fun returned result: %{variant: :null}
11:56:06.031 [debug] Processing constructed value: %{variant: :null}
11:56:06.031 [debug] do_bend final result: %{variant: :null}
11:56:06.031 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.031 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.031 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.031 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.031 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.031 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.032 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.032 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.032 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.032 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.032 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
11:56:06.032 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.032 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.032 [debug] Recursive field result for tail: %{variant: :null}
11:56:06.032 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: 1, tail: %{variant: :null}, variant: :cons}
11:56:06.032 [debug] Recursive field result for tail: %{head: 2, tail: %{variant: :null}, variant: :cons}
11:56:06.032 [debug] do_fold called with non-function: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 2, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] Recursive field result for tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] do_fold called with non-function: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 3, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] Recursive field result for tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] do_fold called with non-function: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 4, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] Recursive field result for tail: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] do_fold called with non-function: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 5, tail: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] do_fold called with data: %{head: 10, tail: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.032 [debug] Processing recursive fields of: %{head: 10, tail: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] do_fold called with data: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.032 [debug] Processing recursive fields of: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] do_fold called with data: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.032 [debug] Processing recursive fields of: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] do_fold called with data: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.032 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.032 [debug] do_fold called with data: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.032 [debug] Processing recursive fields of: %{head: 2, tail: %{variant: :null}, variant: :cons}
11:56:06.032 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.032 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.032 [debug] Recursive field result for tail: []
11:56:06.032 [debug] do_fold called with non-variant data: []
11:56:06.032 [debug] Recursive field result for tail: [2]
11:56:06.032 [debug] do_fold called with non-variant data: [2]
11:56:06.032 [debug] Recursive field result for tail: [4, 2]
11:56:06.032 [debug] do_fold called with non-variant data: [4, 2]
11:56:06.033 [debug] Recursive field result for tail: [6, 4, 2]
11:56:06.033 [debug] do_fold called with non-variant data: [6, 4, 2]
11:56:06.033 [debug] Recursive field result for tail: [8, 6, 4, 2]
11:56:06.033 [debug] do_fold called with non-variant data: [8, 6, 4, 2]
.11:56:06.033 [debug] Bend initial value: []
11:56:06.033 [debug] Executing bend with initial: []
11:56:06.033 [debug] Executing fun with value: []
11:56:06.033 [debug] Evaluating bend block with value: []
11:56:06.033 [debug] Block returned: %{variant: :null}
11:56:06.033 [debug] Fun returned result: %{variant: :null}
11:56:06.033 [debug] Processing constructed value: %{variant: :null}
11:56:06.033 [debug] do_bend final result: %{variant: :null}
11:56:06.033 [debug] Final bend result: %{variant: :null}
11:56:06.033 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.033 [debug] Processing recursive fields of: %{variant: :null}
.11:56:06.033 [debug] Bend initial value: []
11:56:06.033 [debug] Executing bend with initial: []
11:56:06.033 [debug] Executing fun with value: []
11:56:06.033 [debug] Evaluating bend block with value: []
11:56:06.033 [debug] Block returned: %{variant: :null}
11:56:06.033 [debug] Fun returned result: %{variant: :null}
11:56:06.033 [debug] Processing constructed value: %{variant: :null}
11:56:06.033 [debug] do_bend final result: %{variant: :null}
11:56:06.033 [debug] Final bend result: %{variant: :null}
11:56:06.033 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.033 [debug] Processing recursive fields of: %{variant: :null}
.11:56:06.033 [debug] Bend initial value: []
11:56:06.033 [debug] Executing bend with initial: []
11:56:06.033 [debug] Executing fun with value: []
11:56:06.033 [debug] Evaluating bend block with value: []
11:56:06.033 [debug] Block returned: %{variant: :null}
11:56:06.033 [debug] Fun returned result: %{variant: :null}
11:56:06.033 [debug] Processing constructed value: %{variant: :null}
11:56:06.033 [debug] do_bend final result: %{variant: :null}
11:56:06.033 [debug] Final bend result: %{variant: :null}
11:56:06.033 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.033 [debug] Processing recursive fields of: %{variant: :null}
.11:56:06.033 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:56:06.033 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:56:06.033 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:56:06.033 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:56:06.033 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.033 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.033 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.033 [debug] Executing bend with initial: [2, 3, 4, 5]
11:56:06.033 [debug] Executing fun with value: [2, 3, 4, 5]
11:56:06.033 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:56:06.033 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.033 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.033 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.033 [debug] Executing bend with initial: [3, 4, 5]
11:56:06.033 [debug] Executing fun with value: [3, 4, 5]
11:56:06.033 [debug] Evaluating bend block with value: [3, 4, 5]
11:56:06.033 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.033 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.033 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.034 [debug] Executing bend with initial: [4, 5]
11:56:06.034 [debug] Executing fun with value: [4, 5]
11:56:06.034 [debug] Evaluating bend block with value: [4, 5]
11:56:06.034 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.034 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.034 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.034 [debug] Executing bend with initial: [5]
11:56:06.034 [debug] Executing fun with value: [5]
11:56:06.034 [debug] Evaluating bend block with value: [5]
11:56:06.034 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.034 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.034 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.034 [debug] Executing bend with initial: []
11:56:06.034 [debug] Executing fun with value: []
11:56:06.034 [debug] Evaluating bend block with value: []
11:56:06.034 [debug] Block returned: %{variant: :null}
11:56:06.034 [debug] Fun returned result: %{variant: :null}
11:56:06.034 [debug] Processing constructed value: %{variant: :null}
11:56:06.034 [debug] do_bend final result: %{variant: :null}
11:56:06.034 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.034 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.034 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.034 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.034 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.034 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.034 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.034 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.034 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.034 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.034 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.034 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.034 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.034 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.034 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.034 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.034 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.034 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.034 [debug] Recursive field result for tail: []
11:56:06.034 [debug] do_fold called with non-variant data: []
11:56:06.034 [debug] Recursive field result for tail: [5]
11:56:06.034 [debug] do_fold called with non-variant data: [5]
11:56:06.034 [debug] Recursive field result for tail: [4, 5]
11:56:06.034 [debug] do_fold called with non-variant data: [4, 5]
11:56:06.034 [debug] Recursive field result for tail: [3, 4, 5]
11:56:06.034 [debug] do_fold called with non-variant data: [3, 4, 5]
11:56:06.034 [debug] Recursive field result for tail: [2, 3, 4, 5]
11:56:06.034 [debug] do_fold called with non-variant data: [2, 3, 4, 5]
.11:56:06.034 [debug] Bend initial value: [1, 2, 3]
11:56:06.034 [debug] Executing bend with initial: [1, 2, 3]
11:56:06.034 [debug] Executing fun with value: [1, 2, 3]
11:56:06.034 [debug] Evaluating bend block with value: [1, 2, 3]
11:56:06.034 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3]}, variant: :cons}
11:56:06.034 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3]}, variant: :cons}
11:56:06.034 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3]}, variant: :cons}
11:56:06.034 [debug] Executing bend with initial: [2, 3]
11:56:06.034 [debug] Executing fun with value: [2, 3]
11:56:06.034 [debug] Evaluating bend block with value: [2, 3]
11:56:06.034 [debug] Block returned: %{head: 2, tail: {:fork, [3]}, variant: :cons}
11:56:06.034 [debug] Fun returned result: %{head: 2, tail: {:fork, [3]}, variant: :cons}
11:56:06.034 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3]}, variant: :cons}
11:56:06.035 [debug] Executing bend with initial: [3]
11:56:06.035 [debug] Executing fun with value: [3]
11:56:06.035 [debug] Evaluating bend block with value: [3]
11:56:06.035 [debug] Block returned: %{head: 3, tail: {:fork, []}, variant: :cons}
11:56:06.035 [debug] Fun returned result: %{head: 3, tail: {:fork, []}, variant: :cons}
11:56:06.035 [debug] Processing constructed value: %{head: 3, tail: {:fork, []}, variant: :cons}
11:56:06.035 [debug] Executing bend with initial: []
11:56:06.035 [debug] Executing fun with value: []
11:56:06.035 [debug] Evaluating bend block with value: []
11:56:06.035 [debug] Block returned: %{variant: :null}
11:56:06.035 [debug] Fun returned result: %{variant: :null}
11:56:06.035 [debug] Processing constructed value: %{variant: :null}
11:56:06.035 [debug] do_bend final result: %{variant: :null}
11:56:06.035 [debug] do_bend final result: %{head: 3, tail: %{variant: :null}, variant: :cons}
11:56:06.035 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] Bend initial value: [4, 5, 6]
11:56:06.035 [debug] Executing bend with initial: [4, 5, 6]
11:56:06.035 [debug] Executing fun with value: [4, 5, 6]
11:56:06.035 [debug] Evaluating bend block with value: [4, 5, 6]
11:56:06.035 [debug] Block returned: %{head: 4, tail: {:fork, [5, 6]}, variant: :cons}
11:56:06.035 [debug] Fun returned result: %{head: 4, tail: {:fork, [5, 6]}, variant: :cons}
11:56:06.035 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5, 6]}, variant: :cons}
11:56:06.035 [debug] Executing bend with initial: [5, 6]
11:56:06.035 [debug] Executing fun with value: [5, 6]
11:56:06.035 [debug] Evaluating bend block with value: [5, 6]
11:56:06.035 [debug] Block returned: %{head: 5, tail: {:fork, [6]}, variant: :cons}
11:56:06.035 [debug] Fun returned result: %{head: 5, tail: {:fork, [6]}, variant: :cons}
11:56:06.035 [debug] Processing constructed value: %{head: 5, tail: {:fork, [6]}, variant: :cons}
11:56:06.035 [debug] Executing bend with initial: [6]
11:56:06.035 [debug] Executing fun with value: [6]
11:56:06.035 [debug] Evaluating bend block with value: [6]
11:56:06.035 [debug] Block returned: %{head: 6, tail: {:fork, []}, variant: :cons}
11:56:06.035 [debug] Fun returned result: %{head: 6, tail: {:fork, []}, variant: :cons}
11:56:06.035 [debug] Processing constructed value: %{head: 6, tail: {:fork, []}, variant: :cons}
11:56:06.035 [debug] Executing bend with initial: []
11:56:06.035 [debug] Executing fun with value: []
11:56:06.035 [debug] Evaluating bend block with value: []
11:56:06.035 [debug] Block returned: %{variant: :null}
11:56:06.035 [debug] Fun returned result: %{variant: :null}
11:56:06.035 [debug] Processing constructed value: %{variant: :null}
11:56:06.035 [debug] do_bend final result: %{variant: :null}
11:56:06.035 [debug] do_bend final result: %{head: 6, tail: %{variant: :null}, variant: :cons}
11:56:06.035 [debug] do_bend final result: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] Final bend result: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.035 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.035 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] do_fold called with data: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.035 [debug] Processing recursive fields of: %{head: 3, tail: %{variant: :null}, variant: :cons}
11:56:06.035 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.035 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.035 [debug] Recursive field result for tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] do_fold called with non-function: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] Recursive field result for tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] do_fold called with non-function: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] Recursive field result for tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] do_fold called with non-function: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.035 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.036 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.036 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.036 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.036 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.036 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.036 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.036 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.036 [debug] do_fold called with data: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.036 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.036 [debug] do_fold called with data: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.036 [debug] Processing recursive fields of: %{head: 6, tail: %{variant: :null}, variant: :cons}
11:56:06.036 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.036 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.036 [debug] Recursive field result for tail: []
11:56:06.036 [debug] do_fold called with non-variant data: []
11:56:06.036 [debug] Recursive field result for tail: [6]
11:56:06.036 [debug] do_fold called with non-variant data: [6]
11:56:06.036 [debug] Recursive field result for tail: [5, 6]
11:56:06.036 [debug] do_fold called with non-variant data: [5, 6]
.11:56:06.036 [debug] Recursive field result for tail: [4, 5, 6]
11:56:06.036 [debug] do_fold called with non-variant data: [4, 5, 6]
11:56:06.036 [debug] Recursive field result for tail: [3, 4, 5, 6]
11:56:06.036 [debug] do_fold called with non-variant data: [3, 4, 5, 6]
11:56:06.036 [debug] Recursive field result for tail: [2, 3, 4, 5, 6]
11:56:06.036 [debug] do_fold called with non-variant data: [2, 3, 4, 5, 6]
11:56:06.036 [debug] Bend initial value: ["a", "b", "c"]
11:56:06.036 [debug] Executing bend with initial: ["a", "b", "c"]
11:56:06.036 [debug] Executing fun with value: ["a", "b", "c"]
11:56:06.036 [debug] Evaluating bend block with value: ["a", "b", "c"]
11:56:06.036 [debug] Block returned: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
11:56:06.036 [debug] Fun returned result: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
11:56:06.036 [debug] Processing constructed value: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
11:56:06.036 [debug] Executing bend with initial: ["b", "c"]
11:56:06.036 [debug] Executing fun with value: ["b", "c"]
11:56:06.036 [debug] Evaluating bend block with value: ["b", "c"]
11:56:06.036 [debug] Block returned: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
11:56:06.036 [debug] Fun returned result: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
11:56:06.036 [debug] Processing constructed value: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
11:56:06.036 [debug] Executing bend with initial: ["c"]
11:56:06.036 [debug] Executing fun with value: ["c"]
11:56:06.036 [debug] Evaluating bend block with value: ["c"]
11:56:06.036 [debug] Block returned: %{head: "c", tail: {:fork, []}, variant: :cons}
11:56:06.036 [debug] Fun returned result: %{head: "c", tail: {:fork, []}, variant: :cons}
11:56:06.036 [debug] Processing constructed value: %{head: "c", tail: {:fork, []}, variant: :cons}
11:56:06.036 [debug] Executing bend with initial: []
11:56:06.036 [debug] Executing fun with value: []
11:56:06.036 [debug] Evaluating bend block with value: []
11:56:06.036 [debug] Block returned: %{variant: :null}
11:56:06.036 [debug] Fun returned result: %{variant: :null}
11:56:06.036 [debug] Processing constructed value: %{variant: :null}
11:56:06.036 [debug] do_bend final result: %{variant: :null}
11:56:06.036 [debug] do_bend final result: %{head: "c", tail: %{variant: :null}, variant: :cons}
11:56:06.036 [debug] do_bend final result: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.036 [debug] do_bend final result: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.036 [debug] Final bend result: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.036 [debug] do_fold called with data: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: ""
11:56:06.036 [debug] Processing recursive fields of: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.037 [debug] do_fold called with data: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: ""
11:56:06.037 [debug] Processing recursive fields of: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.037 [debug] do_fold called with data: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: ""
11:56:06.037 [debug] Processing recursive fields of: %{head: "c", tail: %{variant: :null}, variant: :cons}
11:56:06.037 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: ""
11:56:06.037 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.037 [debug] Recursive field result for tail: {%{variant: :null}, ""}
11:56:06.037 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: "", non_fun: %{head: "c", tail: %{variant: :null}, variant: :cons}
11:56:06.037 [debug] Recursive field result for tail: {%{variant: :null}, "c"}
11:56:06.037 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: "c", non_fun: %{head: "b", tail: %{variant: :null}, variant: :cons}
11:56:06.037 [debug] Recursive field result for tail: {%{variant: :null}, "bc"}
11:56:06.037 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: "bc", non_fun: %{head: "a", tail: %{variant: :null}, variant: :cons}
.11:56:06.037 [debug] Bend initial value: ["a", "b", "aa", "bb", "aaa"]
11:56:06.037 [debug] Executing bend with initial: ["a", "b", "aa", "bb", "aaa"]
11:56:06.037 [debug] Executing fun with value: ["a", "b", "aa", "bb", "aaa"]
11:56:06.037 [debug] Evaluating bend block with value: ["a", "b", "aa", "bb", "aaa"]
11:56:06.037 [debug] Block returned: %{head: "a", tail: {:fork, ["b", "aa", "bb", "aaa"]}, variant: :cons}
11:56:06.037 [debug] Fun returned result: %{head: "a", tail: {:fork, ["b", "aa", "bb", "aaa"]}, variant: :cons}
11:56:06.037 [debug] Processing constructed value: %{head: "a", tail: {:fork, ["b", "aa", "bb", "aaa"]}, variant: :cons}
11:56:06.037 [debug] Executing bend with initial: ["b", "aa", "bb", "aaa"]
11:56:06.037 [debug] Executing fun with value: ["b", "aa", "bb", "aaa"]
11:56:06.037 [debug] Evaluating bend block with value: ["b", "aa", "bb", "aaa"]
11:56:06.037 [debug] Block returned: %{head: "b", tail: {:fork, ["aa", "bb", "aaa"]}, variant: :cons}
11:56:06.037 [debug] Fun returned result: %{head: "b", tail: {:fork, ["aa", "bb", "aaa"]}, variant: :cons}
11:56:06.037 [debug] Processing constructed value: %{head: "b", tail: {:fork, ["aa", "bb", "aaa"]}, variant: :cons}
11:56:06.037 [debug] Executing bend with initial: ["aa", "bb", "aaa"]
11:56:06.037 [debug] Executing fun with value: ["aa", "bb", "aaa"]
11:56:06.037 [debug] Evaluating bend block with value: ["aa", "bb", "aaa"]
11:56:06.037 [debug] Block returned: %{head: "aa", tail: {:fork, ["bb", "aaa"]}, variant: :cons}
11:56:06.037 [debug] Fun returned result: %{head: "aa", tail: {:fork, ["bb", "aaa"]}, variant: :cons}
11:56:06.037 [debug] Processing constructed value: %{head: "aa", tail: {:fork, ["bb", "aaa"]}, variant: :cons}
11:56:06.037 [debug] Executing bend with initial: ["bb", "aaa"]
11:56:06.037 [debug] Executing fun with value: ["bb", "aaa"]
11:56:06.037 [debug] Evaluating bend block with value: ["bb", "aaa"]
11:56:06.037 [debug] Block returned: %{head: "bb", tail: {:fork, ["aaa"]}, variant: :cons}
11:56:06.037 [debug] Fun returned result: %{head: "bb", tail: {:fork, ["aaa"]}, variant: :cons}
11:56:06.037 [debug] Processing constructed value: %{head: "bb", tail: {:fork, ["aaa"]}, variant: :cons}
11:56:06.037 [debug] Executing bend with initial: ["aaa"]
11:56:06.037 [debug] Executing fun with value: ["aaa"]
11:56:06.037 [debug] Evaluating bend block with value: ["aaa"]
11:56:06.037 [debug] Block returned: %{head: "aaa", tail: {:fork, []}, variant: :cons}
11:56:06.037 [debug] Fun returned result: %{head: "aaa", tail: {:fork, []}, variant: :cons}
11:56:06.037 [debug] Processing constructed value: %{head: "aaa", tail: {:fork, []}, variant: :cons}
11:56:06.037 [debug] Executing bend with initial: []
11:56:06.037 [debug] Executing fun with value: []
11:56:06.037 [debug] Evaluating bend block with value: []
11:56:06.037 [debug] Block returned: %{variant: :null}
11:56:06.037 [debug] Fun returned result: %{variant: :null}
11:56:06.038 [debug] Processing constructed value: %{variant: :null}
11:56:06.038 [debug] do_bend final result: %{variant: :null}
11:56:06.038 [debug] do_bend final result: %{head: "aaa", tail: %{variant: :null}, variant: :cons}
11:56:06.038 [debug] do_bend final result: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_bend final result: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_bend final result: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_bend final result: %{head: "a", tail: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] Final bend result: %{head: "a", tail: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_fold called with data: %{head: "a", tail: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.038 [debug] Processing recursive fields of: %{head: "a", tail: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_fold called with data: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.038 [debug] Processing recursive fields of: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_fold called with data: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.038 [debug] Processing recursive fields of: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_fold called with data: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.038 [debug] Processing recursive fields of: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_fold called with data: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.038 [debug] Processing recursive fields of: %{head: "aaa", tail: %{variant: :null}, variant: :cons}
11:56:06.038 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.038 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.038 [debug] Recursive field result for tail: %{variant: :null}
11:56:06.038 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: "aaa", tail: %{variant: :null}, variant: :cons}
11:56:06.038 [debug] Recursive field result for tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}
11:56:06.038 [debug] do_fold called with non-function: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] Recursive field result for tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_fold called with non-function: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] Recursive field result for tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_fold called with non-function: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] Recursive field result for tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_fold called with non-function: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: "a", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_fold called with data: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.038 [debug] Processing recursive fields of: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_fold called with data: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.038 [debug] Processing recursive fields of: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.038 [debug] do_fold called with data: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.038 [debug] Processing recursive fields of: %{head: "aaa", tail: %{variant: :null}, variant: :cons}
11:56:06.038 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.038 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.038 [debug] Recursive field result for tail: []
11:56:06.038 [debug] do_fold called with non-variant data: []
11:56:06.038 [debug] Recursive field result for tail: ["aaa"]
11:56:06.038 [debug] do_fold called with non-variant data: ["aaa"]
11:56:06.038 [debug] Recursive field result for tail: ["bb", "aaa"]
11:56:06.038 [debug] do_fold called with non-variant data: ["bb", "aaa"]
.11:56:06.039 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:56:06.039 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:56:06.039 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:56:06.039 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:56:06.039 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.039 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.039 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.039 [debug] Executing bend with initial: [2, 3, 4, 5]
11:56:06.039 [debug] Executing fun with value: [2, 3, 4, 5]
11:56:06.039 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:56:06.039 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.039 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.039 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.039 [debug] Executing bend with initial: [3, 4, 5]
11:56:06.039 [debug] Executing fun with value: [3, 4, 5]
11:56:06.039 [debug] Evaluating bend block with value: [3, 4, 5]
11:56:06.039 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.039 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.039 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.039 [debug] Executing bend with initial: [4, 5]
11:56:06.039 [debug] Executing fun with value: [4, 5]
11:56:06.039 [debug] Evaluating bend block with value: [4, 5]
11:56:06.039 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.039 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.039 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.039 [debug] Executing bend with initial: [5]
11:56:06.039 [debug] Executing fun with value: [5]
11:56:06.039 [debug] Evaluating bend block with value: [5]
11:56:06.039 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.039 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.039 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.039 [debug] Executing bend with initial: []
11:56:06.039 [debug] Executing fun with value: []
11:56:06.039 [debug] Evaluating bend block with value: []
11:56:06.039 [debug] Block returned: %{variant: :null}
11:56:06.039 [debug] Fun returned result: %{variant: :null}
11:56:06.039 [debug] Processing constructed value: %{variant: :null}
11:56:06.039 [debug] do_bend final result: %{variant: :null}
11:56:06.039 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.039 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.039 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.039 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.039 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.039 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.039 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.039 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.039 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.039 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.039 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.039 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.039 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.039 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.039 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.039 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
11:56:06.039 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.039 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.039 [debug] Recursive field result for tail: []
11:56:06.039 [debug] do_fold called with non-variant data: []
11:56:06.039 [debug] Recursive field result for tail: [1]
11:56:06.040 [debug] do_fold called with non-variant data: [1]
11:56:06.040 [debug] Recursive field result for tail: [2, 1]
11:56:06.040 [debug] do_fold called with non-variant data: [2, 1]
11:56:06.040 [debug] Recursive field result for tail: [3, 2, 1]
11:56:06.040 [debug] do_fold called with non-variant data: [3, 2, 1]
11:56:06.040 [debug] Recursive field result for tail: [4, 3, 2, 1]
11:56:06.040 [debug] do_fold called with non-variant data: [4, 3, 2, 1]
.11:56:06.040 [debug] Bend initial value: []
11:56:06.040 [debug] Executing bend with initial: []
11:56:06.040 [debug] Executing fun with value: []
11:56:06.040 [debug] Evaluating bend block with value: []
11:56:06.040 [debug] Block returned: %{variant: :null}
11:56:06.040 [debug] Fun returned result: %{variant: :null}
11:56:06.040 [debug] Processing constructed value: %{variant: :null}
11:56:06.040 [debug] do_bend final result: %{variant: :null}
11:56:06.040 [debug] Final bend result: %{variant: :null}
11:56:06.040 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.040 [debug] Processing recursive fields of: %{variant: :null}
.11:56:06.040 [debug] Bend initial value: []
11:56:06.040 [debug] Executing bend with initial: []
11:56:06.040 [debug] Executing fun with value: []
11:56:06.040 [debug] Evaluating bend block with value: []
11:56:06.040 [debug] Block returned: %{variant: :null}
11:56:06.040 [debug] Fun returned result: %{variant: :null}
11:56:06.040 [debug] Processing constructed value: %{variant: :null}
11:56:06.040 [debug] do_bend final result: %{variant: :null}
11:56:06.040 [debug] Final bend result: %{variant: :null}
11:56:06.040 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.040 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.040 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.040 [debug] Processing recursive fields of: %{variant: :null}
.11:56:06.040 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:56:06.040 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:56:06.040 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:56:06.040 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:56:06.040 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.040 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.040 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.040 [debug] Executing bend with initial: [2, 3, 4, 5]
11:56:06.040 [debug] Executing fun with value: [2, 3, 4, 5]
11:56:06.040 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:56:06.040 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.040 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.040 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.040 [debug] Executing bend with initial: [3, 4, 5]
11:56:06.040 [debug] Executing fun with value: [3, 4, 5]
11:56:06.040 [debug] Evaluating bend block with value: [3, 4, 5]
11:56:06.040 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.040 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.040 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.040 [debug] Executing bend with initial: [4, 5]
11:56:06.040 [debug] Executing fun with value: [4, 5]
11:56:06.040 [debug] Evaluating bend block with value: [4, 5]
11:56:06.040 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.040 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.040 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.040 [debug] Executing bend with initial: [5]
11:56:06.040 [debug] Executing fun with value: [5]
11:56:06.040 [debug] Evaluating bend block with value: [5]
11:56:06.040 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.040 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.040 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.040 [debug] Executing bend with initial: []
11:56:06.040 [debug] Executing fun with value: []
11:56:06.040 [debug] Evaluating bend block with value: []
11:56:06.040 [debug] Block returned: %{variant: :null}
11:56:06.040 [debug] Fun returned result: %{variant: :null}
11:56:06.040 [debug] Processing constructed value: %{variant: :null}
11:56:06.040 [debug] do_bend final result: %{variant: :null}
11:56:06.040 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.041 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.041 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.041 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.041 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.041 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.041 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 0
11:56:06.041 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.041 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 0
11:56:06.041 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.041 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 0
11:56:06.041 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.041 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 0
11:56:06.041 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.041 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 0
11:56:06.041 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.041 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 0
11:56:06.041 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.041 [debug] Recursive field result for tail: {%{variant: :null}, 0}
11:56:06.041 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 0, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.041 [debug] Recursive field result for tail: {%{variant: :null}, 5}
11:56:06.041 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 5, non_fun: %{head: 4, tail: %{variant: :null}, variant: :cons}
11:56:06.041 [debug] Recursive field result for tail: {%{variant: :null}, 9}
11:56:06.041 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 9, non_fun: %{head: 3, tail: %{variant: :null}, variant: :cons}
11:56:06.041 [debug] Recursive field result for tail: {%{variant: :null}, 12}
11:56:06.041 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 12, non_fun: %{head: 2, tail: %{variant: :null}, variant: :cons}
11:56:06.041 [debug] Recursive field result for tail: {%{variant: :null}, 14}
11:56:06.041 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 14, non_fun: %{head: 1, tail: %{variant: :null}, variant: :cons}
.11:56:06.041 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:56:06.041 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:56:06.041 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:56:06.041 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:56:06.041 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.041 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.041 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.041 [debug] Executing bend with initial: [2, 3, 4, 5]
11:56:06.041 [debug] Executing fun with value: [2, 3, 4, 5]
11:56:06.041 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:56:06.041 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.041 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.041 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.042 [debug] Executing bend with initial: [3, 4, 5]
11:56:06.042 [debug] Executing fun with value: [3, 4, 5]
11:56:06.042 [debug] Evaluating bend block with value: [3, 4, 5]
11:56:06.042 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.042 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.042 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.042 [debug] Executing bend with initial: [4, 5]
11:56:06.042 [debug] Executing fun with value: [4, 5]
11:56:06.042 [debug] Evaluating bend block with value: [4, 5]
11:56:06.042 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.042 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.042 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.042 [debug] Executing bend with initial: [5]
11:56:06.042 [debug] Executing fun with value: [5]
11:56:06.042 [debug] Evaluating bend block with value: [5]
11:56:06.042 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.042 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.042 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.042 [debug] Executing bend with initial: []
11:56:06.042 [debug] Executing fun with value: []
11:56:06.042 [debug] Evaluating bend block with value: []
11:56:06.042 [debug] Block returned: %{variant: :null}
11:56:06.042 [debug] Fun returned result: %{variant: :null}
11:56:06.042 [debug] Processing constructed value: %{variant: :null}
11:56:06.042 [debug] do_bend final result: %{variant: :null}
11:56:06.042 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.042 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.042 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.042 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.042 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.042 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.042 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.042 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.042 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.042 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.042 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.042 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.042 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.042 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.042 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.042 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.042 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.042 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.042 [debug] Recursive field result for tail: 0
11:56:06.042 [debug] do_fold called with non-variant data: 0
11:56:06.042 [debug] Recursive field result for tail: 1
11:56:06.042 [debug] do_fold called with non-variant data: 1
11:56:06.042 [debug] Recursive field result for tail: 2
11:56:06.042 [debug] do_fold called with non-variant data: 2
11:56:06.042 [debug] Recursive field result for tail: 3
11:56:06.042 [debug] do_fold called with non-variant data: 3
11:56:06.042 [debug] Recursive field result for tail: 4
11:56:06.042 [debug] do_fold called with non-variant data: 4
.11:56:06.043 [debug] Bend initial value: []
11:56:06.043 [debug] Executing bend with initial: []
11:56:06.043 [debug] Executing fun with value: []
11:56:06.043 [debug] Evaluating bend block with value: []
11:56:06.043 [debug] Block returned: %{variant: :null}
11:56:06.043 [debug] Fun returned result: %{variant: :null}
11:56:06.043 [debug] Processing constructed value: %{variant: :null}
11:56:06.043 [debug] do_bend final result: %{variant: :null}
11:56:06.043 [debug] Final bend result: %{variant: :null}
11:56:06.043 [debug] Bend initial value: {%{variant: :null}, 3}
11:56:06.043 [debug] Executing bend with initial: {%{variant: :null}, 3}
11:56:06.043 [debug] Executing fun with value: {%{variant: :null}, 3}
11:56:06.043 [debug] Evaluating bend block with value: {%{variant: :null}, 3}
11:56:06.043 [debug] Block returned: %{variant: :null}
11:56:06.043 [debug] Fun returned result: %{variant: :null}
11:56:06.043 [debug] Processing constructed value: %{variant: :null}
11:56:06.043 [debug] do_bend final result: %{variant: :null}
11:56:06.043 [debug] Final bend result: %{variant: :null}
11:56:06.043 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.043 [debug] Processing recursive fields of: %{variant: :null}
.11:56:06.043 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:56:06.043 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:56:06.043 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:56:06.043 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:56:06.043 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.043 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.043 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.043 [debug] Executing bend with initial: [2, 3, 4, 5]
11:56:06.043 [debug] Executing fun with value: [2, 3, 4, 5]
11:56:06.043 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:56:06.043 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.043 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.043 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.043 [debug] Executing bend with initial: [3, 4, 5]
11:56:06.043 [debug] Executing fun with value: [3, 4, 5]
11:56:06.043 [debug] Evaluating bend block with value: [3, 4, 5]
11:56:06.043 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.043 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.043 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.043 [debug] Executing bend with initial: [4, 5]
11:56:06.043 [debug] Executing fun with value: [4, 5]
11:56:06.043 [debug] Evaluating bend block with value: [4, 5]
11:56:06.043 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.043 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.043 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.043 [debug] Executing bend with initial: [5]
11:56:06.043 [debug] Executing fun with value: [5]
11:56:06.043 [debug] Evaluating bend block with value: [5]
11:56:06.043 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.043 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.043 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.043 [debug] Executing bend with initial: []
11:56:06.043 [debug] Executing fun with value: []
11:56:06.043 [debug] Evaluating bend block with value: []
11:56:06.043 [debug] Block returned: %{variant: :null}
11:56:06.043 [debug] Fun returned result: %{variant: :null}
11:56:06.043 [debug] Processing constructed value: %{variant: :null}
11:56:06.043 [debug] do_bend final result: %{variant: :null}
11:56:06.043 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.043 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.044 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.044 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.044 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.044 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.044 [debug] Bend initial value: {%{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 3}
11:56:06.044 [debug] Executing bend with initial: {%{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 3}
11:56:06.044 [debug] Executing fun with value: {%{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 3}
11:56:06.044 [debug] Evaluating bend block with value: {%{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 3}
11:56:06.044 [debug] Block returned: %{head: 1, tail: {:fork, {%{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 2}}, variant: :cons}
11:56:06.044 [debug] Fun returned result: %{head: 1, tail: {:fork, {%{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 2}}, variant: :cons}
11:56:06.044 [debug] Processing constructed value: %{head: 1, tail: {:fork, {%{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 2}}, variant: :cons}
11:56:06.044 [debug] Executing bend with initial: {%{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 2}
11:56:06.044 [debug] Executing fun with value: {%{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 2}
11:56:06.044 [debug] Evaluating bend block with value: {%{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 2}
11:56:06.044 [debug] Block returned: %{head: 2, tail: {:fork, {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 1}}, variant: :cons}
11:56:06.044 [debug] Fun returned result: %{head: 2, tail: {:fork, {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 1}}, variant: :cons}
11:56:06.044 [debug] Processing constructed value: %{head: 2, tail: {:fork, {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 1}}, variant: :cons}
11:56:06.044 [debug] Executing bend with initial: {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 1}
11:56:06.044 [debug] Executing fun with value: {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 1}
11:56:06.044 [debug] Evaluating bend block with value: {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 1}
11:56:06.044 [debug] Block returned: %{head: 3, tail: {:fork, {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 0}}, variant: :cons}
11:56:06.044 [debug] Fun returned result: %{head: 3, tail: {:fork, {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 0}}, variant: :cons}
11:56:06.044 [debug] Processing constructed value: %{head: 3, tail: {:fork, {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 0}}, variant: :cons}
11:56:06.044 [debug] Executing bend with initial: {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 0}
11:56:06.044 [debug] Executing fun with value: {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 0}
11:56:06.044 [debug] Evaluating bend block with value: {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 0}
11:56:06.044 [debug] Block returned: %{variant: :null}
11:56:06.044 [debug] Fun returned result: %{variant: :null}
11:56:06.044 [debug] Processing constructed value: %{variant: :null}
11:56:06.044 [debug] do_bend final result: %{variant: :null}
11:56:06.044 [debug] do_bend final result: %{head: 3, tail: %{variant: :null}, variant: :cons}
11:56:06.044 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.044 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.044 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.044 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.044 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.044 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
.11:56:06.045 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.045 [debug] do_fold called with data: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.045 [debug] Processing recursive fields of: %{head: 3, tail: %{variant: :null}, variant: :cons}
11:56:06.045 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.045 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.045 [debug] Recursive field result for tail: []
11:56:06.045 [debug] do_fold called with non-variant data: []
11:56:06.045 [debug] Recursive field result for tail: [3]
11:56:06.045 [debug] do_fold called with non-variant data: [3]
11:56:06.045 [debug] Recursive field result for tail: [2, 3]
11:56:06.045 [debug] do_fold called with non-variant data: [2, 3]
11:56:06.045 [debug] Bend initial value: [1, 2, 3]
11:56:06.045 [debug] Executing bend with initial: [1, 2, 3]
11:56:06.045 [debug] Executing fun with value: [1, 2, 3]
11:56:06.045 [debug] Evaluating bend block with value: [1, 2, 3]
11:56:06.045 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3]}, variant: :cons}
11:56:06.045 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3]}, variant: :cons}
11:56:06.045 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3]}, variant: :cons}
11:56:06.045 [debug] Executing bend with initial: [2, 3]
11:56:06.045 [debug] Executing fun with value: [2, 3]
11:56:06.045 [debug] Evaluating bend block with value: [2, 3]
11:56:06.045 [debug] Block returned: %{head: 2, tail: {:fork, [3]}, variant: :cons}
11:56:06.045 [debug] Fun returned result: %{head: 2, tail: {:fork, [3]}, variant: :cons}
11:56:06.045 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3]}, variant: :cons}
11:56:06.045 [debug] Executing bend with initial: [3]
11:56:06.045 [debug] Executing fun with value: [3]
11:56:06.045 [debug] Evaluating bend block with value: [3]
11:56:06.045 [debug] Block returned: %{head: 3, tail: {:fork, []}, variant: :cons}
11:56:06.045 [debug] Fun returned result: %{head: 3, tail: {:fork, []}, variant: :cons}
11:56:06.045 [debug] Processing constructed value: %{head: 3, tail: {:fork, []}, variant: :cons}
11:56:06.045 [debug] Executing bend with initial: []
11:56:06.045 [debug] Executing fun with value: []
11:56:06.045 [debug] Evaluating bend block with value: []
11:56:06.045 [debug] Block returned: %{variant: :null}
11:56:06.045 [debug] Fun returned result: %{variant: :null}
11:56:06.045 [debug] Processing constructed value: %{variant: :null}
11:56:06.045 [debug] do_bend final result: %{variant: :null}
11:56:06.045 [debug] do_bend final result: %{head: 3, tail: %{variant: :null}, variant: :cons}
11:56:06.045 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.045 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.045 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.045 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.045 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.045 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.045 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.045 [debug] do_fold called with data: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.045 [debug] Processing recursive fields of: %{head: 3, tail: %{variant: :null}, variant: :cons}
11:56:06.045 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.045 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.045 [debug] Recursive field result for tail: []
11:56:06.045 [debug] do_fold called with non-variant data: []
11:56:06.045 [debug] Recursive field result for tail: [3]
11:56:06.045 [debug] do_fold called with non-variant data: [3]
11:56:06.045 [debug] Recursive field result for tail: [2, 3]
11:56:06.045 [debug] do_fold called with non-variant data: [2, 3]
.11:56:06.045 [debug] Bend initial value: []
11:56:06.045 [debug] Executing bend with initial: []
11:56:06.045 [debug] Executing fun with value: []
11:56:06.045 [debug] Evaluating bend block with value: []
11:56:06.045 [debug] Block returned: %{variant: :null}
11:56:06.045 [debug] Fun returned result: %{variant: :null}
11:56:06.046 [debug] Processing constructed value: %{variant: :null}
11:56:06.046 [debug] do_bend final result: %{variant: :null}
11:56:06.046 [debug] Final bend result: %{variant: :null}
11:56:06.046 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.046 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.046 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.046 [debug] Processing recursive fields of: %{variant: :null}
.11:56:06.046 [debug] Bend initial value: []
11:56:06.046 [debug] Executing bend with initial: []
11:56:06.046 [debug] Executing fun with value: []
11:56:06.046 [debug] Evaluating bend block with value: []
11:56:06.046 [debug] Block returned: %{variant: :null}
11:56:06.046 [debug] Fun returned result: %{variant: :null}
11:56:06.046 [debug] Processing constructed value: %{variant: :null}
11:56:06.046 [debug] do_bend final result: %{variant: :null}
11:56:06.046 [debug] Final bend result: %{variant: :null}
11:56:06.046 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.046 [debug] Processing recursive fields of: %{variant: :null}
.11:56:06.046 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:56:06.046 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:56:06.046 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:56:06.046 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:56:06.046 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.046 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.046 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.046 [debug] Executing bend with initial: [2, 3, 4, 5]
11:56:06.046 [debug] Executing fun with value: [2, 3, 4, 5]
11:56:06.046 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:56:06.046 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.046 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.046 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.046 [debug] Executing bend with initial: [3, 4, 5]
11:56:06.046 [debug] Executing fun with value: [3, 4, 5]
11:56:06.046 [debug] Evaluating bend block with value: [3, 4, 5]
11:56:06.046 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.046 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.046 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.046 [debug] Executing bend with initial: [4, 5]
11:56:06.046 [debug] Executing fun with value: [4, 5]
11:56:06.046 [debug] Evaluating bend block with value: [4, 5]
11:56:06.046 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.046 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.046 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.046 [debug] Executing bend with initial: [5]
11:56:06.046 [debug] Executing fun with value: [5]
11:56:06.046 [debug] Evaluating bend block with value: [5]
11:56:06.046 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.046 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.046 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.046 [debug] Executing bend with initial: []
11:56:06.046 [debug] Executing fun with value: []
11:56:06.046 [debug] Evaluating bend block with value: []
11:56:06.046 [debug] Block returned: %{variant: :null}
11:56:06.046 [debug] Fun returned result: %{variant: :null}
11:56:06.046 [debug] Processing constructed value: %{variant: :null}
11:56:06.046 [debug] do_bend final result: %{variant: :null}
11:56:06.046 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.046 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.046 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.046 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.046 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.046 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.046 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.047 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.047 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.047 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.047 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
.11:56:06.047 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.047 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.047 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.047 [debug] Recursive field result for tail: []
11:56:06.047 [debug] do_fold called with non-variant data: []
11:56:06.047 [debug] Recursive field result for tail: [5]
11:56:06.047 [debug] do_fold called with non-variant data: [5]
11:56:06.047 [debug] Recursive field result for tail: [4, 5]
11:56:06.047 [debug] do_fold called with non-variant data: [4, 5]
11:56:06.047 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:56:06.047 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:56:06.047 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:56:06.047 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:56:06.047 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.047 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.047 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.047 [debug] Executing bend with initial: [2, 3, 4, 5]
11:56:06.047 [debug] Executing fun with value: [2, 3, 4, 5]
11:56:06.047 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:56:06.047 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.047 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.047 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.047 [debug] Executing bend with initial: [3, 4, 5]
11:56:06.047 [debug] Executing fun with value: [3, 4, 5]
11:56:06.047 [debug] Evaluating bend block with value: [3, 4, 5]
11:56:06.047 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.047 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.047 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.047 [debug] Executing bend with initial: [4, 5]
11:56:06.047 [debug] Executing fun with value: [4, 5]
11:56:06.047 [debug] Evaluating bend block with value: [4, 5]
11:56:06.047 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.047 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.047 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.047 [debug] Executing bend with initial: [5]
11:56:06.047 [debug] Executing fun with value: [5]
11:56:06.047 [debug] Evaluating bend block with value: [5]
11:56:06.047 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.047 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.047 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.047 [debug] Executing bend with initial: []
11:56:06.047 [debug] Executing fun with value: []
11:56:06.047 [debug] Evaluating bend block with value: []
11:56:06.047 [debug] Block returned: %{variant: :null}
11:56:06.047 [debug] Fun returned result: %{variant: :null}
11:56:06.047 [debug] Processing constructed value: %{variant: :null}
11:56:06.047 [debug] do_bend final result: %{variant: :null}
11:56:06.047 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.047 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.047 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.047 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.047 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
.11:56:06.047 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.047 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.048 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.048 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:56:06.048 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:56:06.048 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:56:06.048 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:56:06.048 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.048 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.048 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.048 [debug] Executing bend with initial: [2, 3, 4, 5]
11:56:06.048 [debug] Executing fun with value: [2, 3, 4, 5]
11:56:06.048 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:56:06.048 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.048 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.048 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.048 [debug] Executing bend with initial: [3, 4, 5]
11:56:06.048 [debug] Executing fun with value: [3, 4, 5]
11:56:06.048 [debug] Evaluating bend block with value: [3, 4, 5]
11:56:06.048 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.048 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.048 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.048 [debug] Executing bend with initial: [4, 5]
11:56:06.048 [debug] Executing fun with value: [4, 5]
11:56:06.048 [debug] Evaluating bend block with value: [4, 5]
11:56:06.048 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.048 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.048 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.048 [debug] Executing bend with initial: [5]
11:56:06.048 [debug] Executing fun with value: [5]
11:56:06.048 [debug] Evaluating bend block with value: [5]
11:56:06.048 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.048 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.048 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.048 [debug] Executing bend with initial: []
11:56:06.048 [debug] Executing fun with value: []
11:56:06.048 [debug] Evaluating bend block with value: []
11:56:06.048 [debug] Block returned: %{variant: :null}
11:56:06.048 [debug] Fun returned result: %{variant: :null}
11:56:06.048 [debug] Processing constructed value: %{variant: :null}
11:56:06.048 [debug] do_bend final result: %{variant: :null}
11:56:06.048 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.048 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.048 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.048 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.048 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.048 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.048 [debug] Bend initial value: []
11:56:06.048 [debug] Executing bend with initial: []
11:56:06.048 [debug] Executing fun with value: []
11:56:06.048 [debug] Evaluating bend block with value: []
11:56:06.048 [debug] Block returned: %{variant: :null}
11:56:06.048 [debug] Fun returned result: %{variant: :null}
11:56:06.048 [debug] Processing constructed value: %{variant: :null}
11:56:06.048 [debug] do_bend final result: %{variant: :null}
11:56:06.048 [debug] Final bend result: %{variant: :null}
11:56:06.048 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.048 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.048 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.049 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.049 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.049 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.049 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.049 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.049 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.049 [debug] Recursive field result for tail: %{variant: :null}
11:56:06.049 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.049 [debug] Recursive field result for tail: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.049 [debug] do_fold called with non-function: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] Recursive field result for tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] do_fold called with non-function: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] Recursive field result for tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] do_fold called with non-function: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] Recursive field result for tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] do_fold called with non-function: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.049 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.049 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.049 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.049 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.049 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.049 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.049 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.049 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.050 [debug] Recursive field result for tail: []
11:56:06.050 [debug] do_fold called with non-variant data: []
11:56:06.050 [debug] Recursive field result for tail: [5]
11:56:06.050 [debug] do_fold called with non-variant data: [5]
11:56:06.050 [debug] Recursive field result for tail: [4, 5]
11:56:06.050 [debug] do_fold called with non-variant data: [4, 5]
11:56:06.050 [debug] Recursive field result for tail: [3, 4, 5]
11:56:06.050 [debug] do_fold called with non-variant data: [3, 4, 5]
11:56:06.050 [debug] Recursive field result for tail: [2, 3, 4, 5]
11:56:06.050 [debug] do_fold called with non-variant data: [2, 3, 4, 5]
11:56:06.050 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.050 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.050 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.050 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.050 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.050 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.050 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.050 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.050 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.050 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.050 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.050 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.050 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.050 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.050 [debug] Recursive field result for tail: []
11:56:06.050 [debug] do_fold called with non-variant data: []
11:56:06.050 [debug] Recursive field result for tail: [5]
11:56:06.050 [debug] do_fold called with non-variant data: [5]
11:56:06.050 [debug] Recursive field result for tail: [4, 5]
11:56:06.050 [debug] do_fold called with non-variant data: [4, 5]
11:56:06.050 [debug] Recursive field result for tail: [3, 4, 5]
11:56:06.050 [debug] do_fold called with non-variant data: [3, 4, 5]
11:56:06.050 [debug] Recursive field result for tail: [2, 3, 4, 5]
11:56:06.050 [debug] do_fold called with non-variant data: [2, 3, 4, 5]
.11:56:06.050 [debug] Bend initial value: ["a", "b", "c"]
11:56:06.050 [debug] Executing bend with initial: ["a", "b", "c"]
11:56:06.050 [debug] Executing fun with value: ["a", "b", "c"]
11:56:06.050 [debug] Evaluating bend block with value: ["a", "b", "c"]
11:56:06.050 [debug] Block returned: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
11:56:06.050 [debug] Fun returned result: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
11:56:06.051 [debug] Processing constructed value: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
11:56:06.051 [debug] Executing bend with initial: ["b", "c"]
11:56:06.051 [debug] Executing fun with value: ["b", "c"]
11:56:06.051 [debug] Evaluating bend block with value: ["b", "c"]
11:56:06.051 [debug] Block returned: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
11:56:06.051 [debug] Fun returned result: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
11:56:06.051 [debug] Processing constructed value: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
11:56:06.051 [debug] Executing bend with initial: ["c"]
11:56:06.051 [debug] Executing fun with value: ["c"]
11:56:06.051 [debug] Evaluating bend block with value: ["c"]
11:56:06.051 [debug] Block returned: %{head: "c", tail: {:fork, []}, variant: :cons}
11:56:06.051 [debug] Fun returned result: %{head: "c", tail: {:fork, []}, variant: :cons}
11:56:06.051 [debug] Processing constructed value: %{head: "c", tail: {:fork, []}, variant: :cons}
11:56:06.051 [debug] Executing bend with initial: []
11:56:06.051 [debug] Executing fun with value: []
11:56:06.051 [debug] Evaluating bend block with value: []
11:56:06.051 [debug] Block returned: %{variant: :null}
11:56:06.051 [debug] Fun returned result: %{variant: :null}
11:56:06.051 [debug] Processing constructed value: %{variant: :null}
11:56:06.051 [debug] do_bend final result: %{variant: :null}
11:56:06.051 [debug] do_bend final result: %{head: "c", tail: %{variant: :null}, variant: :cons}
11:56:06.051 [debug] do_bend final result: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.051 [debug] do_bend final result: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.051 [debug] Final bend result: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.051 [debug] do_fold called with data: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.051 [debug] Processing recursive fields of: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.051 [debug] do_fold called with data: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.051 [debug] Processing recursive fields of: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.051 [debug] do_fold called with data: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.051 [debug] Processing recursive fields of: %{head: "c", tail: %{variant: :null}, variant: :cons}
11:56:06.051 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.051 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.051 [debug] Recursive field result for tail: []
11:56:06.051 [debug] do_fold called with non-variant data: []
11:56:06.051 [debug] Recursive field result for tail: ["c"]
11:56:06.051 [debug] do_fold called with non-variant data: ["c"]
11:56:06.051 [debug] Recursive field result for tail: ["b", "c"]
11:56:06.051 [debug] do_fold called with non-variant data: ["b", "c"]
.11:56:06.051 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:56:06.051 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:56:06.051 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:56:06.051 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:56:06.051 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.051 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.051 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.051 [debug] Executing bend with initial: [2, 3, 4, 5]
11:56:06.051 [debug] Executing fun with value: [2, 3, 4, 5]
11:56:06.051 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:56:06.051 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.051 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.051 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.051 [debug] Executing bend with initial: [3, 4, 5]
11:56:06.051 [debug] Executing fun with value: [3, 4, 5]
11:56:06.051 [debug] Evaluating bend block with value: [3, 4, 5]
11:56:06.051 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.051 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.051 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.051 [debug] Executing bend with initial: [4, 5]
11:56:06.051 [debug] Executing fun with value: [4, 5]
11:56:06.051 [debug] Evaluating bend block with value: [4, 5]
11:56:06.051 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.051 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.051 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.052 [debug] Executing bend with initial: [5]
11:56:06.052 [debug] Executing fun with value: [5]
11:56:06.052 [debug] Evaluating bend block with value: [5]
11:56:06.052 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.052 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.052 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.052 [debug] Executing bend with initial: []
11:56:06.052 [debug] Executing fun with value: []
11:56:06.052 [debug] Evaluating bend block with value: []
11:56:06.052 [debug] Block returned: %{variant: :null}
11:56:06.052 [debug] Fun returned result: %{variant: :null}
11:56:06.052 [debug] Processing constructed value: %{variant: :null}
11:56:06.052 [debug] do_bend final result: %{variant: :null}
11:56:06.052 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.052 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.052 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.052 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.052 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.052 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.052 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.052 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.052 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.052 [debug] Recursive field result for tail: %{variant: :null}
11:56:06.052 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.052 [debug] Recursive field result for tail: %{variant: :null}
11:56:06.052 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: 4, tail: %{variant: :null}, variant: :cons}
11:56:06.052 [debug] Recursive field result for tail: %{head: 4, tail: %{variant: :null}, variant: :cons}
11:56:06.052 [debug] do_fold called with non-function: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 3, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] Recursive field result for tail: %{head: 4, tail: %{variant: :null}, variant: :cons}
11:56:06.052 [debug] do_fold called with non-function: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 2, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] Recursive field result for tail: %{head: 2, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] do_fold called with non-function: %{head: 2, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 1, tail: %{head: 2, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] do_fold called with data: %{head: 2, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.052 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.052 [debug] do_fold called with data: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.052 [debug] Processing recursive fields of: %{head: 4, tail: %{variant: :null}, variant: :cons}
11:56:06.052 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.052 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.053 [debug] Recursive field result for tail: []
11:56:06.053 [debug] do_fold called with non-variant data: []
11:56:06.053 [debug] Recursive field result for tail: [4]
11:56:06.053 [debug] do_fold called with non-variant data: [4]
.11:56:06.053 [debug] Bend initial value: []
11:56:06.053 [debug] Executing bend with initial: []
11:56:06.053 [debug] Executing fun with value: []
11:56:06.053 [debug] Evaluating bend block with value: []
11:56:06.053 [debug] Block returned: %{variant: :null}
11:56:06.053 [debug] Fun returned result: %{variant: :null}
11:56:06.053 [debug] Processing constructed value: %{variant: :null}
11:56:06.053 [debug] do_bend final result: %{variant: :null}
11:56:06.053 [debug] Final bend result: %{variant: :null}
11:56:06.053 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.053 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.053 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.053 [debug] Processing recursive fields of: %{variant: :null}
.11:56:06.053 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:56:06.053 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:56:06.053 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:56:06.053 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:56:06.053 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.053 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.053 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.053 [debug] Executing bend with initial: [2, 3, 4, 5]
11:56:06.053 [debug] Executing fun with value: [2, 3, 4, 5]
11:56:06.053 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:56:06.053 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.053 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.053 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.053 [debug] Executing bend with initial: [3, 4, 5]
11:56:06.053 [debug] Executing fun with value: [3, 4, 5]
11:56:06.053 [debug] Evaluating bend block with value: [3, 4, 5]
11:56:06.053 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.053 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.053 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.053 [debug] Executing bend with initial: [4, 5]
11:56:06.053 [debug] Executing fun with value: [4, 5]
11:56:06.053 [debug] Evaluating bend block with value: [4, 5]
11:56:06.053 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.053 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.053 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.053 [debug] Executing bend with initial: [5]
11:56:06.053 [debug] Executing fun with value: [5]
11:56:06.053 [debug] Evaluating bend block with value: [5]
11:56:06.053 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.053 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.053 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.053 [debug] Executing bend with initial: []
11:56:06.053 [debug] Executing fun with value: []
11:56:06.053 [debug] Evaluating bend block with value: []
11:56:06.053 [debug] Block returned: %{variant: :null}
11:56:06.053 [debug] Fun returned result: %{variant: :null}
11:56:06.053 [debug] Processing constructed value: %{variant: :null}
11:56:06.053 [debug] do_bend final result: %{variant: :null}
11:56:06.053 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.053 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.053 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.053 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.053 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.053 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.053 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.053 [debug] Processing recursive fields of: %{variant: :null}
.11:56:06.053 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:56:06.054 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:56:06.054 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:56:06.054 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:56:06.054 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.054 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.054 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:56:06.054 [debug] Executing bend with initial: [2, 3, 4, 5]
11:56:06.054 [debug] Executing fun with value: [2, 3, 4, 5]
11:56:06.054 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:56:06.054 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.054 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.054 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:56:06.054 [debug] Executing bend with initial: [3, 4, 5]
11:56:06.054 [debug] Executing fun with value: [3, 4, 5]
11:56:06.054 [debug] Evaluating bend block with value: [3, 4, 5]
11:56:06.054 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.054 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.054 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:56:06.054 [debug] Executing bend with initial: [4, 5]
11:56:06.054 [debug] Executing fun with value: [4, 5]
11:56:06.054 [debug] Evaluating bend block with value: [4, 5]
11:56:06.054 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.054 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.054 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:56:06.054 [debug] Executing bend with initial: [5]
11:56:06.054 [debug] Executing fun with value: [5]
11:56:06.054 [debug] Evaluating bend block with value: [5]
11:56:06.054 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.054 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.054 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:56:06.054 [debug] Executing bend with initial: []
11:56:06.054 [debug] Executing fun with value: []
11:56:06.054 [debug] Evaluating bend block with value: []
11:56:06.054 [debug] Block returned: %{variant: :null}
11:56:06.054 [debug] Fun returned result: %{variant: :null}
11:56:06.054 [debug] Processing constructed value: %{variant: :null}
11:56:06.054 [debug] do_bend final result: %{variant: :null}
11:56:06.054 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.054 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.054 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.054 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.054 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.054 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.054 [debug] Bend initial value: {%{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 10}
11:56:06.054 [debug] Executing bend with initial: {%{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 10}
11:56:06.054 [debug] Executing fun with value: {%{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 10}
11:56:06.054 [debug] Evaluating bend block with value: {%{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 10}
11:56:06.054 [debug] Block returned: %{head: 1, tail: {:fork, {%{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 9}}, variant: :cons}
11:56:06.054 [debug] Fun returned result: %{head: 1, tail: {:fork, {%{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 9}}, variant: :cons}
11:56:06.054 [debug] Processing constructed value: %{head: 1, tail: {:fork, {%{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 9}}, variant: :cons}
11:56:06.054 [debug] Executing bend with initial: {%{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 9}
11:56:06.054 [debug] Executing fun with value: {%{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 9}
11:56:06.054 [debug] Evaluating bend block with value: {%{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 9}
11:56:06.054 [debug] Block returned: %{head: 2, tail: {:fork, {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 8}}, variant: :cons}
11:56:06.055 [debug] Fun returned result: %{head: 2, tail: {:fork, {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 8}}, variant: :cons}
11:56:06.055 [debug] Processing constructed value: %{head: 2, tail: {:fork, {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 8}}, variant: :cons}
11:56:06.055 [debug] Executing bend with initial: {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 8}
11:56:06.055 [debug] Executing fun with value: {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 8}
11:56:06.055 [debug] Evaluating bend block with value: {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 8}
11:56:06.055 [debug] Block returned: %{head: 3, tail: {:fork, {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 7}}, variant: :cons}
11:56:06.055 [debug] Fun returned result: %{head: 3, tail: {:fork, {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 7}}, variant: :cons}
11:56:06.055 [debug] Processing constructed value: %{head: 3, tail: {:fork, {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 7}}, variant: :cons}
11:56:06.055 [debug] Executing bend with initial: {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 7}
11:56:06.055 [debug] Executing fun with value: {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 7}
11:56:06.055 [debug] Evaluating bend block with value: {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 7}
11:56:06.055 [debug] Block returned: %{head: 4, tail: {:fork, {%{head: 5, tail: %{variant: :null}, variant: :cons}, 6}}, variant: :cons}
11:56:06.055 [debug] Fun returned result: %{head: 4, tail: {:fork, {%{head: 5, tail: %{variant: :null}, variant: :cons}, 6}}, variant: :cons}
11:56:06.055 [debug] Processing constructed value: %{head: 4, tail: {:fork, {%{head: 5, tail: %{variant: :null}, variant: :cons}, 6}}, variant: :cons}
11:56:06.055 [debug] Executing bend with initial: {%{head: 5, tail: %{variant: :null}, variant: :cons}, 6}
11:56:06.055 [debug] Executing fun with value: {%{head: 5, tail: %{variant: :null}, variant: :cons}, 6}
11:56:06.055 [debug] Evaluating bend block with value: {%{head: 5, tail: %{variant: :null}, variant: :cons}, 6}
11:56:06.055 [debug] Block returned: %{head: 5, tail: {:fork, {%{variant: :null}, 5}}, variant: :cons}
11:56:06.055 [debug] Fun returned result: %{head: 5, tail: {:fork, {%{variant: :null}, 5}}, variant: :cons}
11:56:06.055 [debug] Processing constructed value: %{head: 5, tail: {:fork, {%{variant: :null}, 5}}, variant: :cons}
11:56:06.055 [debug] Executing bend with initial: {%{variant: :null}, 5}
11:56:06.055 [debug] Executing fun with value: {%{variant: :null}, 5}
11:56:06.055 [debug] Evaluating bend block with value: {%{variant: :null}, 5}
11:56:06.055 [debug] Block returned: %{variant: :null}
11:56:06.055 [debug] Fun returned result: %{variant: :null}
11:56:06.055 [debug] Processing constructed value: %{variant: :null}
11:56:06.055 [debug] do_bend final result: %{variant: :null}
11:56:06.055 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.055 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.055 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.055 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.055 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.055 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.055 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.055 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.055 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.055 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.055 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.056 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:56:06.056 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.056 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:56:06.056 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:56:06.056 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:56:06.056 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.056 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.056 [debug] Recursive field result for tail: []
11:56:06.056 [debug] do_fold called with non-variant data: []
11:56:06.056 [debug] Recursive field result for tail: [5]
11:56:06.056 [debug] do_fold called with non-variant data: [5]
11:56:06.056 [debug] Recursive field result for tail: [4, 5]
11:56:06.056 [debug] do_fold called with non-variant data: [4, 5]
11:56:06.056 [debug] Recursive field result for tail: [3, 4, 5]
11:56:06.056 [debug] do_fold called with non-variant data: [3, 4, 5]
11:56:06.056 [debug] Recursive field result for tail: [2, 3, 4, 5]
11:56:06.056 [debug] do_fold called with non-variant data: [2, 3, 4, 5]
.11:56:06.057 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 3, variant: :node}, value: 2, variant: :node}, variant_type: :node, state: nil
11:56:06.057 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 3, variant: :node}, value: 2, variant: :node}
11:56:06.057 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}, variant_type: :node, state: nil
11:56:06.057 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}
11:56:06.057 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.057 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.057 [debug] Recursive field result for left: []
11:56:06.057 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.057 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.057 [debug] Recursive field result for right: []
11:56:06.057 [debug] do_fold called with non-variant data: []
11:56:06.057 [debug] do_fold called with non-variant data: []
11:56:06.057 [debug] Recursive field result for left: [1]
11:56:06.057 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 3, variant: :node}, variant_type: :node, state: nil
11:56:06.057 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 3, variant: :node}
11:56:06.058 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.058 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.058 [debug] Recursive field result for left: []
11:56:06.058 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.058 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.058 [debug] Recursive field result for right: []
11:56:06.058 [debug] do_fold called with non-variant data: []
11:56:06.058 [debug] do_fold called with non-variant data: []
11:56:06.058 [debug] Recursive field result for right: [3]
11:56:06.058 [debug] do_fold called with non-variant data: [1]
11:56:06.058 [debug] do_fold called with non-variant data: [3]
.11:56:06.058 [debug] Bend initial value: 0
11:56:06.058 [debug] Executing bend with initial: 0
11:56:06.058 [debug] Executing fun with value: 0
11:56:06.058 [debug] Evaluating bend block with value: 0
11:56:06.058 [debug] Block returned: %{left: {:fork, 1}, right: {:fork, 1}, value: 0, variant: :node}
11:56:06.058 [debug] Fun returned result: %{left: {:fork, 1}, right: {:fork, 1}, value: 0, variant: :node}
11:56:06.058 [debug] Processing constructed value: %{left: {:fork, 1}, right: {:fork, 1}, value: 0, variant: :node}
11:56:06.058 [debug] Executing bend with initial: 1
11:56:06.058 [debug] Executing fun with value: 1
11:56:06.058 [debug] Evaluating bend block with value: 1
11:56:06.058 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.058 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.058 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.058 [debug] Executing bend with initial: 2
11:56:06.058 [debug] Executing fun with value: 2
11:56:06.058 [debug] Evaluating bend block with value: 2
11:56:06.058 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.058 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.058 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.058 [debug] Executing bend with initial: 3
11:56:06.058 [debug] Executing fun with value: 3
11:56:06.058 [debug] Evaluating bend block with value: 3
11:56:06.058 [debug] Block returned: %{variant: :leaf}
11:56:06.058 [debug] Fun returned result: %{variant: :leaf}
11:56:06.058 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.058 [debug] do_bend final result: %{variant: :leaf}
11:56:06.058 [debug] Executing bend with initial: 3
11:56:06.058 [debug] Executing fun with value: 3
11:56:06.058 [debug] Evaluating bend block with value: 3
11:56:06.058 [debug] Block returned: %{variant: :leaf}
11:56:06.058 [debug] Fun returned result: %{variant: :leaf}
11:56:06.058 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.058 [debug] do_bend final result: %{variant: :leaf}
11:56:06.058 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.058 [debug] Executing bend with initial: 2
11:56:06.058 [debug] Executing fun with value: 2
11:56:06.058 [debug] Evaluating bend block with value: 2
11:56:06.058 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.058 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.058 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.058 [debug] Executing bend with initial: 3
11:56:06.058 [debug] Executing fun with value: 3
11:56:06.058 [debug] Evaluating bend block with value: 3
11:56:06.058 [debug] Block returned: %{variant: :leaf}
11:56:06.058 [debug] Fun returned result: %{variant: :leaf}
11:56:06.058 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.058 [debug] do_bend final result: %{variant: :leaf}
11:56:06.058 [debug] Executing bend with initial: 3
11:56:06.058 [debug] Executing fun with value: 3
11:56:06.058 [debug] Evaluating bend block with value: 3
11:56:06.059 [debug] Block returned: %{variant: :leaf}
11:56:06.059 [debug] Fun returned result: %{variant: :leaf}
11:56:06.059 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.059 [debug] do_bend final result: %{variant: :leaf}
11:56:06.059 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.059 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}
11:56:06.059 [debug] Executing bend with initial: 1
11:56:06.059 [debug] Executing fun with value: 1
11:56:06.059 [debug] Evaluating bend block with value: 1
11:56:06.059 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.059 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.059 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.059 [debug] Executing bend with initial: 2
11:56:06.059 [debug] Executing fun with value: 2
11:56:06.059 [debug] Evaluating bend block with value: 2
11:56:06.059 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.059 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.059 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.059 [debug] Executing bend with initial: 3
11:56:06.059 [debug] Executing fun with value: 3
11:56:06.059 [debug] Evaluating bend block with value: 3
11:56:06.059 [debug] Block returned: %{variant: :leaf}
11:56:06.059 [debug] Fun returned result: %{variant: :leaf}
11:56:06.059 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.059 [debug] do_bend final result: %{variant: :leaf}
11:56:06.059 [debug] Executing bend with initial: 3
11:56:06.059 [debug] Executing fun with value: 3
11:56:06.059 [debug] Evaluating bend block with value: 3
11:56:06.059 [debug] Block returned: %{variant: :leaf}
11:56:06.059 [debug] Fun returned result: %{variant: :leaf}
11:56:06.059 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.059 [debug] do_bend final result: %{variant: :leaf}
11:56:06.059 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.059 [debug] Executing bend with initial: 2
11:56:06.059 [debug] Executing fun with value: 2
11:56:06.059 [debug] Evaluating bend block with value: 2
11:56:06.059 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.059 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.059 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.059 [debug] Executing bend with initial: 3
11:56:06.059 [debug] Executing fun with value: 3
11:56:06.059 [debug] Evaluating bend block with value: 3
11:56:06.059 [debug] Block returned: %{variant: :leaf}
11:56:06.059 [debug] Fun returned result: %{variant: :leaf}
11:56:06.059 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.059 [debug] do_bend final result: %{variant: :leaf}
11:56:06.059 [debug] Executing bend with initial: 3
11:56:06.059 [debug] Executing fun with value: 3
11:56:06.059 [debug] Evaluating bend block with value: 3
11:56:06.059 [debug] Block returned: %{variant: :leaf}
11:56:06.059 [debug] Fun returned result: %{variant: :leaf}
11:56:06.059 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.059 [debug] do_bend final result: %{variant: :leaf}
11:56:06.059 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.059 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}
11:56:06.060 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, value: 0, variant: :node}
11:56:06.060 [debug] Final bend result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, value: 0, variant: :node}
11:56:06.060 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, value: 0, variant: :node}, variant_type: :node, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, value: 0, variant: :node}
11:56:06.060 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, variant_type: :node, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}
11:56:06.060 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, variant_type: :node, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.060 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.060 [debug] Recursive field result for left: %{variant: :leaf}
11:56:06.060 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.060 [debug] Recursive field result for right: %{variant: :leaf}
11:56:06.060 [debug] Recursive field result for left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.060 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, variant_type: :node, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.060 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.060 [debug] Recursive field result for left: %{variant: :leaf}
11:56:06.060 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.060 [debug] Recursive field result for right: %{variant: :leaf}
11:56:06.060 [debug] Recursive field result for right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.060 [debug] Recursive field result for left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 0, variant: :node}
11:56:06.060 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, variant_type: :node, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}
11:56:06.060 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, variant_type: :node, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.060 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.060 [debug] Recursive field result for left: %{variant: :leaf}
11:56:06.060 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.060 [debug] Recursive field result for right: %{variant: :leaf}
11:56:06.060 [debug] Recursive field result for left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.060 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, variant_type: :node, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.060 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.060 [debug] Recursive field result for left: %{variant: :leaf}
11:56:06.060 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.060 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.060 [debug] Recursive field result for right: %{variant: :leaf}
11:56:06.060 [debug] Recursive field result for right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.060 [debug] Recursive field result for right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 0, variant: :node}
.11:56:06.060 [debug] Bend initial value: 0
11:56:06.060 [debug] Executing bend with initial: 0
11:56:06.060 [debug] Executing fun with value: 0
11:56:06.060 [debug] Evaluating bend block with value: 0
11:56:06.061 [debug] Block returned: %{left: {:fork, 1}, right: {:fork, 1}, value: 0, variant: :node}
11:56:06.061 [debug] Fun returned result: %{left: {:fork, 1}, right: {:fork, 1}, value: 0, variant: :node}
11:56:06.061 [debug] Processing constructed value: %{left: {:fork, 1}, right: {:fork, 1}, value: 0, variant: :node}
11:56:06.061 [debug] Executing bend with initial: 1
11:56:06.061 [debug] Executing fun with value: 1
11:56:06.061 [debug] Evaluating bend block with value: 1
11:56:06.061 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.061 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.061 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.061 [debug] Executing bend with initial: 2
11:56:06.061 [debug] Executing fun with value: 2
11:56:06.061 [debug] Evaluating bend block with value: 2
11:56:06.061 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.061 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.061 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.061 [debug] Executing bend with initial: 3
11:56:06.061 [debug] Executing fun with value: 3
11:56:06.061 [debug] Evaluating bend block with value: 3
11:56:06.061 [debug] Block returned: %{variant: :leaf}
11:56:06.061 [debug] Fun returned result: %{variant: :leaf}
11:56:06.061 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.061 [debug] do_bend final result: %{variant: :leaf}
11:56:06.061 [debug] Executing bend with initial: 3
11:56:06.061 [debug] Executing fun with value: 3
11:56:06.061 [debug] Evaluating bend block with value: 3
11:56:06.061 [debug] Block returned: %{variant: :leaf}
11:56:06.061 [debug] Fun returned result: %{variant: :leaf}
11:56:06.061 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.061 [debug] do_bend final result: %{variant: :leaf}
11:56:06.061 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.061 [debug] Executing bend with initial: 2
11:56:06.061 [debug] Executing fun with value: 2
11:56:06.061 [debug] Evaluating bend block with value: 2
11:56:06.061 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.061 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.061 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.061 [debug] Executing bend with initial: 3
11:56:06.061 [debug] Executing fun with value: 3
11:56:06.061 [debug] Evaluating bend block with value: 3
11:56:06.061 [debug] Block returned: %{variant: :leaf}
11:56:06.061 [debug] Fun returned result: %{variant: :leaf}
11:56:06.061 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.061 [debug] do_bend final result: %{variant: :leaf}
11:56:06.061 [debug] Executing bend with initial: 3
11:56:06.061 [debug] Executing fun with value: 3
11:56:06.061 [debug] Evaluating bend block with value: 3
11:56:06.061 [debug] Block returned: %{variant: :leaf}
11:56:06.061 [debug] Fun returned result: %{variant: :leaf}
11:56:06.061 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.061 [debug] do_bend final result: %{variant: :leaf}
11:56:06.061 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.061 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}
11:56:06.061 [debug] Executing bend with initial: 1
11:56:06.061 [debug] Executing fun with value: 1
11:56:06.061 [debug] Evaluating bend block with value: 1
11:56:06.061 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.061 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.061 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.061 [debug] Executing bend with initial: 2
11:56:06.061 [debug] Executing fun with value: 2
11:56:06.061 [debug] Evaluating bend block with value: 2
11:56:06.061 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.061 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.061 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.061 [debug] Executing bend with initial: 3
11:56:06.061 [debug] Executing fun with value: 3
11:56:06.061 [debug] Evaluating bend block with value: 3
11:56:06.062 [debug] Block returned: %{variant: :leaf}
11:56:06.062 [debug] Fun returned result: %{variant: :leaf}
11:56:06.062 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.062 [debug] do_bend final result: %{variant: :leaf}
11:56:06.062 [debug] Executing bend with initial: 3
11:56:06.062 [debug] Executing fun with value: 3
11:56:06.062 [debug] Evaluating bend block with value: 3
11:56:06.062 [debug] Block returned: %{variant: :leaf}
11:56:06.062 [debug] Fun returned result: %{variant: :leaf}
11:56:06.062 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.062 [debug] do_bend final result: %{variant: :leaf}
11:56:06.062 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.062 [debug] Executing bend with initial: 2
11:56:06.062 [debug] Executing fun with value: 2
11:56:06.062 [debug] Evaluating bend block with value: 2
11:56:06.062 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.062 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.062 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, value: 2, variant: :node}
11:56:06.062 [debug] Executing bend with initial: 3
11:56:06.062 [debug] Executing fun with value: 3
11:56:06.062 [debug] Evaluating bend block with value: 3
11:56:06.062 [debug] Block returned: %{variant: :leaf}
11:56:06.062 [debug] Fun returned result: %{variant: :leaf}
11:56:06.062 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.062 [debug] do_bend final result: %{variant: :leaf}
11:56:06.062 [debug] Executing bend with initial: 3
11:56:06.062 [debug] Executing fun with value: 3
11:56:06.062 [debug] Evaluating bend block with value: 3
11:56:06.062 [debug] Block returned: %{variant: :leaf}
11:56:06.062 [debug] Fun returned result: %{variant: :leaf}
11:56:06.062 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.062 [debug] do_bend final result: %{variant: :leaf}
11:56:06.062 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.062 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}
11:56:06.062 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, value: 0, variant: :node}
11:56:06.062 [debug] Final bend result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, value: 0, variant: :node}
11:56:06.062 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, value: 0, variant: :node}, variant_type: :node, state: %{0 => 1}
11:56:06.062 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, value: 0, variant: :node}
11:56:06.062 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, variant_type: :node, state: %{0 => 1}
11:56:06.062 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}
11:56:06.062 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, variant_type: :node, state: %{0 => 1}
11:56:06.062 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.062 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1}
11:56:06.062 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.062 [debug] Recursive field result for left: {0, %{0 => 1}}
11:56:06.062 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1}
11:56:06.062 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.062 [debug] Recursive field result for right: {0, %{0 => 1}}
11:56:06.062 [debug] do_fold called with non-variant data: 0
11:56:06.062 [debug] do_fold called with non-variant data: 0
11:56:06.062 [debug] Recursive field result for left: {2, %{0 => 1, 1 => 2}}
11:56:06.062 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, variant_type: :node, state: %{0 => 1, 1 => 2}
11:56:06.062 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.062 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1, 1 => 2}
11:56:06.062 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.062 [debug] Recursive field result for left: {0, %{0 => 1, 1 => 2}}
11:56:06.062 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1, 1 => 2}
11:56:06.062 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.062 [debug] Recursive field result for right: {0, %{0 => 1, 1 => 2}}
11:56:06.062 [debug] do_fold called with non-variant data: 0
11:56:06.062 [debug] do_fold called with non-variant data: 0
11:56:06.062 [debug] Recursive field result for right: {2, %{0 => 1, 1 => 2, 2 => 4}}
11:56:06.063 [debug] do_fold called with non-variant data: 2
11:56:06.063 [debug] do_fold called with non-variant data: 2
11:56:06.063 [debug] Recursive field result for left: {1, %{0 => 1, 1 => 2, 2 => 4, 3 => 8}}
11:56:06.063 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}, variant_type: :node, state: %{0 => 1, 1 => 2, 2 => 4, 3 => 8}
11:56:06.063 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, value: 1, variant: :node}
11:56:06.063 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, variant_type: :node, state: %{0 => 1, 1 => 2, 2 => 4, 3 => 8}
11:56:06.063 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.063 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1, 1 => 2, 2 => 4, 3 => 8}
11:56:06.063 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.063 [debug] Recursive field result for left: {0, %{0 => 1, 1 => 2, 2 => 4, 3 => 8}}
11:56:06.063 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1, 1 => 2, 2 => 4, 3 => 8}
11:56:06.063 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.063 [debug] Recursive field result for right: {0, %{0 => 1, 1 => 2, 2 => 4, 3 => 8}}
11:56:06.063 [debug] do_fold called with non-variant data: 0
11:56:06.063 [debug] do_fold called with non-variant data: 0
11:56:06.063 [debug] Recursive field result for left: {2, %{0 => 1, 1 => 2, 2 => 4, 3 => 8, 4 => 16}}
11:56:06.063 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}, variant_type: :node, state: %{0 => 1, 1 => 2, 2 => 4, 3 => 8, 4 => 16}
11:56:06.063 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 2, variant: :node}
11:56:06.063 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1, 1 => 2, 2 => 4, 3 => 8, 4 => 16}
11:56:06.063 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.063 [debug] Recursive field result for left: {0, %{0 => 1, 1 => 2, 2 => 4, 3 => 8, 4 => 16}}
11:56:06.063 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1, 1 => 2, 2 => 4, 3 => 8, 4 => 16}
11:56:06.063 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.063 [debug] Recursive field result for right: {0, %{0 => 1, 1 => 2, 2 => 4, 3 => 8, 4 => 16}}
11:56:06.063 [debug] do_fold called with non-variant data: 0
11:56:06.063 [debug] do_fold called with non-variant data: 0
11:56:06.063 [debug] Recursive field result for right: {2, %{0 => 1, 1 => 2, 2 => 4, 3 => 8, 4 => 16, 5 => 32}}
11:56:06.063 [debug] do_fold called with non-variant data: 2
11:56:06.063 [debug] do_fold called with non-variant data: 2
11:56:06.063 [debug] Recursive field result for right: {1, %{0 => 1, 1 => 2, 2 => 4, 3 => 8, 4 => 16, 5 => 32, 6 => 64}}
11:56:06.063 [debug] do_fold called with non-variant data: 1
11:56:06.063 [debug] do_fold called with non-variant data: 1
.11:56:06.063 [debug] Bend initial value: 0
11:56:06.063 [debug] Executing bend with initial: 0
11:56:06.063 [debug] Executing fun with value: 0
11:56:06.063 [debug] Evaluating bend block with value: 0
11:56:06.063 [debug] Block returned: %{left: {:fork, 1}, right: {:fork, 1}, value: 0, variant: :node}
11:56:06.063 [debug] Fun returned result: %{left: {:fork, 1}, right: {:fork, 1}, value: 0, variant: :node}
11:56:06.063 [debug] Processing constructed value: %{left: {:fork, 1}, right: {:fork, 1}, value: 0, variant: :node}
11:56:06.063 [debug] Executing bend with initial: 1
11:56:06.063 [debug] Executing fun with value: 1
11:56:06.063 [debug] Evaluating bend block with value: 1
11:56:06.063 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.063 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.063 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.063 [debug] Executing bend with initial: 2
11:56:06.063 [debug] Executing fun with value: 2
11:56:06.063 [debug] Evaluating bend block with value: 2
11:56:06.063 [debug] Block returned: %{variant: :leaf}
11:56:06.063 [debug] Fun returned result: %{variant: :leaf}
11:56:06.063 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.063 [debug] do_bend final result: %{variant: :leaf}
11:56:06.063 [debug] Executing bend with initial: 2
11:56:06.063 [debug] Executing fun with value: 2
11:56:06.063 [debug] Evaluating bend block with value: 2
11:56:06.063 [debug] Block returned: %{variant: :leaf}
11:56:06.063 [debug] Fun returned result: %{variant: :leaf}
11:56:06.063 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.063 [debug] do_bend final result: %{variant: :leaf}
11:56:06.063 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}
11:56:06.063 [debug] Executing bend with initial: 1
11:56:06.063 [debug] Executing fun with value: 1
11:56:06.063 [debug] Evaluating bend block with value: 1
11:56:06.063 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.063 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.063 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, value: 1, variant: :node}
11:56:06.063 [debug] Executing bend with initial: 2
11:56:06.063 [debug] Executing fun with value: 2
11:56:06.063 [debug] Evaluating bend block with value: 2
11:56:06.064 [debug] Block returned: %{variant: :leaf}
11:56:06.064 [debug] Fun returned result: %{variant: :leaf}
11:56:06.064 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.064 [debug] do_bend final result: %{variant: :leaf}
11:56:06.064 [debug] Executing bend with initial: 2
11:56:06.064 [debug] Executing fun with value: 2
11:56:06.064 [debug] Evaluating bend block with value: 2
11:56:06.064 [debug] Block returned: %{variant: :leaf}
11:56:06.064 [debug] Fun returned result: %{variant: :leaf}
11:56:06.064 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.064 [debug] do_bend final result: %{variant: :leaf}
11:56:06.064 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}
11:56:06.064 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}, value: 0, variant: :node}
11:56:06.064 [debug] Final bend result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}, value: 0, variant: :node}
11:56:06.064 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}, value: 0, variant: :node}, variant_type: :node, state: nil
11:56:06.064 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}, value: 0, variant: :node}
11:56:06.064 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}, variant_type: :node, state: nil
11:56:06.064 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}
11:56:06.064 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.064 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.064 [debug] Recursive field result for left: %{variant: :leaf}
11:56:06.064 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.064 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.064 [debug] Recursive field result for right: %{variant: :leaf}
11:56:06.064 [debug] Recursive field result for left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 3, variant: :node}
.11:56:06.064 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}, variant_type: :node, state: nil
11:56:06.064 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 1, variant: :node}
11:56:06.064 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.064 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.064 [debug] Recursive field result for left: %{variant: :leaf}
11:56:06.064 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.064 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.064 [debug] Recursive field result for right: %{variant: :leaf}
11:56:06.064 [debug] Recursive field result for right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 3, variant: :node}
11:56:06.064 [debug] Bend initial value: 0
11:56:06.064 [debug] Executing bend with initial: 0
11:56:06.064 [debug] Executing fun with value: 0
11:56:06.064 [debug] Evaluating bend block with value: 0
11:56:06.064 [debug] Block returned: %{left: {:fork, 1}, right: {:fork, 1}, value: 0, variant: :node}
11:56:06.064 [debug] Fun returned result: %{left: {:fork, 1}, right: {:fork, 1}, value: 0, variant: :node}
11:56:06.064 [debug] Processing constructed value: %{left: {:fork, 1}, right: {:fork, 1}, value: 0, variant: :node}
11:56:06.064 [debug] Executing bend with initial: 1
11:56:06.064 [debug] Executing fun with value: 1
11:56:06.064 [debug] Evaluating bend block with value: 1
11:56:06.064 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, value: 2, variant: :node}
11:56:06.064 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, value: 2, variant: :node}
11:56:06.064 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, value: 2, variant: :node}
11:56:06.064 [debug] Executing bend with initial: 2
11:56:06.064 [debug] Executing fun with value: 2
11:56:06.064 [debug] Evaluating bend block with value: 2
11:56:06.064 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, value: 4, variant: :node}
11:56:06.064 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, value: 4, variant: :node}
11:56:06.064 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, value: 4, variant: :node}
11:56:06.064 [debug] Executing bend with initial: 3
11:56:06.064 [debug] Executing fun with value: 3
11:56:06.064 [debug] Evaluating bend block with value: 3
11:56:06.064 [debug] Block returned: %{variant: :leaf}
11:56:06.064 [debug] Fun returned result: %{variant: :leaf}
11:56:06.064 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.064 [debug] do_bend final result: %{variant: :leaf}
11:56:06.064 [debug] Executing bend with initial: 3
11:56:06.064 [debug] Executing fun with value: 3
11:56:06.064 [debug] Evaluating bend block with value: 3
11:56:06.064 [debug] Block returned: %{variant: :leaf}
11:56:06.064 [debug] Fun returned result: %{variant: :leaf}
11:56:06.064 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.064 [debug] do_bend final result: %{variant: :leaf}
11:56:06.064 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}
11:56:06.064 [debug] Executing bend with initial: 2
11:56:06.065 [debug] Executing fun with value: 2
11:56:06.065 [debug] Evaluating bend block with value: 2
11:56:06.065 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, value: 4, variant: :node}
11:56:06.065 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, value: 4, variant: :node}
11:56:06.065 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, value: 4, variant: :node}
11:56:06.065 [debug] Executing bend with initial: 3
11:56:06.065 [debug] Executing fun with value: 3
11:56:06.065 [debug] Evaluating bend block with value: 3
11:56:06.065 [debug] Block returned: %{variant: :leaf}
11:56:06.065 [debug] Fun returned result: %{variant: :leaf}
11:56:06.065 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.065 [debug] do_bend final result: %{variant: :leaf}
11:56:06.065 [debug] Executing bend with initial: 3
11:56:06.065 [debug] Executing fun with value: 3
11:56:06.065 [debug] Evaluating bend block with value: 3
11:56:06.065 [debug] Block returned: %{variant: :leaf}
11:56:06.065 [debug] Fun returned result: %{variant: :leaf}
11:56:06.065 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.065 [debug] do_bend final result: %{variant: :leaf}
11:56:06.065 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}
11:56:06.065 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}, value: 2, variant: :node}
11:56:06.065 [debug] Executing bend with initial: 1
11:56:06.065 [debug] Executing fun with value: 1
11:56:06.065 [debug] Evaluating bend block with value: 1
11:56:06.065 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, value: 2, variant: :node}
11:56:06.065 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, value: 2, variant: :node}
11:56:06.065 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, value: 2, variant: :node}
11:56:06.065 [debug] Executing bend with initial: 2
11:56:06.065 [debug] Executing fun with value: 2
11:56:06.065 [debug] Evaluating bend block with value: 2
11:56:06.065 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, value: 4, variant: :node}
11:56:06.065 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, value: 4, variant: :node}
11:56:06.065 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, value: 4, variant: :node}
11:56:06.065 [debug] Executing bend with initial: 3
11:56:06.065 [debug] Executing fun with value: 3
11:56:06.065 [debug] Evaluating bend block with value: 3
11:56:06.065 [debug] Block returned: %{variant: :leaf}
11:56:06.065 [debug] Fun returned result: %{variant: :leaf}
11:56:06.065 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.065 [debug] do_bend final result: %{variant: :leaf}
11:56:06.065 [debug] Executing bend with initial: 3
11:56:06.065 [debug] Executing fun with value: 3
11:56:06.065 [debug] Evaluating bend block with value: 3
11:56:06.065 [debug] Block returned: %{variant: :leaf}
11:56:06.065 [debug] Fun returned result: %{variant: :leaf}
11:56:06.065 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.065 [debug] do_bend final result: %{variant: :leaf}
11:56:06.065 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}
11:56:06.065 [debug] Executing bend with initial: 2
11:56:06.065 [debug] Executing fun with value: 2
11:56:06.065 [debug] Evaluating bend block with value: 2
11:56:06.065 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, value: 4, variant: :node}
11:56:06.065 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, value: 4, variant: :node}
11:56:06.065 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, value: 4, variant: :node}
11:56:06.065 [debug] Executing bend with initial: 3
11:56:06.065 [debug] Executing fun with value: 3
11:56:06.065 [debug] Evaluating bend block with value: 3
11:56:06.065 [debug] Block returned: %{variant: :leaf}
11:56:06.065 [debug] Fun returned result: %{variant: :leaf}
11:56:06.065 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.065 [debug] do_bend final result: %{variant: :leaf}
11:56:06.065 [debug] Executing bend with initial: 3
11:56:06.065 [debug] Executing fun with value: 3
11:56:06.065 [debug] Evaluating bend block with value: 3
11:56:06.065 [debug] Block returned: %{variant: :leaf}
11:56:06.065 [debug] Fun returned result: %{variant: :leaf}
11:56:06.065 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.065 [debug] do_bend final result: %{variant: :leaf}
11:56:06.065 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}
11:56:06.065 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}, value: 2, variant: :node}
11:56:06.065 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}, value: 2, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}, value: 2, variant: :node}, value: 0, variant: :node}
11:56:06.065 [debug] Final bend result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}, value: 2, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, value: 4, variant: :node}, value: 2, variant: :node}, value: 0, variant: :node}
.11:56:06.068 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
11:56:06.068 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
11:56:06.068 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.068 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.068 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.068 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.068 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.068 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.068 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.068 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.068 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.068 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
11:56:06.068 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.068 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
11:56:06.068 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.068 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
11:56:06.068 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.068 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant_type: :graph, state: nil
11:56:06.068 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
11:56:06.068 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.068 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.068 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
11:56:06.068 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
11:56:06.068 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.068 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
11:56:06.068 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
11:56:06.069 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.069 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}
11:56:06.069 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}
11:56:06.069 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}
11:56:06.069 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}
11:56:06.069 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.069 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}
11:56:06.069 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}
11:56:06.069 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}
11:56:06.069 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}
11:56:06.069 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}
11:56:06.069 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant_type: :graph, state: nil
11:56:06.069 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}
11:56:06.069 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.070 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.070 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.070 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.070 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.070 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.070 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.070 [debug] Recursive field result for edges: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.070 [debug] do_fold called with data: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
11:56:06.070 [debug] Processing recursive fields of: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.070 [debug] do_fold called with data: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
11:56:06.070 [debug] Processing recursive fields of: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.070 [debug] do_fold called with data: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
11:56:06.070 [debug] Processing recursive fields of: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.070 [debug] do_fold called with data: %{edges: [%{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
11:56:06.070 [debug] Processing recursive fields of: %{edges: [%{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.070 [debug] do_fold called with data: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
11:56:06.070 [debug] Processing recursive fields of: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.071 [debug] do_fold called with data: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
11:56:06.071 [debug] Processing recursive fields of: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.071 [debug] do_fold called with data: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
11:56:06.071 [debug] Processing recursive fields of: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.071 [debug] do_fold called with data: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
11:56:06.071 [debug] Processing recursive fields of: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
11:56:06.071 [debug] do_fold called with data: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
11:56:06.071 [debug] Processing recursive fields of: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
.11:56:06.071 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
11:56:06.071 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
11:56:06.071 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.071 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.071 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.071 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.071 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.071 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.071 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.071 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.071 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.071 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
11:56:06.071 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.071 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
11:56:06.071 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.071 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
11:56:06.071 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.071 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant_type: :graph, state: nil
11:56:06.071 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
11:56:06.071 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.071 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.071 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
11:56:06.071 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
11:56:06.071 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.072 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
11:56:06.072 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.072 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
11:56:06.072 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.072 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant_type: :graph, state: nil
11:56:06.072 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
11:56:06.072 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant_type: :graph, state: nil
11:56:06.072 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
11:56:06.072 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.072 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.072 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.072 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.072 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.072 [debug] Recursive field result for edges: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.072 [debug] do_fold called with data: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
11:56:06.072 [debug] Processing recursive fields of: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.072 [debug] do_fold called with data: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
11:56:06.072 [debug] Processing recursive fields of: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.072 [debug] do_fold called with data: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
11:56:06.072 [debug] Processing recursive fields of: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.072 [debug] do_fold called with data: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
11:56:06.072 [debug] Processing recursive fields of: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}
.11:56:06.073 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
11:56:06.073 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.073 [debug] Recursive field result for edges: []
.11:56:06.073 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
11:56:06.073 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.073 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.073 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.073 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.073 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.073 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
11:56:06.073 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.073 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.073 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.073 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant_type: :graph, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
11:56:06.073 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.073 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.073 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.073 [debug] Recursive field result for edges: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.073 [debug] do_fold called with data: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.073 [debug] do_fold called with data: %{edges: [%{from: :a, to: :b, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{edges: [%{from: :a, to: :b, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}
.11:56:06.073 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
11:56:06.073 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.073 [debug] Recursive field result for edges: []
.11:56:06.073 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
11:56:06.073 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.073 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.073 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.073 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.074 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.074 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.074 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.074 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.074 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.074 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.074 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.074 [debug] Recursive field result for edges: []
.11:56:06.074 [debug] Recursive field result for edges: []
11:56:06.074 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
11:56:06.074 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.074 [debug] Recursive field result for edges: false
.11:56:06.074 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
11:56:06.074 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.074 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.074 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.074 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
11:56:06.074 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
11:56:06.074 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.074 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
11:56:06.074 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
11:56:06.074 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
11:56:06.074 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant_type: :graph, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
11:56:06.074 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.074 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.075 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}
11:56:06.075 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}
11:56:06.075 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}
11:56:06.075 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.075 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
11:56:06.075 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.075 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
11:56:06.075 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.075 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant_type: :graph, state: nil
11:56:06.075 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}
11:56:06.075 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant_type: :graph, state: nil
11:56:06.075 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}
11:56:06.075 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant_type: :graph, state: nil
11:56:06.075 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}
11:56:06.075 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.075 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.075 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.075 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.075 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.075 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.075 [debug] Recursive field result for edges: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.075 [debug] do_fold called with data: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
11:56:06.075 [debug] Processing recursive fields of: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.075 [debug] do_fold called with data: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
11:56:06.075 [debug] Processing recursive fields of: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.076 [debug] do_fold called with data: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
11:56:06.076 [debug] Processing recursive fields of: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.076 [debug] do_fold called with data: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
11:56:06.076 [debug] Processing recursive fields of: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.076 [debug] do_fold called with data: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
11:56:06.076 [debug] Processing recursive fields of: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
11:56:06.076 [debug] do_fold called with data: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
11:56:06.076 [debug] Processing recursive fields of: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
.11:56:06.076 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
11:56:06.076 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
11:56:06.076 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.076 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.076 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.076 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.076 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.076 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
11:56:06.076 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
11:56:06.076 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.076 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.076 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
11:56:06.076 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.077 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
11:56:06.077 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.077 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
11:56:06.077 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
11:56:06.077 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant_type: :graph, state: nil
11:56:06.077 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
11:56:06.077 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.077 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.077 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
11:56:06.077 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
11:56:06.077 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.077 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
11:56:06.077 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.077 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
11:56:06.077 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
11:56:06.077 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant_type: :graph, state: nil
11:56:06.077 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
11:56:06.077 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant_type: :graph, state: nil
11:56:06.077 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
11:56:06.077 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.077 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.077 [debug] Recursive field result for edges: []
11:56:06.077 [debug] Recursive field result for edges: [:c]
11:56:06.077 [debug] Recursive field result for edges: [:b, :c]
11:56:06.077 [debug] Recursive field result for edges: [:a, :b, :c]
.11:56:06.077 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:06.077 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.077 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.077 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.077 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}
11:56:06.077 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, variant_type: :graph, state: nil
11:56:06.077 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}
11:56:06.078 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, variant_type: :graph, state: nil
11:56:06.078 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}
11:56:06.078 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.078 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.078 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.078 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.078 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.078 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.078 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.078 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.078 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.078 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.078 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.078 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.078 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}
11:56:06.078 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}
11:56:06.078 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}
11:56:06.078 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, variant_type: :graph, state: nil
11:56:06.078 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}
11:56:06.079 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, variant_type: :graph, state: nil
11:56:06.079 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}
11:56:06.079 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, variant_type: :graph, state: nil
11:56:06.079 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}
11:56:06.079 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, variant_type: :graph, state: nil
11:56:06.079 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}
11:56:06.079 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.079 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.079 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.079 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}
11:56:06.079 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}
11:56:06.079 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}
11:56:06.079 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, variant_type: :graph, state: nil
11:56:06.080 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}
11:56:06.080 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 2, target_id: 3, variant: :edge}, %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}, variant_type: :graph, state: nil
11:56:06.080 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 2, target_id: 3, variant: :edge}, %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 3}}}
.11:56:06.080 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:06.080 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.080 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.080 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.080 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}
11:56:06.080 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, variant_type: :graph, state: nil
11:56:06.080 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}
11:56:06.080 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, variant_type: :graph, state: nil
11:56:06.080 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}
11:56:06.080 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.080 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.080 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.080 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.080 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.080 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.081 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.081 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.081 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.081 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.081 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.081 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.081 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.081 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.081 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.081 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.081 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
.11:56:06.081 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:06.081 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.081 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.081 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.081 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}
11:56:06.081 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, variant_type: :graph, state: nil
11:56:06.081 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}
11:56:06.081 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, variant_type: :graph, state: nil
11:56:06.081 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}
11:56:06.081 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.081 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.081 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.081 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.082 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.082 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.082 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.082 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.082 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.082 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.082 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.082 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{}, edge_weight: 1, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.082 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.082 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.082 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}
11:56:06.082 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, variant_type: :graph, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}
11:56:06.082 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}, variant_type: :graph, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}}}
11:56:06.082 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.082 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.082 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.082 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.082 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.082 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{}, variant: :vertex, vertex_id: 2}}}
11:56:06.082 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.082 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.082 [debug] Recursive field result for edge_list: true
11:56:06.082 [debug] Recursive field result for edge_list: true
11:56:06.082 [debug] Recursive field result for edge_list: false
.11:56:06.083 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
11:56:06.083 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.083 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.083 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.083 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}}}
11:56:06.083 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}}}, variant_type: :graph, state: nil
11:56:06.083 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}}}
11:56:06.083 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}}}, variant_type: :graph, state: nil
11:56:06.083 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}}}
11:56:06.083 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.083 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.083 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}
11:56:06.083 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}
11:56:06.083 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.083 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}
11:56:06.083 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.083 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}
11:56:06.083 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}, variant_type: :graph, state: nil
11:56:06.083 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}}}
11:56:06.083 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.083 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.083 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}
11:56:06.083 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}
11:56:06.083 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}
11:56:06.083 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, variant_type: :graph, state: nil
11:56:06.083 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}
11:56:06.083 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, variant_type: :graph, state: nil
11:56:06.083 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}
11:56:06.084 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, variant_type: :graph, state: nil
11:56:06.084 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}
11:56:06.084 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, variant_type: :graph, state: nil
11:56:06.084 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}
11:56:06.084 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
11:56:06.084 [debug] Processing recursive fields of: %{variant: :empty}
11:56:06.084 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
11:56:06.084 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}
11:56:06.084 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}
11:56:06.084 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}
11:56:06.084 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, variant_type: :graph, state: nil
11:56:06.084 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}
11:56:06.084 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 3, source_id: 2, target_id: 3, variant: :edge}, %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, variant_type: :graph, state: nil
11:56:06.084 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 3, source_id: 2, target_id: 3, variant: :edge}, %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}
11:56:06.085 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 3, source_id: 2, target_id: 3, variant: :edge}, %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}, variant_type: :graph, state: nil
11:56:06.085 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 3, source_id: 2, target_id: 3, variant: :edge}, %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: [%{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, %{edge_list: %{edge_props: %{type: "road"}, edge_weight: 5, source_id: 1, target_id: 2, variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{1 => %{adjacency: %{variant: :empty}, properties: %{name: "A"}, variant: :vertex, vertex_id: 1}, 2 => %{adjacency: %{variant: :empty}, properties: %{name: "B"}, variant: :vertex, vertex_id: 2}, 3 => %{adjacency: %{variant: :empty}, properties: %{name: "C"}, variant: :vertex, vertex_id: 3}}}
.11:56:06.086 [debug] Bend initial value: 0
11:56:06.086 [debug] Executing bend with initial: 0
11:56:06.086 [debug] Executing fun with value: 0
11:56:06.086 [debug] Evaluating bend block with value: 0
11:56:06.087 [debug] Block returned: %{left: {:fork, 1}, right: {:fork, 1}, val: 0, variant: :node}
11:56:06.087 [debug] Fun returned result: %{left: {:fork, 1}, right: {:fork, 1}, val: 0, variant: :node}
11:56:06.087 [debug] Processing constructed value: %{left: {:fork, 1}, right: {:fork, 1}, val: 0, variant: :node}
11:56:06.087 [debug] Executing bend with initial: 1
11:56:06.087 [debug] Executing fun with value: 1
11:56:06.087 [debug] Evaluating bend block with value: 1
11:56:06.087 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}
11:56:06.087 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}
11:56:06.087 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}
11:56:06.087 [debug] Executing bend with initial: 2
11:56:06.087 [debug] Executing fun with value: 2
11:56:06.087 [debug] Evaluating bend block with value: 2
11:56:06.087 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:06.087 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:06.087 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:06.087 [debug] Executing bend with initial: 3
11:56:06.087 [debug] Executing fun with value: 3
11:56:06.087 [debug] Evaluating bend block with value: 3
11:56:06.087 [debug] Block returned: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.087 [debug] Fun returned result: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.087 [debug] Processing constructed value: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.087 [debug] Executing bend with initial: 4
11:56:06.087 [debug] Executing fun with value: 4
11:56:06.087 [debug] Evaluating bend block with value: 4
11:56:06.087 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.087 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.087 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.087 [debug] Executing bend with initial: 5
11:56:06.087 [debug] Executing fun with value: 5
11:56:06.087 [debug] Evaluating bend block with value: 5
11:56:06.087 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.087 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.087 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.087 [debug] Executing bend with initial: 6
11:56:06.087 [debug] Executing fun with value: 6
11:56:06.087 [debug] Evaluating bend block with value: 6
11:56:06.087 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.087 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.087 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.087 [debug] Executing bend with initial: 7
11:56:06.087 [debug] Executing fun with value: 7
11:56:06.087 [debug] Evaluating bend block with value: 7
11:56:06.087 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.087 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.087 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.087 [debug] Executing bend with initial: 8
11:56:06.087 [debug] Executing fun with value: 8
11:56:06.087 [debug] Evaluating bend block with value: 8
11:56:06.087 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.087 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.087 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.087 [debug] Executing bend with initial: 9
11:56:06.087 [debug] Executing fun with value: 9
11:56:06.087 [debug] Evaluating bend block with value: 9
11:56:06.087 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.087 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.087 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.087 [debug] Executing bend with initial: 10
11:56:06.087 [debug] Executing fun with value: 10
11:56:06.087 [debug] Evaluating bend block with value: 10
11:56:06.087 [debug] Block returned: %{variant: :leaf}
11:56:06.087 [debug] Fun returned result: %{variant: :leaf}
11:56:06.087 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.087 [debug] do_bend final result: %{variant: :leaf}
11:56:06.087 [debug] Executing bend with initial: 10
11:56:06.087 [debug] Executing fun with value: 10
11:56:06.087 [debug] Evaluating bend block with value: 10
11:56:06.087 [debug] Block returned: %{variant: :leaf}
11:56:06.087 [debug] Fun returned result: %{variant: :leaf}
11:56:06.087 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.087 [debug] do_bend final result: %{variant: :leaf}
11:56:06.087 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.087 [debug] Executing bend with initial: 9
11:56:06.087 [debug] Executing fun with value: 9
11:56:06.087 [debug] Evaluating bend block with value: 9
11:56:06.087 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.087 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.087 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.087 [debug] Executing bend with initial: 10
11:56:06.087 [debug] Executing fun with value: 10
11:56:06.087 [debug] Evaluating bend block with value: 10
11:56:06.087 [debug] Block returned: %{variant: :leaf}
11:56:06.087 [debug] Fun returned result: %{variant: :leaf}
11:56:06.087 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.087 [debug] do_bend final result: %{variant: :leaf}
11:56:06.087 [debug] Executing bend with initial: 10
11:56:06.087 [debug] Executing fun with value: 10
11:56:06.087 [debug] Evaluating bend block with value: 10
11:56:06.087 [debug] Block returned: %{variant: :leaf}
11:56:06.087 [debug] Fun returned result: %{variant: :leaf}
11:56:06.087 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.087 [debug] do_bend final result: %{variant: :leaf}
11:56:06.087 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.088 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.088 [debug] Executing bend with initial: 8
11:56:06.088 [debug] Executing fun with value: 8
11:56:06.088 [debug] Evaluating bend block with value: 8
11:56:06.088 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.088 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.088 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.088 [debug] Executing bend with initial: 9
11:56:06.088 [debug] Executing fun with value: 9
11:56:06.088 [debug] Evaluating bend block with value: 9
11:56:06.088 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.088 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.088 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.088 [debug] Executing bend with initial: 10
11:56:06.088 [debug] Executing fun with value: 10
11:56:06.088 [debug] Evaluating bend block with value: 10
11:56:06.088 [debug] Block returned: %{variant: :leaf}
11:56:06.088 [debug] Fun returned result: %{variant: :leaf}
11:56:06.088 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.088 [debug] do_bend final result: %{variant: :leaf}
11:56:06.088 [debug] Executing bend with initial: 10
11:56:06.088 [debug] Executing fun with value: 10
11:56:06.088 [debug] Evaluating bend block with value: 10
11:56:06.088 [debug] Block returned: %{variant: :leaf}
11:56:06.088 [debug] Fun returned result: %{variant: :leaf}
11:56:06.088 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.088 [debug] do_bend final result: %{variant: :leaf}
11:56:06.088 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.088 [debug] Executing bend with initial: 9
11:56:06.088 [debug] Executing fun with value: 9
11:56:06.088 [debug] Evaluating bend block with value: 9
11:56:06.088 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.088 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.088 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.088 [debug] Executing bend with initial: 10
11:56:06.088 [debug] Executing fun with value: 10
11:56:06.088 [debug] Evaluating bend block with value: 10
11:56:06.088 [debug] Block returned: %{variant: :leaf}
11:56:06.088 [debug] Fun returned result: %{variant: :leaf}
11:56:06.088 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.088 [debug] do_bend final result: %{variant: :leaf}
11:56:06.088 [debug] Executing bend with initial: 10
11:56:06.088 [debug] Executing fun with value: 10
11:56:06.088 [debug] Evaluating bend block with value: 10
11:56:06.088 [debug] Block returned: %{variant: :leaf}
11:56:06.088 [debug] Fun returned result: %{variant: :leaf}
11:56:06.088 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.088 [debug] do_bend final result: %{variant: :leaf}
11:56:06.088 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.088 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.088 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.088 [debug] Executing bend with initial: 7
11:56:06.088 [debug] Executing fun with value: 7
11:56:06.088 [debug] Evaluating bend block with value: 7
11:56:06.088 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.088 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.088 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.088 [debug] Executing bend with initial: 8
11:56:06.088 [debug] Executing fun with value: 8
11:56:06.088 [debug] Evaluating bend block with value: 8
11:56:06.088 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.088 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.088 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.088 [debug] Executing bend with initial: 9
11:56:06.088 [debug] Executing fun with value: 9
11:56:06.088 [debug] Evaluating bend block with value: 9
11:56:06.088 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.088 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.088 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.088 [debug] Executing bend with initial: 10
11:56:06.088 [debug] Executing fun with value: 10
11:56:06.088 [debug] Evaluating bend block with value: 10
11:56:06.088 [debug] Block returned: %{variant: :leaf}
11:56:06.088 [debug] Fun returned result: %{variant: :leaf}
11:56:06.088 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.088 [debug] do_bend final result: %{variant: :leaf}
11:56:06.088 [debug] Executing bend with initial: 10
11:56:06.088 [debug] Executing fun with value: 10
11:56:06.088 [debug] Evaluating bend block with value: 10
11:56:06.088 [debug] Block returned: %{variant: :leaf}
11:56:06.088 [debug] Fun returned result: %{variant: :leaf}
11:56:06.088 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.088 [debug] do_bend final result: %{variant: :leaf}
11:56:06.088 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.088 [debug] Executing bend with initial: 9
11:56:06.088 [debug] Executing fun with value: 9
11:56:06.088 [debug] Evaluating bend block with value: 9
11:56:06.088 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.088 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.088 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.088 [debug] Executing bend with initial: 10
11:56:06.088 [debug] Executing fun with value: 10
11:56:06.088 [debug] Evaluating bend block with value: 10
11:56:06.088 [debug] Block returned: %{variant: :leaf}
11:56:06.088 [debug] Fun returned result: %{variant: :leaf}
11:56:06.088 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.088 [debug] do_bend final result: %{variant: :leaf}
11:56:06.088 [debug] Executing bend with initial: 10
11:56:06.088 [debug] Executing fun with value: 10
11:56:06.088 [debug] Evaluating bend block with value: 10
11:56:06.088 [debug] Block returned: %{variant: :leaf}
11:56:06.088 [debug] Fun returned result: %{variant: :leaf}
11:56:06.088 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.088 [debug] do_bend final result: %{variant: :leaf}
11:56:06.088 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.088 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.088 [debug] Executing bend with initial: 8
11:56:06.089 [debug] Executing fun with value: 8
11:56:06.089 [debug] Evaluating bend block with value: 8
11:56:06.089 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.089 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.089 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.089 [debug] Executing bend with initial: 9
11:56:06.089 [debug] Executing fun with value: 9
11:56:06.089 [debug] Evaluating bend block with value: 9
11:56:06.089 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.089 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.089 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.089 [debug] Executing bend with initial: 10
11:56:06.089 [debug] Executing fun with value: 10
11:56:06.089 [debug] Evaluating bend block with value: 10
11:56:06.089 [debug] Block returned: %{variant: :leaf}
11:56:06.089 [debug] Fun returned result: %{variant: :leaf}
11:56:06.089 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.089 [debug] do_bend final result: %{variant: :leaf}
11:56:06.089 [debug] Executing bend with initial: 10
11:56:06.089 [debug] Executing fun with value: 10
11:56:06.089 [debug] Evaluating bend block with value: 10
11:56:06.089 [debug] Block returned: %{variant: :leaf}
11:56:06.089 [debug] Fun returned result: %{variant: :leaf}
11:56:06.089 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.089 [debug] do_bend final result: %{variant: :leaf}
11:56:06.089 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.089 [debug] Executing bend with initial: 9
11:56:06.089 [debug] Executing fun with value: 9
11:56:06.089 [debug] Evaluating bend block with value: 9
11:56:06.089 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.089 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.089 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.089 [debug] Executing bend with initial: 10
11:56:06.089 [debug] Executing fun with value: 10
11:56:06.089 [debug] Evaluating bend block with value: 10
11:56:06.089 [debug] Block returned: %{variant: :leaf}
11:56:06.089 [debug] Fun returned result: %{variant: :leaf}
11:56:06.089 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.089 [debug] do_bend final result: %{variant: :leaf}
11:56:06.089 [debug] Executing bend with initial: 10
11:56:06.089 [debug] Executing fun with value: 10
11:56:06.089 [debug] Evaluating bend block with value: 10
11:56:06.089 [debug] Block returned: %{variant: :leaf}
11:56:06.089 [debug] Fun returned result: %{variant: :leaf}
11:56:06.089 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.089 [debug] do_bend final result: %{variant: :leaf}
11:56:06.089 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.089 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.089 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.089 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.089 [debug] Executing bend with initial: 6
11:56:06.089 [debug] Executing fun with value: 6
11:56:06.089 [debug] Evaluating bend block with value: 6
11:56:06.089 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.089 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.089 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.089 [debug] Executing bend with initial: 7
11:56:06.089 [debug] Executing fun with value: 7
11:56:06.089 [debug] Evaluating bend block with value: 7
11:56:06.089 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.089 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.089 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.089 [debug] Executing bend with initial: 8
11:56:06.089 [debug] Executing fun with value: 8
11:56:06.089 [debug] Evaluating bend block with value: 8
11:56:06.089 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.089 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.089 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.089 [debug] Executing bend with initial: 9
11:56:06.089 [debug] Executing fun with value: 9
11:56:06.089 [debug] Evaluating bend block with value: 9
11:56:06.089 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.089 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.089 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.089 [debug] Executing bend with initial: 10
11:56:06.089 [debug] Executing fun with value: 10
11:56:06.089 [debug] Evaluating bend block with value: 10
11:56:06.089 [debug] Block returned: %{variant: :leaf}
11:56:06.089 [debug] Fun returned result: %{variant: :leaf}
11:56:06.089 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.089 [debug] do_bend final result: %{variant: :leaf}
11:56:06.089 [debug] Executing bend with initial: 10
11:56:06.089 [debug] Executing fun with value: 10
11:56:06.089 [debug] Evaluating bend block with value: 10
11:56:06.089 [debug] Block returned: %{variant: :leaf}
11:56:06.089 [debug] Fun returned result: %{variant: :leaf}
11:56:06.089 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.089 [debug] do_bend final result: %{variant: :leaf}
11:56:06.089 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.089 [debug] Executing bend with initial: 9
11:56:06.089 [debug] Executing fun with value: 9
11:56:06.089 [debug] Evaluating bend block with value: 9
11:56:06.089 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.089 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.089 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.089 [debug] Executing bend with initial: 10
11:56:06.089 [debug] Executing fun with value: 10
11:56:06.089 [debug] Evaluating bend block with value: 10
11:56:06.089 [debug] Block returned: %{variant: :leaf}
11:56:06.089 [debug] Fun returned result: %{variant: :leaf}
11:56:06.089 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.089 [debug] do_bend final result: %{variant: :leaf}
11:56:06.090 [debug] Executing bend with initial: 10
11:56:06.090 [debug] Executing fun with value: 10
11:56:06.090 [debug] Evaluating bend block with value: 10
11:56:06.090 [debug] Block returned: %{variant: :leaf}
11:56:06.090 [debug] Fun returned result: %{variant: :leaf}
11:56:06.090 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.090 [debug] do_bend final result: %{variant: :leaf}
11:56:06.090 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.090 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.090 [debug] Executing bend with initial: 8
11:56:06.090 [debug] Executing fun with value: 8
11:56:06.090 [debug] Evaluating bend block with value: 8
11:56:06.090 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.090 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.090 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.090 [debug] Executing bend with initial: 9
11:56:06.090 [debug] Executing fun with value: 9
11:56:06.090 [debug] Evaluating bend block with value: 9
11:56:06.090 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.090 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.090 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.090 [debug] Executing bend with initial: 10
11:56:06.090 [debug] Executing fun with value: 10
11:56:06.090 [debug] Evaluating bend block with value: 10
11:56:06.090 [debug] Block returned: %{variant: :leaf}
11:56:06.090 [debug] Fun returned result: %{variant: :leaf}
11:56:06.090 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.090 [debug] do_bend final result: %{variant: :leaf}
11:56:06.090 [debug] Executing bend with initial: 10
11:56:06.090 [debug] Executing fun with value: 10
11:56:06.090 [debug] Evaluating bend block with value: 10
11:56:06.090 [debug] Block returned: %{variant: :leaf}
11:56:06.090 [debug] Fun returned result: %{variant: :leaf}
11:56:06.090 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.090 [debug] do_bend final result: %{variant: :leaf}
11:56:06.090 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.090 [debug] Executing bend with initial: 9
11:56:06.090 [debug] Executing fun with value: 9
11:56:06.090 [debug] Evaluating bend block with value: 9
11:56:06.090 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.090 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.090 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.090 [debug] Executing bend with initial: 10
11:56:06.090 [debug] Executing fun with value: 10
11:56:06.090 [debug] Evaluating bend block with value: 10
11:56:06.090 [debug] Block returned: %{variant: :leaf}
11:56:06.090 [debug] Fun returned result: %{variant: :leaf}
11:56:06.090 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.090 [debug] do_bend final result: %{variant: :leaf}
11:56:06.090 [debug] Executing bend with initial: 10
11:56:06.090 [debug] Executing fun with value: 10
11:56:06.090 [debug] Evaluating bend block with value: 10
11:56:06.090 [debug] Block returned: %{variant: :leaf}
11:56:06.090 [debug] Fun returned result: %{variant: :leaf}
11:56:06.090 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.090 [debug] do_bend final result: %{variant: :leaf}
11:56:06.090 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.090 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.090 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.090 [debug] Executing bend with initial: 7
11:56:06.090 [debug] Executing fun with value: 7
11:56:06.090 [debug] Evaluating bend block with value: 7
11:56:06.090 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.090 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.090 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.090 [debug] Executing bend with initial: 8
11:56:06.090 [debug] Executing fun with value: 8
11:56:06.090 [debug] Evaluating bend block with value: 8
11:56:06.090 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.090 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.090 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.090 [debug] Executing bend with initial: 9
11:56:06.090 [debug] Executing fun with value: 9
11:56:06.090 [debug] Evaluating bend block with value: 9
11:56:06.090 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.090 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.090 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.090 [debug] Executing bend with initial: 10
11:56:06.090 [debug] Executing fun with value: 10
11:56:06.090 [debug] Evaluating bend block with value: 10
11:56:06.090 [debug] Block returned: %{variant: :leaf}
11:56:06.090 [debug] Fun returned result: %{variant: :leaf}
11:56:06.090 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.090 [debug] do_bend final result: %{variant: :leaf}
11:56:06.090 [debug] Executing bend with initial: 10
11:56:06.090 [debug] Executing fun with value: 10
11:56:06.090 [debug] Evaluating bend block with value: 10
11:56:06.090 [debug] Block returned: %{variant: :leaf}
11:56:06.090 [debug] Fun returned result: %{variant: :leaf}
11:56:06.091 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.091 [debug] do_bend final result: %{variant: :leaf}
11:56:06.091 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.091 [debug] Executing bend with initial: 9
11:56:06.091 [debug] Executing fun with value: 9
11:56:06.091 [debug] Evaluating bend block with value: 9
11:56:06.091 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.091 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.091 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.091 [debug] Executing bend with initial: 10
11:56:06.091 [debug] Executing fun with value: 10
11:56:06.091 [debug] Evaluating bend block with value: 10
11:56:06.091 [debug] Block returned: %{variant: :leaf}
11:56:06.091 [debug] Fun returned result: %{variant: :leaf}
11:56:06.091 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.091 [debug] do_bend final result: %{variant: :leaf}
11:56:06.091 [debug] Executing bend with initial: 10
11:56:06.091 [debug] Executing fun with value: 10
11:56:06.091 [debug] Evaluating bend block with value: 10
11:56:06.091 [debug] Block returned: %{variant: :leaf}
11:56:06.091 [debug] Fun returned result: %{variant: :leaf}
11:56:06.091 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.091 [debug] do_bend final result: %{variant: :leaf}
11:56:06.091 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.091 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.091 [debug] Executing bend with initial: 8
11:56:06.091 [debug] Executing fun with value: 8
11:56:06.091 [debug] Evaluating bend block with value: 8
11:56:06.091 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.091 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.091 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.091 [debug] Executing bend with initial: 9
11:56:06.091 [debug] Executing fun with value: 9
11:56:06.091 [debug] Evaluating bend block with value: 9
11:56:06.091 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.091 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.091 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.091 [debug] Executing bend with initial: 10
11:56:06.091 [debug] Executing fun with value: 10
11:56:06.091 [debug] Evaluating bend block with value: 10
11:56:06.091 [debug] Block returned: %{variant: :leaf}
11:56:06.091 [debug] Fun returned result: %{variant: :leaf}
11:56:06.091 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.091 [debug] do_bend final result: %{variant: :leaf}
11:56:06.091 [debug] Executing bend with initial: 10
11:56:06.091 [debug] Executing fun with value: 10
11:56:06.091 [debug] Evaluating bend block with value: 10
11:56:06.091 [debug] Block returned: %{variant: :leaf}
11:56:06.091 [debug] Fun returned result: %{variant: :leaf}
11:56:06.091 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.091 [debug] do_bend final result: %{variant: :leaf}
11:56:06.091 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.091 [debug] Executing bend with initial: 9
11:56:06.091 [debug] Executing fun with value: 9
11:56:06.091 [debug] Evaluating bend block with value: 9
11:56:06.091 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.091 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.091 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.091 [debug] Executing bend with initial: 10
11:56:06.091 [debug] Executing fun with value: 10
11:56:06.091 [debug] Evaluating bend block with value: 10
11:56:06.091 [debug] Block returned: %{variant: :leaf}
11:56:06.091 [debug] Fun returned result: %{variant: :leaf}
11:56:06.091 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.091 [debug] do_bend final result: %{variant: :leaf}
11:56:06.091 [debug] Executing bend with initial: 10
11:56:06.092 [debug] Executing fun with value: 10
11:56:06.092 [debug] Evaluating bend block with value: 10
11:56:06.092 [debug] Block returned: %{variant: :leaf}
11:56:06.092 [debug] Fun returned result: %{variant: :leaf}
11:56:06.092 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.092 [debug] do_bend final result: %{variant: :leaf}
11:56:06.092 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.092 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.092 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.092 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.092 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.092 [debug] Executing bend with initial: 5
11:56:06.092 [debug] Executing fun with value: 5
11:56:06.092 [debug] Evaluating bend block with value: 5
11:56:06.092 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.092 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.092 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.092 [debug] Executing bend with initial: 6
11:56:06.092 [debug] Executing fun with value: 6
11:56:06.092 [debug] Evaluating bend block with value: 6
11:56:06.092 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.092 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.092 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.092 [debug] Executing bend with initial: 7
11:56:06.092 [debug] Executing fun with value: 7
11:56:06.092 [debug] Evaluating bend block with value: 7
11:56:06.092 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.092 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.092 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.092 [debug] Executing bend with initial: 8
11:56:06.092 [debug] Executing fun with value: 8
11:56:06.092 [debug] Evaluating bend block with value: 8
11:56:06.093 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.093 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.093 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.093 [debug] Executing bend with initial: 9
11:56:06.093 [debug] Executing fun with value: 9
11:56:06.093 [debug] Evaluating bend block with value: 9
11:56:06.093 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.093 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.093 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.093 [debug] Executing bend with initial: 10
11:56:06.093 [debug] Executing fun with value: 10
11:56:06.093 [debug] Evaluating bend block with value: 10
11:56:06.093 [debug] Block returned: %{variant: :leaf}
11:56:06.093 [debug] Fun returned result: %{variant: :leaf}
11:56:06.093 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.093 [debug] do_bend final result: %{variant: :leaf}
11:56:06.093 [debug] Executing bend with initial: 10
11:56:06.093 [debug] Executing fun with value: 10
11:56:06.093 [debug] Evaluating bend block with value: 10
11:56:06.093 [debug] Block returned: %{variant: :leaf}
11:56:06.093 [debug] Fun returned result: %{variant: :leaf}
11:56:06.093 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.093 [debug] do_bend final result: %{variant: :leaf}
11:56:06.093 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.093 [debug] Executing bend with initial: 9
11:56:06.093 [debug] Executing fun with value: 9
11:56:06.093 [debug] Evaluating bend block with value: 9
11:56:06.093 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.093 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.093 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.093 [debug] Executing bend with initial: 10
11:56:06.093 [debug] Executing fun with value: 10
11:56:06.093 [debug] Evaluating bend block with value: 10
11:56:06.093 [debug] Block returned: %{variant: :leaf}
11:56:06.093 [debug] Fun returned result: %{variant: :leaf}
11:56:06.093 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.093 [debug] do_bend final result: %{variant: :leaf}
11:56:06.093 [debug] Executing bend with initial: 10
11:56:06.093 [debug] Executing fun with value: 10
11:56:06.093 [debug] Evaluating bend block with value: 10
11:56:06.093 [debug] Block returned: %{variant: :leaf}
11:56:06.093 [debug] Fun returned result: %{variant: :leaf}
11:56:06.093 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.093 [debug] do_bend final result: %{variant: :leaf}
11:56:06.093 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.093 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.093 [debug] Executing bend with initial: 8
11:56:06.093 [debug] Executing fun with value: 8
11:56:06.093 [debug] Evaluating bend block with value: 8
11:56:06.093 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.093 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.093 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.093 [debug] Executing bend with initial: 9
11:56:06.093 [debug] Executing fun with value: 9
11:56:06.093 [debug] Evaluating bend block with value: 9
11:56:06.093 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.093 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.093 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.093 [debug] Executing bend with initial: 10
11:56:06.093 [debug] Executing fun with value: 10
11:56:06.093 [debug] Evaluating bend block with value: 10
11:56:06.093 [debug] Block returned: %{variant: :leaf}
11:56:06.093 [debug] Fun returned result: %{variant: :leaf}
11:56:06.093 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.093 [debug] do_bend final result: %{variant: :leaf}
11:56:06.093 [debug] Executing bend with initial: 10
11:56:06.093 [debug] Executing fun with value: 10
11:56:06.093 [debug] Evaluating bend block with value: 10
11:56:06.093 [debug] Block returned: %{variant: :leaf}
11:56:06.093 [debug] Fun returned result: %{variant: :leaf}
11:56:06.093 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.093 [debug] do_bend final result: %{variant: :leaf}
11:56:06.093 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.093 [debug] Executing bend with initial: 9
11:56:06.093 [debug] Executing fun with value: 9
11:56:06.093 [debug] Evaluating bend block with value: 9
11:56:06.093 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.093 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.093 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.093 [debug] Executing bend with initial: 10
11:56:06.093 [debug] Executing fun with value: 10
11:56:06.093 [debug] Evaluating bend block with value: 10
11:56:06.093 [debug] Block returned: %{variant: :leaf}
11:56:06.093 [debug] Fun returned result: %{variant: :leaf}
11:56:06.093 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.093 [debug] do_bend final result: %{variant: :leaf}
11:56:06.093 [debug] Executing bend with initial: 10
11:56:06.093 [debug] Executing fun with value: 10
11:56:06.093 [debug] Evaluating bend block with value: 10
11:56:06.093 [debug] Block returned: %{variant: :leaf}
11:56:06.093 [debug] Fun returned result: %{variant: :leaf}
11:56:06.093 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.093 [debug] do_bend final result: %{variant: :leaf}
11:56:06.093 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.093 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.094 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.094 [debug] Executing bend with initial: 7
11:56:06.094 [debug] Executing fun with value: 7
11:56:06.094 [debug] Evaluating bend block with value: 7
11:56:06.094 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.094 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.094 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.094 [debug] Executing bend with initial: 8
11:56:06.094 [debug] Executing fun with value: 8
11:56:06.094 [debug] Evaluating bend block with value: 8
11:56:06.094 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.094 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.094 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.094 [debug] Executing bend with initial: 9
11:56:06.094 [debug] Executing fun with value: 9
11:56:06.094 [debug] Evaluating bend block with value: 9
11:56:06.094 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.094 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.094 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.094 [debug] Executing bend with initial: 10
11:56:06.094 [debug] Executing fun with value: 10
11:56:06.094 [debug] Evaluating bend block with value: 10
11:56:06.094 [debug] Block returned: %{variant: :leaf}
11:56:06.094 [debug] Fun returned result: %{variant: :leaf}
11:56:06.094 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.094 [debug] do_bend final result: %{variant: :leaf}
11:56:06.094 [debug] Executing bend with initial: 10
11:56:06.094 [debug] Executing fun with value: 10
11:56:06.094 [debug] Evaluating bend block with value: 10
11:56:06.094 [debug] Block returned: %{variant: :leaf}
11:56:06.094 [debug] Fun returned result: %{variant: :leaf}
11:56:06.094 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.094 [debug] do_bend final result: %{variant: :leaf}
11:56:06.094 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.094 [debug] Executing bend with initial: 9
11:56:06.094 [debug] Executing fun with value: 9
11:56:06.094 [debug] Evaluating bend block with value: 9
11:56:06.094 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.094 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.094 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.094 [debug] Executing bend with initial: 10
11:56:06.094 [debug] Executing fun with value: 10
11:56:06.094 [debug] Evaluating bend block with value: 10
11:56:06.094 [debug] Block returned: %{variant: :leaf}
11:56:06.094 [debug] Fun returned result: %{variant: :leaf}
11:56:06.094 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.094 [debug] do_bend final result: %{variant: :leaf}
11:56:06.094 [debug] Executing bend with initial: 10
11:56:06.094 [debug] Executing fun with value: 10
11:56:06.094 [debug] Evaluating bend block with value: 10
11:56:06.094 [debug] Block returned: %{variant: :leaf}
11:56:06.094 [debug] Fun returned result: %{variant: :leaf}
11:56:06.094 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.094 [debug] do_bend final result: %{variant: :leaf}
11:56:06.094 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.094 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.094 [debug] Executing bend with initial: 8
11:56:06.094 [debug] Executing fun with value: 8
11:56:06.094 [debug] Evaluating bend block with value: 8
11:56:06.094 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.094 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.094 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.094 [debug] Executing bend with initial: 9
11:56:06.094 [debug] Executing fun with value: 9
11:56:06.094 [debug] Evaluating bend block with value: 9
11:56:06.094 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.094 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.094 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.094 [debug] Executing bend with initial: 10
11:56:06.094 [debug] Executing fun with value: 10
11:56:06.094 [debug] Evaluating bend block with value: 10
11:56:06.094 [debug] Block returned: %{variant: :leaf}
11:56:06.094 [debug] Fun returned result: %{variant: :leaf}
11:56:06.094 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.094 [debug] do_bend final result: %{variant: :leaf}
11:56:06.094 [debug] Executing bend with initial: 10
11:56:06.094 [debug] Executing fun with value: 10
11:56:06.094 [debug] Evaluating bend block with value: 10
11:56:06.094 [debug] Block returned: %{variant: :leaf}
11:56:06.094 [debug] Fun returned result: %{variant: :leaf}
11:56:06.094 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.094 [debug] do_bend final result: %{variant: :leaf}
11:56:06.094 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.094 [debug] Executing bend with initial: 9
11:56:06.094 [debug] Executing fun with value: 9
11:56:06.095 [debug] Evaluating bend block with value: 9
11:56:06.095 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.095 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.095 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.095 [debug] Executing bend with initial: 10
11:56:06.095 [debug] Executing fun with value: 10
11:56:06.095 [debug] Evaluating bend block with value: 10
11:56:06.095 [debug] Block returned: %{variant: :leaf}
11:56:06.095 [debug] Fun returned result: %{variant: :leaf}
11:56:06.095 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.095 [debug] do_bend final result: %{variant: :leaf}
11:56:06.095 [debug] Executing bend with initial: 10
11:56:06.095 [debug] Executing fun with value: 10
11:56:06.095 [debug] Evaluating bend block with value: 10
11:56:06.095 [debug] Block returned: %{variant: :leaf}
11:56:06.095 [debug] Fun returned result: %{variant: :leaf}
11:56:06.095 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.095 [debug] do_bend final result: %{variant: :leaf}
11:56:06.095 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.095 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.095 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.095 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.095 [debug] Executing bend with initial: 6
11:56:06.095 [debug] Executing fun with value: 6
11:56:06.095 [debug] Evaluating bend block with value: 6
11:56:06.095 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.095 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.095 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.095 [debug] Executing bend with initial: 7
11:56:06.095 [debug] Executing fun with value: 7
11:56:06.095 [debug] Evaluating bend block with value: 7
11:56:06.095 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.095 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.095 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.096 [debug] Executing bend with initial: 8
11:56:06.096 [debug] Executing fun with value: 8
11:56:06.096 [debug] Evaluating bend block with value: 8
11:56:06.096 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.096 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.096 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.096 [debug] Executing bend with initial: 9
11:56:06.096 [debug] Executing fun with value: 9
11:56:06.096 [debug] Evaluating bend block with value: 9
11:56:06.096 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.096 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.096 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.096 [debug] Executing bend with initial: 10
11:56:06.096 [debug] Executing fun with value: 10
11:56:06.096 [debug] Evaluating bend block with value: 10
11:56:06.096 [debug] Block returned: %{variant: :leaf}
11:56:06.096 [debug] Fun returned result: %{variant: :leaf}
11:56:06.096 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.096 [debug] do_bend final result: %{variant: :leaf}
11:56:06.096 [debug] Executing bend with initial: 10
11:56:06.096 [debug] Executing fun with value: 10
11:56:06.096 [debug] Evaluating bend block with value: 10
11:56:06.096 [debug] Block returned: %{variant: :leaf}
11:56:06.096 [debug] Fun returned result: %{variant: :leaf}
11:56:06.096 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.096 [debug] do_bend final result: %{variant: :leaf}
11:56:06.096 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.096 [debug] Executing bend with initial: 9
11:56:06.096 [debug] Executing fun with value: 9
11:56:06.096 [debug] Evaluating bend block with value: 9
11:56:06.096 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.096 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.096 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.096 [debug] Executing bend with initial: 10
11:56:06.096 [debug] Executing fun with value: 10
11:56:06.096 [debug] Evaluating bend block with value: 10
11:56:06.096 [debug] Block returned: %{variant: :leaf}
11:56:06.096 [debug] Fun returned result: %{variant: :leaf}
11:56:06.096 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.096 [debug] do_bend final result: %{variant: :leaf}
11:56:06.096 [debug] Executing bend with initial: 10
11:56:06.096 [debug] Executing fun with value: 10
11:56:06.096 [debug] Evaluating bend block with value: 10
11:56:06.096 [debug] Block returned: %{variant: :leaf}
11:56:06.096 [debug] Fun returned result: %{variant: :leaf}
11:56:06.096 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.096 [debug] do_bend final result: %{variant: :leaf}
11:56:06.096 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.096 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.096 [debug] Executing bend with initial: 8
11:56:06.096 [debug] Executing fun with value: 8
11:56:06.096 [debug] Evaluating bend block with value: 8
11:56:06.096 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.096 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.096 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.096 [debug] Executing bend with initial: 9
11:56:06.096 [debug] Executing fun with value: 9
11:56:06.096 [debug] Evaluating bend block with value: 9
11:56:06.096 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.096 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.096 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.096 [debug] Executing bend with initial: 10
11:56:06.096 [debug] Executing fun with value: 10
11:56:06.096 [debug] Evaluating bend block with value: 10
11:56:06.096 [debug] Block returned: %{variant: :leaf}
11:56:06.096 [debug] Fun returned result: %{variant: :leaf}
11:56:06.096 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.096 [debug] do_bend final result: %{variant: :leaf}
11:56:06.096 [debug] Executing bend with initial: 10
11:56:06.096 [debug] Executing fun with value: 10
11:56:06.096 [debug] Evaluating bend block with value: 10
11:56:06.096 [debug] Block returned: %{variant: :leaf}
11:56:06.096 [debug] Fun returned result: %{variant: :leaf}
11:56:06.096 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.096 [debug] do_bend final result: %{variant: :leaf}
11:56:06.097 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.097 [debug] Executing bend with initial: 9
11:56:06.097 [debug] Executing fun with value: 9
11:56:06.097 [debug] Evaluating bend block with value: 9
11:56:06.097 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.097 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.097 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.097 [debug] Executing bend with initial: 10
11:56:06.097 [debug] Executing fun with value: 10
11:56:06.097 [debug] Evaluating bend block with value: 10
11:56:06.097 [debug] Block returned: %{variant: :leaf}
11:56:06.097 [debug] Fun returned result: %{variant: :leaf}
11:56:06.097 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.097 [debug] do_bend final result: %{variant: :leaf}
11:56:06.097 [debug] Executing bend with initial: 10
11:56:06.097 [debug] Executing fun with value: 10
11:56:06.097 [debug] Evaluating bend block with value: 10
11:56:06.097 [debug] Block returned: %{variant: :leaf}
11:56:06.097 [debug] Fun returned result: %{variant: :leaf}
11:56:06.097 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.097 [debug] do_bend final result: %{variant: :leaf}
11:56:06.097 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.097 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.097 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.097 [debug] Executing bend with initial: 7
11:56:06.097 [debug] Executing fun with value: 7
11:56:06.097 [debug] Evaluating bend block with value: 7
11:56:06.097 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.097 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.097 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.097 [debug] Executing bend with initial: 8
11:56:06.097 [debug] Executing fun with value: 8
11:56:06.097 [debug] Evaluating bend block with value: 8
11:56:06.097 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.097 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.097 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.097 [debug] Executing bend with initial: 9
11:56:06.097 [debug] Executing fun with value: 9
11:56:06.097 [debug] Evaluating bend block with value: 9
11:56:06.097 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.097 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.097 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.097 [debug] Executing bend with initial: 10
11:56:06.097 [debug] Executing fun with value: 10
11:56:06.097 [debug] Evaluating bend block with value: 10
11:56:06.097 [debug] Block returned: %{variant: :leaf}
11:56:06.097 [debug] Fun returned result: %{variant: :leaf}
11:56:06.097 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.097 [debug] do_bend final result: %{variant: :leaf}
11:56:06.097 [debug] Executing bend with initial: 10
11:56:06.097 [debug] Executing fun with value: 10
11:56:06.097 [debug] Evaluating bend block with value: 10
11:56:06.097 [debug] Block returned: %{variant: :leaf}
11:56:06.097 [debug] Fun returned result: %{variant: :leaf}
11:56:06.097 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.097 [debug] do_bend final result: %{variant: :leaf}
11:56:06.097 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.097 [debug] Executing bend with initial: 9
11:56:06.097 [debug] Executing fun with value: 9
11:56:06.097 [debug] Evaluating bend block with value: 9
11:56:06.097 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.097 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.097 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.097 [debug] Executing bend with initial: 10
11:56:06.097 [debug] Executing fun with value: 10
11:56:06.097 [debug] Evaluating bend block with value: 10
11:56:06.097 [debug] Block returned: %{variant: :leaf}
11:56:06.097 [debug] Fun returned result: %{variant: :leaf}
11:56:06.097 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.097 [debug] do_bend final result: %{variant: :leaf}
11:56:06.098 [debug] Executing bend with initial: 10
11:56:06.098 [debug] Executing fun with value: 10
11:56:06.098 [debug] Evaluating bend block with value: 10
11:56:06.098 [debug] Block returned: %{variant: :leaf}
11:56:06.098 [debug] Fun returned result: %{variant: :leaf}
11:56:06.098 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.098 [debug] do_bend final result: %{variant: :leaf}
11:56:06.098 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.098 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.098 [debug] Executing bend with initial: 8
11:56:06.098 [debug] Executing fun with value: 8
11:56:06.098 [debug] Evaluating bend block with value: 8
11:56:06.098 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.098 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.098 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.098 [debug] Executing bend with initial: 9
11:56:06.098 [debug] Executing fun with value: 9
11:56:06.098 [debug] Evaluating bend block with value: 9
11:56:06.098 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.098 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.098 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.098 [debug] Executing bend with initial: 10
11:56:06.098 [debug] Executing fun with value: 10
11:56:06.098 [debug] Evaluating bend block with value: 10
11:56:06.098 [debug] Block returned: %{variant: :leaf}
11:56:06.098 [debug] Fun returned result: %{variant: :leaf}
11:56:06.098 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.098 [debug] do_bend final result: %{variant: :leaf}
11:56:06.098 [debug] Executing bend with initial: 10
11:56:06.098 [debug] Executing fun with value: 10
11:56:06.098 [debug] Evaluating bend block with value: 10
11:56:06.098 [debug] Block returned: %{variant: :leaf}
11:56:06.098 [debug] Fun returned result: %{variant: :leaf}
11:56:06.098 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.098 [debug] do_bend final result: %{variant: :leaf}
11:56:06.098 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.098 [debug] Executing bend with initial: 9
11:56:06.098 [debug] Executing fun with value: 9
11:56:06.098 [debug] Evaluating bend block with value: 9
11:56:06.098 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.098 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.098 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.098 [debug] Executing bend with initial: 10
11:56:06.098 [debug] Executing fun with value: 10
11:56:06.098 [debug] Evaluating bend block with value: 10
11:56:06.098 [debug] Block returned: %{variant: :leaf}
11:56:06.098 [debug] Fun returned result: %{variant: :leaf}
11:56:06.098 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.098 [debug] do_bend final result: %{variant: :leaf}
11:56:06.098 [debug] Executing bend with initial: 10
11:56:06.098 [debug] Executing fun with value: 10
11:56:06.098 [debug] Evaluating bend block with value: 10
11:56:06.098 [debug] Block returned: %{variant: :leaf}
11:56:06.098 [debug] Fun returned result: %{variant: :leaf}
11:56:06.098 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.098 [debug] do_bend final result: %{variant: :leaf}
11:56:06.098 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.098 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.099 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.099 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.099 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.099 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.099 [debug] Executing bend with initial: 4
11:56:06.099 [debug] Executing fun with value: 4
11:56:06.099 [debug] Evaluating bend block with value: 4
11:56:06.099 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.099 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.099 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.100 [debug] Executing bend with initial: 5
11:56:06.100 [debug] Executing fun with value: 5
11:56:06.100 [debug] Evaluating bend block with value: 5
11:56:06.100 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.100 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.100 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.100 [debug] Executing bend with initial: 6
11:56:06.100 [debug] Executing fun with value: 6
11:56:06.100 [debug] Evaluating bend block with value: 6
11:56:06.100 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.100 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.100 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.100 [debug] Executing bend with initial: 7
11:56:06.100 [debug] Executing fun with value: 7
11:56:06.100 [debug] Evaluating bend block with value: 7
11:56:06.100 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.100 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.100 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.100 [debug] Executing bend with initial: 8
11:56:06.100 [debug] Executing fun with value: 8
11:56:06.100 [debug] Evaluating bend block with value: 8
11:56:06.100 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.100 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.100 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.100 [debug] Executing bend with initial: 9
11:56:06.100 [debug] Executing fun with value: 9
11:56:06.100 [debug] Evaluating bend block with value: 9
11:56:06.100 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.100 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.100 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.100 [debug] Executing bend with initial: 10
11:56:06.100 [debug] Executing fun with value: 10
11:56:06.100 [debug] Evaluating bend block with value: 10
11:56:06.100 [debug] Block returned: %{variant: :leaf}
11:56:06.100 [debug] Fun returned result: %{variant: :leaf}
11:56:06.100 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.100 [debug] do_bend final result: %{variant: :leaf}
11:56:06.100 [debug] Executing bend with initial: 10
11:56:06.100 [debug] Executing fun with value: 10
11:56:06.100 [debug] Evaluating bend block with value: 10
11:56:06.100 [debug] Block returned: %{variant: :leaf}
11:56:06.100 [debug] Fun returned result: %{variant: :leaf}
11:56:06.100 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.100 [debug] do_bend final result: %{variant: :leaf}
11:56:06.100 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.100 [debug] Executing bend with initial: 9
11:56:06.100 [debug] Executing fun with value: 9
11:56:06.100 [debug] Evaluating bend block with value: 9
11:56:06.100 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.100 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.100 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.100 [debug] Executing bend with initial: 10
11:56:06.100 [debug] Executing fun with value: 10
11:56:06.100 [debug] Evaluating bend block with value: 10
11:56:06.100 [debug] Block returned: %{variant: :leaf}
11:56:06.100 [debug] Fun returned result: %{variant: :leaf}
11:56:06.100 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.100 [debug] do_bend final result: %{variant: :leaf}
11:56:06.100 [debug] Executing bend with initial: 10
11:56:06.100 [debug] Executing fun with value: 10
11:56:06.100 [debug] Evaluating bend block with value: 10
11:56:06.100 [debug] Block returned: %{variant: :leaf}
11:56:06.100 [debug] Fun returned result: %{variant: :leaf}
11:56:06.100 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.100 [debug] do_bend final result: %{variant: :leaf}
11:56:06.100 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.100 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.100 [debug] Executing bend with initial: 8
11:56:06.100 [debug] Executing fun with value: 8
11:56:06.100 [debug] Evaluating bend block with value: 8
11:56:06.100 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.100 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.100 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.100 [debug] Executing bend with initial: 9
11:56:06.100 [debug] Executing fun with value: 9
11:56:06.100 [debug] Evaluating bend block with value: 9
11:56:06.100 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.100 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.100 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.100 [debug] Executing bend with initial: 10
11:56:06.100 [debug] Executing fun with value: 10
11:56:06.100 [debug] Evaluating bend block with value: 10
11:56:06.100 [debug] Block returned: %{variant: :leaf}
11:56:06.100 [debug] Fun returned result: %{variant: :leaf}
11:56:06.100 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.100 [debug] do_bend final result: %{variant: :leaf}
11:56:06.100 [debug] Executing bend with initial: 10
11:56:06.100 [debug] Executing fun with value: 10
11:56:06.100 [debug] Evaluating bend block with value: 10
11:56:06.100 [debug] Block returned: %{variant: :leaf}
11:56:06.100 [debug] Fun returned result: %{variant: :leaf}
11:56:06.100 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.100 [debug] do_bend final result: %{variant: :leaf}
11:56:06.100 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.100 [debug] Executing bend with initial: 9
11:56:06.100 [debug] Executing fun with value: 9
11:56:06.101 [debug] Evaluating bend block with value: 9
11:56:06.101 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.101 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.101 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.101 [debug] Executing bend with initial: 10
11:56:06.101 [debug] Executing fun with value: 10
11:56:06.101 [debug] Evaluating bend block with value: 10
11:56:06.101 [debug] Block returned: %{variant: :leaf}
11:56:06.101 [debug] Fun returned result: %{variant: :leaf}
11:56:06.101 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.101 [debug] do_bend final result: %{variant: :leaf}
11:56:06.101 [debug] Executing bend with initial: 10
11:56:06.101 [debug] Executing fun with value: 10
11:56:06.101 [debug] Evaluating bend block with value: 10
11:56:06.101 [debug] Block returned: %{variant: :leaf}
11:56:06.101 [debug] Fun returned result: %{variant: :leaf}
11:56:06.101 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.101 [debug] do_bend final result: %{variant: :leaf}
11:56:06.101 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.101 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.101 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.101 [debug] Executing bend with initial: 7
11:56:06.101 [debug] Executing fun with value: 7
11:56:06.101 [debug] Evaluating bend block with value: 7
11:56:06.101 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.101 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.101 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.101 [debug] Executing bend with initial: 8
11:56:06.101 [debug] Executing fun with value: 8
11:56:06.101 [debug] Evaluating bend block with value: 8
11:56:06.101 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.101 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.101 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.101 [debug] Executing bend with initial: 9
11:56:06.101 [debug] Executing fun with value: 9
11:56:06.101 [debug] Evaluating bend block with value: 9
11:56:06.101 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.101 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.101 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.101 [debug] Executing bend with initial: 10
11:56:06.101 [debug] Executing fun with value: 10
11:56:06.101 [debug] Evaluating bend block with value: 10
11:56:06.101 [debug] Block returned: %{variant: :leaf}
11:56:06.101 [debug] Fun returned result: %{variant: :leaf}
11:56:06.101 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.101 [debug] do_bend final result: %{variant: :leaf}
11:56:06.101 [debug] Executing bend with initial: 10
11:56:06.101 [debug] Executing fun with value: 10
11:56:06.101 [debug] Evaluating bend block with value: 10
11:56:06.101 [debug] Block returned: %{variant: :leaf}
11:56:06.101 [debug] Fun returned result: %{variant: :leaf}
11:56:06.101 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.101 [debug] do_bend final result: %{variant: :leaf}
11:56:06.101 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.101 [debug] Executing bend with initial: 9
11:56:06.101 [debug] Executing fun with value: 9
11:56:06.101 [debug] Evaluating bend block with value: 9
11:56:06.101 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.101 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.101 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.101 [debug] Executing bend with initial: 10
11:56:06.101 [debug] Executing fun with value: 10
11:56:06.102 [debug] Evaluating bend block with value: 10
11:56:06.102 [debug] Block returned: %{variant: :leaf}
11:56:06.102 [debug] Fun returned result: %{variant: :leaf}
11:56:06.102 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.102 [debug] do_bend final result: %{variant: :leaf}
11:56:06.102 [debug] Executing bend with initial: 10
11:56:06.102 [debug] Executing fun with value: 10
11:56:06.102 [debug] Evaluating bend block with value: 10
11:56:06.102 [debug] Block returned: %{variant: :leaf}
11:56:06.102 [debug] Fun returned result: %{variant: :leaf}
11:56:06.102 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.102 [debug] do_bend final result: %{variant: :leaf}
11:56:06.102 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.102 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.102 [debug] Executing bend with initial: 8
11:56:06.102 [debug] Executing fun with value: 8
11:56:06.102 [debug] Evaluating bend block with value: 8
11:56:06.102 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.102 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.102 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.102 [debug] Executing bend with initial: 9
11:56:06.102 [debug] Executing fun with value: 9
11:56:06.102 [debug] Evaluating bend block with value: 9
11:56:06.102 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.102 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.102 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.102 [debug] Executing bend with initial: 10
11:56:06.102 [debug] Executing fun with value: 10
11:56:06.102 [debug] Evaluating bend block with value: 10
11:56:06.102 [debug] Block returned: %{variant: :leaf}
11:56:06.102 [debug] Fun returned result: %{variant: :leaf}
11:56:06.102 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.102 [debug] do_bend final result: %{variant: :leaf}
11:56:06.102 [debug] Executing bend with initial: 10
11:56:06.102 [debug] Executing fun with value: 10
11:56:06.102 [debug] Evaluating bend block with value: 10
11:56:06.102 [debug] Block returned: %{variant: :leaf}
11:56:06.102 [debug] Fun returned result: %{variant: :leaf}
11:56:06.102 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.102 [debug] do_bend final result: %{variant: :leaf}
11:56:06.102 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.102 [debug] Executing bend with initial: 9
11:56:06.102 [debug] Executing fun with value: 9
11:56:06.102 [debug] Evaluating bend block with value: 9
11:56:06.102 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.102 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.102 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.102 [debug] Executing bend with initial: 10
11:56:06.102 [debug] Executing fun with value: 10
11:56:06.102 [debug] Evaluating bend block with value: 10
11:56:06.102 [debug] Block returned: %{variant: :leaf}
11:56:06.102 [debug] Fun returned result: %{variant: :leaf}
11:56:06.102 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.102 [debug] do_bend final result: %{variant: :leaf}
11:56:06.102 [debug] Executing bend with initial: 10
11:56:06.102 [debug] Executing fun with value: 10
11:56:06.102 [debug] Evaluating bend block with value: 10
11:56:06.102 [debug] Block returned: %{variant: :leaf}
11:56:06.102 [debug] Fun returned result: %{variant: :leaf}
11:56:06.102 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.102 [debug] do_bend final result: %{variant: :leaf}
11:56:06.102 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.102 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.102 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.103 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.103 [debug] Executing bend with initial: 6
11:56:06.103 [debug] Executing fun with value: 6
11:56:06.103 [debug] Evaluating bend block with value: 6
11:56:06.103 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.103 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.103 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.103 [debug] Executing bend with initial: 7
11:56:06.103 [debug] Executing fun with value: 7
11:56:06.103 [debug] Evaluating bend block with value: 7
11:56:06.103 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.103 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.103 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.103 [debug] Executing bend with initial: 8
11:56:06.103 [debug] Executing fun with value: 8
11:56:06.103 [debug] Evaluating bend block with value: 8
11:56:06.103 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.103 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.103 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.103 [debug] Executing bend with initial: 9
11:56:06.103 [debug] Executing fun with value: 9
11:56:06.103 [debug] Evaluating bend block with value: 9
11:56:06.103 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.103 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.103 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.103 [debug] Executing bend with initial: 10
11:56:06.103 [debug] Executing fun with value: 10
11:56:06.103 [debug] Evaluating bend block with value: 10
11:56:06.103 [debug] Block returned: %{variant: :leaf}
11:56:06.103 [debug] Fun returned result: %{variant: :leaf}
11:56:06.103 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.103 [debug] do_bend final result: %{variant: :leaf}
11:56:06.103 [debug] Executing bend with initial: 10
11:56:06.103 [debug] Executing fun with value: 10
11:56:06.103 [debug] Evaluating bend block with value: 10
11:56:06.103 [debug] Block returned: %{variant: :leaf}
11:56:06.103 [debug] Fun returned result: %{variant: :leaf}
11:56:06.103 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.103 [debug] do_bend final result: %{variant: :leaf}
11:56:06.103 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.103 [debug] Executing bend with initial: 9
11:56:06.103 [debug] Executing fun with value: 9
11:56:06.103 [debug] Evaluating bend block with value: 9
11:56:06.103 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.103 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.103 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.103 [debug] Executing bend with initial: 10
11:56:06.103 [debug] Executing fun with value: 10
11:56:06.103 [debug] Evaluating bend block with value: 10
11:56:06.103 [debug] Block returned: %{variant: :leaf}
11:56:06.103 [debug] Fun returned result: %{variant: :leaf}
11:56:06.103 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.103 [debug] do_bend final result: %{variant: :leaf}
11:56:06.103 [debug] Executing bend with initial: 10
11:56:06.103 [debug] Executing fun with value: 10
11:56:06.103 [debug] Evaluating bend block with value: 10
11:56:06.103 [debug] Block returned: %{variant: :leaf}
11:56:06.103 [debug] Fun returned result: %{variant: :leaf}
11:56:06.103 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.103 [debug] do_bend final result: %{variant: :leaf}
11:56:06.103 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.103 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.103 [debug] Executing bend with initial: 8
11:56:06.103 [debug] Executing fun with value: 8
11:56:06.103 [debug] Evaluating bend block with value: 8
11:56:06.103 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.103 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.103 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.103 [debug] Executing bend with initial: 9
11:56:06.103 [debug] Executing fun with value: 9
11:56:06.103 [debug] Evaluating bend block with value: 9
11:56:06.103 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.103 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.103 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.103 [debug] Executing bend with initial: 10
11:56:06.103 [debug] Executing fun with value: 10
11:56:06.103 [debug] Evaluating bend block with value: 10
11:56:06.103 [debug] Block returned: %{variant: :leaf}
11:56:06.103 [debug] Fun returned result: %{variant: :leaf}
11:56:06.103 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.103 [debug] do_bend final result: %{variant: :leaf}
11:56:06.103 [debug] Executing bend with initial: 10
11:56:06.103 [debug] Executing fun with value: 10
11:56:06.103 [debug] Evaluating bend block with value: 10
11:56:06.103 [debug] Block returned: %{variant: :leaf}
11:56:06.103 [debug] Fun returned result: %{variant: :leaf}
11:56:06.103 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.104 [debug] do_bend final result: %{variant: :leaf}
11:56:06.104 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.104 [debug] Executing bend with initial: 9
11:56:06.104 [debug] Executing fun with value: 9
11:56:06.104 [debug] Evaluating bend block with value: 9
11:56:06.104 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.104 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.104 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.104 [debug] Executing bend with initial: 10
11:56:06.104 [debug] Executing fun with value: 10
11:56:06.104 [debug] Evaluating bend block with value: 10
11:56:06.104 [debug] Block returned: %{variant: :leaf}
11:56:06.104 [debug] Fun returned result: %{variant: :leaf}
11:56:06.104 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.104 [debug] do_bend final result: %{variant: :leaf}
11:56:06.104 [debug] Executing bend with initial: 10
11:56:06.104 [debug] Executing fun with value: 10
11:56:06.104 [debug] Evaluating bend block with value: 10
11:56:06.104 [debug] Block returned: %{variant: :leaf}
11:56:06.104 [debug] Fun returned result: %{variant: :leaf}
11:56:06.104 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.104 [debug] do_bend final result: %{variant: :leaf}
11:56:06.104 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.104 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.104 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.104 [debug] Executing bend with initial: 7
11:56:06.104 [debug] Executing fun with value: 7
11:56:06.104 [debug] Evaluating bend block with value: 7
11:56:06.104 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.104 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.104 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.104 [debug] Executing bend with initial: 8
11:56:06.104 [debug] Executing fun with value: 8
11:56:06.104 [debug] Evaluating bend block with value: 8
11:56:06.104 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.104 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.104 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.104 [debug] Executing bend with initial: 9
11:56:06.104 [debug] Executing fun with value: 9
11:56:06.104 [debug] Evaluating bend block with value: 9
11:56:06.104 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.104 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.104 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.104 [debug] Executing bend with initial: 10
11:56:06.104 [debug] Executing fun with value: 10
11:56:06.104 [debug] Evaluating bend block with value: 10
11:56:06.104 [debug] Block returned: %{variant: :leaf}
11:56:06.104 [debug] Fun returned result: %{variant: :leaf}
11:56:06.104 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.104 [debug] do_bend final result: %{variant: :leaf}
11:56:06.104 [debug] Executing bend with initial: 10
11:56:06.104 [debug] Executing fun with value: 10
11:56:06.104 [debug] Evaluating bend block with value: 10
11:56:06.104 [debug] Block returned: %{variant: :leaf}
11:56:06.104 [debug] Fun returned result: %{variant: :leaf}
11:56:06.104 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.104 [debug] do_bend final result: %{variant: :leaf}
11:56:06.104 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.104 [debug] Executing bend with initial: 9
11:56:06.104 [debug] Executing fun with value: 9
11:56:06.104 [debug] Evaluating bend block with value: 9
11:56:06.104 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.104 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.104 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.104 [debug] Executing bend with initial: 10
11:56:06.104 [debug] Executing fun with value: 10
11:56:06.104 [debug] Evaluating bend block with value: 10
11:56:06.104 [debug] Block returned: %{variant: :leaf}
11:56:06.104 [debug] Fun returned result: %{variant: :leaf}
11:56:06.104 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.104 [debug] do_bend final result: %{variant: :leaf}
11:56:06.104 [debug] Executing bend with initial: 10
11:56:06.104 [debug] Executing fun with value: 10
11:56:06.104 [debug] Evaluating bend block with value: 10
11:56:06.104 [debug] Block returned: %{variant: :leaf}
11:56:06.105 [debug] Fun returned result: %{variant: :leaf}
11:56:06.105 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.105 [debug] do_bend final result: %{variant: :leaf}
11:56:06.105 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.105 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.105 [debug] Executing bend with initial: 8
11:56:06.105 [debug] Executing fun with value: 8
11:56:06.105 [debug] Evaluating bend block with value: 8
11:56:06.105 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.105 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.105 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.105 [debug] Executing bend with initial: 9
11:56:06.105 [debug] Executing fun with value: 9
11:56:06.105 [debug] Evaluating bend block with value: 9
11:56:06.105 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.105 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.105 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.105 [debug] Executing bend with initial: 10
11:56:06.105 [debug] Executing fun with value: 10
11:56:06.105 [debug] Evaluating bend block with value: 10
11:56:06.105 [debug] Block returned: %{variant: :leaf}
11:56:06.105 [debug] Fun returned result: %{variant: :leaf}
11:56:06.105 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.105 [debug] do_bend final result: %{variant: :leaf}
11:56:06.105 [debug] Executing bend with initial: 10
11:56:06.105 [debug] Executing fun with value: 10
11:56:06.105 [debug] Evaluating bend block with value: 10
11:56:06.105 [debug] Block returned: %{variant: :leaf}
11:56:06.105 [debug] Fun returned result: %{variant: :leaf}
11:56:06.105 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.105 [debug] do_bend final result: %{variant: :leaf}
11:56:06.105 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.105 [debug] Executing bend with initial: 9
11:56:06.105 [debug] Executing fun with value: 9
11:56:06.105 [debug] Evaluating bend block with value: 9
11:56:06.105 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.105 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.105 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.105 [debug] Executing bend with initial: 10
11:56:06.105 [debug] Executing fun with value: 10
11:56:06.105 [debug] Evaluating bend block with value: 10
11:56:06.105 [debug] Block returned: %{variant: :leaf}
11:56:06.105 [debug] Fun returned result: %{variant: :leaf}
11:56:06.105 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.105 [debug] do_bend final result: %{variant: :leaf}
11:56:06.105 [debug] Executing bend with initial: 10
11:56:06.105 [debug] Executing fun with value: 10
11:56:06.105 [debug] Evaluating bend block with value: 10
11:56:06.105 [debug] Block returned: %{variant: :leaf}
11:56:06.105 [debug] Fun returned result: %{variant: :leaf}
11:56:06.105 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.105 [debug] do_bend final result: %{variant: :leaf}
11:56:06.105 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.105 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.105 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.105 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.106 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.106 [debug] Executing bend with initial: 5
11:56:06.106 [debug] Executing fun with value: 5
11:56:06.106 [debug] Evaluating bend block with value: 5
11:56:06.106 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.106 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.106 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.106 [debug] Executing bend with initial: 6
11:56:06.106 [debug] Executing fun with value: 6
11:56:06.106 [debug] Evaluating bend block with value: 6
11:56:06.106 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.106 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.106 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.106 [debug] Executing bend with initial: 7
11:56:06.106 [debug] Executing fun with value: 7
11:56:06.106 [debug] Evaluating bend block with value: 7
11:56:06.106 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.106 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.106 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.106 [debug] Executing bend with initial: 8
11:56:06.106 [debug] Executing fun with value: 8
11:56:06.106 [debug] Evaluating bend block with value: 8
11:56:06.106 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.106 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.106 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.106 [debug] Executing bend with initial: 9
11:56:06.106 [debug] Executing fun with value: 9
11:56:06.106 [debug] Evaluating bend block with value: 9
11:56:06.106 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.106 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.106 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.106 [debug] Executing bend with initial: 10
11:56:06.106 [debug] Executing fun with value: 10
11:56:06.106 [debug] Evaluating bend block with value: 10
11:56:06.106 [debug] Block returned: %{variant: :leaf}
11:56:06.106 [debug] Fun returned result: %{variant: :leaf}
11:56:06.106 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.106 [debug] do_bend final result: %{variant: :leaf}
11:56:06.106 [debug] Executing bend with initial: 10
11:56:06.106 [debug] Executing fun with value: 10
11:56:06.106 [debug] Evaluating bend block with value: 10
11:56:06.106 [debug] Block returned: %{variant: :leaf}
11:56:06.106 [debug] Fun returned result: %{variant: :leaf}
11:56:06.106 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.106 [debug] do_bend final result: %{variant: :leaf}
11:56:06.106 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.106 [debug] Executing bend with initial: 9
11:56:06.106 [debug] Executing fun with value: 9
11:56:06.106 [debug] Evaluating bend block with value: 9
11:56:06.106 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.106 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.106 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.106 [debug] Executing bend with initial: 10
11:56:06.106 [debug] Executing fun with value: 10
11:56:06.106 [debug] Evaluating bend block with value: 10
11:56:06.106 [debug] Block returned: %{variant: :leaf}
11:56:06.106 [debug] Fun returned result: %{variant: :leaf}
11:56:06.106 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.106 [debug] do_bend final result: %{variant: :leaf}
11:56:06.106 [debug] Executing bend with initial: 10
11:56:06.106 [debug] Executing fun with value: 10
11:56:06.106 [debug] Evaluating bend block with value: 10
11:56:06.106 [debug] Block returned: %{variant: :leaf}
11:56:06.106 [debug] Fun returned result: %{variant: :leaf}
11:56:06.106 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.106 [debug] do_bend final result: %{variant: :leaf}
11:56:06.106 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.106 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.106 [debug] Executing bend with initial: 8
11:56:06.106 [debug] Executing fun with value: 8
11:56:06.106 [debug] Evaluating bend block with value: 8
11:56:06.106 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.106 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.106 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.106 [debug] Executing bend with initial: 9
11:56:06.106 [debug] Executing fun with value: 9
11:56:06.106 [debug] Evaluating bend block with value: 9
11:56:06.106 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.106 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.106 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.106 [debug] Executing bend with initial: 10
11:56:06.106 [debug] Executing fun with value: 10
11:56:06.106 [debug] Evaluating bend block with value: 10
11:56:06.106 [debug] Block returned: %{variant: :leaf}
11:56:06.106 [debug] Fun returned result: %{variant: :leaf}
11:56:06.106 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.107 [debug] do_bend final result: %{variant: :leaf}
11:56:06.107 [debug] Executing bend with initial: 10
11:56:06.107 [debug] Executing fun with value: 10
11:56:06.107 [debug] Evaluating bend block with value: 10
11:56:06.107 [debug] Block returned: %{variant: :leaf}
11:56:06.107 [debug] Fun returned result: %{variant: :leaf}
11:56:06.107 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.107 [debug] do_bend final result: %{variant: :leaf}
11:56:06.107 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.107 [debug] Executing bend with initial: 9
11:56:06.107 [debug] Executing fun with value: 9
11:56:06.107 [debug] Evaluating bend block with value: 9
11:56:06.107 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.107 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.107 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.107 [debug] Executing bend with initial: 10
11:56:06.107 [debug] Executing fun with value: 10
11:56:06.107 [debug] Evaluating bend block with value: 10
11:56:06.107 [debug] Block returned: %{variant: :leaf}
11:56:06.107 [debug] Fun returned result: %{variant: :leaf}
11:56:06.107 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.107 [debug] do_bend final result: %{variant: :leaf}
11:56:06.107 [debug] Executing bend with initial: 10
11:56:06.107 [debug] Executing fun with value: 10
11:56:06.107 [debug] Evaluating bend block with value: 10
11:56:06.107 [debug] Block returned: %{variant: :leaf}
11:56:06.107 [debug] Fun returned result: %{variant: :leaf}
11:56:06.107 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.107 [debug] do_bend final result: %{variant: :leaf}
11:56:06.107 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.107 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.107 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.107 [debug] Executing bend with initial: 7
11:56:06.107 [debug] Executing fun with value: 7
11:56:06.107 [debug] Evaluating bend block with value: 7
11:56:06.107 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.107 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.107 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.107 [debug] Executing bend with initial: 8
11:56:06.107 [debug] Executing fun with value: 8
11:56:06.107 [debug] Evaluating bend block with value: 8
11:56:06.107 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.107 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.107 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.107 [debug] Executing bend with initial: 9
11:56:06.107 [debug] Executing fun with value: 9
11:56:06.107 [debug] Evaluating bend block with value: 9
11:56:06.107 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.107 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.107 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.107 [debug] Executing bend with initial: 10
11:56:06.107 [debug] Executing fun with value: 10
11:56:06.107 [debug] Evaluating bend block with value: 10
11:56:06.107 [debug] Block returned: %{variant: :leaf}
11:56:06.107 [debug] Fun returned result: %{variant: :leaf}
11:56:06.107 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.107 [debug] do_bend final result: %{variant: :leaf}
11:56:06.107 [debug] Executing bend with initial: 10
11:56:06.107 [debug] Executing fun with value: 10
11:56:06.107 [debug] Evaluating bend block with value: 10
11:56:06.107 [debug] Block returned: %{variant: :leaf}
11:56:06.107 [debug] Fun returned result: %{variant: :leaf}
11:56:06.107 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.107 [debug] do_bend final result: %{variant: :leaf}
11:56:06.107 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.107 [debug] Executing bend with initial: 9
11:56:06.107 [debug] Executing fun with value: 9
11:56:06.107 [debug] Evaluating bend block with value: 9
11:56:06.107 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.107 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.107 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.107 [debug] Executing bend with initial: 10
11:56:06.107 [debug] Executing fun with value: 10
11:56:06.107 [debug] Evaluating bend block with value: 10
11:56:06.107 [debug] Block returned: %{variant: :leaf}
11:56:06.107 [debug] Fun returned result: %{variant: :leaf}
11:56:06.107 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.107 [debug] do_bend final result: %{variant: :leaf}
11:56:06.107 [debug] Executing bend with initial: 10
11:56:06.107 [debug] Executing fun with value: 10
11:56:06.107 [debug] Evaluating bend block with value: 10
11:56:06.107 [debug] Block returned: %{variant: :leaf}
11:56:06.107 [debug] Fun returned result: %{variant: :leaf}
11:56:06.107 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.107 [debug] do_bend final result: %{variant: :leaf}
11:56:06.107 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.108 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.108 [debug] Executing bend with initial: 8
11:56:06.108 [debug] Executing fun with value: 8
11:56:06.108 [debug] Evaluating bend block with value: 8
11:56:06.108 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.108 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.108 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.108 [debug] Executing bend with initial: 9
11:56:06.108 [debug] Executing fun with value: 9
11:56:06.108 [debug] Evaluating bend block with value: 9
11:56:06.108 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.108 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.108 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.108 [debug] Executing bend with initial: 10
11:56:06.108 [debug] Executing fun with value: 10
11:56:06.108 [debug] Evaluating bend block with value: 10
11:56:06.108 [debug] Block returned: %{variant: :leaf}
11:56:06.108 [debug] Fun returned result: %{variant: :leaf}
11:56:06.108 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.108 [debug] do_bend final result: %{variant: :leaf}
11:56:06.108 [debug] Executing bend with initial: 10
11:56:06.108 [debug] Executing fun with value: 10
11:56:06.108 [debug] Evaluating bend block with value: 10
11:56:06.108 [debug] Block returned: %{variant: :leaf}
11:56:06.108 [debug] Fun returned result: %{variant: :leaf}
11:56:06.108 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.108 [debug] do_bend final result: %{variant: :leaf}
11:56:06.108 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.108 [debug] Executing bend with initial: 9
11:56:06.108 [debug] Executing fun with value: 9
11:56:06.108 [debug] Evaluating bend block with value: 9
11:56:06.108 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.108 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.108 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.108 [debug] Executing bend with initial: 10
11:56:06.108 [debug] Executing fun with value: 10
11:56:06.108 [debug] Evaluating bend block with value: 10
11:56:06.108 [debug] Block returned: %{variant: :leaf}
11:56:06.108 [debug] Fun returned result: %{variant: :leaf}
11:56:06.108 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.108 [debug] do_bend final result: %{variant: :leaf}
11:56:06.108 [debug] Executing bend with initial: 10
11:56:06.108 [debug] Executing fun with value: 10
11:56:06.108 [debug] Evaluating bend block with value: 10
11:56:06.108 [debug] Block returned: %{variant: :leaf}
11:56:06.108 [debug] Fun returned result: %{variant: :leaf}
11:56:06.108 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.108 [debug] do_bend final result: %{variant: :leaf}
11:56:06.108 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.108 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.108 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.108 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.108 [debug] Executing bend with initial: 6
11:56:06.108 [debug] Executing fun with value: 6
11:56:06.108 [debug] Evaluating bend block with value: 6
11:56:06.108 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.108 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.108 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.108 [debug] Executing bend with initial: 7
11:56:06.108 [debug] Executing fun with value: 7
11:56:06.108 [debug] Evaluating bend block with value: 7
11:56:06.108 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.108 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.108 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.108 [debug] Executing bend with initial: 8
11:56:06.108 [debug] Executing fun with value: 8
11:56:06.108 [debug] Evaluating bend block with value: 8
11:56:06.108 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.108 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.108 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.108 [debug] Executing bend with initial: 9
11:56:06.108 [debug] Executing fun with value: 9
11:56:06.108 [debug] Evaluating bend block with value: 9
11:56:06.108 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.108 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.108 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.108 [debug] Executing bend with initial: 10
11:56:06.108 [debug] Executing fun with value: 10
11:56:06.108 [debug] Evaluating bend block with value: 10
11:56:06.108 [debug] Block returned: %{variant: :leaf}
11:56:06.108 [debug] Fun returned result: %{variant: :leaf}
11:56:06.108 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.108 [debug] do_bend final result: %{variant: :leaf}
11:56:06.108 [debug] Executing bend with initial: 10
11:56:06.108 [debug] Executing fun with value: 10
11:56:06.108 [debug] Evaluating bend block with value: 10
11:56:06.108 [debug] Block returned: %{variant: :leaf}
11:56:06.108 [debug] Fun returned result: %{variant: :leaf}
11:56:06.108 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.108 [debug] do_bend final result: %{variant: :leaf}
11:56:06.108 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.108 [debug] Executing bend with initial: 9
11:56:06.108 [debug] Executing fun with value: 9
11:56:06.108 [debug] Evaluating bend block with value: 9
11:56:06.108 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.108 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.109 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.109 [debug] Executing bend with initial: 10
11:56:06.109 [debug] Executing fun with value: 10
11:56:06.109 [debug] Evaluating bend block with value: 10
11:56:06.109 [debug] Block returned: %{variant: :leaf}
11:56:06.109 [debug] Fun returned result: %{variant: :leaf}
11:56:06.109 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.109 [debug] do_bend final result: %{variant: :leaf}
11:56:06.109 [debug] Executing bend with initial: 10
11:56:06.109 [debug] Executing fun with value: 10
11:56:06.109 [debug] Evaluating bend block with value: 10
11:56:06.109 [debug] Block returned: %{variant: :leaf}
11:56:06.109 [debug] Fun returned result: %{variant: :leaf}
11:56:06.109 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.109 [debug] do_bend final result: %{variant: :leaf}
11:56:06.109 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.109 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.109 [debug] Executing bend with initial: 8
11:56:06.109 [debug] Executing fun with value: 8
11:56:06.109 [debug] Evaluating bend block with value: 8
11:56:06.109 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.109 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.109 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.109 [debug] Executing bend with initial: 9
11:56:06.109 [debug] Executing fun with value: 9
11:56:06.109 [debug] Evaluating bend block with value: 9
11:56:06.109 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.109 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.109 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.109 [debug] Executing bend with initial: 10
11:56:06.109 [debug] Executing fun with value: 10
11:56:06.109 [debug] Evaluating bend block with value: 10
11:56:06.109 [debug] Block returned: %{variant: :leaf}
11:56:06.109 [debug] Fun returned result: %{variant: :leaf}
11:56:06.109 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.109 [debug] do_bend final result: %{variant: :leaf}
11:56:06.109 [debug] Executing bend with initial: 10
11:56:06.109 [debug] Executing fun with value: 10
11:56:06.109 [debug] Evaluating bend block with value: 10
11:56:06.109 [debug] Block returned: %{variant: :leaf}
11:56:06.109 [debug] Fun returned result: %{variant: :leaf}
11:56:06.109 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.109 [debug] do_bend final result: %{variant: :leaf}
11:56:06.109 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.109 [debug] Executing bend with initial: 9
11:56:06.109 [debug] Executing fun with value: 9
11:56:06.109 [debug] Evaluating bend block with value: 9
11:56:06.109 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.109 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.109 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.109 [debug] Executing bend with initial: 10
11:56:06.109 [debug] Executing fun with value: 10
11:56:06.109 [debug] Evaluating bend block with value: 10
11:56:06.109 [debug] Block returned: %{variant: :leaf}
11:56:06.109 [debug] Fun returned result: %{variant: :leaf}
11:56:06.109 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.109 [debug] do_bend final result: %{variant: :leaf}
11:56:06.109 [debug] Executing bend with initial: 10
11:56:06.109 [debug] Executing fun with value: 10
11:56:06.109 [debug] Evaluating bend block with value: 10
11:56:06.109 [debug] Block returned: %{variant: :leaf}
11:56:06.109 [debug] Fun returned result: %{variant: :leaf}
11:56:06.109 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.109 [debug] do_bend final result: %{variant: :leaf}
11:56:06.109 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.109 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.109 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.109 [debug] Executing bend with initial: 7
11:56:06.109 [debug] Executing fun with value: 7
11:56:06.109 [debug] Evaluating bend block with value: 7
11:56:06.109 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.109 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.109 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.109 [debug] Executing bend with initial: 8
11:56:06.109 [debug] Executing fun with value: 8
11:56:06.109 [debug] Evaluating bend block with value: 8
11:56:06.109 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.109 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.109 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.109 [debug] Executing bend with initial: 9
11:56:06.109 [debug] Executing fun with value: 9
11:56:06.109 [debug] Evaluating bend block with value: 9
11:56:06.109 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.109 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.109 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.109 [debug] Executing bend with initial: 10
11:56:06.109 [debug] Executing fun with value: 10
11:56:06.109 [debug] Evaluating bend block with value: 10
11:56:06.109 [debug] Block returned: %{variant: :leaf}
11:56:06.109 [debug] Fun returned result: %{variant: :leaf}
11:56:06.109 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.109 [debug] do_bend final result: %{variant: :leaf}
11:56:06.109 [debug] Executing bend with initial: 10
11:56:06.109 [debug] Executing fun with value: 10
11:56:06.109 [debug] Evaluating bend block with value: 10
11:56:06.109 [debug] Block returned: %{variant: :leaf}
11:56:06.109 [debug] Fun returned result: %{variant: :leaf}
11:56:06.109 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.109 [debug] do_bend final result: %{variant: :leaf}
11:56:06.109 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.109 [debug] Executing bend with initial: 9
11:56:06.109 [debug] Executing fun with value: 9
11:56:06.109 [debug] Evaluating bend block with value: 9
11:56:06.109 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.109 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.110 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.110 [debug] Executing bend with initial: 10
11:56:06.110 [debug] Executing fun with value: 10
11:56:06.110 [debug] Evaluating bend block with value: 10
11:56:06.110 [debug] Block returned: %{variant: :leaf}
11:56:06.110 [debug] Fun returned result: %{variant: :leaf}
11:56:06.110 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.110 [debug] do_bend final result: %{variant: :leaf}
11:56:06.110 [debug] Executing bend with initial: 10
11:56:06.110 [debug] Executing fun with value: 10
11:56:06.110 [debug] Evaluating bend block with value: 10
11:56:06.110 [debug] Block returned: %{variant: :leaf}
11:56:06.110 [debug] Fun returned result: %{variant: :leaf}
11:56:06.110 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.110 [debug] do_bend final result: %{variant: :leaf}
11:56:06.110 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.110 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.110 [debug] Executing bend with initial: 8
11:56:06.110 [debug] Executing fun with value: 8
11:56:06.110 [debug] Evaluating bend block with value: 8
11:56:06.110 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.110 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.110 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.110 [debug] Executing bend with initial: 9
11:56:06.110 [debug] Executing fun with value: 9
11:56:06.110 [debug] Evaluating bend block with value: 9
11:56:06.110 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.110 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.110 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.110 [debug] Executing bend with initial: 10
11:56:06.110 [debug] Executing fun with value: 10
11:56:06.110 [debug] Evaluating bend block with value: 10
11:56:06.110 [debug] Block returned: %{variant: :leaf}
11:56:06.110 [debug] Fun returned result: %{variant: :leaf}
11:56:06.110 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.110 [debug] do_bend final result: %{variant: :leaf}
11:56:06.110 [debug] Executing bend with initial: 10
11:56:06.110 [debug] Executing fun with value: 10
11:56:06.110 [debug] Evaluating bend block with value: 10
11:56:06.110 [debug] Block returned: %{variant: :leaf}
11:56:06.110 [debug] Fun returned result: %{variant: :leaf}
11:56:06.110 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.110 [debug] do_bend final result: %{variant: :leaf}
11:56:06.110 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.110 [debug] Executing bend with initial: 9
11:56:06.110 [debug] Executing fun with value: 9
11:56:06.110 [debug] Evaluating bend block with value: 9
11:56:06.110 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.110 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.110 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.110 [debug] Executing bend with initial: 10
11:56:06.110 [debug] Executing fun with value: 10
11:56:06.110 [debug] Evaluating bend block with value: 10
11:56:06.110 [debug] Block returned: %{variant: :leaf}
11:56:06.110 [debug] Fun returned result: %{variant: :leaf}
11:56:06.110 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.110 [debug] do_bend final result: %{variant: :leaf}
11:56:06.110 [debug] Executing bend with initial: 10
11:56:06.110 [debug] Executing fun with value: 10
11:56:06.110 [debug] Evaluating bend block with value: 10
11:56:06.110 [debug] Block returned: %{variant: :leaf}
11:56:06.110 [debug] Fun returned result: %{variant: :leaf}
11:56:06.110 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.110 [debug] do_bend final result: %{variant: :leaf}
11:56:06.110 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.110 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.110 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.110 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.110 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.111 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.111 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.111 [debug] Executing bend with initial: 3
11:56:06.111 [debug] Executing fun with value: 3
11:56:06.111 [debug] Evaluating bend block with value: 3
11:56:06.111 [debug] Block returned: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.111 [debug] Fun returned result: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.111 [debug] Processing constructed value: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.111 [debug] Executing bend with initial: 4
11:56:06.111 [debug] Executing fun with value: 4
11:56:06.111 [debug] Evaluating bend block with value: 4
11:56:06.111 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.111 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.111 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.111 [debug] Executing bend with initial: 5
11:56:06.111 [debug] Executing fun with value: 5
11:56:06.111 [debug] Evaluating bend block with value: 5
11:56:06.111 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.111 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.111 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.111 [debug] Executing bend with initial: 6
11:56:06.111 [debug] Executing fun with value: 6
11:56:06.111 [debug] Evaluating bend block with value: 6
11:56:06.111 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.111 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.111 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.111 [debug] Executing bend with initial: 7
11:56:06.111 [debug] Executing fun with value: 7
11:56:06.111 [debug] Evaluating bend block with value: 7
11:56:06.112 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.112 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.112 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 8
11:56:06.112 [debug] Executing fun with value: 8
11:56:06.112 [debug] Evaluating bend block with value: 8
11:56:06.112 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.112 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.112 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 9
11:56:06.112 [debug] Executing fun with value: 9
11:56:06.112 [debug] Evaluating bend block with value: 9
11:56:06.112 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 10
11:56:06.112 [debug] Executing fun with value: 10
11:56:06.112 [debug] Evaluating bend block with value: 10
11:56:06.112 [debug] Block returned: %{variant: :leaf}
11:56:06.112 [debug] Fun returned result: %{variant: :leaf}
11:56:06.112 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{variant: :leaf}
11:56:06.112 [debug] Executing bend with initial: 10
11:56:06.112 [debug] Executing fun with value: 10
11:56:06.112 [debug] Evaluating bend block with value: 10
11:56:06.112 [debug] Block returned: %{variant: :leaf}
11:56:06.112 [debug] Fun returned result: %{variant: :leaf}
11:56:06.112 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 9
11:56:06.112 [debug] Executing fun with value: 9
11:56:06.112 [debug] Evaluating bend block with value: 9
11:56:06.112 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 10
11:56:06.112 [debug] Executing fun with value: 10
11:56:06.112 [debug] Evaluating bend block with value: 10
11:56:06.112 [debug] Block returned: %{variant: :leaf}
11:56:06.112 [debug] Fun returned result: %{variant: :leaf}
11:56:06.112 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{variant: :leaf}
11:56:06.112 [debug] Executing bend with initial: 10
11:56:06.112 [debug] Executing fun with value: 10
11:56:06.112 [debug] Evaluating bend block with value: 10
11:56:06.112 [debug] Block returned: %{variant: :leaf}
11:56:06.112 [debug] Fun returned result: %{variant: :leaf}
11:56:06.112 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.112 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 8
11:56:06.112 [debug] Executing fun with value: 8
11:56:06.112 [debug] Evaluating bend block with value: 8
11:56:06.112 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.112 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.112 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 9
11:56:06.112 [debug] Executing fun with value: 9
11:56:06.112 [debug] Evaluating bend block with value: 9
11:56:06.112 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 10
11:56:06.112 [debug] Executing fun with value: 10
11:56:06.112 [debug] Evaluating bend block with value: 10
11:56:06.112 [debug] Block returned: %{variant: :leaf}
11:56:06.112 [debug] Fun returned result: %{variant: :leaf}
11:56:06.112 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{variant: :leaf}
11:56:06.112 [debug] Executing bend with initial: 10
11:56:06.112 [debug] Executing fun with value: 10
11:56:06.112 [debug] Evaluating bend block with value: 10
11:56:06.112 [debug] Block returned: %{variant: :leaf}
11:56:06.112 [debug] Fun returned result: %{variant: :leaf}
11:56:06.112 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 9
11:56:06.112 [debug] Executing fun with value: 9
11:56:06.112 [debug] Evaluating bend block with value: 9
11:56:06.112 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 10
11:56:06.112 [debug] Executing fun with value: 10
11:56:06.112 [debug] Evaluating bend block with value: 10
11:56:06.112 [debug] Block returned: %{variant: :leaf}
11:56:06.112 [debug] Fun returned result: %{variant: :leaf}
11:56:06.112 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{variant: :leaf}
11:56:06.112 [debug] Executing bend with initial: 10
11:56:06.112 [debug] Executing fun with value: 10
11:56:06.112 [debug] Evaluating bend block with value: 10
11:56:06.112 [debug] Block returned: %{variant: :leaf}
11:56:06.112 [debug] Fun returned result: %{variant: :leaf}
11:56:06.112 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.112 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.112 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 7
11:56:06.112 [debug] Executing fun with value: 7
11:56:06.112 [debug] Evaluating bend block with value: 7
11:56:06.112 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.112 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.112 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 8
11:56:06.112 [debug] Executing fun with value: 8
11:56:06.112 [debug] Evaluating bend block with value: 8
11:56:06.112 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.112 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.112 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 9
11:56:06.112 [debug] Executing fun with value: 9
11:56:06.112 [debug] Evaluating bend block with value: 9
11:56:06.112 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 10
11:56:06.112 [debug] Executing fun with value: 10
11:56:06.112 [debug] Evaluating bend block with value: 10
11:56:06.112 [debug] Block returned: %{variant: :leaf}
11:56:06.112 [debug] Fun returned result: %{variant: :leaf}
11:56:06.112 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{variant: :leaf}
11:56:06.112 [debug] Executing bend with initial: 10
11:56:06.112 [debug] Executing fun with value: 10
11:56:06.112 [debug] Evaluating bend block with value: 10
11:56:06.112 [debug] Block returned: %{variant: :leaf}
11:56:06.112 [debug] Fun returned result: %{variant: :leaf}
11:56:06.112 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{variant: :leaf}
11:56:06.112 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 9
11:56:06.112 [debug] Executing fun with value: 9
11:56:06.112 [debug] Evaluating bend block with value: 9
11:56:06.112 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.112 [debug] Executing bend with initial: 10
11:56:06.112 [debug] Executing fun with value: 10
11:56:06.113 [debug] Evaluating bend block with value: 10
11:56:06.113 [debug] Block returned: %{variant: :leaf}
11:56:06.113 [debug] Fun returned result: %{variant: :leaf}
11:56:06.113 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.113 [debug] do_bend final result: %{variant: :leaf}
11:56:06.113 [debug] Executing bend with initial: 10
11:56:06.113 [debug] Executing fun with value: 10
11:56:06.113 [debug] Evaluating bend block with value: 10
11:56:06.113 [debug] Block returned: %{variant: :leaf}
11:56:06.113 [debug] Fun returned result: %{variant: :leaf}
11:56:06.113 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.113 [debug] do_bend final result: %{variant: :leaf}
11:56:06.113 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.113 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.113 [debug] Executing bend with initial: 8
11:56:06.113 [debug] Executing fun with value: 8
11:56:06.113 [debug] Evaluating bend block with value: 8
11:56:06.113 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.113 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.113 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.113 [debug] Executing bend with initial: 9
11:56:06.113 [debug] Executing fun with value: 9
11:56:06.113 [debug] Evaluating bend block with value: 9
11:56:06.113 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.113 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.113 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.113 [debug] Executing bend with initial: 10
11:56:06.113 [debug] Executing fun with value: 10
11:56:06.113 [debug] Evaluating bend block with value: 10
11:56:06.113 [debug] Block returned: %{variant: :leaf}
11:56:06.113 [debug] Fun returned result: %{variant: :leaf}
11:56:06.113 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.113 [debug] do_bend final result: %{variant: :leaf}
11:56:06.113 [debug] Executing bend with initial: 10
11:56:06.113 [debug] Executing fun with value: 10
11:56:06.113 [debug] Evaluating bend block with value: 10
11:56:06.113 [debug] Block returned: %{variant: :leaf}
11:56:06.113 [debug] Fun returned result: %{variant: :leaf}
11:56:06.113 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.113 [debug] do_bend final result: %{variant: :leaf}
11:56:06.113 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.113 [debug] Executing bend with initial: 9
11:56:06.113 [debug] Executing fun with value: 9
11:56:06.113 [debug] Evaluating bend block with value: 9
11:56:06.113 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.113 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.113 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.113 [debug] Executing bend with initial: 10
11:56:06.113 [debug] Executing fun with value: 10
11:56:06.113 [debug] Evaluating bend block with value: 10
11:56:06.113 [debug] Block returned: %{variant: :leaf}
11:56:06.113 [debug] Fun returned result: %{variant: :leaf}
11:56:06.113 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.113 [debug] do_bend final result: %{variant: :leaf}
11:56:06.113 [debug] Executing bend with initial: 10
11:56:06.113 [debug] Executing fun with value: 10
11:56:06.113 [debug] Evaluating bend block with value: 10
11:56:06.113 [debug] Block returned: %{variant: :leaf}
11:56:06.113 [debug] Fun returned result: %{variant: :leaf}
11:56:06.113 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.113 [debug] do_bend final result: %{variant: :leaf}
11:56:06.113 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.113 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.113 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.113 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.113 [debug] Executing bend with initial: 6
11:56:06.113 [debug] Executing fun with value: 6
11:56:06.113 [debug] Evaluating bend block with value: 6
11:56:06.113 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.113 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.113 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.113 [debug] Executing bend with initial: 7
11:56:06.113 [debug] Executing fun with value: 7
11:56:06.113 [debug] Evaluating bend block with value: 7
11:56:06.113 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.113 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.113 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.113 [debug] Executing bend with initial: 8
11:56:06.113 [debug] Executing fun with value: 8
11:56:06.113 [debug] Evaluating bend block with value: 8
11:56:06.113 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.113 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.113 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.113 [debug] Executing bend with initial: 9
11:56:06.113 [debug] Executing fun with value: 9
11:56:06.113 [debug] Evaluating bend block with value: 9
11:56:06.113 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.113 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.113 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.113 [debug] Executing bend with initial: 10
11:56:06.113 [debug] Executing fun with value: 10
11:56:06.113 [debug] Evaluating bend block with value: 10
11:56:06.113 [debug] Block returned: %{variant: :leaf}
11:56:06.113 [debug] Fun returned result: %{variant: :leaf}
11:56:06.113 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.113 [debug] do_bend final result: %{variant: :leaf}
11:56:06.113 [debug] Executing bend with initial: 10
11:56:06.113 [debug] Executing fun with value: 10
11:56:06.113 [debug] Evaluating bend block with value: 10
11:56:06.113 [debug] Block returned: %{variant: :leaf}
11:56:06.113 [debug] Fun returned result: %{variant: :leaf}
11:56:06.113 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.113 [debug] do_bend final result: %{variant: :leaf}
11:56:06.113 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.113 [debug] Executing bend with initial: 9
11:56:06.113 [debug] Executing fun with value: 9
11:56:06.113 [debug] Evaluating bend block with value: 9
11:56:06.113 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.113 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.113 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.113 [debug] Executing bend with initial: 10
11:56:06.113 [debug] Executing fun with value: 10
11:56:06.113 [debug] Evaluating bend block with value: 10
11:56:06.113 [debug] Block returned: %{variant: :leaf}
11:56:06.113 [debug] Fun returned result: %{variant: :leaf}
11:56:06.113 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{variant: :leaf}
11:56:06.114 [debug] Executing bend with initial: 10
11:56:06.114 [debug] Executing fun with value: 10
11:56:06.114 [debug] Evaluating bend block with value: 10
11:56:06.114 [debug] Block returned: %{variant: :leaf}
11:56:06.114 [debug] Fun returned result: %{variant: :leaf}
11:56:06.114 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.114 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 8
11:56:06.114 [debug] Executing fun with value: 8
11:56:06.114 [debug] Evaluating bend block with value: 8
11:56:06.114 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.114 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.114 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 9
11:56:06.114 [debug] Executing fun with value: 9
11:56:06.114 [debug] Evaluating bend block with value: 9
11:56:06.114 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 10
11:56:06.114 [debug] Executing fun with value: 10
11:56:06.114 [debug] Evaluating bend block with value: 10
11:56:06.114 [debug] Block returned: %{variant: :leaf}
11:56:06.114 [debug] Fun returned result: %{variant: :leaf}
11:56:06.114 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{variant: :leaf}
11:56:06.114 [debug] Executing bend with initial: 10
11:56:06.114 [debug] Executing fun with value: 10
11:56:06.114 [debug] Evaluating bend block with value: 10
11:56:06.114 [debug] Block returned: %{variant: :leaf}
11:56:06.114 [debug] Fun returned result: %{variant: :leaf}
11:56:06.114 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 9
11:56:06.114 [debug] Executing fun with value: 9
11:56:06.114 [debug] Evaluating bend block with value: 9
11:56:06.114 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 10
11:56:06.114 [debug] Executing fun with value: 10
11:56:06.114 [debug] Evaluating bend block with value: 10
11:56:06.114 [debug] Block returned: %{variant: :leaf}
11:56:06.114 [debug] Fun returned result: %{variant: :leaf}
11:56:06.114 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{variant: :leaf}
11:56:06.114 [debug] Executing bend with initial: 10
11:56:06.114 [debug] Executing fun with value: 10
11:56:06.114 [debug] Evaluating bend block with value: 10
11:56:06.114 [debug] Block returned: %{variant: :leaf}
11:56:06.114 [debug] Fun returned result: %{variant: :leaf}
11:56:06.114 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.114 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.114 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 7
11:56:06.114 [debug] Executing fun with value: 7
11:56:06.114 [debug] Evaluating bend block with value: 7
11:56:06.114 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.114 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.114 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 8
11:56:06.114 [debug] Executing fun with value: 8
11:56:06.114 [debug] Evaluating bend block with value: 8
11:56:06.114 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.114 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.114 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 9
11:56:06.114 [debug] Executing fun with value: 9
11:56:06.114 [debug] Evaluating bend block with value: 9
11:56:06.114 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 10
11:56:06.114 [debug] Executing fun with value: 10
11:56:06.114 [debug] Evaluating bend block with value: 10
11:56:06.114 [debug] Block returned: %{variant: :leaf}
11:56:06.114 [debug] Fun returned result: %{variant: :leaf}
11:56:06.114 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{variant: :leaf}
11:56:06.114 [debug] Executing bend with initial: 10
11:56:06.114 [debug] Executing fun with value: 10
11:56:06.114 [debug] Evaluating bend block with value: 10
11:56:06.114 [debug] Block returned: %{variant: :leaf}
11:56:06.114 [debug] Fun returned result: %{variant: :leaf}
11:56:06.114 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 9
11:56:06.114 [debug] Executing fun with value: 9
11:56:06.114 [debug] Evaluating bend block with value: 9
11:56:06.114 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 10
11:56:06.114 [debug] Executing fun with value: 10
11:56:06.114 [debug] Evaluating bend block with value: 10
11:56:06.114 [debug] Block returned: %{variant: :leaf}
11:56:06.114 [debug] Fun returned result: %{variant: :leaf}
11:56:06.114 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{variant: :leaf}
11:56:06.114 [debug] Executing bend with initial: 10
11:56:06.114 [debug] Executing fun with value: 10
11:56:06.114 [debug] Evaluating bend block with value: 10
11:56:06.114 [debug] Block returned: %{variant: :leaf}
11:56:06.114 [debug] Fun returned result: %{variant: :leaf}
11:56:06.114 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.114 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 8
11:56:06.114 [debug] Executing fun with value: 8
11:56:06.114 [debug] Evaluating bend block with value: 8
11:56:06.114 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.114 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.114 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 9
11:56:06.114 [debug] Executing fun with value: 9
11:56:06.114 [debug] Evaluating bend block with value: 9
11:56:06.114 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 10
11:56:06.114 [debug] Executing fun with value: 10
11:56:06.114 [debug] Evaluating bend block with value: 10
11:56:06.114 [debug] Block returned: %{variant: :leaf}
11:56:06.114 [debug] Fun returned result: %{variant: :leaf}
11:56:06.114 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{variant: :leaf}
11:56:06.114 [debug] Executing bend with initial: 10
11:56:06.114 [debug] Executing fun with value: 10
11:56:06.114 [debug] Evaluating bend block with value: 10
11:56:06.114 [debug] Block returned: %{variant: :leaf}
11:56:06.114 [debug] Fun returned result: %{variant: :leaf}
11:56:06.114 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{variant: :leaf}
11:56:06.114 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.114 [debug] Executing bend with initial: 9
11:56:06.114 [debug] Executing fun with value: 9
11:56:06.115 [debug] Evaluating bend block with value: 9
11:56:06.115 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.115 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.115 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.115 [debug] Executing bend with initial: 10
11:56:06.115 [debug] Executing fun with value: 10
11:56:06.115 [debug] Evaluating bend block with value: 10
11:56:06.115 [debug] Block returned: %{variant: :leaf}
11:56:06.115 [debug] Fun returned result: %{variant: :leaf}
11:56:06.115 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.115 [debug] do_bend final result: %{variant: :leaf}
11:56:06.115 [debug] Executing bend with initial: 10
11:56:06.115 [debug] Executing fun with value: 10
11:56:06.115 [debug] Evaluating bend block with value: 10
11:56:06.115 [debug] Block returned: %{variant: :leaf}
11:56:06.115 [debug] Fun returned result: %{variant: :leaf}
11:56:06.115 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.115 [debug] do_bend final result: %{variant: :leaf}
11:56:06.115 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.115 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.115 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.115 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.115 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.115 [debug] Executing bend with initial: 5
11:56:06.115 [debug] Executing fun with value: 5
11:56:06.115 [debug] Evaluating bend block with value: 5
11:56:06.115 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.115 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.115 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.115 [debug] Executing bend with initial: 6
11:56:06.115 [debug] Executing fun with value: 6
11:56:06.115 [debug] Evaluating bend block with value: 6
11:56:06.115 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.115 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.115 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.115 [debug] Executing bend with initial: 7
11:56:06.115 [debug] Executing fun with value: 7
11:56:06.115 [debug] Evaluating bend block with value: 7
11:56:06.115 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.115 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.115 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.115 [debug] Executing bend with initial: 8
11:56:06.115 [debug] Executing fun with value: 8
11:56:06.115 [debug] Evaluating bend block with value: 8
11:56:06.115 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.115 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.115 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.115 [debug] Executing bend with initial: 9
11:56:06.115 [debug] Executing fun with value: 9
11:56:06.115 [debug] Evaluating bend block with value: 9
11:56:06.115 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.115 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.115 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.115 [debug] Executing bend with initial: 10
11:56:06.115 [debug] Executing fun with value: 10
11:56:06.115 [debug] Evaluating bend block with value: 10
11:56:06.115 [debug] Block returned: %{variant: :leaf}
11:56:06.115 [debug] Fun returned result: %{variant: :leaf}
11:56:06.115 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.115 [debug] do_bend final result: %{variant: :leaf}
11:56:06.115 [debug] Executing bend with initial: 10
11:56:06.115 [debug] Executing fun with value: 10
11:56:06.115 [debug] Evaluating bend block with value: 10
11:56:06.115 [debug] Block returned: %{variant: :leaf}
11:56:06.115 [debug] Fun returned result: %{variant: :leaf}
11:56:06.115 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.115 [debug] do_bend final result: %{variant: :leaf}
11:56:06.115 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.115 [debug] Executing bend with initial: 9
11:56:06.115 [debug] Executing fun with value: 9
11:56:06.115 [debug] Evaluating bend block with value: 9
11:56:06.115 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.115 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.115 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.115 [debug] Executing bend with initial: 10
11:56:06.115 [debug] Executing fun with value: 10
11:56:06.115 [debug] Evaluating bend block with value: 10
11:56:06.115 [debug] Block returned: %{variant: :leaf}
11:56:06.115 [debug] Fun returned result: %{variant: :leaf}
11:56:06.115 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.115 [debug] do_bend final result: %{variant: :leaf}
11:56:06.115 [debug] Executing bend with initial: 10
11:56:06.115 [debug] Executing fun with value: 10
11:56:06.115 [debug] Evaluating bend block with value: 10
11:56:06.115 [debug] Block returned: %{variant: :leaf}
11:56:06.115 [debug] Fun returned result: %{variant: :leaf}
11:56:06.115 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.115 [debug] do_bend final result: %{variant: :leaf}
11:56:06.115 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.115 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.115 [debug] Executing bend with initial: 8
11:56:06.115 [debug] Executing fun with value: 8
11:56:06.115 [debug] Evaluating bend block with value: 8
11:56:06.115 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.115 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.115 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.115 [debug] Executing bend with initial: 9
11:56:06.115 [debug] Executing fun with value: 9
11:56:06.115 [debug] Evaluating bend block with value: 9
11:56:06.115 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.115 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.115 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.115 [debug] Executing bend with initial: 10
11:56:06.115 [debug] Executing fun with value: 10
11:56:06.115 [debug] Evaluating bend block with value: 10
11:56:06.115 [debug] Block returned: %{variant: :leaf}
11:56:06.115 [debug] Fun returned result: %{variant: :leaf}
11:56:06.115 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.115 [debug] do_bend final result: %{variant: :leaf}
11:56:06.115 [debug] Executing bend with initial: 10
11:56:06.115 [debug] Executing fun with value: 10
11:56:06.115 [debug] Evaluating bend block with value: 10
11:56:06.115 [debug] Block returned: %{variant: :leaf}
11:56:06.115 [debug] Fun returned result: %{variant: :leaf}
11:56:06.115 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.115 [debug] do_bend final result: %{variant: :leaf}
11:56:06.115 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.116 [debug] Executing bend with initial: 9
11:56:06.116 [debug] Executing fun with value: 9
11:56:06.116 [debug] Evaluating bend block with value: 9
11:56:06.116 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Executing bend with initial: 10
11:56:06.116 [debug] Executing fun with value: 10
11:56:06.116 [debug] Evaluating bend block with value: 10
11:56:06.116 [debug] Block returned: %{variant: :leaf}
11:56:06.116 [debug] Fun returned result: %{variant: :leaf}
11:56:06.116 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{variant: :leaf}
11:56:06.116 [debug] Executing bend with initial: 10
11:56:06.116 [debug] Executing fun with value: 10
11:56:06.116 [debug] Evaluating bend block with value: 10
11:56:06.116 [debug] Block returned: %{variant: :leaf}
11:56:06.116 [debug] Fun returned result: %{variant: :leaf}
11:56:06.116 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.116 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.116 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.116 [debug] Executing bend with initial: 7
11:56:06.116 [debug] Executing fun with value: 7
11:56:06.116 [debug] Evaluating bend block with value: 7
11:56:06.116 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.116 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.116 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.116 [debug] Executing bend with initial: 8
11:56:06.116 [debug] Executing fun with value: 8
11:56:06.116 [debug] Evaluating bend block with value: 8
11:56:06.116 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.116 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.116 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.116 [debug] Executing bend with initial: 9
11:56:06.116 [debug] Executing fun with value: 9
11:56:06.116 [debug] Evaluating bend block with value: 9
11:56:06.116 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Executing bend with initial: 10
11:56:06.116 [debug] Executing fun with value: 10
11:56:06.116 [debug] Evaluating bend block with value: 10
11:56:06.116 [debug] Block returned: %{variant: :leaf}
11:56:06.116 [debug] Fun returned result: %{variant: :leaf}
11:56:06.116 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{variant: :leaf}
11:56:06.116 [debug] Executing bend with initial: 10
11:56:06.116 [debug] Executing fun with value: 10
11:56:06.116 [debug] Evaluating bend block with value: 10
11:56:06.116 [debug] Block returned: %{variant: :leaf}
11:56:06.116 [debug] Fun returned result: %{variant: :leaf}
11:56:06.116 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.116 [debug] Executing bend with initial: 9
11:56:06.116 [debug] Executing fun with value: 9
11:56:06.116 [debug] Evaluating bend block with value: 9
11:56:06.116 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Executing bend with initial: 10
11:56:06.116 [debug] Executing fun with value: 10
11:56:06.116 [debug] Evaluating bend block with value: 10
11:56:06.116 [debug] Block returned: %{variant: :leaf}
11:56:06.116 [debug] Fun returned result: %{variant: :leaf}
11:56:06.116 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{variant: :leaf}
11:56:06.116 [debug] Executing bend with initial: 10
11:56:06.116 [debug] Executing fun with value: 10
11:56:06.116 [debug] Evaluating bend block with value: 10
11:56:06.116 [debug] Block returned: %{variant: :leaf}
11:56:06.116 [debug] Fun returned result: %{variant: :leaf}
11:56:06.116 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.116 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.116 [debug] Executing bend with initial: 8
11:56:06.116 [debug] Executing fun with value: 8
11:56:06.116 [debug] Evaluating bend block with value: 8
11:56:06.116 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.116 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.116 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.116 [debug] Executing bend with initial: 9
11:56:06.116 [debug] Executing fun with value: 9
11:56:06.116 [debug] Evaluating bend block with value: 9
11:56:06.116 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Executing bend with initial: 10
11:56:06.116 [debug] Executing fun with value: 10
11:56:06.116 [debug] Evaluating bend block with value: 10
11:56:06.116 [debug] Block returned: %{variant: :leaf}
11:56:06.116 [debug] Fun returned result: %{variant: :leaf}
11:56:06.116 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{variant: :leaf}
11:56:06.116 [debug] Executing bend with initial: 10
11:56:06.116 [debug] Executing fun with value: 10
11:56:06.116 [debug] Evaluating bend block with value: 10
11:56:06.116 [debug] Block returned: %{variant: :leaf}
11:56:06.116 [debug] Fun returned result: %{variant: :leaf}
11:56:06.116 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.116 [debug] Executing bend with initial: 9
11:56:06.116 [debug] Executing fun with value: 9
11:56:06.116 [debug] Evaluating bend block with value: 9
11:56:06.116 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.116 [debug] Executing bend with initial: 10
11:56:06.116 [debug] Executing fun with value: 10
11:56:06.116 [debug] Evaluating bend block with value: 10
11:56:06.116 [debug] Block returned: %{variant: :leaf}
11:56:06.116 [debug] Fun returned result: %{variant: :leaf}
11:56:06.116 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{variant: :leaf}
11:56:06.116 [debug] Executing bend with initial: 10
11:56:06.116 [debug] Executing fun with value: 10
11:56:06.116 [debug] Evaluating bend block with value: 10
11:56:06.116 [debug] Block returned: %{variant: :leaf}
11:56:06.116 [debug] Fun returned result: %{variant: :leaf}
11:56:06.116 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{variant: :leaf}
11:56:06.116 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.116 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.116 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.116 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 6
11:56:06.117 [debug] Executing fun with value: 6
11:56:06.117 [debug] Evaluating bend block with value: 6
11:56:06.117 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.117 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.117 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 7
11:56:06.117 [debug] Executing fun with value: 7
11:56:06.117 [debug] Evaluating bend block with value: 7
11:56:06.117 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.117 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.117 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 8
11:56:06.117 [debug] Executing fun with value: 8
11:56:06.117 [debug] Evaluating bend block with value: 8
11:56:06.117 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.117 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.117 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 9
11:56:06.117 [debug] Executing fun with value: 9
11:56:06.117 [debug] Evaluating bend block with value: 9
11:56:06.117 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 10
11:56:06.117 [debug] Executing fun with value: 10
11:56:06.117 [debug] Evaluating bend block with value: 10
11:56:06.117 [debug] Block returned: %{variant: :leaf}
11:56:06.117 [debug] Fun returned result: %{variant: :leaf}
11:56:06.117 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.117 [debug] do_bend final result: %{variant: :leaf}
11:56:06.117 [debug] Executing bend with initial: 10
11:56:06.117 [debug] Executing fun with value: 10
11:56:06.117 [debug] Evaluating bend block with value: 10
11:56:06.117 [debug] Block returned: %{variant: :leaf}
11:56:06.117 [debug] Fun returned result: %{variant: :leaf}
11:56:06.117 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.117 [debug] do_bend final result: %{variant: :leaf}
11:56:06.117 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 9
11:56:06.117 [debug] Executing fun with value: 9
11:56:06.117 [debug] Evaluating bend block with value: 9
11:56:06.117 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 10
11:56:06.117 [debug] Executing fun with value: 10
11:56:06.117 [debug] Evaluating bend block with value: 10
11:56:06.117 [debug] Block returned: %{variant: :leaf}
11:56:06.117 [debug] Fun returned result: %{variant: :leaf}
11:56:06.117 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.117 [debug] do_bend final result: %{variant: :leaf}
11:56:06.117 [debug] Executing bend with initial: 10
11:56:06.117 [debug] Executing fun with value: 10
11:56:06.117 [debug] Evaluating bend block with value: 10
11:56:06.117 [debug] Block returned: %{variant: :leaf}
11:56:06.117 [debug] Fun returned result: %{variant: :leaf}
11:56:06.117 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.117 [debug] do_bend final result: %{variant: :leaf}
11:56:06.117 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.117 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 8
11:56:06.117 [debug] Executing fun with value: 8
11:56:06.117 [debug] Evaluating bend block with value: 8
11:56:06.117 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.117 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.117 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 9
11:56:06.117 [debug] Executing fun with value: 9
11:56:06.117 [debug] Evaluating bend block with value: 9
11:56:06.117 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 10
11:56:06.117 [debug] Executing fun with value: 10
11:56:06.117 [debug] Evaluating bend block with value: 10
11:56:06.117 [debug] Block returned: %{variant: :leaf}
11:56:06.117 [debug] Fun returned result: %{variant: :leaf}
11:56:06.117 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.117 [debug] do_bend final result: %{variant: :leaf}
11:56:06.117 [debug] Executing bend with initial: 10
11:56:06.117 [debug] Executing fun with value: 10
11:56:06.117 [debug] Evaluating bend block with value: 10
11:56:06.117 [debug] Block returned: %{variant: :leaf}
11:56:06.117 [debug] Fun returned result: %{variant: :leaf}
11:56:06.117 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.117 [debug] do_bend final result: %{variant: :leaf}
11:56:06.117 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 9
11:56:06.117 [debug] Executing fun with value: 9
11:56:06.117 [debug] Evaluating bend block with value: 9
11:56:06.117 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 10
11:56:06.117 [debug] Executing fun with value: 10
11:56:06.117 [debug] Evaluating bend block with value: 10
11:56:06.117 [debug] Block returned: %{variant: :leaf}
11:56:06.117 [debug] Fun returned result: %{variant: :leaf}
11:56:06.117 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.117 [debug] do_bend final result: %{variant: :leaf}
11:56:06.117 [debug] Executing bend with initial: 10
11:56:06.117 [debug] Executing fun with value: 10
11:56:06.117 [debug] Evaluating bend block with value: 10
11:56:06.117 [debug] Block returned: %{variant: :leaf}
11:56:06.117 [debug] Fun returned result: %{variant: :leaf}
11:56:06.117 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.117 [debug] do_bend final result: %{variant: :leaf}
11:56:06.117 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.117 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.117 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 7
11:56:06.117 [debug] Executing fun with value: 7
11:56:06.117 [debug] Evaluating bend block with value: 7
11:56:06.117 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.117 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.117 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 8
11:56:06.117 [debug] Executing fun with value: 8
11:56:06.117 [debug] Evaluating bend block with value: 8
11:56:06.117 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.117 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.117 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 9
11:56:06.117 [debug] Executing fun with value: 9
11:56:06.117 [debug] Evaluating bend block with value: 9
11:56:06.117 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.117 [debug] Executing bend with initial: 10
11:56:06.117 [debug] Executing fun with value: 10
11:56:06.117 [debug] Evaluating bend block with value: 10
11:56:06.117 [debug] Block returned: %{variant: :leaf}
11:56:06.117 [debug] Fun returned result: %{variant: :leaf}
11:56:06.117 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.117 [debug] do_bend final result: %{variant: :leaf}
11:56:06.117 [debug] Executing bend with initial: 10
11:56:06.117 [debug] Executing fun with value: 10
11:56:06.118 [debug] Evaluating bend block with value: 10
11:56:06.118 [debug] Block returned: %{variant: :leaf}
11:56:06.118 [debug] Fun returned result: %{variant: :leaf}
11:56:06.118 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.118 [debug] do_bend final result: %{variant: :leaf}
11:56:06.118 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.118 [debug] Executing bend with initial: 9
11:56:06.118 [debug] Executing fun with value: 9
11:56:06.118 [debug] Evaluating bend block with value: 9
11:56:06.118 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.118 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.118 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.118 [debug] Executing bend with initial: 10
11:56:06.118 [debug] Executing fun with value: 10
11:56:06.118 [debug] Evaluating bend block with value: 10
11:56:06.118 [debug] Block returned: %{variant: :leaf}
11:56:06.118 [debug] Fun returned result: %{variant: :leaf}
11:56:06.118 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.118 [debug] do_bend final result: %{variant: :leaf}
11:56:06.118 [debug] Executing bend with initial: 10
11:56:06.118 [debug] Executing fun with value: 10
11:56:06.118 [debug] Evaluating bend block with value: 10
11:56:06.118 [debug] Block returned: %{variant: :leaf}
11:56:06.118 [debug] Fun returned result: %{variant: :leaf}
11:56:06.118 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.118 [debug] do_bend final result: %{variant: :leaf}
11:56:06.118 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.118 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.118 [debug] Executing bend with initial: 8
11:56:06.118 [debug] Executing fun with value: 8
11:56:06.118 [debug] Evaluating bend block with value: 8
11:56:06.118 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.118 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.118 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.118 [debug] Executing bend with initial: 9
11:56:06.118 [debug] Executing fun with value: 9
11:56:06.118 [debug] Evaluating bend block with value: 9
11:56:06.118 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.118 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.118 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.118 [debug] Executing bend with initial: 10
11:56:06.118 [debug] Executing fun with value: 10
11:56:06.118 [debug] Evaluating bend block with value: 10
11:56:06.118 [debug] Block returned: %{variant: :leaf}
11:56:06.118 [debug] Fun returned result: %{variant: :leaf}
11:56:06.118 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.118 [debug] do_bend final result: %{variant: :leaf}
11:56:06.118 [debug] Executing bend with initial: 10
11:56:06.118 [debug] Executing fun with value: 10
11:56:06.118 [debug] Evaluating bend block with value: 10
11:56:06.118 [debug] Block returned: %{variant: :leaf}
11:56:06.118 [debug] Fun returned result: %{variant: :leaf}
11:56:06.118 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.118 [debug] do_bend final result: %{variant: :leaf}
11:56:06.118 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.118 [debug] Executing bend with initial: 9
11:56:06.118 [debug] Executing fun with value: 9
11:56:06.118 [debug] Evaluating bend block with value: 9
11:56:06.118 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.118 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.118 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.118 [debug] Executing bend with initial: 10
11:56:06.118 [debug] Executing fun with value: 10
11:56:06.118 [debug] Evaluating bend block with value: 10
11:56:06.118 [debug] Block returned: %{variant: :leaf}
11:56:06.118 [debug] Fun returned result: %{variant: :leaf}
11:56:06.118 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.118 [debug] do_bend final result: %{variant: :leaf}
11:56:06.118 [debug] Executing bend with initial: 10
11:56:06.118 [debug] Executing fun with value: 10
11:56:06.118 [debug] Evaluating bend block with value: 10
11:56:06.118 [debug] Block returned: %{variant: :leaf}
11:56:06.118 [debug] Fun returned result: %{variant: :leaf}
11:56:06.118 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.118 [debug] do_bend final result: %{variant: :leaf}
11:56:06.118 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.118 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.118 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.118 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.118 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.119 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 4
11:56:06.119 [debug] Executing fun with value: 4
11:56:06.119 [debug] Evaluating bend block with value: 4
11:56:06.119 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.119 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.119 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 5
11:56:06.119 [debug] Executing fun with value: 5
11:56:06.119 [debug] Evaluating bend block with value: 5
11:56:06.119 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.119 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.119 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 6
11:56:06.119 [debug] Executing fun with value: 6
11:56:06.119 [debug] Evaluating bend block with value: 6
11:56:06.119 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.119 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.119 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 7
11:56:06.119 [debug] Executing fun with value: 7
11:56:06.119 [debug] Evaluating bend block with value: 7
11:56:06.119 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.119 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.119 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 8
11:56:06.119 [debug] Executing fun with value: 8
11:56:06.119 [debug] Evaluating bend block with value: 8
11:56:06.119 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.119 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.119 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 9
11:56:06.119 [debug] Executing fun with value: 9
11:56:06.119 [debug] Evaluating bend block with value: 9
11:56:06.119 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.119 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.119 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 10
11:56:06.119 [debug] Executing fun with value: 10
11:56:06.119 [debug] Evaluating bend block with value: 10
11:56:06.119 [debug] Block returned: %{variant: :leaf}
11:56:06.119 [debug] Fun returned result: %{variant: :leaf}
11:56:06.119 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.119 [debug] do_bend final result: %{variant: :leaf}
11:56:06.119 [debug] Executing bend with initial: 10
11:56:06.119 [debug] Executing fun with value: 10
11:56:06.119 [debug] Evaluating bend block with value: 10
11:56:06.119 [debug] Block returned: %{variant: :leaf}
11:56:06.119 [debug] Fun returned result: %{variant: :leaf}
11:56:06.119 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.119 [debug] do_bend final result: %{variant: :leaf}
11:56:06.119 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 9
11:56:06.119 [debug] Executing fun with value: 9
11:56:06.119 [debug] Evaluating bend block with value: 9
11:56:06.119 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.119 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.119 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 10
11:56:06.119 [debug] Executing fun with value: 10
11:56:06.119 [debug] Evaluating bend block with value: 10
11:56:06.119 [debug] Block returned: %{variant: :leaf}
11:56:06.119 [debug] Fun returned result: %{variant: :leaf}
11:56:06.119 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.119 [debug] do_bend final result: %{variant: :leaf}
11:56:06.119 [debug] Executing bend with initial: 10
11:56:06.119 [debug] Executing fun with value: 10
11:56:06.119 [debug] Evaluating bend block with value: 10
11:56:06.119 [debug] Block returned: %{variant: :leaf}
11:56:06.119 [debug] Fun returned result: %{variant: :leaf}
11:56:06.119 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.119 [debug] do_bend final result: %{variant: :leaf}
11:56:06.119 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.119 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 8
11:56:06.119 [debug] Executing fun with value: 8
11:56:06.119 [debug] Evaluating bend block with value: 8
11:56:06.119 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.119 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.119 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 9
11:56:06.119 [debug] Executing fun with value: 9
11:56:06.119 [debug] Evaluating bend block with value: 9
11:56:06.119 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.119 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.119 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 10
11:56:06.119 [debug] Executing fun with value: 10
11:56:06.119 [debug] Evaluating bend block with value: 10
11:56:06.119 [debug] Block returned: %{variant: :leaf}
11:56:06.119 [debug] Fun returned result: %{variant: :leaf}
11:56:06.119 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.119 [debug] do_bend final result: %{variant: :leaf}
11:56:06.119 [debug] Executing bend with initial: 10
11:56:06.119 [debug] Executing fun with value: 10
11:56:06.119 [debug] Evaluating bend block with value: 10
11:56:06.119 [debug] Block returned: %{variant: :leaf}
11:56:06.119 [debug] Fun returned result: %{variant: :leaf}
11:56:06.119 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.119 [debug] do_bend final result: %{variant: :leaf}
11:56:06.119 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 9
11:56:06.119 [debug] Executing fun with value: 9
11:56:06.119 [debug] Evaluating bend block with value: 9
11:56:06.119 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.119 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.119 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 10
11:56:06.119 [debug] Executing fun with value: 10
11:56:06.119 [debug] Evaluating bend block with value: 10
11:56:06.119 [debug] Block returned: %{variant: :leaf}
11:56:06.119 [debug] Fun returned result: %{variant: :leaf}
11:56:06.119 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.119 [debug] do_bend final result: %{variant: :leaf}
11:56:06.119 [debug] Executing bend with initial: 10
11:56:06.119 [debug] Executing fun with value: 10
11:56:06.119 [debug] Evaluating bend block with value: 10
11:56:06.119 [debug] Block returned: %{variant: :leaf}
11:56:06.119 [debug] Fun returned result: %{variant: :leaf}
11:56:06.119 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.119 [debug] do_bend final result: %{variant: :leaf}
11:56:06.119 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.119 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.119 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.119 [debug] Executing bend with initial: 7
11:56:06.119 [debug] Executing fun with value: 7
11:56:06.119 [debug] Evaluating bend block with value: 7
11:56:06.119 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.119 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.119 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.120 [debug] Executing bend with initial: 8
11:56:06.120 [debug] Executing fun with value: 8
11:56:06.120 [debug] Evaluating bend block with value: 8
11:56:06.120 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.120 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.120 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.120 [debug] Executing bend with initial: 9
11:56:06.120 [debug] Executing fun with value: 9
11:56:06.120 [debug] Evaluating bend block with value: 9
11:56:06.120 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.120 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.120 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.120 [debug] Executing bend with initial: 10
11:56:06.120 [debug] Executing fun with value: 10
11:56:06.120 [debug] Evaluating bend block with value: 10
11:56:06.120 [debug] Block returned: %{variant: :leaf}
11:56:06.120 [debug] Fun returned result: %{variant: :leaf}
11:56:06.120 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.120 [debug] do_bend final result: %{variant: :leaf}
11:56:06.120 [debug] Executing bend with initial: 10
11:56:06.120 [debug] Executing fun with value: 10
11:56:06.120 [debug] Evaluating bend block with value: 10
11:56:06.120 [debug] Block returned: %{variant: :leaf}
11:56:06.120 [debug] Fun returned result: %{variant: :leaf}
11:56:06.120 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.120 [debug] do_bend final result: %{variant: :leaf}
11:56:06.120 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.120 [debug] Executing bend with initial: 9
11:56:06.120 [debug] Executing fun with value: 9
11:56:06.120 [debug] Evaluating bend block with value: 9
11:56:06.120 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.120 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.120 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.120 [debug] Executing bend with initial: 10
11:56:06.120 [debug] Executing fun with value: 10
11:56:06.120 [debug] Evaluating bend block with value: 10
11:56:06.120 [debug] Block returned: %{variant: :leaf}
11:56:06.120 [debug] Fun returned result: %{variant: :leaf}
11:56:06.120 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.120 [debug] do_bend final result: %{variant: :leaf}
11:56:06.120 [debug] Executing bend with initial: 10
11:56:06.120 [debug] Executing fun with value: 10
11:56:06.120 [debug] Evaluating bend block with value: 10
11:56:06.120 [debug] Block returned: %{variant: :leaf}
11:56:06.120 [debug] Fun returned result: %{variant: :leaf}
11:56:06.120 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.120 [debug] do_bend final result: %{variant: :leaf}
11:56:06.120 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.120 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.120 [debug] Executing bend with initial: 8
11:56:06.120 [debug] Executing fun with value: 8
11:56:06.120 [debug] Evaluating bend block with value: 8
11:56:06.120 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.120 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.120 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.120 [debug] Executing bend with initial: 9
11:56:06.120 [debug] Executing fun with value: 9
11:56:06.120 [debug] Evaluating bend block with value: 9
11:56:06.120 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.120 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.120 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.120 [debug] Executing bend with initial: 10
11:56:06.120 [debug] Executing fun with value: 10
11:56:06.120 [debug] Evaluating bend block with value: 10
11:56:06.120 [debug] Block returned: %{variant: :leaf}
11:56:06.120 [debug] Fun returned result: %{variant: :leaf}
11:56:06.120 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.120 [debug] do_bend final result: %{variant: :leaf}
11:56:06.120 [debug] Executing bend with initial: 10
11:56:06.120 [debug] Executing fun with value: 10
11:56:06.120 [debug] Evaluating bend block with value: 10
11:56:06.120 [debug] Block returned: %{variant: :leaf}
11:56:06.120 [debug] Fun returned result: %{variant: :leaf}
11:56:06.120 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.120 [debug] do_bend final result: %{variant: :leaf}
11:56:06.120 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.120 [debug] Executing bend with initial: 9
11:56:06.120 [debug] Executing fun with value: 9
11:56:06.120 [debug] Evaluating bend block with value: 9
11:56:06.120 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.120 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.120 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.120 [debug] Executing bend with initial: 10
11:56:06.120 [debug] Executing fun with value: 10
11:56:06.120 [debug] Evaluating bend block with value: 10
11:56:06.120 [debug] Block returned: %{variant: :leaf}
11:56:06.120 [debug] Fun returned result: %{variant: :leaf}
11:56:06.120 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.120 [debug] do_bend final result: %{variant: :leaf}
11:56:06.120 [debug] Executing bend with initial: 10
11:56:06.120 [debug] Executing fun with value: 10
11:56:06.120 [debug] Evaluating bend block with value: 10
11:56:06.120 [debug] Block returned: %{variant: :leaf}
11:56:06.120 [debug] Fun returned result: %{variant: :leaf}
11:56:06.120 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.120 [debug] do_bend final result: %{variant: :leaf}
11:56:06.120 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.120 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.120 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.120 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.120 [debug] Executing bend with initial: 6
11:56:06.120 [debug] Executing fun with value: 6
11:56:06.120 [debug] Evaluating bend block with value: 6
11:56:06.120 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.120 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.120 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.120 [debug] Executing bend with initial: 7
11:56:06.120 [debug] Executing fun with value: 7
11:56:06.120 [debug] Evaluating bend block with value: 7
11:56:06.120 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.120 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.121 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 8
11:56:06.121 [debug] Executing fun with value: 8
11:56:06.121 [debug] Evaluating bend block with value: 8
11:56:06.121 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.121 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.121 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 9
11:56:06.121 [debug] Executing fun with value: 9
11:56:06.121 [debug] Evaluating bend block with value: 9
11:56:06.121 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 10
11:56:06.121 [debug] Executing fun with value: 10
11:56:06.121 [debug] Evaluating bend block with value: 10
11:56:06.121 [debug] Block returned: %{variant: :leaf}
11:56:06.121 [debug] Fun returned result: %{variant: :leaf}
11:56:06.121 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.121 [debug] do_bend final result: %{variant: :leaf}
11:56:06.121 [debug] Executing bend with initial: 10
11:56:06.121 [debug] Executing fun with value: 10
11:56:06.121 [debug] Evaluating bend block with value: 10
11:56:06.121 [debug] Block returned: %{variant: :leaf}
11:56:06.121 [debug] Fun returned result: %{variant: :leaf}
11:56:06.121 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.121 [debug] do_bend final result: %{variant: :leaf}
11:56:06.121 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 9
11:56:06.121 [debug] Executing fun with value: 9
11:56:06.121 [debug] Evaluating bend block with value: 9
11:56:06.121 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 10
11:56:06.121 [debug] Executing fun with value: 10
11:56:06.121 [debug] Evaluating bend block with value: 10
11:56:06.121 [debug] Block returned: %{variant: :leaf}
11:56:06.121 [debug] Fun returned result: %{variant: :leaf}
11:56:06.121 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.121 [debug] do_bend final result: %{variant: :leaf}
11:56:06.121 [debug] Executing bend with initial: 10
11:56:06.121 [debug] Executing fun with value: 10
11:56:06.121 [debug] Evaluating bend block with value: 10
11:56:06.121 [debug] Block returned: %{variant: :leaf}
11:56:06.121 [debug] Fun returned result: %{variant: :leaf}
11:56:06.121 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.121 [debug] do_bend final result: %{variant: :leaf}
11:56:06.121 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.121 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 8
11:56:06.121 [debug] Executing fun with value: 8
11:56:06.121 [debug] Evaluating bend block with value: 8
11:56:06.121 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.121 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.121 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 9
11:56:06.121 [debug] Executing fun with value: 9
11:56:06.121 [debug] Evaluating bend block with value: 9
11:56:06.121 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 10
11:56:06.121 [debug] Executing fun with value: 10
11:56:06.121 [debug] Evaluating bend block with value: 10
11:56:06.121 [debug] Block returned: %{variant: :leaf}
11:56:06.121 [debug] Fun returned result: %{variant: :leaf}
11:56:06.121 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.121 [debug] do_bend final result: %{variant: :leaf}
11:56:06.121 [debug] Executing bend with initial: 10
11:56:06.121 [debug] Executing fun with value: 10
11:56:06.121 [debug] Evaluating bend block with value: 10
11:56:06.121 [debug] Block returned: %{variant: :leaf}
11:56:06.121 [debug] Fun returned result: %{variant: :leaf}
11:56:06.121 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.121 [debug] do_bend final result: %{variant: :leaf}
11:56:06.121 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 9
11:56:06.121 [debug] Executing fun with value: 9
11:56:06.121 [debug] Evaluating bend block with value: 9
11:56:06.121 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 10
11:56:06.121 [debug] Executing fun with value: 10
11:56:06.121 [debug] Evaluating bend block with value: 10
11:56:06.121 [debug] Block returned: %{variant: :leaf}
11:56:06.121 [debug] Fun returned result: %{variant: :leaf}
11:56:06.121 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.121 [debug] do_bend final result: %{variant: :leaf}
11:56:06.121 [debug] Executing bend with initial: 10
11:56:06.121 [debug] Executing fun with value: 10
11:56:06.121 [debug] Evaluating bend block with value: 10
11:56:06.121 [debug] Block returned: %{variant: :leaf}
11:56:06.121 [debug] Fun returned result: %{variant: :leaf}
11:56:06.121 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.121 [debug] do_bend final result: %{variant: :leaf}
11:56:06.121 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.121 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.121 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 7
11:56:06.121 [debug] Executing fun with value: 7
11:56:06.121 [debug] Evaluating bend block with value: 7
11:56:06.121 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.121 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.121 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 8
11:56:06.121 [debug] Executing fun with value: 8
11:56:06.121 [debug] Evaluating bend block with value: 8
11:56:06.121 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.121 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.121 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 9
11:56:06.121 [debug] Executing fun with value: 9
11:56:06.121 [debug] Evaluating bend block with value: 9
11:56:06.121 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.121 [debug] Executing bend with initial: 10
11:56:06.121 [debug] Executing fun with value: 10
11:56:06.121 [debug] Evaluating bend block with value: 10
11:56:06.121 [debug] Block returned: %{variant: :leaf}
11:56:06.121 [debug] Fun returned result: %{variant: :leaf}
11:56:06.121 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.121 [debug] do_bend final result: %{variant: :leaf}
11:56:06.121 [debug] Executing bend with initial: 10
11:56:06.121 [debug] Executing fun with value: 10
11:56:06.121 [debug] Evaluating bend block with value: 10
11:56:06.121 [debug] Block returned: %{variant: :leaf}
11:56:06.122 [debug] Fun returned result: %{variant: :leaf}
11:56:06.122 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.122 [debug] do_bend final result: %{variant: :leaf}
11:56:06.122 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.122 [debug] Executing bend with initial: 9
11:56:06.122 [debug] Executing fun with value: 9
11:56:06.122 [debug] Evaluating bend block with value: 9
11:56:06.122 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.122 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.122 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.122 [debug] Executing bend with initial: 10
11:56:06.122 [debug] Executing fun with value: 10
11:56:06.122 [debug] Evaluating bend block with value: 10
11:56:06.122 [debug] Block returned: %{variant: :leaf}
11:56:06.122 [debug] Fun returned result: %{variant: :leaf}
11:56:06.122 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.122 [debug] do_bend final result: %{variant: :leaf}
11:56:06.122 [debug] Executing bend with initial: 10
11:56:06.122 [debug] Executing fun with value: 10
11:56:06.122 [debug] Evaluating bend block with value: 10
11:56:06.122 [debug] Block returned: %{variant: :leaf}
11:56:06.122 [debug] Fun returned result: %{variant: :leaf}
11:56:06.122 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.122 [debug] do_bend final result: %{variant: :leaf}
11:56:06.122 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.122 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.122 [debug] Executing bend with initial: 8
11:56:06.122 [debug] Executing fun with value: 8
11:56:06.122 [debug] Evaluating bend block with value: 8
11:56:06.122 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.122 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.122 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.122 [debug] Executing bend with initial: 9
11:56:06.122 [debug] Executing fun with value: 9
11:56:06.122 [debug] Evaluating bend block with value: 9
11:56:06.122 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.122 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.122 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.122 [debug] Executing bend with initial: 10
11:56:06.122 [debug] Executing fun with value: 10
11:56:06.122 [debug] Evaluating bend block with value: 10
11:56:06.122 [debug] Block returned: %{variant: :leaf}
11:56:06.122 [debug] Fun returned result: %{variant: :leaf}
11:56:06.122 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.122 [debug] do_bend final result: %{variant: :leaf}
11:56:06.122 [debug] Executing bend with initial: 10
11:56:06.122 [debug] Executing fun with value: 10
11:56:06.122 [debug] Evaluating bend block with value: 10
11:56:06.122 [debug] Block returned: %{variant: :leaf}
11:56:06.122 [debug] Fun returned result: %{variant: :leaf}
11:56:06.122 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.122 [debug] do_bend final result: %{variant: :leaf}
11:56:06.122 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.122 [debug] Executing bend with initial: 9
11:56:06.122 [debug] Executing fun with value: 9
11:56:06.122 [debug] Evaluating bend block with value: 9
11:56:06.122 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.122 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.122 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.122 [debug] Executing bend with initial: 10
11:56:06.122 [debug] Executing fun with value: 10
11:56:06.122 [debug] Evaluating bend block with value: 10
11:56:06.122 [debug] Block returned: %{variant: :leaf}
11:56:06.122 [debug] Fun returned result: %{variant: :leaf}
11:56:06.122 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.122 [debug] do_bend final result: %{variant: :leaf}
11:56:06.122 [debug] Executing bend with initial: 10
11:56:06.122 [debug] Executing fun with value: 10
11:56:06.122 [debug] Evaluating bend block with value: 10
11:56:06.122 [debug] Block returned: %{variant: :leaf}
11:56:06.122 [debug] Fun returned result: %{variant: :leaf}
11:56:06.122 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.122 [debug] do_bend final result: %{variant: :leaf}
11:56:06.122 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.122 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.122 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.122 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.122 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.122 [debug] Executing bend with initial: 5
11:56:06.122 [debug] Executing fun with value: 5
11:56:06.122 [debug] Evaluating bend block with value: 5
11:56:06.122 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.122 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.122 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.122 [debug] Executing bend with initial: 6
11:56:06.122 [debug] Executing fun with value: 6
11:56:06.122 [debug] Evaluating bend block with value: 6
11:56:06.122 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.122 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.122 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.122 [debug] Executing bend with initial: 7
11:56:06.122 [debug] Executing fun with value: 7
11:56:06.122 [debug] Evaluating bend block with value: 7
11:56:06.122 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.122 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.122 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.122 [debug] Executing bend with initial: 8
11:56:06.122 [debug] Executing fun with value: 8
11:56:06.122 [debug] Evaluating bend block with value: 8
11:56:06.122 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.122 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.122 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.122 [debug] Executing bend with initial: 9
11:56:06.122 [debug] Executing fun with value: 9
11:56:06.122 [debug] Evaluating bend block with value: 9
11:56:06.123 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.123 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.123 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.123 [debug] Executing bend with initial: 10
11:56:06.123 [debug] Executing fun with value: 10
11:56:06.123 [debug] Evaluating bend block with value: 10
11:56:06.123 [debug] Block returned: %{variant: :leaf}
11:56:06.123 [debug] Fun returned result: %{variant: :leaf}
11:56:06.123 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.123 [debug] do_bend final result: %{variant: :leaf}
11:56:06.123 [debug] Executing bend with initial: 10
11:56:06.123 [debug] Executing fun with value: 10
11:56:06.123 [debug] Evaluating bend block with value: 10
11:56:06.123 [debug] Block returned: %{variant: :leaf}
11:56:06.123 [debug] Fun returned result: %{variant: :leaf}
11:56:06.123 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.123 [debug] do_bend final result: %{variant: :leaf}
11:56:06.123 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.123 [debug] Executing bend with initial: 9
11:56:06.123 [debug] Executing fun with value: 9
11:56:06.123 [debug] Evaluating bend block with value: 9
11:56:06.123 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.123 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.123 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.123 [debug] Executing bend with initial: 10
11:56:06.123 [debug] Executing fun with value: 10
11:56:06.123 [debug] Evaluating bend block with value: 10
11:56:06.123 [debug] Block returned: %{variant: :leaf}
11:56:06.123 [debug] Fun returned result: %{variant: :leaf}
11:56:06.123 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.123 [debug] do_bend final result: %{variant: :leaf}
11:56:06.123 [debug] Executing bend with initial: 10
11:56:06.123 [debug] Executing fun with value: 10
11:56:06.123 [debug] Evaluating bend block with value: 10
11:56:06.123 [debug] Block returned: %{variant: :leaf}
11:56:06.123 [debug] Fun returned result: %{variant: :leaf}
11:56:06.123 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.123 [debug] do_bend final result: %{variant: :leaf}
11:56:06.123 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.123 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.123 [debug] Executing bend with initial: 8
11:56:06.123 [debug] Executing fun with value: 8
11:56:06.123 [debug] Evaluating bend block with value: 8
11:56:06.123 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.123 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.123 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.123 [debug] Executing bend with initial: 9
11:56:06.123 [debug] Executing fun with value: 9
11:56:06.123 [debug] Evaluating bend block with value: 9
11:56:06.123 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.123 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.123 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.123 [debug] Executing bend with initial: 10
11:56:06.123 [debug] Executing fun with value: 10
11:56:06.123 [debug] Evaluating bend block with value: 10
11:56:06.123 [debug] Block returned: %{variant: :leaf}
11:56:06.123 [debug] Fun returned result: %{variant: :leaf}
11:56:06.123 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.123 [debug] do_bend final result: %{variant: :leaf}
11:56:06.123 [debug] Executing bend with initial: 10
11:56:06.123 [debug] Executing fun with value: 10
11:56:06.123 [debug] Evaluating bend block with value: 10
11:56:06.123 [debug] Block returned: %{variant: :leaf}
11:56:06.123 [debug] Fun returned result: %{variant: :leaf}
11:56:06.123 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.123 [debug] do_bend final result: %{variant: :leaf}
11:56:06.123 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.123 [debug] Executing bend with initial: 9
11:56:06.124 [debug] Executing fun with value: 9
11:56:06.124 [debug] Evaluating bend block with value: 9
11:56:06.124 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Executing bend with initial: 10
11:56:06.124 [debug] Executing fun with value: 10
11:56:06.124 [debug] Evaluating bend block with value: 10
11:56:06.124 [debug] Block returned: %{variant: :leaf}
11:56:06.124 [debug] Fun returned result: %{variant: :leaf}
11:56:06.124 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.124 [debug] do_bend final result: %{variant: :leaf}
11:56:06.124 [debug] Executing bend with initial: 10
11:56:06.124 [debug] Executing fun with value: 10
11:56:06.124 [debug] Evaluating bend block with value: 10
11:56:06.124 [debug] Block returned: %{variant: :leaf}
11:56:06.124 [debug] Fun returned result: %{variant: :leaf}
11:56:06.124 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.124 [debug] do_bend final result: %{variant: :leaf}
11:56:06.124 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.124 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.124 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.124 [debug] Executing bend with initial: 7
11:56:06.124 [debug] Executing fun with value: 7
11:56:06.124 [debug] Evaluating bend block with value: 7
11:56:06.124 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.124 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.124 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.124 [debug] Executing bend with initial: 8
11:56:06.124 [debug] Executing fun with value: 8
11:56:06.124 [debug] Evaluating bend block with value: 8
11:56:06.124 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.124 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.124 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.124 [debug] Executing bend with initial: 9
11:56:06.124 [debug] Executing fun with value: 9
11:56:06.124 [debug] Evaluating bend block with value: 9
11:56:06.124 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Executing bend with initial: 10
11:56:06.124 [debug] Executing fun with value: 10
11:56:06.124 [debug] Evaluating bend block with value: 10
11:56:06.124 [debug] Block returned: %{variant: :leaf}
11:56:06.124 [debug] Fun returned result: %{variant: :leaf}
11:56:06.124 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.124 [debug] do_bend final result: %{variant: :leaf}
11:56:06.124 [debug] Executing bend with initial: 10
11:56:06.124 [debug] Executing fun with value: 10
11:56:06.124 [debug] Evaluating bend block with value: 10
11:56:06.124 [debug] Block returned: %{variant: :leaf}
11:56:06.124 [debug] Fun returned result: %{variant: :leaf}
11:56:06.124 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.124 [debug] do_bend final result: %{variant: :leaf}
11:56:06.124 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.124 [debug] Executing bend with initial: 9
11:56:06.124 [debug] Executing fun with value: 9
11:56:06.124 [debug] Evaluating bend block with value: 9
11:56:06.124 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Executing bend with initial: 10
11:56:06.124 [debug] Executing fun with value: 10
11:56:06.124 [debug] Evaluating bend block with value: 10
11:56:06.124 [debug] Block returned: %{variant: :leaf}
11:56:06.124 [debug] Fun returned result: %{variant: :leaf}
11:56:06.124 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.124 [debug] do_bend final result: %{variant: :leaf}
11:56:06.124 [debug] Executing bend with initial: 10
11:56:06.124 [debug] Executing fun with value: 10
11:56:06.124 [debug] Evaluating bend block with value: 10
11:56:06.124 [debug] Block returned: %{variant: :leaf}
11:56:06.124 [debug] Fun returned result: %{variant: :leaf}
11:56:06.124 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.124 [debug] do_bend final result: %{variant: :leaf}
11:56:06.124 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.124 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.124 [debug] Executing bend with initial: 8
11:56:06.124 [debug] Executing fun with value: 8
11:56:06.124 [debug] Evaluating bend block with value: 8
11:56:06.124 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.124 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.124 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.124 [debug] Executing bend with initial: 9
11:56:06.124 [debug] Executing fun with value: 9
11:56:06.124 [debug] Evaluating bend block with value: 9
11:56:06.124 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Executing bend with initial: 10
11:56:06.124 [debug] Executing fun with value: 10
11:56:06.124 [debug] Evaluating bend block with value: 10
11:56:06.124 [debug] Block returned: %{variant: :leaf}
11:56:06.124 [debug] Fun returned result: %{variant: :leaf}
11:56:06.124 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.124 [debug] do_bend final result: %{variant: :leaf}
11:56:06.124 [debug] Executing bend with initial: 10
11:56:06.124 [debug] Executing fun with value: 10
11:56:06.124 [debug] Evaluating bend block with value: 10
11:56:06.124 [debug] Block returned: %{variant: :leaf}
11:56:06.124 [debug] Fun returned result: %{variant: :leaf}
11:56:06.124 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.124 [debug] do_bend final result: %{variant: :leaf}
11:56:06.124 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.124 [debug] Executing bend with initial: 9
11:56:06.124 [debug] Executing fun with value: 9
11:56:06.124 [debug] Evaluating bend block with value: 9
11:56:06.124 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.124 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.125 [debug] Executing bend with initial: 10
11:56:06.125 [debug] Executing fun with value: 10
11:56:06.125 [debug] Evaluating bend block with value: 10
11:56:06.125 [debug] Block returned: %{variant: :leaf}
11:56:06.125 [debug] Fun returned result: %{variant: :leaf}
11:56:06.125 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.125 [debug] do_bend final result: %{variant: :leaf}
11:56:06.125 [debug] Executing bend with initial: 10
11:56:06.125 [debug] Executing fun with value: 10
11:56:06.125 [debug] Evaluating bend block with value: 10
11:56:06.125 [debug] Block returned: %{variant: :leaf}
11:56:06.125 [debug] Fun returned result: %{variant: :leaf}
11:56:06.125 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.125 [debug] do_bend final result: %{variant: :leaf}
11:56:06.125 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.125 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.125 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.125 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.125 [debug] Executing bend with initial: 6
11:56:06.125 [debug] Executing fun with value: 6
11:56:06.125 [debug] Evaluating bend block with value: 6
11:56:06.125 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.125 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.125 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.125 [debug] Executing bend with initial: 7
11:56:06.125 [debug] Executing fun with value: 7
11:56:06.125 [debug] Evaluating bend block with value: 7
11:56:06.125 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.125 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.125 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.125 [debug] Executing bend with initial: 8
11:56:06.125 [debug] Executing fun with value: 8
11:56:06.125 [debug] Evaluating bend block with value: 8
11:56:06.125 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.125 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.125 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.125 [debug] Executing bend with initial: 9
11:56:06.125 [debug] Executing fun with value: 9
11:56:06.125 [debug] Evaluating bend block with value: 9
11:56:06.125 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.125 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.125 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.125 [debug] Executing bend with initial: 10
11:56:06.125 [debug] Executing fun with value: 10
11:56:06.125 [debug] Evaluating bend block with value: 10
11:56:06.125 [debug] Block returned: %{variant: :leaf}
11:56:06.125 [debug] Fun returned result: %{variant: :leaf}
11:56:06.125 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.125 [debug] do_bend final result: %{variant: :leaf}
11:56:06.125 [debug] Executing bend with initial: 10
11:56:06.125 [debug] Executing fun with value: 10
11:56:06.125 [debug] Evaluating bend block with value: 10
11:56:06.125 [debug] Block returned: %{variant: :leaf}
11:56:06.125 [debug] Fun returned result: %{variant: :leaf}
11:56:06.125 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.125 [debug] do_bend final result: %{variant: :leaf}
11:56:06.125 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.125 [debug] Executing bend with initial: 9
11:56:06.125 [debug] Executing fun with value: 9
11:56:06.125 [debug] Evaluating bend block with value: 9
11:56:06.125 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.125 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.125 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.125 [debug] Executing bend with initial: 10
11:56:06.125 [debug] Executing fun with value: 10
11:56:06.125 [debug] Evaluating bend block with value: 10
11:56:06.125 [debug] Block returned: %{variant: :leaf}
11:56:06.125 [debug] Fun returned result: %{variant: :leaf}
11:56:06.125 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.125 [debug] do_bend final result: %{variant: :leaf}
11:56:06.125 [debug] Executing bend with initial: 10
11:56:06.125 [debug] Executing fun with value: 10
11:56:06.125 [debug] Evaluating bend block with value: 10
11:56:06.125 [debug] Block returned: %{variant: :leaf}
11:56:06.125 [debug] Fun returned result: %{variant: :leaf}
11:56:06.125 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.125 [debug] do_bend final result: %{variant: :leaf}
11:56:06.125 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.125 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.125 [debug] Executing bend with initial: 8
11:56:06.125 [debug] Executing fun with value: 8
11:56:06.125 [debug] Evaluating bend block with value: 8
11:56:06.125 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.125 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.125 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.125 [debug] Executing bend with initial: 9
11:56:06.125 [debug] Executing fun with value: 9
11:56:06.125 [debug] Evaluating bend block with value: 9
11:56:06.125 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.125 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.125 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.125 [debug] Executing bend with initial: 10
11:56:06.125 [debug] Executing fun with value: 10
11:56:06.125 [debug] Evaluating bend block with value: 10
11:56:06.125 [debug] Block returned: %{variant: :leaf}
11:56:06.125 [debug] Fun returned result: %{variant: :leaf}
11:56:06.125 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.125 [debug] do_bend final result: %{variant: :leaf}
11:56:06.125 [debug] Executing bend with initial: 10
11:56:06.125 [debug] Executing fun with value: 10
11:56:06.125 [debug] Evaluating bend block with value: 10
11:56:06.125 [debug] Block returned: %{variant: :leaf}
11:56:06.125 [debug] Fun returned result: %{variant: :leaf}
11:56:06.125 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.125 [debug] do_bend final result: %{variant: :leaf}
11:56:06.125 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.125 [debug] Executing bend with initial: 9
11:56:06.125 [debug] Executing fun with value: 9
11:56:06.125 [debug] Evaluating bend block with value: 9
11:56:06.125 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.125 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.125 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.125 [debug] Executing bend with initial: 10
11:56:06.125 [debug] Executing fun with value: 10
11:56:06.125 [debug] Evaluating bend block with value: 10
11:56:06.125 [debug] Block returned: %{variant: :leaf}
11:56:06.126 [debug] Fun returned result: %{variant: :leaf}
11:56:06.126 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{variant: :leaf}
11:56:06.126 [debug] Executing bend with initial: 10
11:56:06.126 [debug] Executing fun with value: 10
11:56:06.126 [debug] Evaluating bend block with value: 10
11:56:06.126 [debug] Block returned: %{variant: :leaf}
11:56:06.126 [debug] Fun returned result: %{variant: :leaf}
11:56:06.126 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.126 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.126 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.126 [debug] Executing bend with initial: 7
11:56:06.126 [debug] Executing fun with value: 7
11:56:06.126 [debug] Evaluating bend block with value: 7
11:56:06.126 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.126 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.126 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.126 [debug] Executing bend with initial: 8
11:56:06.126 [debug] Executing fun with value: 8
11:56:06.126 [debug] Evaluating bend block with value: 8
11:56:06.126 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.126 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.126 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.126 [debug] Executing bend with initial: 9
11:56:06.126 [debug] Executing fun with value: 9
11:56:06.126 [debug] Evaluating bend block with value: 9
11:56:06.126 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.126 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.126 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.126 [debug] Executing bend with initial: 10
11:56:06.126 [debug] Executing fun with value: 10
11:56:06.126 [debug] Evaluating bend block with value: 10
11:56:06.126 [debug] Block returned: %{variant: :leaf}
11:56:06.126 [debug] Fun returned result: %{variant: :leaf}
11:56:06.126 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{variant: :leaf}
11:56:06.126 [debug] Executing bend with initial: 10
11:56:06.126 [debug] Executing fun with value: 10
11:56:06.126 [debug] Evaluating bend block with value: 10
11:56:06.126 [debug] Block returned: %{variant: :leaf}
11:56:06.126 [debug] Fun returned result: %{variant: :leaf}
11:56:06.126 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.126 [debug] Executing bend with initial: 9
11:56:06.126 [debug] Executing fun with value: 9
11:56:06.126 [debug] Evaluating bend block with value: 9
11:56:06.126 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.126 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.126 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.126 [debug] Executing bend with initial: 10
11:56:06.126 [debug] Executing fun with value: 10
11:56:06.126 [debug] Evaluating bend block with value: 10
11:56:06.126 [debug] Block returned: %{variant: :leaf}
11:56:06.126 [debug] Fun returned result: %{variant: :leaf}
11:56:06.126 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{variant: :leaf}
11:56:06.126 [debug] Executing bend with initial: 10
11:56:06.126 [debug] Executing fun with value: 10
11:56:06.126 [debug] Evaluating bend block with value: 10
11:56:06.126 [debug] Block returned: %{variant: :leaf}
11:56:06.126 [debug] Fun returned result: %{variant: :leaf}
11:56:06.126 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.126 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.126 [debug] Executing bend with initial: 8
11:56:06.126 [debug] Executing fun with value: 8
11:56:06.126 [debug] Evaluating bend block with value: 8
11:56:06.126 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.126 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.126 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.126 [debug] Executing bend with initial: 9
11:56:06.126 [debug] Executing fun with value: 9
11:56:06.126 [debug] Evaluating bend block with value: 9
11:56:06.126 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.126 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.126 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.126 [debug] Executing bend with initial: 10
11:56:06.126 [debug] Executing fun with value: 10
11:56:06.126 [debug] Evaluating bend block with value: 10
11:56:06.126 [debug] Block returned: %{variant: :leaf}
11:56:06.126 [debug] Fun returned result: %{variant: :leaf}
11:56:06.126 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{variant: :leaf}
11:56:06.126 [debug] Executing bend with initial: 10
11:56:06.126 [debug] Executing fun with value: 10
11:56:06.126 [debug] Evaluating bend block with value: 10
11:56:06.126 [debug] Block returned: %{variant: :leaf}
11:56:06.126 [debug] Fun returned result: %{variant: :leaf}
11:56:06.126 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.126 [debug] Executing bend with initial: 9
11:56:06.126 [debug] Executing fun with value: 9
11:56:06.126 [debug] Evaluating bend block with value: 9
11:56:06.126 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.126 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.126 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.126 [debug] Executing bend with initial: 10
11:56:06.126 [debug] Executing fun with value: 10
11:56:06.126 [debug] Evaluating bend block with value: 10
11:56:06.126 [debug] Block returned: %{variant: :leaf}
11:56:06.126 [debug] Fun returned result: %{variant: :leaf}
11:56:06.126 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{variant: :leaf}
11:56:06.126 [debug] Executing bend with initial: 10
11:56:06.126 [debug] Executing fun with value: 10
11:56:06.126 [debug] Evaluating bend block with value: 10
11:56:06.126 [debug] Block returned: %{variant: :leaf}
11:56:06.126 [debug] Fun returned result: %{variant: :leaf}
11:56:06.126 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{variant: :leaf}
11:56:06.126 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.126 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.126 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.127 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.127 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.127 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.128 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.130 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, (truncated)
11:56:06.130 [debug] Executing bend with initial: 2
11:56:06.130 [debug] Executing fun with value: 2
11:56:06.130 [debug] Evaluating bend block with value: 2
11:56:06.130 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:06.130 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:06.130 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:06.130 [debug] Executing bend with initial: 3
11:56:06.130 [debug] Executing fun with value: 3
11:56:06.130 [debug] Evaluating bend block with value: 3
11:56:06.130 [debug] Block returned: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.130 [debug] Fun returned result: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.130 [debug] Processing constructed value: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.130 [debug] Executing bend with initial: 4
11:56:06.130 [debug] Executing fun with value: 4
11:56:06.130 [debug] Evaluating bend block with value: 4
11:56:06.130 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.130 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.130 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.130 [debug] Executing bend with initial: 5
11:56:06.130 [debug] Executing fun with value: 5
11:56:06.130 [debug] Evaluating bend block with value: 5
11:56:06.130 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.130 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.130 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.130 [debug] Executing bend with initial: 6
11:56:06.130 [debug] Executing fun with value: 6
11:56:06.130 [debug] Evaluating bend block with value: 6
11:56:06.130 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.130 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.130 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.130 [debug] Executing bend with initial: 7
11:56:06.130 [debug] Executing fun with value: 7
11:56:06.130 [debug] Evaluating bend block with value: 7
11:56:06.130 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.130 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.130 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.130 [debug] Executing bend with initial: 8
11:56:06.130 [debug] Executing fun with value: 8
11:56:06.130 [debug] Evaluating bend block with value: 8
11:56:06.130 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.130 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.130 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.130 [debug] Executing bend with initial: 9
11:56:06.130 [debug] Executing fun with value: 9
11:56:06.130 [debug] Evaluating bend block with value: 9
11:56:06.130 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.130 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.130 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.130 [debug] Executing bend with initial: 10
11:56:06.130 [debug] Executing fun with value: 10
11:56:06.130 [debug] Evaluating bend block with value: 10
11:56:06.130 [debug] Block returned: %{variant: :leaf}
11:56:06.130 [debug] Fun returned result: %{variant: :leaf}
11:56:06.130 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.130 [debug] do_bend final result: %{variant: :leaf}
11:56:06.130 [debug] Executing bend with initial: 10
11:56:06.130 [debug] Executing fun with value: 10
11:56:06.130 [debug] Evaluating bend block with value: 10
11:56:06.130 [debug] Block returned: %{variant: :leaf}
11:56:06.130 [debug] Fun returned result: %{variant: :leaf}
11:56:06.130 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.130 [debug] do_bend final result: %{variant: :leaf}
11:56:06.130 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.130 [debug] Executing bend with initial: 9
11:56:06.130 [debug] Executing fun with value: 9
11:56:06.130 [debug] Evaluating bend block with value: 9
11:56:06.130 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.130 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.130 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.130 [debug] Executing bend with initial: 10
11:56:06.130 [debug] Executing fun with value: 10
11:56:06.130 [debug] Evaluating bend block with value: 10
11:56:06.130 [debug] Block returned: %{variant: :leaf}
11:56:06.130 [debug] Fun returned result: %{variant: :leaf}
11:56:06.130 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.130 [debug] do_bend final result: %{variant: :leaf}
11:56:06.130 [debug] Executing bend with initial: 10
11:56:06.130 [debug] Executing fun with value: 10
11:56:06.130 [debug] Evaluating bend block with value: 10
11:56:06.130 [debug] Block returned: %{variant: :leaf}
11:56:06.130 [debug] Fun returned result: %{variant: :leaf}
11:56:06.130 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.131 [debug] do_bend final result: %{variant: :leaf}
11:56:06.131 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.131 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.131 [debug] Executing bend with initial: 8
11:56:06.131 [debug] Executing fun with value: 8
11:56:06.131 [debug] Evaluating bend block with value: 8
11:56:06.131 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.131 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.131 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.131 [debug] Executing bend with initial: 9
11:56:06.131 [debug] Executing fun with value: 9
11:56:06.131 [debug] Evaluating bend block with value: 9
11:56:06.131 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.131 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.131 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.131 [debug] Executing bend with initial: 10
11:56:06.131 [debug] Executing fun with value: 10
11:56:06.131 [debug] Evaluating bend block with value: 10
11:56:06.131 [debug] Block returned: %{variant: :leaf}
11:56:06.131 [debug] Fun returned result: %{variant: :leaf}
11:56:06.131 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.131 [debug] do_bend final result: %{variant: :leaf}
11:56:06.131 [debug] Executing bend with initial: 10
11:56:06.131 [debug] Executing fun with value: 10
11:56:06.131 [debug] Evaluating bend block with value: 10
11:56:06.131 [debug] Block returned: %{variant: :leaf}
11:56:06.131 [debug] Fun returned result: %{variant: :leaf}
11:56:06.131 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.131 [debug] do_bend final result: %{variant: :leaf}
11:56:06.131 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.131 [debug] Executing bend with initial: 9
11:56:06.131 [debug] Executing fun with value: 9
11:56:06.131 [debug] Evaluating bend block with value: 9
11:56:06.131 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.131 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.131 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.131 [debug] Executing bend with initial: 10
11:56:06.131 [debug] Executing fun with value: 10
11:56:06.131 [debug] Evaluating bend block with value: 10
11:56:06.131 [debug] Block returned: %{variant: :leaf}
11:56:06.131 [debug] Fun returned result: %{variant: :leaf}
11:56:06.131 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.131 [debug] do_bend final result: %{variant: :leaf}
11:56:06.131 [debug] Executing bend with initial: 10
11:56:06.131 [debug] Executing fun with value: 10
11:56:06.131 [debug] Evaluating bend block with value: 10
11:56:06.131 [debug] Block returned: %{variant: :leaf}
11:56:06.131 [debug] Fun returned result: %{variant: :leaf}
11:56:06.131 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.131 [debug] do_bend final result: %{variant: :leaf}
11:56:06.131 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.131 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.131 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.131 [debug] Executing bend with initial: 7
11:56:06.131 [debug] Executing fun with value: 7
11:56:06.131 [debug] Evaluating bend block with value: 7
11:56:06.131 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.131 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.131 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.131 [debug] Executing bend with initial: 8
11:56:06.131 [debug] Executing fun with value: 8
11:56:06.131 [debug] Evaluating bend block with value: 8
11:56:06.131 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.131 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.131 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.131 [debug] Executing bend with initial: 9
11:56:06.131 [debug] Executing fun with value: 9
11:56:06.131 [debug] Evaluating bend block with value: 9
11:56:06.131 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.131 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.131 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.131 [debug] Executing bend with initial: 10
11:56:06.131 [debug] Executing fun with value: 10
11:56:06.131 [debug] Evaluating bend block with value: 10
11:56:06.131 [debug] Block returned: %{variant: :leaf}
11:56:06.131 [debug] Fun returned result: %{variant: :leaf}
11:56:06.131 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.131 [debug] do_bend final result: %{variant: :leaf}
11:56:06.131 [debug] Executing bend with initial: 10
11:56:06.131 [debug] Executing fun with value: 10
11:56:06.131 [debug] Evaluating bend block with value: 10
11:56:06.132 [debug] Block returned: %{variant: :leaf}
11:56:06.132 [debug] Fun returned result: %{variant: :leaf}
11:56:06.132 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.132 [debug] do_bend final result: %{variant: :leaf}
11:56:06.132 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.132 [debug] Executing bend with initial: 9
11:56:06.132 [debug] Executing fun with value: 9
11:56:06.132 [debug] Evaluating bend block with value: 9
11:56:06.132 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.132 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.132 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.132 [debug] Executing bend with initial: 10
11:56:06.132 [debug] Executing fun with value: 10
11:56:06.132 [debug] Evaluating bend block with value: 10
11:56:06.132 [debug] Block returned: %{variant: :leaf}
11:56:06.132 [debug] Fun returned result: %{variant: :leaf}
11:56:06.132 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.132 [debug] do_bend final result: %{variant: :leaf}
11:56:06.132 [debug] Executing bend with initial: 10
11:56:06.132 [debug] Executing fun with value: 10
11:56:06.132 [debug] Evaluating bend block with value: 10
11:56:06.132 [debug] Block returned: %{variant: :leaf}
11:56:06.132 [debug] Fun returned result: %{variant: :leaf}
11:56:06.132 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.132 [debug] do_bend final result: %{variant: :leaf}
11:56:06.132 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.132 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.132 [debug] Executing bend with initial: 8
11:56:06.132 [debug] Executing fun with value: 8
11:56:06.132 [debug] Evaluating bend block with value: 8
11:56:06.132 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.132 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.132 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.132 [debug] Executing bend with initial: 9
11:56:06.132 [debug] Executing fun with value: 9
11:56:06.132 [debug] Evaluating bend block with value: 9
11:56:06.132 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.132 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.132 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.132 [debug] Executing bend with initial: 10
11:56:06.132 [debug] Executing fun with value: 10
11:56:06.132 [debug] Evaluating bend block with value: 10
11:56:06.132 [debug] Block returned: %{variant: :leaf}
11:56:06.132 [debug] Fun returned result: %{variant: :leaf}
11:56:06.132 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.132 [debug] do_bend final result: %{variant: :leaf}
11:56:06.132 [debug] Executing bend with initial: 10
11:56:06.132 [debug] Executing fun with value: 10
11:56:06.132 [debug] Evaluating bend block with value: 10
11:56:06.132 [debug] Block returned: %{variant: :leaf}
11:56:06.132 [debug] Fun returned result: %{variant: :leaf}
11:56:06.132 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.132 [debug] do_bend final result: %{variant: :leaf}
11:56:06.132 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.132 [debug] Executing bend with initial: 9
11:56:06.132 [debug] Executing fun with value: 9
11:56:06.132 [debug] Evaluating bend block with value: 9
11:56:06.132 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.132 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.132 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.132 [debug] Executing bend with initial: 10
11:56:06.132 [debug] Executing fun with value: 10
11:56:06.132 [debug] Evaluating bend block with value: 10
11:56:06.132 [debug] Block returned: %{variant: :leaf}
11:56:06.132 [debug] Fun returned result: %{variant: :leaf}
11:56:06.132 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.132 [debug] do_bend final result: %{variant: :leaf}
11:56:06.132 [debug] Executing bend with initial: 10
11:56:06.132 [debug] Executing fun with value: 10
11:56:06.132 [debug] Evaluating bend block with value: 10
11:56:06.132 [debug] Block returned: %{variant: :leaf}
11:56:06.132 [debug] Fun returned result: %{variant: :leaf}
11:56:06.132 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.132 [debug] do_bend final result: %{variant: :leaf}
11:56:06.132 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.132 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.132 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.132 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.132 [debug] Executing bend with initial: 6
11:56:06.132 [debug] Executing fun with value: 6
11:56:06.132 [debug] Evaluating bend block with value: 6
11:56:06.132 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.132 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.132 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.132 [debug] Executing bend with initial: 7
11:56:06.132 [debug] Executing fun with value: 7
11:56:06.132 [debug] Evaluating bend block with value: 7
11:56:06.133 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.133 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.133 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.133 [debug] Executing bend with initial: 8
11:56:06.133 [debug] Executing fun with value: 8
11:56:06.133 [debug] Evaluating bend block with value: 8
11:56:06.133 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.133 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.133 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.133 [debug] Executing bend with initial: 9
11:56:06.133 [debug] Executing fun with value: 9
11:56:06.133 [debug] Evaluating bend block with value: 9
11:56:06.133 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.133 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.133 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.133 [debug] Executing bend with initial: 10
11:56:06.133 [debug] Executing fun with value: 10
11:56:06.133 [debug] Evaluating bend block with value: 10
11:56:06.133 [debug] Block returned: %{variant: :leaf}
11:56:06.133 [debug] Fun returned result: %{variant: :leaf}
11:56:06.133 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.133 [debug] do_bend final result: %{variant: :leaf}
11:56:06.133 [debug] Executing bend with initial: 10
11:56:06.133 [debug] Executing fun with value: 10
11:56:06.133 [debug] Evaluating bend block with value: 10
11:56:06.133 [debug] Block returned: %{variant: :leaf}
11:56:06.133 [debug] Fun returned result: %{variant: :leaf}
11:56:06.133 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.133 [debug] do_bend final result: %{variant: :leaf}
11:56:06.133 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.133 [debug] Executing bend with initial: 9
11:56:06.133 [debug] Executing fun with value: 9
11:56:06.133 [debug] Evaluating bend block with value: 9
11:56:06.133 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.133 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.133 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.133 [debug] Executing bend with initial: 10
11:56:06.133 [debug] Executing fun with value: 10
11:56:06.133 [debug] Evaluating bend block with value: 10
11:56:06.133 [debug] Block returned: %{variant: :leaf}
11:56:06.133 [debug] Fun returned result: %{variant: :leaf}
11:56:06.133 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.133 [debug] do_bend final result: %{variant: :leaf}
11:56:06.133 [debug] Executing bend with initial: 10
11:56:06.133 [debug] Executing fun with value: 10
11:56:06.133 [debug] Evaluating bend block with value: 10
11:56:06.133 [debug] Block returned: %{variant: :leaf}
11:56:06.133 [debug] Fun returned result: %{variant: :leaf}
11:56:06.133 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.133 [debug] do_bend final result: %{variant: :leaf}
11:56:06.133 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.133 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.133 [debug] Executing bend with initial: 8
11:56:06.133 [debug] Executing fun with value: 8
11:56:06.133 [debug] Evaluating bend block with value: 8
11:56:06.133 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.133 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.133 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.133 [debug] Executing bend with initial: 9
11:56:06.133 [debug] Executing fun with value: 9
11:56:06.133 [debug] Evaluating bend block with value: 9
11:56:06.133 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.133 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.133 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.133 [debug] Executing bend with initial: 10
11:56:06.133 [debug] Executing fun with value: 10
11:56:06.133 [debug] Evaluating bend block with value: 10
11:56:06.133 [debug] Block returned: %{variant: :leaf}
11:56:06.133 [debug] Fun returned result: %{variant: :leaf}
11:56:06.133 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.133 [debug] do_bend final result: %{variant: :leaf}
11:56:06.133 [debug] Executing bend with initial: 10
11:56:06.133 [debug] Executing fun with value: 10
11:56:06.133 [debug] Evaluating bend block with value: 10
11:56:06.133 [debug] Block returned: %{variant: :leaf}
11:56:06.133 [debug] Fun returned result: %{variant: :leaf}
11:56:06.133 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.133 [debug] do_bend final result: %{variant: :leaf}
11:56:06.133 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.133 [debug] Executing bend with initial: 9
11:56:06.133 [debug] Executing fun with value: 9
11:56:06.133 [debug] Evaluating bend block with value: 9
11:56:06.133 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.133 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.133 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.133 [debug] Executing bend with initial: 10
11:56:06.133 [debug] Executing fun with value: 10
11:56:06.133 [debug] Evaluating bend block with value: 10
11:56:06.133 [debug] Block returned: %{variant: :leaf}
11:56:06.133 [debug] Fun returned result: %{variant: :leaf}
11:56:06.133 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.133 [debug] do_bend final result: %{variant: :leaf}
11:56:06.133 [debug] Executing bend with initial: 10
11:56:06.133 [debug] Executing fun with value: 10
11:56:06.133 [debug] Evaluating bend block with value: 10
11:56:06.133 [debug] Block returned: %{variant: :leaf}
11:56:06.133 [debug] Fun returned result: %{variant: :leaf}
11:56:06.133 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.133 [debug] do_bend final result: %{variant: :leaf}
11:56:06.134 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.134 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.134 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.134 [debug] Executing bend with initial: 7
11:56:06.134 [debug] Executing fun with value: 7
11:56:06.134 [debug] Evaluating bend block with value: 7
11:56:06.134 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.134 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.134 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.134 [debug] Executing bend with initial: 8
11:56:06.134 [debug] Executing fun with value: 8
11:56:06.134 [debug] Evaluating bend block with value: 8
11:56:06.134 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.134 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.134 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.134 [debug] Executing bend with initial: 9
11:56:06.134 [debug] Executing fun with value: 9
11:56:06.134 [debug] Evaluating bend block with value: 9
11:56:06.134 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.134 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.134 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.134 [debug] Executing bend with initial: 10
11:56:06.134 [debug] Executing fun with value: 10
11:56:06.134 [debug] Evaluating bend block with value: 10
11:56:06.134 [debug] Block returned: %{variant: :leaf}
11:56:06.134 [debug] Fun returned result: %{variant: :leaf}
11:56:06.134 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.134 [debug] do_bend final result: %{variant: :leaf}
11:56:06.134 [debug] Executing bend with initial: 10
11:56:06.134 [debug] Executing fun with value: 10
11:56:06.134 [debug] Evaluating bend block with value: 10
11:56:06.134 [debug] Block returned: %{variant: :leaf}
11:56:06.134 [debug] Fun returned result: %{variant: :leaf}
11:56:06.134 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.134 [debug] do_bend final result: %{variant: :leaf}
11:56:06.134 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.134 [debug] Executing bend with initial: 9
11:56:06.134 [debug] Executing fun with value: 9
11:56:06.134 [debug] Evaluating bend block with value: 9
11:56:06.134 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.134 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.134 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.134 [debug] Executing bend with initial: 10
11:56:06.134 [debug] Executing fun with value: 10
11:56:06.134 [debug] Evaluating bend block with value: 10
11:56:06.134 [debug] Block returned: %{variant: :leaf}
11:56:06.134 [debug] Fun returned result: %{variant: :leaf}
11:56:06.134 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.134 [debug] do_bend final result: %{variant: :leaf}
11:56:06.134 [debug] Executing bend with initial: 10
11:56:06.134 [debug] Executing fun with value: 10
11:56:06.134 [debug] Evaluating bend block with value: 10
11:56:06.134 [debug] Block returned: %{variant: :leaf}
11:56:06.134 [debug] Fun returned result: %{variant: :leaf}
11:56:06.134 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.134 [debug] do_bend final result: %{variant: :leaf}
11:56:06.134 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.134 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.134 [debug] Executing bend with initial: 8
11:56:06.134 [debug] Executing fun with value: 8
11:56:06.134 [debug] Evaluating bend block with value: 8
11:56:06.134 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.134 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.134 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.134 [debug] Executing bend with initial: 9
11:56:06.134 [debug] Executing fun with value: 9
11:56:06.134 [debug] Evaluating bend block with value: 9
11:56:06.134 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.134 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.134 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.134 [debug] Executing bend with initial: 10
11:56:06.134 [debug] Executing fun with value: 10
11:56:06.134 [debug] Evaluating bend block with value: 10
11:56:06.134 [debug] Block returned: %{variant: :leaf}
11:56:06.134 [debug] Fun returned result: %{variant: :leaf}
11:56:06.134 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.134 [debug] do_bend final result: %{variant: :leaf}
11:56:06.135 [debug] Executing bend with initial: 10
11:56:06.135 [debug] Executing fun with value: 10
11:56:06.135 [debug] Evaluating bend block with value: 10
11:56:06.135 [debug] Block returned: %{variant: :leaf}
11:56:06.135 [debug] Fun returned result: %{variant: :leaf}
11:56:06.135 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.135 [debug] do_bend final result: %{variant: :leaf}
11:56:06.135 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.135 [debug] Executing bend with initial: 9
11:56:06.135 [debug] Executing fun with value: 9
11:56:06.135 [debug] Evaluating bend block with value: 9
11:56:06.135 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.135 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.135 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.135 [debug] Executing bend with initial: 10
11:56:06.135 [debug] Executing fun with value: 10
11:56:06.135 [debug] Evaluating bend block with value: 10
11:56:06.135 [debug] Block returned: %{variant: :leaf}
11:56:06.135 [debug] Fun returned result: %{variant: :leaf}
11:56:06.135 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.135 [debug] do_bend final result: %{variant: :leaf}
11:56:06.135 [debug] Executing bend with initial: 10
11:56:06.135 [debug] Executing fun with value: 10
11:56:06.135 [debug] Evaluating bend block with value: 10
11:56:06.135 [debug] Block returned: %{variant: :leaf}
11:56:06.135 [debug] Fun returned result: %{variant: :leaf}
11:56:06.135 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.135 [debug] do_bend final result: %{variant: :leaf}
11:56:06.135 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.135 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.135 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.135 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.135 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.135 [debug] Executing bend with initial: 5
11:56:06.135 [debug] Executing fun with value: 5
11:56:06.135 [debug] Evaluating bend block with value: 5
11:56:06.135 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.135 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.135 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.135 [debug] Executing bend with initial: 6
11:56:06.135 [debug] Executing fun with value: 6
11:56:06.135 [debug] Evaluating bend block with value: 6
11:56:06.135 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.135 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.135 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.135 [debug] Executing bend with initial: 7
11:56:06.135 [debug] Executing fun with value: 7
11:56:06.135 [debug] Evaluating bend block with value: 7
11:56:06.135 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.135 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.135 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.135 [debug] Executing bend with initial: 8
11:56:06.135 [debug] Executing fun with value: 8
11:56:06.135 [debug] Evaluating bend block with value: 8
11:56:06.135 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.135 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.135 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.135 [debug] Executing bend with initial: 9
11:56:06.135 [debug] Executing fun with value: 9
11:56:06.135 [debug] Evaluating bend block with value: 9
11:56:06.135 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.135 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.135 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.135 [debug] Executing bend with initial: 10
11:56:06.135 [debug] Executing fun with value: 10
11:56:06.135 [debug] Evaluating bend block with value: 10
11:56:06.135 [debug] Block returned: %{variant: :leaf}
11:56:06.135 [debug] Fun returned result: %{variant: :leaf}
11:56:06.135 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.135 [debug] do_bend final result: %{variant: :leaf}
11:56:06.135 [debug] Executing bend with initial: 10
11:56:06.135 [debug] Executing fun with value: 10
11:56:06.135 [debug] Evaluating bend block with value: 10
11:56:06.135 [debug] Block returned: %{variant: :leaf}
11:56:06.135 [debug] Fun returned result: %{variant: :leaf}
11:56:06.135 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.135 [debug] do_bend final result: %{variant: :leaf}
11:56:06.135 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.135 [debug] Executing bend with initial: 9
11:56:06.135 [debug] Executing fun with value: 9
11:56:06.135 [debug] Evaluating bend block with value: 9
11:56:06.135 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.135 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.135 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.135 [debug] Executing bend with initial: 10
11:56:06.135 [debug] Executing fun with value: 10
11:56:06.135 [debug] Evaluating bend block with value: 10
11:56:06.136 [debug] Block returned: %{variant: :leaf}
11:56:06.136 [debug] Fun returned result: %{variant: :leaf}
11:56:06.136 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{variant: :leaf}
11:56:06.136 [debug] Executing bend with initial: 10
11:56:06.136 [debug] Executing fun with value: 10
11:56:06.136 [debug] Evaluating bend block with value: 10
11:56:06.136 [debug] Block returned: %{variant: :leaf}
11:56:06.136 [debug] Fun returned result: %{variant: :leaf}
11:56:06.136 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.136 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.136 [debug] Executing bend with initial: 8
11:56:06.136 [debug] Executing fun with value: 8
11:56:06.136 [debug] Evaluating bend block with value: 8
11:56:06.136 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.136 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.136 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.136 [debug] Executing bend with initial: 9
11:56:06.136 [debug] Executing fun with value: 9
11:56:06.136 [debug] Evaluating bend block with value: 9
11:56:06.136 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.136 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.136 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.136 [debug] Executing bend with initial: 10
11:56:06.136 [debug] Executing fun with value: 10
11:56:06.136 [debug] Evaluating bend block with value: 10
11:56:06.136 [debug] Block returned: %{variant: :leaf}
11:56:06.136 [debug] Fun returned result: %{variant: :leaf}
11:56:06.136 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{variant: :leaf}
11:56:06.136 [debug] Executing bend with initial: 10
11:56:06.136 [debug] Executing fun with value: 10
11:56:06.136 [debug] Evaluating bend block with value: 10
11:56:06.136 [debug] Block returned: %{variant: :leaf}
11:56:06.136 [debug] Fun returned result: %{variant: :leaf}
11:56:06.136 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.136 [debug] Executing bend with initial: 9
11:56:06.136 [debug] Executing fun with value: 9
11:56:06.136 [debug] Evaluating bend block with value: 9
11:56:06.136 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.136 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.136 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.136 [debug] Executing bend with initial: 10
11:56:06.136 [debug] Executing fun with value: 10
11:56:06.136 [debug] Evaluating bend block with value: 10
11:56:06.136 [debug] Block returned: %{variant: :leaf}
11:56:06.136 [debug] Fun returned result: %{variant: :leaf}
11:56:06.136 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{variant: :leaf}
11:56:06.136 [debug] Executing bend with initial: 10
11:56:06.136 [debug] Executing fun with value: 10
11:56:06.136 [debug] Evaluating bend block with value: 10
11:56:06.136 [debug] Block returned: %{variant: :leaf}
11:56:06.136 [debug] Fun returned result: %{variant: :leaf}
11:56:06.136 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.136 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.136 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.136 [debug] Executing bend with initial: 7
11:56:06.136 [debug] Executing fun with value: 7
11:56:06.136 [debug] Evaluating bend block with value: 7
11:56:06.136 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.136 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.136 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.136 [debug] Executing bend with initial: 8
11:56:06.136 [debug] Executing fun with value: 8
11:56:06.136 [debug] Evaluating bend block with value: 8
11:56:06.136 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.136 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.136 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.136 [debug] Executing bend with initial: 9
11:56:06.136 [debug] Executing fun with value: 9
11:56:06.136 [debug] Evaluating bend block with value: 9
11:56:06.136 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.136 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.136 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.136 [debug] Executing bend with initial: 10
11:56:06.136 [debug] Executing fun with value: 10
11:56:06.136 [debug] Evaluating bend block with value: 10
11:56:06.136 [debug] Block returned: %{variant: :leaf}
11:56:06.136 [debug] Fun returned result: %{variant: :leaf}
11:56:06.136 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{variant: :leaf}
11:56:06.136 [debug] Executing bend with initial: 10
11:56:06.136 [debug] Executing fun with value: 10
11:56:06.136 [debug] Evaluating bend block with value: 10
11:56:06.136 [debug] Block returned: %{variant: :leaf}
11:56:06.136 [debug] Fun returned result: %{variant: :leaf}
11:56:06.136 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.136 [debug] Executing bend with initial: 9
11:56:06.136 [debug] Executing fun with value: 9
11:56:06.136 [debug] Evaluating bend block with value: 9
11:56:06.136 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.136 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.136 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.136 [debug] Executing bend with initial: 10
11:56:06.136 [debug] Executing fun with value: 10
11:56:06.136 [debug] Evaluating bend block with value: 10
11:56:06.136 [debug] Block returned: %{variant: :leaf}
11:56:06.136 [debug] Fun returned result: %{variant: :leaf}
11:56:06.136 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{variant: :leaf}
11:56:06.136 [debug] Executing bend with initial: 10
11:56:06.136 [debug] Executing fun with value: 10
11:56:06.136 [debug] Evaluating bend block with value: 10
11:56:06.136 [debug] Block returned: %{variant: :leaf}
11:56:06.136 [debug] Fun returned result: %{variant: :leaf}
11:56:06.136 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{variant: :leaf}
11:56:06.136 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.136 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.136 [debug] Executing bend with initial: 8
11:56:06.136 [debug] Executing fun with value: 8
11:56:06.136 [debug] Evaluating bend block with value: 8
11:56:06.137 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.137 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.137 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.137 [debug] Executing bend with initial: 9
11:56:06.137 [debug] Executing fun with value: 9
11:56:06.137 [debug] Evaluating bend block with value: 9
11:56:06.137 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.137 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.137 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.137 [debug] Executing bend with initial: 10
11:56:06.137 [debug] Executing fun with value: 10
11:56:06.137 [debug] Evaluating bend block with value: 10
11:56:06.137 [debug] Block returned: %{variant: :leaf}
11:56:06.137 [debug] Fun returned result: %{variant: :leaf}
11:56:06.137 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.137 [debug] do_bend final result: %{variant: :leaf}
11:56:06.137 [debug] Executing bend with initial: 10
11:56:06.137 [debug] Executing fun with value: 10
11:56:06.137 [debug] Evaluating bend block with value: 10
11:56:06.137 [debug] Block returned: %{variant: :leaf}
11:56:06.137 [debug] Fun returned result: %{variant: :leaf}
11:56:06.137 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.137 [debug] do_bend final result: %{variant: :leaf}
11:56:06.137 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.137 [debug] Executing bend with initial: 9
11:56:06.137 [debug] Executing fun with value: 9
11:56:06.137 [debug] Evaluating bend block with value: 9
11:56:06.137 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.137 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.137 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.137 [debug] Executing bend with initial: 10
11:56:06.137 [debug] Executing fun with value: 10
11:56:06.137 [debug] Evaluating bend block with value: 10
11:56:06.137 [debug] Block returned: %{variant: :leaf}
11:56:06.137 [debug] Fun returned result: %{variant: :leaf}
11:56:06.137 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.137 [debug] do_bend final result: %{variant: :leaf}
11:56:06.137 [debug] Executing bend with initial: 10
11:56:06.137 [debug] Executing fun with value: 10
11:56:06.137 [debug] Evaluating bend block with value: 10
11:56:06.137 [debug] Block returned: %{variant: :leaf}
11:56:06.137 [debug] Fun returned result: %{variant: :leaf}
11:56:06.137 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.137 [debug] do_bend final result: %{variant: :leaf}
11:56:06.137 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.137 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.137 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.137 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.137 [debug] Executing bend with initial: 6
11:56:06.137 [debug] Executing fun with value: 6
11:56:06.137 [debug] Evaluating bend block with value: 6
11:56:06.137 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.137 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.137 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.137 [debug] Executing bend with initial: 7
11:56:06.137 [debug] Executing fun with value: 7
11:56:06.137 [debug] Evaluating bend block with value: 7
11:56:06.137 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.137 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.137 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.137 [debug] Executing bend with initial: 8
11:56:06.137 [debug] Executing fun with value: 8
11:56:06.137 [debug] Evaluating bend block with value: 8
11:56:06.137 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.137 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.137 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.137 [debug] Executing bend with initial: 9
11:56:06.137 [debug] Executing fun with value: 9
11:56:06.137 [debug] Evaluating bend block with value: 9
11:56:06.137 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.137 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.137 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.137 [debug] Executing bend with initial: 10
11:56:06.137 [debug] Executing fun with value: 10
11:56:06.137 [debug] Evaluating bend block with value: 10
11:56:06.137 [debug] Block returned: %{variant: :leaf}
11:56:06.137 [debug] Fun returned result: %{variant: :leaf}
11:56:06.137 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.137 [debug] do_bend final result: %{variant: :leaf}
11:56:06.137 [debug] Executing bend with initial: 10
11:56:06.137 [debug] Executing fun with value: 10
11:56:06.137 [debug] Evaluating bend block with value: 10
11:56:06.137 [debug] Block returned: %{variant: :leaf}
11:56:06.137 [debug] Fun returned result: %{variant: :leaf}
11:56:06.137 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.137 [debug] do_bend final result: %{variant: :leaf}
11:56:06.137 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.137 [debug] Executing bend with initial: 9
11:56:06.137 [debug] Executing fun with value: 9
11:56:06.137 [debug] Evaluating bend block with value: 9
11:56:06.137 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.137 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.137 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.137 [debug] Executing bend with initial: 10
11:56:06.137 [debug] Executing fun with value: 10
11:56:06.137 [debug] Evaluating bend block with value: 10
11:56:06.137 [debug] Block returned: %{variant: :leaf}
11:56:06.137 [debug] Fun returned result: %{variant: :leaf}
11:56:06.137 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.137 [debug] do_bend final result: %{variant: :leaf}
11:56:06.137 [debug] Executing bend with initial: 10
11:56:06.137 [debug] Executing fun with value: 10
11:56:06.137 [debug] Evaluating bend block with value: 10
11:56:06.137 [debug] Block returned: %{variant: :leaf}
11:56:06.137 [debug] Fun returned result: %{variant: :leaf}
11:56:06.137 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.137 [debug] do_bend final result: %{variant: :leaf}
11:56:06.137 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.137 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.137 [debug] Executing bend with initial: 8
11:56:06.137 [debug] Executing fun with value: 8
11:56:06.137 [debug] Evaluating bend block with value: 8
11:56:06.137 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.137 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.138 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.138 [debug] Executing bend with initial: 9
11:56:06.138 [debug] Executing fun with value: 9
11:56:06.138 [debug] Evaluating bend block with value: 9
11:56:06.138 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.138 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.138 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.138 [debug] Executing bend with initial: 10
11:56:06.138 [debug] Executing fun with value: 10
11:56:06.138 [debug] Evaluating bend block with value: 10
11:56:06.138 [debug] Block returned: %{variant: :leaf}
11:56:06.138 [debug] Fun returned result: %{variant: :leaf}
11:56:06.138 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.138 [debug] do_bend final result: %{variant: :leaf}
11:56:06.138 [debug] Executing bend with initial: 10
11:56:06.138 [debug] Executing fun with value: 10
11:56:06.138 [debug] Evaluating bend block with value: 10
11:56:06.138 [debug] Block returned: %{variant: :leaf}
11:56:06.138 [debug] Fun returned result: %{variant: :leaf}
11:56:06.138 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.138 [debug] do_bend final result: %{variant: :leaf}
11:56:06.138 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.138 [debug] Executing bend with initial: 9
11:56:06.138 [debug] Executing fun with value: 9
11:56:06.138 [debug] Evaluating bend block with value: 9
11:56:06.138 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.138 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.138 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.138 [debug] Executing bend with initial: 10
11:56:06.138 [debug] Executing fun with value: 10
11:56:06.138 [debug] Evaluating bend block with value: 10
11:56:06.138 [debug] Block returned: %{variant: :leaf}
11:56:06.138 [debug] Fun returned result: %{variant: :leaf}
11:56:06.138 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.138 [debug] do_bend final result: %{variant: :leaf}
11:56:06.138 [debug] Executing bend with initial: 10
11:56:06.138 [debug] Executing fun with value: 10
11:56:06.138 [debug] Evaluating bend block with value: 10
11:56:06.138 [debug] Block returned: %{variant: :leaf}
11:56:06.138 [debug] Fun returned result: %{variant: :leaf}
11:56:06.138 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.138 [debug] do_bend final result: %{variant: :leaf}
11:56:06.138 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.138 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.138 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.138 [debug] Executing bend with initial: 7
11:56:06.138 [debug] Executing fun with value: 7
11:56:06.138 [debug] Evaluating bend block with value: 7
11:56:06.138 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.138 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.138 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.138 [debug] Executing bend with initial: 8
11:56:06.138 [debug] Executing fun with value: 8
11:56:06.138 [debug] Evaluating bend block with value: 8
11:56:06.138 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.138 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.138 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.138 [debug] Executing bend with initial: 9
11:56:06.138 [debug] Executing fun with value: 9
11:56:06.138 [debug] Evaluating bend block with value: 9
11:56:06.138 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.138 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.138 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.138 [debug] Executing bend with initial: 10
11:56:06.138 [debug] Executing fun with value: 10
11:56:06.138 [debug] Evaluating bend block with value: 10
11:56:06.138 [debug] Block returned: %{variant: :leaf}
11:56:06.138 [debug] Fun returned result: %{variant: :leaf}
11:56:06.138 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.138 [debug] do_bend final result: %{variant: :leaf}
11:56:06.138 [debug] Executing bend with initial: 10
11:56:06.138 [debug] Executing fun with value: 10
11:56:06.138 [debug] Evaluating bend block with value: 10
11:56:06.138 [debug] Block returned: %{variant: :leaf}
11:56:06.138 [debug] Fun returned result: %{variant: :leaf}
11:56:06.138 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.138 [debug] do_bend final result: %{variant: :leaf}
11:56:06.138 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.138 [debug] Executing bend with initial: 9
11:56:06.138 [debug] Executing fun with value: 9
11:56:06.138 [debug] Evaluating bend block with value: 9
11:56:06.138 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.138 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.138 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.138 [debug] Executing bend with initial: 10
11:56:06.138 [debug] Executing fun with value: 10
11:56:06.138 [debug] Evaluating bend block with value: 10
11:56:06.138 [debug] Block returned: %{variant: :leaf}
11:56:06.138 [debug] Fun returned result: %{variant: :leaf}
11:56:06.138 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.138 [debug] do_bend final result: %{variant: :leaf}
11:56:06.138 [debug] Executing bend with initial: 10
11:56:06.138 [debug] Executing fun with value: 10
11:56:06.138 [debug] Evaluating bend block with value: 10
11:56:06.138 [debug] Block returned: %{variant: :leaf}
11:56:06.138 [debug] Fun returned result: %{variant: :leaf}
11:56:06.138 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.138 [debug] do_bend final result: %{variant: :leaf}
11:56:06.138 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.138 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.138 [debug] Executing bend with initial: 8
11:56:06.138 [debug] Executing fun with value: 8
11:56:06.138 [debug] Evaluating bend block with value: 8
11:56:06.138 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.139 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.139 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.139 [debug] Executing bend with initial: 9
11:56:06.139 [debug] Executing fun with value: 9
11:56:06.139 [debug] Evaluating bend block with value: 9
11:56:06.139 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.139 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.139 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.139 [debug] Executing bend with initial: 10
11:56:06.139 [debug] Executing fun with value: 10
11:56:06.139 [debug] Evaluating bend block with value: 10
11:56:06.139 [debug] Block returned: %{variant: :leaf}
11:56:06.139 [debug] Fun returned result: %{variant: :leaf}
11:56:06.139 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.139 [debug] do_bend final result: %{variant: :leaf}
11:56:06.139 [debug] Executing bend with initial: 10
11:56:06.139 [debug] Executing fun with value: 10
11:56:06.139 [debug] Evaluating bend block with value: 10
11:56:06.139 [debug] Block returned: %{variant: :leaf}
11:56:06.139 [debug] Fun returned result: %{variant: :leaf}
11:56:06.139 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.139 [debug] do_bend final result: %{variant: :leaf}
11:56:06.139 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.139 [debug] Executing bend with initial: 9
11:56:06.139 [debug] Executing fun with value: 9
11:56:06.139 [debug] Evaluating bend block with value: 9
11:56:06.139 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.139 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.139 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.139 [debug] Executing bend with initial: 10
11:56:06.139 [debug] Executing fun with value: 10
11:56:06.139 [debug] Evaluating bend block with value: 10
11:56:06.139 [debug] Block returned: %{variant: :leaf}
11:56:06.139 [debug] Fun returned result: %{variant: :leaf}
11:56:06.139 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.139 [debug] do_bend final result: %{variant: :leaf}
11:56:06.139 [debug] Executing bend with initial: 10
11:56:06.139 [debug] Executing fun with value: 10
11:56:06.139 [debug] Evaluating bend block with value: 10
11:56:06.139 [debug] Block returned: %{variant: :leaf}
11:56:06.139 [debug] Fun returned result: %{variant: :leaf}
11:56:06.139 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.139 [debug] do_bend final result: %{variant: :leaf}
11:56:06.139 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.139 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.139 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.139 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.139 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.139 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.139 [debug] Executing bend with initial: 4
11:56:06.139 [debug] Executing fun with value: 4
11:56:06.139 [debug] Evaluating bend block with value: 4
11:56:06.139 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.139 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.139 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.139 [debug] Executing bend with initial: 5
11:56:06.139 [debug] Executing fun with value: 5
11:56:06.139 [debug] Evaluating bend block with value: 5
11:56:06.140 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.140 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.140 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.140 [debug] Executing bend with initial: 6
11:56:06.140 [debug] Executing fun with value: 6
11:56:06.140 [debug] Evaluating bend block with value: 6
11:56:06.140 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.140 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.140 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.140 [debug] Executing bend with initial: 7
11:56:06.140 [debug] Executing fun with value: 7
11:56:06.140 [debug] Evaluating bend block with value: 7
11:56:06.140 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.140 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.140 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.140 [debug] Executing bend with initial: 8
11:56:06.140 [debug] Executing fun with value: 8
11:56:06.140 [debug] Evaluating bend block with value: 8
11:56:06.140 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.140 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.140 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.140 [debug] Executing bend with initial: 9
11:56:06.140 [debug] Executing fun with value: 9
11:56:06.140 [debug] Evaluating bend block with value: 9
11:56:06.140 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.140 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.140 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.140 [debug] Executing bend with initial: 10
11:56:06.140 [debug] Executing fun with value: 10
11:56:06.140 [debug] Evaluating bend block with value: 10
11:56:06.140 [debug] Block returned: %{variant: :leaf}
11:56:06.140 [debug] Fun returned result: %{variant: :leaf}
11:56:06.140 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.140 [debug] do_bend final result: %{variant: :leaf}
11:56:06.140 [debug] Executing bend with initial: 10
11:56:06.140 [debug] Executing fun with value: 10
11:56:06.140 [debug] Evaluating bend block with value: 10
11:56:06.140 [debug] Block returned: %{variant: :leaf}
11:56:06.140 [debug] Fun returned result: %{variant: :leaf}
11:56:06.140 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.140 [debug] do_bend final result: %{variant: :leaf}
11:56:06.140 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.140 [debug] Executing bend with initial: 9
11:56:06.140 [debug] Executing fun with value: 9
11:56:06.140 [debug] Evaluating bend block with value: 9
11:56:06.140 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.140 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.140 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.140 [debug] Executing bend with initial: 10
11:56:06.140 [debug] Executing fun with value: 10
11:56:06.140 [debug] Evaluating bend block with value: 10
11:56:06.140 [debug] Block returned: %{variant: :leaf}
11:56:06.140 [debug] Fun returned result: %{variant: :leaf}
11:56:06.140 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.140 [debug] do_bend final result: %{variant: :leaf}
11:56:06.140 [debug] Executing bend with initial: 10
11:56:06.140 [debug] Executing fun with value: 10
11:56:06.140 [debug] Evaluating bend block with value: 10
11:56:06.140 [debug] Block returned: %{variant: :leaf}
11:56:06.140 [debug] Fun returned result: %{variant: :leaf}
11:56:06.140 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.140 [debug] do_bend final result: %{variant: :leaf}
11:56:06.140 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.140 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.140 [debug] Executing bend with initial: 8
11:56:06.140 [debug] Executing fun with value: 8
11:56:06.140 [debug] Evaluating bend block with value: 8
11:56:06.140 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.140 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.140 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.140 [debug] Executing bend with initial: 9
11:56:06.140 [debug] Executing fun with value: 9
11:56:06.140 [debug] Evaluating bend block with value: 9
11:56:06.140 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.140 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.140 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.140 [debug] Executing bend with initial: 10
11:56:06.140 [debug] Executing fun with value: 10
11:56:06.140 [debug] Evaluating bend block with value: 10
11:56:06.140 [debug] Block returned: %{variant: :leaf}
11:56:06.140 [debug] Fun returned result: %{variant: :leaf}
11:56:06.140 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.140 [debug] do_bend final result: %{variant: :leaf}
11:56:06.140 [debug] Executing bend with initial: 10
11:56:06.140 [debug] Executing fun with value: 10
11:56:06.140 [debug] Evaluating bend block with value: 10
11:56:06.140 [debug] Block returned: %{variant: :leaf}
11:56:06.140 [debug] Fun returned result: %{variant: :leaf}
11:56:06.140 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.140 [debug] do_bend final result: %{variant: :leaf}
11:56:06.140 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.140 [debug] Executing bend with initial: 9
11:56:06.140 [debug] Executing fun with value: 9
11:56:06.140 [debug] Evaluating bend block with value: 9
11:56:06.140 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.140 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.140 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.140 [debug] Executing bend with initial: 10
11:56:06.140 [debug] Executing fun with value: 10
11:56:06.140 [debug] Evaluating bend block with value: 10
11:56:06.140 [debug] Block returned: %{variant: :leaf}
11:56:06.140 [debug] Fun returned result: %{variant: :leaf}
11:56:06.140 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.140 [debug] do_bend final result: %{variant: :leaf}
11:56:06.140 [debug] Executing bend with initial: 10
11:56:06.140 [debug] Executing fun with value: 10
11:56:06.140 [debug] Evaluating bend block with value: 10
11:56:06.140 [debug] Block returned: %{variant: :leaf}
11:56:06.140 [debug] Fun returned result: %{variant: :leaf}
11:56:06.140 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.140 [debug] do_bend final result: %{variant: :leaf}
11:56:06.140 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.140 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.140 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.141 [debug] Executing bend with initial: 7
11:56:06.141 [debug] Executing fun with value: 7
11:56:06.141 [debug] Evaluating bend block with value: 7
11:56:06.141 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.141 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.141 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.141 [debug] Executing bend with initial: 8
11:56:06.141 [debug] Executing fun with value: 8
11:56:06.141 [debug] Evaluating bend block with value: 8
11:56:06.141 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.141 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.141 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.141 [debug] Executing bend with initial: 9
11:56:06.141 [debug] Executing fun with value: 9
11:56:06.141 [debug] Evaluating bend block with value: 9
11:56:06.141 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.141 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.141 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.141 [debug] Executing bend with initial: 10
11:56:06.141 [debug] Executing fun with value: 10
11:56:06.141 [debug] Evaluating bend block with value: 10
11:56:06.141 [debug] Block returned: %{variant: :leaf}
11:56:06.141 [debug] Fun returned result: %{variant: :leaf}
11:56:06.141 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.141 [debug] do_bend final result: %{variant: :leaf}
11:56:06.141 [debug] Executing bend with initial: 10
11:56:06.141 [debug] Executing fun with value: 10
11:56:06.141 [debug] Evaluating bend block with value: 10
11:56:06.141 [debug] Block returned: %{variant: :leaf}
11:56:06.141 [debug] Fun returned result: %{variant: :leaf}
11:56:06.141 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.141 [debug] do_bend final result: %{variant: :leaf}
11:56:06.141 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.141 [debug] Executing bend with initial: 9
11:56:06.141 [debug] Executing fun with value: 9
11:56:06.141 [debug] Evaluating bend block with value: 9
11:56:06.141 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.141 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.141 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.141 [debug] Executing bend with initial: 10
11:56:06.141 [debug] Executing fun with value: 10
11:56:06.141 [debug] Evaluating bend block with value: 10
11:56:06.141 [debug] Block returned: %{variant: :leaf}
11:56:06.141 [debug] Fun returned result: %{variant: :leaf}
11:56:06.141 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.141 [debug] do_bend final result: %{variant: :leaf}
11:56:06.141 [debug] Executing bend with initial: 10
11:56:06.141 [debug] Executing fun with value: 10
11:56:06.141 [debug] Evaluating bend block with value: 10
11:56:06.141 [debug] Block returned: %{variant: :leaf}
11:56:06.141 [debug] Fun returned result: %{variant: :leaf}
11:56:06.141 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.141 [debug] do_bend final result: %{variant: :leaf}
11:56:06.141 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.141 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.141 [debug] Executing bend with initial: 8
11:56:06.141 [debug] Executing fun with value: 8
11:56:06.141 [debug] Evaluating bend block with value: 8
11:56:06.141 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.141 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.141 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.141 [debug] Executing bend with initial: 9
11:56:06.141 [debug] Executing fun with value: 9
11:56:06.141 [debug] Evaluating bend block with value: 9
11:56:06.141 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.141 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.141 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.141 [debug] Executing bend with initial: 10
11:56:06.141 [debug] Executing fun with value: 10
11:56:06.141 [debug] Evaluating bend block with value: 10
11:56:06.141 [debug] Block returned: %{variant: :leaf}
11:56:06.141 [debug] Fun returned result: %{variant: :leaf}
11:56:06.141 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.141 [debug] do_bend final result: %{variant: :leaf}
11:56:06.141 [debug] Executing bend with initial: 10
11:56:06.141 [debug] Executing fun with value: 10
11:56:06.141 [debug] Evaluating bend block with value: 10
11:56:06.141 [debug] Block returned: %{variant: :leaf}
11:56:06.141 [debug] Fun returned result: %{variant: :leaf}
11:56:06.141 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.141 [debug] do_bend final result: %{variant: :leaf}
11:56:06.141 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.141 [debug] Executing bend with initial: 9
11:56:06.141 [debug] Executing fun with value: 9
11:56:06.141 [debug] Evaluating bend block with value: 9
11:56:06.141 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.141 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.141 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.141 [debug] Executing bend with initial: 10
11:56:06.141 [debug] Executing fun with value: 10
11:56:06.141 [debug] Evaluating bend block with value: 10
11:56:06.141 [debug] Block returned: %{variant: :leaf}
11:56:06.141 [debug] Fun returned result: %{variant: :leaf}
11:56:06.141 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.141 [debug] do_bend final result: %{variant: :leaf}
11:56:06.141 [debug] Executing bend with initial: 10
11:56:06.141 [debug] Executing fun with value: 10
11:56:06.141 [debug] Evaluating bend block with value: 10
11:56:06.141 [debug] Block returned: %{variant: :leaf}
11:56:06.141 [debug] Fun returned result: %{variant: :leaf}
11:56:06.141 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.141 [debug] do_bend final result: %{variant: :leaf}
11:56:06.141 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.141 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.141 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.141 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.141 [debug] Executing bend with initial: 6
11:56:06.141 [debug] Executing fun with value: 6
11:56:06.141 [debug] Evaluating bend block with value: 6
11:56:06.141 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.141 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.141 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 7
11:56:06.142 [debug] Executing fun with value: 7
11:56:06.142 [debug] Evaluating bend block with value: 7
11:56:06.142 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.142 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.142 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 8
11:56:06.142 [debug] Executing fun with value: 8
11:56:06.142 [debug] Evaluating bend block with value: 8
11:56:06.142 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.142 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.142 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 9
11:56:06.142 [debug] Executing fun with value: 9
11:56:06.142 [debug] Evaluating bend block with value: 9
11:56:06.142 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 10
11:56:06.142 [debug] Executing fun with value: 10
11:56:06.142 [debug] Evaluating bend block with value: 10
11:56:06.142 [debug] Block returned: %{variant: :leaf}
11:56:06.142 [debug] Fun returned result: %{variant: :leaf}
11:56:06.142 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.142 [debug] do_bend final result: %{variant: :leaf}
11:56:06.142 [debug] Executing bend with initial: 10
11:56:06.142 [debug] Executing fun with value: 10
11:56:06.142 [debug] Evaluating bend block with value: 10
11:56:06.142 [debug] Block returned: %{variant: :leaf}
11:56:06.142 [debug] Fun returned result: %{variant: :leaf}
11:56:06.142 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.142 [debug] do_bend final result: %{variant: :leaf}
11:56:06.142 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 9
11:56:06.142 [debug] Executing fun with value: 9
11:56:06.142 [debug] Evaluating bend block with value: 9
11:56:06.142 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 10
11:56:06.142 [debug] Executing fun with value: 10
11:56:06.142 [debug] Evaluating bend block with value: 10
11:56:06.142 [debug] Block returned: %{variant: :leaf}
11:56:06.142 [debug] Fun returned result: %{variant: :leaf}
11:56:06.142 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.142 [debug] do_bend final result: %{variant: :leaf}
11:56:06.142 [debug] Executing bend with initial: 10
11:56:06.142 [debug] Executing fun with value: 10
11:56:06.142 [debug] Evaluating bend block with value: 10
11:56:06.142 [debug] Block returned: %{variant: :leaf}
11:56:06.142 [debug] Fun returned result: %{variant: :leaf}
11:56:06.142 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.142 [debug] do_bend final result: %{variant: :leaf}
11:56:06.142 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.142 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 8
11:56:06.142 [debug] Executing fun with value: 8
11:56:06.142 [debug] Evaluating bend block with value: 8
11:56:06.142 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.142 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.142 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 9
11:56:06.142 [debug] Executing fun with value: 9
11:56:06.142 [debug] Evaluating bend block with value: 9
11:56:06.142 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 10
11:56:06.142 [debug] Executing fun with value: 10
11:56:06.142 [debug] Evaluating bend block with value: 10
11:56:06.142 [debug] Block returned: %{variant: :leaf}
11:56:06.142 [debug] Fun returned result: %{variant: :leaf}
11:56:06.142 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.142 [debug] do_bend final result: %{variant: :leaf}
11:56:06.142 [debug] Executing bend with initial: 10
11:56:06.142 [debug] Executing fun with value: 10
11:56:06.142 [debug] Evaluating bend block with value: 10
11:56:06.142 [debug] Block returned: %{variant: :leaf}
11:56:06.142 [debug] Fun returned result: %{variant: :leaf}
11:56:06.142 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.142 [debug] do_bend final result: %{variant: :leaf}
11:56:06.142 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 9
11:56:06.142 [debug] Executing fun with value: 9
11:56:06.142 [debug] Evaluating bend block with value: 9
11:56:06.142 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 10
11:56:06.142 [debug] Executing fun with value: 10
11:56:06.142 [debug] Evaluating bend block with value: 10
11:56:06.142 [debug] Block returned: %{variant: :leaf}
11:56:06.142 [debug] Fun returned result: %{variant: :leaf}
11:56:06.142 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.142 [debug] do_bend final result: %{variant: :leaf}
11:56:06.142 [debug] Executing bend with initial: 10
11:56:06.142 [debug] Executing fun with value: 10
11:56:06.142 [debug] Evaluating bend block with value: 10
11:56:06.142 [debug] Block returned: %{variant: :leaf}
11:56:06.142 [debug] Fun returned result: %{variant: :leaf}
11:56:06.142 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.142 [debug] do_bend final result: %{variant: :leaf}
11:56:06.142 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.142 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.142 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 7
11:56:06.142 [debug] Executing fun with value: 7
11:56:06.142 [debug] Evaluating bend block with value: 7
11:56:06.142 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.142 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.142 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 8
11:56:06.142 [debug] Executing fun with value: 8
11:56:06.142 [debug] Evaluating bend block with value: 8
11:56:06.142 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.142 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.142 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.142 [debug] Executing bend with initial: 9
11:56:06.142 [debug] Executing fun with value: 9
11:56:06.142 [debug] Evaluating bend block with value: 9
11:56:06.142 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.142 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.143 [debug] Executing bend with initial: 10
11:56:06.143 [debug] Executing fun with value: 10
11:56:06.143 [debug] Evaluating bend block with value: 10
11:56:06.143 [debug] Block returned: %{variant: :leaf}
11:56:06.143 [debug] Fun returned result: %{variant: :leaf}
11:56:06.143 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.143 [debug] do_bend final result: %{variant: :leaf}
11:56:06.143 [debug] Executing bend with initial: 10
11:56:06.143 [debug] Executing fun with value: 10
11:56:06.143 [debug] Evaluating bend block with value: 10
11:56:06.143 [debug] Block returned: %{variant: :leaf}
11:56:06.143 [debug] Fun returned result: %{variant: :leaf}
11:56:06.143 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.143 [debug] do_bend final result: %{variant: :leaf}
11:56:06.143 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.143 [debug] Executing bend with initial: 9
11:56:06.143 [debug] Executing fun with value: 9
11:56:06.143 [debug] Evaluating bend block with value: 9
11:56:06.143 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.143 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.143 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.143 [debug] Executing bend with initial: 10
11:56:06.143 [debug] Executing fun with value: 10
11:56:06.143 [debug] Evaluating bend block with value: 10
11:56:06.143 [debug] Block returned: %{variant: :leaf}
11:56:06.143 [debug] Fun returned result: %{variant: :leaf}
11:56:06.143 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.143 [debug] do_bend final result: %{variant: :leaf}
11:56:06.143 [debug] Executing bend with initial: 10
11:56:06.143 [debug] Executing fun with value: 10
11:56:06.143 [debug] Evaluating bend block with value: 10
11:56:06.143 [debug] Block returned: %{variant: :leaf}
11:56:06.143 [debug] Fun returned result: %{variant: :leaf}
11:56:06.143 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.143 [debug] do_bend final result: %{variant: :leaf}
11:56:06.143 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.143 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.143 [debug] Executing bend with initial: 8
11:56:06.143 [debug] Executing fun with value: 8
11:56:06.143 [debug] Evaluating bend block with value: 8
11:56:06.143 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.143 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.143 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.143 [debug] Executing bend with initial: 9
11:56:06.143 [debug] Executing fun with value: 9
11:56:06.143 [debug] Evaluating bend block with value: 9
11:56:06.143 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.143 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.143 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.143 [debug] Executing bend with initial: 10
11:56:06.143 [debug] Executing fun with value: 10
11:56:06.143 [debug] Evaluating bend block with value: 10
11:56:06.143 [debug] Block returned: %{variant: :leaf}
11:56:06.143 [debug] Fun returned result: %{variant: :leaf}
11:56:06.143 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.143 [debug] do_bend final result: %{variant: :leaf}
11:56:06.143 [debug] Executing bend with initial: 10
11:56:06.143 [debug] Executing fun with value: 10
11:56:06.143 [debug] Evaluating bend block with value: 10
11:56:06.143 [debug] Block returned: %{variant: :leaf}
11:56:06.143 [debug] Fun returned result: %{variant: :leaf}
11:56:06.143 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.143 [debug] do_bend final result: %{variant: :leaf}
11:56:06.143 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.143 [debug] Executing bend with initial: 9
11:56:06.143 [debug] Executing fun with value: 9
11:56:06.143 [debug] Evaluating bend block with value: 9
11:56:06.143 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.143 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.143 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.143 [debug] Executing bend with initial: 10
11:56:06.143 [debug] Executing fun with value: 10
11:56:06.143 [debug] Evaluating bend block with value: 10
11:56:06.143 [debug] Block returned: %{variant: :leaf}
11:56:06.143 [debug] Fun returned result: %{variant: :leaf}
11:56:06.143 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.143 [debug] do_bend final result: %{variant: :leaf}
11:56:06.143 [debug] Executing bend with initial: 10
11:56:06.143 [debug] Executing fun with value: 10
11:56:06.143 [debug] Evaluating bend block with value: 10
11:56:06.143 [debug] Block returned: %{variant: :leaf}
11:56:06.143 [debug] Fun returned result: %{variant: :leaf}
11:56:06.143 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.143 [debug] do_bend final result: %{variant: :leaf}
11:56:06.143 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.143 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.143 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.143 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.144 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.144 [debug] Executing bend with initial: 5
11:56:06.144 [debug] Executing fun with value: 5
11:56:06.144 [debug] Evaluating bend block with value: 5
11:56:06.144 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.144 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.144 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.144 [debug] Executing bend with initial: 6
11:56:06.144 [debug] Executing fun with value: 6
11:56:06.144 [debug] Evaluating bend block with value: 6
11:56:06.144 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.144 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.144 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.144 [debug] Executing bend with initial: 7
11:56:06.144 [debug] Executing fun with value: 7
11:56:06.144 [debug] Evaluating bend block with value: 7
11:56:06.144 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.144 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.144 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.144 [debug] Executing bend with initial: 8
11:56:06.144 [debug] Executing fun with value: 8
11:56:06.144 [debug] Evaluating bend block with value: 8
11:56:06.144 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.144 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.144 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.144 [debug] Executing bend with initial: 9
11:56:06.144 [debug] Executing fun with value: 9
11:56:06.144 [debug] Evaluating bend block with value: 9
11:56:06.144 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.144 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.144 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.144 [debug] Executing bend with initial: 10
11:56:06.144 [debug] Executing fun with value: 10
11:56:06.144 [debug] Evaluating bend block with value: 10
11:56:06.144 [debug] Block returned: %{variant: :leaf}
11:56:06.144 [debug] Fun returned result: %{variant: :leaf}
11:56:06.144 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.144 [debug] do_bend final result: %{variant: :leaf}
11:56:06.144 [debug] Executing bend with initial: 10
11:56:06.144 [debug] Executing fun with value: 10
11:56:06.144 [debug] Evaluating bend block with value: 10
11:56:06.144 [debug] Block returned: %{variant: :leaf}
11:56:06.144 [debug] Fun returned result: %{variant: :leaf}
11:56:06.144 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.144 [debug] do_bend final result: %{variant: :leaf}
11:56:06.144 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.144 [debug] Executing bend with initial: 9
11:56:06.144 [debug] Executing fun with value: 9
11:56:06.144 [debug] Evaluating bend block with value: 9
11:56:06.144 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.144 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.144 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.144 [debug] Executing bend with initial: 10
11:56:06.144 [debug] Executing fun with value: 10
11:56:06.144 [debug] Evaluating bend block with value: 10
11:56:06.144 [debug] Block returned: %{variant: :leaf}
11:56:06.144 [debug] Fun returned result: %{variant: :leaf}
11:56:06.144 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.144 [debug] do_bend final result: %{variant: :leaf}
11:56:06.144 [debug] Executing bend with initial: 10
11:56:06.144 [debug] Executing fun with value: 10
11:56:06.144 [debug] Evaluating bend block with value: 10
11:56:06.144 [debug] Block returned: %{variant: :leaf}
11:56:06.144 [debug] Fun returned result: %{variant: :leaf}
11:56:06.144 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.144 [debug] do_bend final result: %{variant: :leaf}
11:56:06.144 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.144 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.144 [debug] Executing bend with initial: 8
11:56:06.144 [debug] Executing fun with value: 8
11:56:06.144 [debug] Evaluating bend block with value: 8
11:56:06.144 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.144 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.144 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.144 [debug] Executing bend with initial: 9
11:56:06.144 [debug] Executing fun with value: 9
11:56:06.144 [debug] Evaluating bend block with value: 9
11:56:06.144 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.144 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.144 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.144 [debug] Executing bend with initial: 10
11:56:06.144 [debug] Executing fun with value: 10
11:56:06.144 [debug] Evaluating bend block with value: 10
11:56:06.144 [debug] Block returned: %{variant: :leaf}
11:56:06.144 [debug] Fun returned result: %{variant: :leaf}
11:56:06.144 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.144 [debug] do_bend final result: %{variant: :leaf}
11:56:06.144 [debug] Executing bend with initial: 10
11:56:06.144 [debug] Executing fun with value: 10
11:56:06.144 [debug] Evaluating bend block with value: 10
11:56:06.144 [debug] Block returned: %{variant: :leaf}
11:56:06.144 [debug] Fun returned result: %{variant: :leaf}
11:56:06.144 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.144 [debug] do_bend final result: %{variant: :leaf}
11:56:06.144 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.144 [debug] Executing bend with initial: 9
11:56:06.144 [debug] Executing fun with value: 9
11:56:06.144 [debug] Evaluating bend block with value: 9
11:56:06.144 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.144 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Executing bend with initial: 10
11:56:06.145 [debug] Executing fun with value: 10
11:56:06.145 [debug] Evaluating bend block with value: 10
11:56:06.145 [debug] Block returned: %{variant: :leaf}
11:56:06.145 [debug] Fun returned result: %{variant: :leaf}
11:56:06.145 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{variant: :leaf}
11:56:06.145 [debug] Executing bend with initial: 10
11:56:06.145 [debug] Executing fun with value: 10
11:56:06.145 [debug] Evaluating bend block with value: 10
11:56:06.145 [debug] Block returned: %{variant: :leaf}
11:56:06.145 [debug] Fun returned result: %{variant: :leaf}
11:56:06.145 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.145 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.145 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.145 [debug] Executing bend with initial: 7
11:56:06.145 [debug] Executing fun with value: 7
11:56:06.145 [debug] Evaluating bend block with value: 7
11:56:06.145 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.145 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.145 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.145 [debug] Executing bend with initial: 8
11:56:06.145 [debug] Executing fun with value: 8
11:56:06.145 [debug] Evaluating bend block with value: 8
11:56:06.145 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.145 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.145 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.145 [debug] Executing bend with initial: 9
11:56:06.145 [debug] Executing fun with value: 9
11:56:06.145 [debug] Evaluating bend block with value: 9
11:56:06.145 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Executing bend with initial: 10
11:56:06.145 [debug] Executing fun with value: 10
11:56:06.145 [debug] Evaluating bend block with value: 10
11:56:06.145 [debug] Block returned: %{variant: :leaf}
11:56:06.145 [debug] Fun returned result: %{variant: :leaf}
11:56:06.145 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{variant: :leaf}
11:56:06.145 [debug] Executing bend with initial: 10
11:56:06.145 [debug] Executing fun with value: 10
11:56:06.145 [debug] Evaluating bend block with value: 10
11:56:06.145 [debug] Block returned: %{variant: :leaf}
11:56:06.145 [debug] Fun returned result: %{variant: :leaf}
11:56:06.145 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.145 [debug] Executing bend with initial: 9
11:56:06.145 [debug] Executing fun with value: 9
11:56:06.145 [debug] Evaluating bend block with value: 9
11:56:06.145 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Executing bend with initial: 10
11:56:06.145 [debug] Executing fun with value: 10
11:56:06.145 [debug] Evaluating bend block with value: 10
11:56:06.145 [debug] Block returned: %{variant: :leaf}
11:56:06.145 [debug] Fun returned result: %{variant: :leaf}
11:56:06.145 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{variant: :leaf}
11:56:06.145 [debug] Executing bend with initial: 10
11:56:06.145 [debug] Executing fun with value: 10
11:56:06.145 [debug] Evaluating bend block with value: 10
11:56:06.145 [debug] Block returned: %{variant: :leaf}
11:56:06.145 [debug] Fun returned result: %{variant: :leaf}
11:56:06.145 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.145 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.145 [debug] Executing bend with initial: 8
11:56:06.145 [debug] Executing fun with value: 8
11:56:06.145 [debug] Evaluating bend block with value: 8
11:56:06.145 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.145 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.145 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.145 [debug] Executing bend with initial: 9
11:56:06.145 [debug] Executing fun with value: 9
11:56:06.145 [debug] Evaluating bend block with value: 9
11:56:06.145 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Executing bend with initial: 10
11:56:06.145 [debug] Executing fun with value: 10
11:56:06.145 [debug] Evaluating bend block with value: 10
11:56:06.145 [debug] Block returned: %{variant: :leaf}
11:56:06.145 [debug] Fun returned result: %{variant: :leaf}
11:56:06.145 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{variant: :leaf}
11:56:06.145 [debug] Executing bend with initial: 10
11:56:06.145 [debug] Executing fun with value: 10
11:56:06.145 [debug] Evaluating bend block with value: 10
11:56:06.145 [debug] Block returned: %{variant: :leaf}
11:56:06.145 [debug] Fun returned result: %{variant: :leaf}
11:56:06.145 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.145 [debug] Executing bend with initial: 9
11:56:06.145 [debug] Executing fun with value: 9
11:56:06.145 [debug] Evaluating bend block with value: 9
11:56:06.145 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.145 [debug] Executing bend with initial: 10
11:56:06.145 [debug] Executing fun with value: 10
11:56:06.145 [debug] Evaluating bend block with value: 10
11:56:06.145 [debug] Block returned: %{variant: :leaf}
11:56:06.145 [debug] Fun returned result: %{variant: :leaf}
11:56:06.145 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{variant: :leaf}
11:56:06.145 [debug] Executing bend with initial: 10
11:56:06.145 [debug] Executing fun with value: 10
11:56:06.145 [debug] Evaluating bend block with value: 10
11:56:06.145 [debug] Block returned: %{variant: :leaf}
11:56:06.145 [debug] Fun returned result: %{variant: :leaf}
11:56:06.145 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{variant: :leaf}
11:56:06.145 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.145 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.146 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.146 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.146 [debug] Executing bend with initial: 6
11:56:06.146 [debug] Executing fun with value: 6
11:56:06.146 [debug] Evaluating bend block with value: 6
11:56:06.146 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.146 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.146 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.146 [debug] Executing bend with initial: 7
11:56:06.146 [debug] Executing fun with value: 7
11:56:06.146 [debug] Evaluating bend block with value: 7
11:56:06.146 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.146 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.146 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.146 [debug] Executing bend with initial: 8
11:56:06.146 [debug] Executing fun with value: 8
11:56:06.146 [debug] Evaluating bend block with value: 8
11:56:06.146 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.146 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.146 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.146 [debug] Executing bend with initial: 9
11:56:06.146 [debug] Executing fun with value: 9
11:56:06.146 [debug] Evaluating bend block with value: 9
11:56:06.146 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.146 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.146 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.146 [debug] Executing bend with initial: 10
11:56:06.146 [debug] Executing fun with value: 10
11:56:06.146 [debug] Evaluating bend block with value: 10
11:56:06.146 [debug] Block returned: %{variant: :leaf}
11:56:06.146 [debug] Fun returned result: %{variant: :leaf}
11:56:06.146 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.146 [debug] do_bend final result: %{variant: :leaf}
11:56:06.146 [debug] Executing bend with initial: 10
11:56:06.146 [debug] Executing fun with value: 10
11:56:06.146 [debug] Evaluating bend block with value: 10
11:56:06.146 [debug] Block returned: %{variant: :leaf}
11:56:06.146 [debug] Fun returned result: %{variant: :leaf}
11:56:06.146 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.146 [debug] do_bend final result: %{variant: :leaf}
11:56:06.146 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.146 [debug] Executing bend with initial: 9
11:56:06.146 [debug] Executing fun with value: 9
11:56:06.146 [debug] Evaluating bend block with value: 9
11:56:06.146 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.146 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.146 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.146 [debug] Executing bend with initial: 10
11:56:06.146 [debug] Executing fun with value: 10
11:56:06.146 [debug] Evaluating bend block with value: 10
11:56:06.146 [debug] Block returned: %{variant: :leaf}
11:56:06.146 [debug] Fun returned result: %{variant: :leaf}
11:56:06.146 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.146 [debug] do_bend final result: %{variant: :leaf}
11:56:06.146 [debug] Executing bend with initial: 10
11:56:06.146 [debug] Executing fun with value: 10
11:56:06.146 [debug] Evaluating bend block with value: 10
11:56:06.146 [debug] Block returned: %{variant: :leaf}
11:56:06.146 [debug] Fun returned result: %{variant: :leaf}
11:56:06.146 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.146 [debug] do_bend final result: %{variant: :leaf}
11:56:06.146 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.146 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.146 [debug] Executing bend with initial: 8
11:56:06.146 [debug] Executing fun with value: 8
11:56:06.146 [debug] Evaluating bend block with value: 8
11:56:06.146 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.146 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.146 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.146 [debug] Executing bend with initial: 9
11:56:06.146 [debug] Executing fun with value: 9
11:56:06.146 [debug] Evaluating bend block with value: 9
11:56:06.146 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.146 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.146 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.146 [debug] Executing bend with initial: 10
11:56:06.146 [debug] Executing fun with value: 10
11:56:06.146 [debug] Evaluating bend block with value: 10
11:56:06.146 [debug] Block returned: %{variant: :leaf}
11:56:06.146 [debug] Fun returned result: %{variant: :leaf}
11:56:06.146 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.146 [debug] do_bend final result: %{variant: :leaf}
11:56:06.146 [debug] Executing bend with initial: 10
11:56:06.146 [debug] Executing fun with value: 10
11:56:06.146 [debug] Evaluating bend block with value: 10
11:56:06.146 [debug] Block returned: %{variant: :leaf}
11:56:06.147 [debug] Fun returned result: %{variant: :leaf}
11:56:06.147 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.147 [debug] Executing bend with initial: 9
11:56:06.147 [debug] Executing fun with value: 9
11:56:06.147 [debug] Evaluating bend block with value: 9
11:56:06.147 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Executing bend with initial: 10
11:56:06.147 [debug] Executing fun with value: 10
11:56:06.147 [debug] Evaluating bend block with value: 10
11:56:06.147 [debug] Block returned: %{variant: :leaf}
11:56:06.147 [debug] Fun returned result: %{variant: :leaf}
11:56:06.147 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{variant: :leaf}
11:56:06.147 [debug] Executing bend with initial: 10
11:56:06.147 [debug] Executing fun with value: 10
11:56:06.147 [debug] Evaluating bend block with value: 10
11:56:06.147 [debug] Block returned: %{variant: :leaf}
11:56:06.147 [debug] Fun returned result: %{variant: :leaf}
11:56:06.147 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.147 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.147 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.147 [debug] Executing bend with initial: 7
11:56:06.147 [debug] Executing fun with value: 7
11:56:06.147 [debug] Evaluating bend block with value: 7
11:56:06.147 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.147 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.147 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.147 [debug] Executing bend with initial: 8
11:56:06.147 [debug] Executing fun with value: 8
11:56:06.147 [debug] Evaluating bend block with value: 8
11:56:06.147 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.147 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.147 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.147 [debug] Executing bend with initial: 9
11:56:06.147 [debug] Executing fun with value: 9
11:56:06.147 [debug] Evaluating bend block with value: 9
11:56:06.147 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Executing bend with initial: 10
11:56:06.147 [debug] Executing fun with value: 10
11:56:06.147 [debug] Evaluating bend block with value: 10
11:56:06.147 [debug] Block returned: %{variant: :leaf}
11:56:06.147 [debug] Fun returned result: %{variant: :leaf}
11:56:06.147 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{variant: :leaf}
11:56:06.147 [debug] Executing bend with initial: 10
11:56:06.147 [debug] Executing fun with value: 10
11:56:06.147 [debug] Evaluating bend block with value: 10
11:56:06.147 [debug] Block returned: %{variant: :leaf}
11:56:06.147 [debug] Fun returned result: %{variant: :leaf}
11:56:06.147 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.147 [debug] Executing bend with initial: 9
11:56:06.147 [debug] Executing fun with value: 9
11:56:06.147 [debug] Evaluating bend block with value: 9
11:56:06.147 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Executing bend with initial: 10
11:56:06.147 [debug] Executing fun with value: 10
11:56:06.147 [debug] Evaluating bend block with value: 10
11:56:06.147 [debug] Block returned: %{variant: :leaf}
11:56:06.147 [debug] Fun returned result: %{variant: :leaf}
11:56:06.147 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{variant: :leaf}
11:56:06.147 [debug] Executing bend with initial: 10
11:56:06.147 [debug] Executing fun with value: 10
11:56:06.147 [debug] Evaluating bend block with value: 10
11:56:06.147 [debug] Block returned: %{variant: :leaf}
11:56:06.147 [debug] Fun returned result: %{variant: :leaf}
11:56:06.147 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.147 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.147 [debug] Executing bend with initial: 8
11:56:06.147 [debug] Executing fun with value: 8
11:56:06.147 [debug] Evaluating bend block with value: 8
11:56:06.147 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.147 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.147 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.147 [debug] Executing bend with initial: 9
11:56:06.147 [debug] Executing fun with value: 9
11:56:06.147 [debug] Evaluating bend block with value: 9
11:56:06.147 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Executing bend with initial: 10
11:56:06.147 [debug] Executing fun with value: 10
11:56:06.147 [debug] Evaluating bend block with value: 10
11:56:06.147 [debug] Block returned: %{variant: :leaf}
11:56:06.147 [debug] Fun returned result: %{variant: :leaf}
11:56:06.147 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{variant: :leaf}
11:56:06.147 [debug] Executing bend with initial: 10
11:56:06.147 [debug] Executing fun with value: 10
11:56:06.147 [debug] Evaluating bend block with value: 10
11:56:06.147 [debug] Block returned: %{variant: :leaf}
11:56:06.147 [debug] Fun returned result: %{variant: :leaf}
11:56:06.147 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{variant: :leaf}
11:56:06.147 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.147 [debug] Executing bend with initial: 9
11:56:06.147 [debug] Executing fun with value: 9
11:56:06.147 [debug] Evaluating bend block with value: 9
11:56:06.147 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.147 [debug] Executing bend with initial: 10
11:56:06.148 [debug] Executing fun with value: 10
11:56:06.148 [debug] Evaluating bend block with value: 10
11:56:06.148 [debug] Block returned: %{variant: :leaf}
11:56:06.148 [debug] Fun returned result: %{variant: :leaf}
11:56:06.148 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.148 [debug] do_bend final result: %{variant: :leaf}
11:56:06.148 [debug] Executing bend with initial: 10
11:56:06.148 [debug] Executing fun with value: 10
11:56:06.148 [debug] Evaluating bend block with value: 10
11:56:06.148 [debug] Block returned: %{variant: :leaf}
11:56:06.148 [debug] Fun returned result: %{variant: :leaf}
11:56:06.148 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.148 [debug] do_bend final result: %{variant: :leaf}
11:56:06.148 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.148 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.148 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.148 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.148 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.148 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.149 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.149 [debug] Executing bend with initial: 3
11:56:06.149 [debug] Executing fun with value: 3
11:56:06.149 [debug] Evaluating bend block with value: 3
11:56:06.149 [debug] Block returned: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.149 [debug] Fun returned result: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.149 [debug] Processing constructed value: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.149 [debug] Executing bend with initial: 4
11:56:06.149 [debug] Executing fun with value: 4
11:56:06.149 [debug] Evaluating bend block with value: 4
11:56:06.149 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.149 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.149 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.149 [debug] Executing bend with initial: 5
11:56:06.149 [debug] Executing fun with value: 5
11:56:06.149 [debug] Evaluating bend block with value: 5
11:56:06.149 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.149 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.149 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.149 [debug] Executing bend with initial: 6
11:56:06.149 [debug] Executing fun with value: 6
11:56:06.149 [debug] Evaluating bend block with value: 6
11:56:06.149 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.149 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.149 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.149 [debug] Executing bend with initial: 7
11:56:06.149 [debug] Executing fun with value: 7
11:56:06.149 [debug] Evaluating bend block with value: 7
11:56:06.149 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.149 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.149 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.149 [debug] Executing bend with initial: 8
11:56:06.149 [debug] Executing fun with value: 8
11:56:06.149 [debug] Evaluating bend block with value: 8
11:56:06.149 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.149 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.149 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.149 [debug] Executing bend with initial: 9
11:56:06.149 [debug] Executing fun with value: 9
11:56:06.149 [debug] Evaluating bend block with value: 9
11:56:06.149 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.149 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.149 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.149 [debug] Executing bend with initial: 10
11:56:06.149 [debug] Executing fun with value: 10
11:56:06.149 [debug] Evaluating bend block with value: 10
11:56:06.149 [debug] Block returned: %{variant: :leaf}
11:56:06.149 [debug] Fun returned result: %{variant: :leaf}
11:56:06.149 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{variant: :leaf}
11:56:06.150 [debug] Executing bend with initial: 10
11:56:06.150 [debug] Executing fun with value: 10
11:56:06.150 [debug] Evaluating bend block with value: 10
11:56:06.150 [debug] Block returned: %{variant: :leaf}
11:56:06.150 [debug] Fun returned result: %{variant: :leaf}
11:56:06.150 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.150 [debug] Executing bend with initial: 9
11:56:06.150 [debug] Executing fun with value: 9
11:56:06.150 [debug] Evaluating bend block with value: 9
11:56:06.150 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.150 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.150 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.150 [debug] Executing bend with initial: 10
11:56:06.150 [debug] Executing fun with value: 10
11:56:06.150 [debug] Evaluating bend block with value: 10
11:56:06.150 [debug] Block returned: %{variant: :leaf}
11:56:06.150 [debug] Fun returned result: %{variant: :leaf}
11:56:06.150 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{variant: :leaf}
11:56:06.150 [debug] Executing bend with initial: 10
11:56:06.150 [debug] Executing fun with value: 10
11:56:06.150 [debug] Evaluating bend block with value: 10
11:56:06.150 [debug] Block returned: %{variant: :leaf}
11:56:06.150 [debug] Fun returned result: %{variant: :leaf}
11:56:06.150 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.150 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.150 [debug] Executing bend with initial: 8
11:56:06.150 [debug] Executing fun with value: 8
11:56:06.150 [debug] Evaluating bend block with value: 8
11:56:06.150 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.150 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.150 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.150 [debug] Executing bend with initial: 9
11:56:06.150 [debug] Executing fun with value: 9
11:56:06.150 [debug] Evaluating bend block with value: 9
11:56:06.150 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.150 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.150 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.150 [debug] Executing bend with initial: 10
11:56:06.150 [debug] Executing fun with value: 10
11:56:06.150 [debug] Evaluating bend block with value: 10
11:56:06.150 [debug] Block returned: %{variant: :leaf}
11:56:06.150 [debug] Fun returned result: %{variant: :leaf}
11:56:06.150 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{variant: :leaf}
11:56:06.150 [debug] Executing bend with initial: 10
11:56:06.150 [debug] Executing fun with value: 10
11:56:06.150 [debug] Evaluating bend block with value: 10
11:56:06.150 [debug] Block returned: %{variant: :leaf}
11:56:06.150 [debug] Fun returned result: %{variant: :leaf}
11:56:06.150 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.150 [debug] Executing bend with initial: 9
11:56:06.150 [debug] Executing fun with value: 9
11:56:06.150 [debug] Evaluating bend block with value: 9
11:56:06.150 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.150 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.150 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.150 [debug] Executing bend with initial: 10
11:56:06.150 [debug] Executing fun with value: 10
11:56:06.150 [debug] Evaluating bend block with value: 10
11:56:06.150 [debug] Block returned: %{variant: :leaf}
11:56:06.150 [debug] Fun returned result: %{variant: :leaf}
11:56:06.150 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{variant: :leaf}
11:56:06.150 [debug] Executing bend with initial: 10
11:56:06.150 [debug] Executing fun with value: 10
11:56:06.150 [debug] Evaluating bend block with value: 10
11:56:06.150 [debug] Block returned: %{variant: :leaf}
11:56:06.150 [debug] Fun returned result: %{variant: :leaf}
11:56:06.150 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.150 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.150 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.150 [debug] Executing bend with initial: 7
11:56:06.150 [debug] Executing fun with value: 7
11:56:06.150 [debug] Evaluating bend block with value: 7
11:56:06.150 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.150 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.150 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.150 [debug] Executing bend with initial: 8
11:56:06.150 [debug] Executing fun with value: 8
11:56:06.150 [debug] Evaluating bend block with value: 8
11:56:06.150 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.150 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.150 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.150 [debug] Executing bend with initial: 9
11:56:06.150 [debug] Executing fun with value: 9
11:56:06.150 [debug] Evaluating bend block with value: 9
11:56:06.150 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.150 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.150 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.150 [debug] Executing bend with initial: 10
11:56:06.150 [debug] Executing fun with value: 10
11:56:06.150 [debug] Evaluating bend block with value: 10
11:56:06.150 [debug] Block returned: %{variant: :leaf}
11:56:06.150 [debug] Fun returned result: %{variant: :leaf}
11:56:06.150 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{variant: :leaf}
11:56:06.150 [debug] Executing bend with initial: 10
11:56:06.150 [debug] Executing fun with value: 10
11:56:06.150 [debug] Evaluating bend block with value: 10
11:56:06.150 [debug] Block returned: %{variant: :leaf}
11:56:06.150 [debug] Fun returned result: %{variant: :leaf}
11:56:06.150 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{variant: :leaf}
11:56:06.150 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.150 [debug] Executing bend with initial: 9
11:56:06.150 [debug] Executing fun with value: 9
11:56:06.150 [debug] Evaluating bend block with value: 9
11:56:06.150 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.150 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.151 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.151 [debug] Executing bend with initial: 10
11:56:06.151 [debug] Executing fun with value: 10
11:56:06.151 [debug] Evaluating bend block with value: 10
11:56:06.151 [debug] Block returned: %{variant: :leaf}
11:56:06.151 [debug] Fun returned result: %{variant: :leaf}
11:56:06.151 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.151 [debug] do_bend final result: %{variant: :leaf}
11:56:06.151 [debug] Executing bend with initial: 10
11:56:06.151 [debug] Executing fun with value: 10
11:56:06.151 [debug] Evaluating bend block with value: 10
11:56:06.151 [debug] Block returned: %{variant: :leaf}
11:56:06.151 [debug] Fun returned result: %{variant: :leaf}
11:56:06.151 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.151 [debug] do_bend final result: %{variant: :leaf}
11:56:06.151 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.151 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.151 [debug] Executing bend with initial: 8
11:56:06.151 [debug] Executing fun with value: 8
11:56:06.151 [debug] Evaluating bend block with value: 8
11:56:06.151 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.151 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.151 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.151 [debug] Executing bend with initial: 9
11:56:06.151 [debug] Executing fun with value: 9
11:56:06.151 [debug] Evaluating bend block with value: 9
11:56:06.151 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.151 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.151 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.151 [debug] Executing bend with initial: 10
11:56:06.151 [debug] Executing fun with value: 10
11:56:06.151 [debug] Evaluating bend block with value: 10
11:56:06.151 [debug] Block returned: %{variant: :leaf}
11:56:06.151 [debug] Fun returned result: %{variant: :leaf}
11:56:06.151 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.151 [debug] do_bend final result: %{variant: :leaf}
11:56:06.151 [debug] Executing bend with initial: 10
11:56:06.151 [debug] Executing fun with value: 10
11:56:06.151 [debug] Evaluating bend block with value: 10
11:56:06.151 [debug] Block returned: %{variant: :leaf}
11:56:06.151 [debug] Fun returned result: %{variant: :leaf}
11:56:06.151 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.151 [debug] do_bend final result: %{variant: :leaf}
11:56:06.151 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.151 [debug] Executing bend with initial: 9
11:56:06.151 [debug] Executing fun with value: 9
11:56:06.151 [debug] Evaluating bend block with value: 9
11:56:06.151 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.151 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.151 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.151 [debug] Executing bend with initial: 10
11:56:06.151 [debug] Executing fun with value: 10
11:56:06.151 [debug] Evaluating bend block with value: 10
11:56:06.151 [debug] Block returned: %{variant: :leaf}
11:56:06.151 [debug] Fun returned result: %{variant: :leaf}
11:56:06.151 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.151 [debug] do_bend final result: %{variant: :leaf}
11:56:06.151 [debug] Executing bend with initial: 10
11:56:06.151 [debug] Executing fun with value: 10
11:56:06.151 [debug] Evaluating bend block with value: 10
11:56:06.151 [debug] Block returned: %{variant: :leaf}
11:56:06.151 [debug] Fun returned result: %{variant: :leaf}
11:56:06.151 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.151 [debug] do_bend final result: %{variant: :leaf}
11:56:06.151 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.151 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.151 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.151 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.151 [debug] Executing bend with initial: 6
11:56:06.151 [debug] Executing fun with value: 6
11:56:06.151 [debug] Evaluating bend block with value: 6
11:56:06.151 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.151 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.152 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.152 [debug] Executing bend with initial: 7
11:56:06.152 [debug] Executing fun with value: 7
11:56:06.152 [debug] Evaluating bend block with value: 7
11:56:06.152 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.152 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.152 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.152 [debug] Executing bend with initial: 8
11:56:06.152 [debug] Executing fun with value: 8
11:56:06.152 [debug] Evaluating bend block with value: 8
11:56:06.152 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.152 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.152 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.152 [debug] Executing bend with initial: 9
11:56:06.152 [debug] Executing fun with value: 9
11:56:06.152 [debug] Evaluating bend block with value: 9
11:56:06.152 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.152 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.152 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.152 [debug] Executing bend with initial: 10
11:56:06.152 [debug] Executing fun with value: 10
11:56:06.152 [debug] Evaluating bend block with value: 10
11:56:06.152 [debug] Block returned: %{variant: :leaf}
11:56:06.152 [debug] Fun returned result: %{variant: :leaf}
11:56:06.152 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.152 [debug] do_bend final result: %{variant: :leaf}
11:56:06.152 [debug] Executing bend with initial: 10
11:56:06.152 [debug] Executing fun with value: 10
11:56:06.152 [debug] Evaluating bend block with value: 10
11:56:06.152 [debug] Block returned: %{variant: :leaf}
11:56:06.152 [debug] Fun returned result: %{variant: :leaf}
11:56:06.152 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.152 [debug] do_bend final result: %{variant: :leaf}
11:56:06.152 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.152 [debug] Executing bend with initial: 9
11:56:06.152 [debug] Executing fun with value: 9
11:56:06.152 [debug] Evaluating bend block with value: 9
11:56:06.152 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.152 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.152 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.152 [debug] Executing bend with initial: 10
11:56:06.152 [debug] Executing fun with value: 10
11:56:06.152 [debug] Evaluating bend block with value: 10
11:56:06.152 [debug] Block returned: %{variant: :leaf}
11:56:06.152 [debug] Fun returned result: %{variant: :leaf}
11:56:06.152 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.152 [debug] do_bend final result: %{variant: :leaf}
11:56:06.152 [debug] Executing bend with initial: 10
11:56:06.152 [debug] Executing fun with value: 10
11:56:06.152 [debug] Evaluating bend block with value: 10
11:56:06.152 [debug] Block returned: %{variant: :leaf}
11:56:06.152 [debug] Fun returned result: %{variant: :leaf}
11:56:06.152 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.152 [debug] do_bend final result: %{variant: :leaf}
11:56:06.152 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.152 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.152 [debug] Executing bend with initial: 8
11:56:06.152 [debug] Executing fun with value: 8
11:56:06.152 [debug] Evaluating bend block with value: 8
11:56:06.152 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.152 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.152 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.152 [debug] Executing bend with initial: 9
11:56:06.152 [debug] Executing fun with value: 9
11:56:06.152 [debug] Evaluating bend block with value: 9
11:56:06.152 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.152 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.152 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.152 [debug] Executing bend with initial: 10
11:56:06.152 [debug] Executing fun with value: 10
11:56:06.152 [debug] Evaluating bend block with value: 10
11:56:06.152 [debug] Block returned: %{variant: :leaf}
11:56:06.152 [debug] Fun returned result: %{variant: :leaf}
11:56:06.152 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.152 [debug] do_bend final result: %{variant: :leaf}
11:56:06.152 [debug] Executing bend with initial: 10
11:56:06.152 [debug] Executing fun with value: 10
11:56:06.152 [debug] Evaluating bend block with value: 10
11:56:06.152 [debug] Block returned: %{variant: :leaf}
11:56:06.152 [debug] Fun returned result: %{variant: :leaf}
11:56:06.152 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.152 [debug] do_bend final result: %{variant: :leaf}
11:56:06.152 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.152 [debug] Executing bend with initial: 9
11:56:06.152 [debug] Executing fun with value: 9
11:56:06.152 [debug] Evaluating bend block with value: 9
11:56:06.152 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.152 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.152 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.152 [debug] Executing bend with initial: 10
11:56:06.152 [debug] Executing fun with value: 10
11:56:06.152 [debug] Evaluating bend block with value: 10
11:56:06.152 [debug] Block returned: %{variant: :leaf}
11:56:06.152 [debug] Fun returned result: %{variant: :leaf}
11:56:06.152 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.152 [debug] do_bend final result: %{variant: :leaf}
11:56:06.152 [debug] Executing bend with initial: 10
11:56:06.152 [debug] Executing fun with value: 10
11:56:06.152 [debug] Evaluating bend block with value: 10
11:56:06.152 [debug] Block returned: %{variant: :leaf}
11:56:06.152 [debug] Fun returned result: %{variant: :leaf}
11:56:06.152 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.152 [debug] do_bend final result: %{variant: :leaf}
11:56:06.152 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.152 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.152 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.152 [debug] Executing bend with initial: 7
11:56:06.152 [debug] Executing fun with value: 7
11:56:06.152 [debug] Evaluating bend block with value: 7
11:56:06.152 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.153 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.153 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.153 [debug] Executing bend with initial: 8
11:56:06.153 [debug] Executing fun with value: 8
11:56:06.153 [debug] Evaluating bend block with value: 8
11:56:06.153 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.153 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.153 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.153 [debug] Executing bend with initial: 9
11:56:06.153 [debug] Executing fun with value: 9
11:56:06.153 [debug] Evaluating bend block with value: 9
11:56:06.153 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.153 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.153 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.153 [debug] Executing bend with initial: 10
11:56:06.153 [debug] Executing fun with value: 10
11:56:06.153 [debug] Evaluating bend block with value: 10
11:56:06.153 [debug] Block returned: %{variant: :leaf}
11:56:06.153 [debug] Fun returned result: %{variant: :leaf}
11:56:06.153 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.153 [debug] do_bend final result: %{variant: :leaf}
11:56:06.153 [debug] Executing bend with initial: 10
11:56:06.153 [debug] Executing fun with value: 10
11:56:06.153 [debug] Evaluating bend block with value: 10
11:56:06.153 [debug] Block returned: %{variant: :leaf}
11:56:06.153 [debug] Fun returned result: %{variant: :leaf}
11:56:06.153 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.153 [debug] do_bend final result: %{variant: :leaf}
11:56:06.153 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.153 [debug] Executing bend with initial: 9
11:56:06.153 [debug] Executing fun with value: 9
11:56:06.153 [debug] Evaluating bend block with value: 9
11:56:06.153 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.153 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.153 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.153 [debug] Executing bend with initial: 10
11:56:06.153 [debug] Executing fun with value: 10
11:56:06.153 [debug] Evaluating bend block with value: 10
11:56:06.153 [debug] Block returned: %{variant: :leaf}
11:56:06.153 [debug] Fun returned result: %{variant: :leaf}
11:56:06.153 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.153 [debug] do_bend final result: %{variant: :leaf}
11:56:06.153 [debug] Executing bend with initial: 10
11:56:06.153 [debug] Executing fun with value: 10
11:56:06.153 [debug] Evaluating bend block with value: 10
11:56:06.153 [debug] Block returned: %{variant: :leaf}
11:56:06.153 [debug] Fun returned result: %{variant: :leaf}
11:56:06.153 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.153 [debug] do_bend final result: %{variant: :leaf}
11:56:06.153 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.153 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.153 [debug] Executing bend with initial: 8
11:56:06.153 [debug] Executing fun with value: 8
11:56:06.153 [debug] Evaluating bend block with value: 8
11:56:06.153 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.153 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.153 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.153 [debug] Executing bend with initial: 9
11:56:06.153 [debug] Executing fun with value: 9
11:56:06.153 [debug] Evaluating bend block with value: 9
11:56:06.153 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.153 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.153 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.153 [debug] Executing bend with initial: 10
11:56:06.153 [debug] Executing fun with value: 10
11:56:06.153 [debug] Evaluating bend block with value: 10
11:56:06.153 [debug] Block returned: %{variant: :leaf}
11:56:06.153 [debug] Fun returned result: %{variant: :leaf}
11:56:06.153 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.153 [debug] do_bend final result: %{variant: :leaf}
11:56:06.153 [debug] Executing bend with initial: 10
11:56:06.153 [debug] Executing fun with value: 10
11:56:06.153 [debug] Evaluating bend block with value: 10
11:56:06.153 [debug] Block returned: %{variant: :leaf}
11:56:06.153 [debug] Fun returned result: %{variant: :leaf}
11:56:06.153 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.153 [debug] do_bend final result: %{variant: :leaf}
11:56:06.153 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.153 [debug] Executing bend with initial: 9
11:56:06.153 [debug] Executing fun with value: 9
11:56:06.153 [debug] Evaluating bend block with value: 9
11:56:06.154 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.154 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.154 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.154 [debug] Executing bend with initial: 10
11:56:06.154 [debug] Executing fun with value: 10
11:56:06.154 [debug] Evaluating bend block with value: 10
11:56:06.154 [debug] Block returned: %{variant: :leaf}
11:56:06.154 [debug] Fun returned result: %{variant: :leaf}
11:56:06.154 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.154 [debug] do_bend final result: %{variant: :leaf}
11:56:06.154 [debug] Executing bend with initial: 10
11:56:06.154 [debug] Executing fun with value: 10
11:56:06.154 [debug] Evaluating bend block with value: 10
11:56:06.154 [debug] Block returned: %{variant: :leaf}
11:56:06.154 [debug] Fun returned result: %{variant: :leaf}
11:56:06.154 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.154 [debug] do_bend final result: %{variant: :leaf}
11:56:06.154 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.154 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.154 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.154 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.154 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.154 [debug] Executing bend with initial: 5
11:56:06.154 [debug] Executing fun with value: 5
11:56:06.154 [debug] Evaluating bend block with value: 5
11:56:06.154 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.154 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.154 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.154 [debug] Executing bend with initial: 6
11:56:06.154 [debug] Executing fun with value: 6
11:56:06.154 [debug] Evaluating bend block with value: 6
11:56:06.154 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.154 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.154 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.154 [debug] Executing bend with initial: 7
11:56:06.154 [debug] Executing fun with value: 7
11:56:06.154 [debug] Evaluating bend block with value: 7
11:56:06.154 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.154 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.154 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.154 [debug] Executing bend with initial: 8
11:56:06.154 [debug] Executing fun with value: 8
11:56:06.154 [debug] Evaluating bend block with value: 8
11:56:06.154 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.154 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.154 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.154 [debug] Executing bend with initial: 9
11:56:06.154 [debug] Executing fun with value: 9
11:56:06.154 [debug] Evaluating bend block with value: 9
11:56:06.154 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.154 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.154 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.154 [debug] Executing bend with initial: 10
11:56:06.154 [debug] Executing fun with value: 10
11:56:06.154 [debug] Evaluating bend block with value: 10
11:56:06.154 [debug] Block returned: %{variant: :leaf}
11:56:06.154 [debug] Fun returned result: %{variant: :leaf}
11:56:06.154 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.155 [debug] do_bend final result: %{variant: :leaf}
11:56:06.155 [debug] Executing bend with initial: 10
11:56:06.155 [debug] Executing fun with value: 10
11:56:06.155 [debug] Evaluating bend block with value: 10
11:56:06.155 [debug] Block returned: %{variant: :leaf}
11:56:06.155 [debug] Fun returned result: %{variant: :leaf}
11:56:06.155 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.155 [debug] do_bend final result: %{variant: :leaf}
11:56:06.155 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.155 [debug] Executing bend with initial: 9
11:56:06.155 [debug] Executing fun with value: 9
11:56:06.155 [debug] Evaluating bend block with value: 9
11:56:06.155 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.155 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.155 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.155 [debug] Executing bend with initial: 10
11:56:06.155 [debug] Executing fun with value: 10
11:56:06.155 [debug] Evaluating bend block with value: 10
11:56:06.155 [debug] Block returned: %{variant: :leaf}
11:56:06.155 [debug] Fun returned result: %{variant: :leaf}
11:56:06.155 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.155 [debug] do_bend final result: %{variant: :leaf}
11:56:06.155 [debug] Executing bend with initial: 10
11:56:06.155 [debug] Executing fun with value: 10
11:56:06.155 [debug] Evaluating bend block with value: 10
11:56:06.155 [debug] Block returned: %{variant: :leaf}
11:56:06.155 [debug] Fun returned result: %{variant: :leaf}
11:56:06.155 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.155 [debug] do_bend final result: %{variant: :leaf}
11:56:06.155 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.155 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.155 [debug] Executing bend with initial: 8
11:56:06.155 [debug] Executing fun with value: 8
11:56:06.155 [debug] Evaluating bend block with value: 8
11:56:06.155 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.155 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.155 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.155 [debug] Executing bend with initial: 9
11:56:06.155 [debug] Executing fun with value: 9
11:56:06.155 [debug] Evaluating bend block with value: 9
11:56:06.155 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.155 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.155 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.155 [debug] Executing bend with initial: 10
11:56:06.155 [debug] Executing fun with value: 10
11:56:06.155 [debug] Evaluating bend block with value: 10
11:56:06.155 [debug] Block returned: %{variant: :leaf}
11:56:06.155 [debug] Fun returned result: %{variant: :leaf}
11:56:06.155 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.155 [debug] do_bend final result: %{variant: :leaf}
11:56:06.155 [debug] Executing bend with initial: 10
11:56:06.155 [debug] Executing fun with value: 10
11:56:06.155 [debug] Evaluating bend block with value: 10
11:56:06.155 [debug] Block returned: %{variant: :leaf}
11:56:06.155 [debug] Fun returned result: %{variant: :leaf}
11:56:06.155 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.155 [debug] do_bend final result: %{variant: :leaf}
11:56:06.155 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.155 [debug] Executing bend with initial: 9
11:56:06.155 [debug] Executing fun with value: 9
11:56:06.155 [debug] Evaluating bend block with value: 9
11:56:06.155 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.155 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.155 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.155 [debug] Executing bend with initial: 10
11:56:06.155 [debug] Executing fun with value: 10
11:56:06.155 [debug] Evaluating bend block with value: 10
11:56:06.155 [debug] Block returned: %{variant: :leaf}
11:56:06.155 [debug] Fun returned result: %{variant: :leaf}
11:56:06.155 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.155 [debug] do_bend final result: %{variant: :leaf}
11:56:06.155 [debug] Executing bend with initial: 10
11:56:06.155 [debug] Executing fun with value: 10
11:56:06.155 [debug] Evaluating bend block with value: 10
11:56:06.155 [debug] Block returned: %{variant: :leaf}
11:56:06.155 [debug] Fun returned result: %{variant: :leaf}
11:56:06.155 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.155 [debug] do_bend final result: %{variant: :leaf}
11:56:06.155 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.155 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.155 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.155 [debug] Executing bend with initial: 7
11:56:06.155 [debug] Executing fun with value: 7
11:56:06.155 [debug] Evaluating bend block with value: 7
11:56:06.156 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.156 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.156 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.156 [debug] Executing bend with initial: 8
11:56:06.156 [debug] Executing fun with value: 8
11:56:06.156 [debug] Evaluating bend block with value: 8
11:56:06.156 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.156 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.156 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.156 [debug] Executing bend with initial: 9
11:56:06.156 [debug] Executing fun with value: 9
11:56:06.156 [debug] Evaluating bend block with value: 9
11:56:06.156 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.156 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.156 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.156 [debug] Executing bend with initial: 10
11:56:06.156 [debug] Executing fun with value: 10
11:56:06.156 [debug] Evaluating bend block with value: 10
11:56:06.156 [debug] Block returned: %{variant: :leaf}
11:56:06.156 [debug] Fun returned result: %{variant: :leaf}
11:56:06.156 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.156 [debug] do_bend final result: %{variant: :leaf}
11:56:06.156 [debug] Executing bend with initial: 10
11:56:06.156 [debug] Executing fun with value: 10
11:56:06.156 [debug] Evaluating bend block with value: 10
11:56:06.156 [debug] Block returned: %{variant: :leaf}
11:56:06.156 [debug] Fun returned result: %{variant: :leaf}
11:56:06.156 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.156 [debug] do_bend final result: %{variant: :leaf}
11:56:06.156 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.156 [debug] Executing bend with initial: 9
11:56:06.156 [debug] Executing fun with value: 9
11:56:06.156 [debug] Evaluating bend block with value: 9
11:56:06.156 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.156 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.156 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.156 [debug] Executing bend with initial: 10
11:56:06.156 [debug] Executing fun with value: 10
11:56:06.156 [debug] Evaluating bend block with value: 10
11:56:06.156 [debug] Block returned: %{variant: :leaf}
11:56:06.156 [debug] Fun returned result: %{variant: :leaf}
11:56:06.156 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.156 [debug] do_bend final result: %{variant: :leaf}
11:56:06.156 [debug] Executing bend with initial: 10
11:56:06.156 [debug] Executing fun with value: 10
11:56:06.156 [debug] Evaluating bend block with value: 10
11:56:06.156 [debug] Block returned: %{variant: :leaf}
11:56:06.156 [debug] Fun returned result: %{variant: :leaf}
11:56:06.156 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.156 [debug] do_bend final result: %{variant: :leaf}
11:56:06.156 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.156 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.156 [debug] Executing bend with initial: 8
11:56:06.156 [debug] Executing fun with value: 8
11:56:06.156 [debug] Evaluating bend block with value: 8
11:56:06.156 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.156 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.156 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.156 [debug] Executing bend with initial: 9
11:56:06.156 [debug] Executing fun with value: 9
11:56:06.156 [debug] Evaluating bend block with value: 9
11:56:06.156 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.157 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.157 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.157 [debug] Executing bend with initial: 10
11:56:06.157 [debug] Executing fun with value: 10
11:56:06.157 [debug] Evaluating bend block with value: 10
11:56:06.157 [debug] Block returned: %{variant: :leaf}
11:56:06.157 [debug] Fun returned result: %{variant: :leaf}
11:56:06.157 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.157 [debug] do_bend final result: %{variant: :leaf}
11:56:06.157 [debug] Executing bend with initial: 10
11:56:06.157 [debug] Executing fun with value: 10
11:56:06.157 [debug] Evaluating bend block with value: 10
11:56:06.157 [debug] Block returned: %{variant: :leaf}
11:56:06.157 [debug] Fun returned result: %{variant: :leaf}
11:56:06.157 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.157 [debug] do_bend final result: %{variant: :leaf}
11:56:06.157 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.157 [debug] Executing bend with initial: 9
11:56:06.157 [debug] Executing fun with value: 9
11:56:06.157 [debug] Evaluating bend block with value: 9
11:56:06.157 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.157 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.157 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.157 [debug] Executing bend with initial: 10
11:56:06.157 [debug] Executing fun with value: 10
11:56:06.157 [debug] Evaluating bend block with value: 10
11:56:06.157 [debug] Block returned: %{variant: :leaf}
11:56:06.157 [debug] Fun returned result: %{variant: :leaf}
11:56:06.157 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.157 [debug] do_bend final result: %{variant: :leaf}
11:56:06.157 [debug] Executing bend with initial: 10
11:56:06.157 [debug] Executing fun with value: 10
11:56:06.157 [debug] Evaluating bend block with value: 10
11:56:06.157 [debug] Block returned: %{variant: :leaf}
11:56:06.157 [debug] Fun returned result: %{variant: :leaf}
11:56:06.157 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.157 [debug] do_bend final result: %{variant: :leaf}
11:56:06.157 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.157 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.157 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.157 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.157 [debug] Executing bend with initial: 6
11:56:06.157 [debug] Executing fun with value: 6
11:56:06.157 [debug] Evaluating bend block with value: 6
11:56:06.157 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.157 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.157 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.157 [debug] Executing bend with initial: 7
11:56:06.157 [debug] Executing fun with value: 7
11:56:06.157 [debug] Evaluating bend block with value: 7
11:56:06.157 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.157 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.157 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.157 [debug] Executing bend with initial: 8
11:56:06.157 [debug] Executing fun with value: 8
11:56:06.157 [debug] Evaluating bend block with value: 8
11:56:06.157 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.157 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.157 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.157 [debug] Executing bend with initial: 9
11:56:06.157 [debug] Executing fun with value: 9
11:56:06.157 [debug] Evaluating bend block with value: 9
11:56:06.157 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.157 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.157 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.157 [debug] Executing bend with initial: 10
11:56:06.157 [debug] Executing fun with value: 10
11:56:06.157 [debug] Evaluating bend block with value: 10
11:56:06.157 [debug] Block returned: %{variant: :leaf}
11:56:06.157 [debug] Fun returned result: %{variant: :leaf}
11:56:06.157 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.157 [debug] do_bend final result: %{variant: :leaf}
11:56:06.157 [debug] Executing bend with initial: 10
11:56:06.157 [debug] Executing fun with value: 10
11:56:06.157 [debug] Evaluating bend block with value: 10
11:56:06.157 [debug] Block returned: %{variant: :leaf}
11:56:06.157 [debug] Fun returned result: %{variant: :leaf}
11:56:06.158 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.158 [debug] do_bend final result: %{variant: :leaf}
11:56:06.158 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.158 [debug] Executing bend with initial: 9
11:56:06.158 [debug] Executing fun with value: 9
11:56:06.158 [debug] Evaluating bend block with value: 9
11:56:06.158 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.158 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.158 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.158 [debug] Executing bend with initial: 10
11:56:06.158 [debug] Executing fun with value: 10
11:56:06.158 [debug] Evaluating bend block with value: 10
11:56:06.158 [debug] Block returned: %{variant: :leaf}
11:56:06.158 [debug] Fun returned result: %{variant: :leaf}
11:56:06.158 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.158 [debug] do_bend final result: %{variant: :leaf}
11:56:06.158 [debug] Executing bend with initial: 10
11:56:06.158 [debug] Executing fun with value: 10
11:56:06.158 [debug] Evaluating bend block with value: 10
11:56:06.158 [debug] Block returned: %{variant: :leaf}
11:56:06.158 [debug] Fun returned result: %{variant: :leaf}
11:56:06.158 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.158 [debug] do_bend final result: %{variant: :leaf}
11:56:06.158 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.158 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.158 [debug] Executing bend with initial: 8
11:56:06.158 [debug] Executing fun with value: 8
11:56:06.158 [debug] Evaluating bend block with value: 8
11:56:06.158 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.158 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.158 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.158 [debug] Executing bend with initial: 9
11:56:06.158 [debug] Executing fun with value: 9
11:56:06.158 [debug] Evaluating bend block with value: 9
11:56:06.158 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.158 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.158 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.158 [debug] Executing bend with initial: 10
11:56:06.158 [debug] Executing fun with value: 10
11:56:06.158 [debug] Evaluating bend block with value: 10
11:56:06.158 [debug] Block returned: %{variant: :leaf}
11:56:06.158 [debug] Fun returned result: %{variant: :leaf}
11:56:06.158 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.158 [debug] do_bend final result: %{variant: :leaf}
11:56:06.158 [debug] Executing bend with initial: 10
11:56:06.158 [debug] Executing fun with value: 10
11:56:06.158 [debug] Evaluating bend block with value: 10
11:56:06.158 [debug] Block returned: %{variant: :leaf}
11:56:06.158 [debug] Fun returned result: %{variant: :leaf}
11:56:06.158 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.158 [debug] do_bend final result: %{variant: :leaf}
11:56:06.158 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.158 [debug] Executing bend with initial: 9
11:56:06.158 [debug] Executing fun with value: 9
11:56:06.158 [debug] Evaluating bend block with value: 9
11:56:06.158 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.158 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.158 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.158 [debug] Executing bend with initial: 10
11:56:06.158 [debug] Executing fun with value: 10
11:56:06.158 [debug] Evaluating bend block with value: 10
11:56:06.158 [debug] Block returned: %{variant: :leaf}
11:56:06.158 [debug] Fun returned result: %{variant: :leaf}
11:56:06.158 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.158 [debug] do_bend final result: %{variant: :leaf}
11:56:06.158 [debug] Executing bend with initial: 10
11:56:06.158 [debug] Executing fun with value: 10
11:56:06.158 [debug] Evaluating bend block with value: 10
11:56:06.158 [debug] Block returned: %{variant: :leaf}
11:56:06.158 [debug] Fun returned result: %{variant: :leaf}
11:56:06.158 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.158 [debug] do_bend final result: %{variant: :leaf}
11:56:06.158 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.158 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.158 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.158 [debug] Executing bend with initial: 7
11:56:06.158 [debug] Executing fun with value: 7
11:56:06.158 [debug] Evaluating bend block with value: 7
11:56:06.158 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.158 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.158 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.158 [debug] Executing bend with initial: 8
11:56:06.158 [debug] Executing fun with value: 8
11:56:06.158 [debug] Evaluating bend block with value: 8
11:56:06.158 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.158 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.158 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.158 [debug] Executing bend with initial: 9
11:56:06.158 [debug] Executing fun with value: 9
11:56:06.158 [debug] Evaluating bend block with value: 9
11:56:06.159 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.159 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.159 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.159 [debug] Executing bend with initial: 10
11:56:06.159 [debug] Executing fun with value: 10
11:56:06.159 [debug] Evaluating bend block with value: 10
11:56:06.159 [debug] Block returned: %{variant: :leaf}
11:56:06.159 [debug] Fun returned result: %{variant: :leaf}
11:56:06.159 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.159 [debug] do_bend final result: %{variant: :leaf}
11:56:06.159 [debug] Executing bend with initial: 10
11:56:06.159 [debug] Executing fun with value: 10
11:56:06.159 [debug] Evaluating bend block with value: 10
11:56:06.159 [debug] Block returned: %{variant: :leaf}
11:56:06.159 [debug] Fun returned result: %{variant: :leaf}
11:56:06.159 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.159 [debug] do_bend final result: %{variant: :leaf}
11:56:06.159 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.159 [debug] Executing bend with initial: 9
11:56:06.159 [debug] Executing fun with value: 9
11:56:06.159 [debug] Evaluating bend block with value: 9
11:56:06.159 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.159 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.159 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.159 [debug] Executing bend with initial: 10
11:56:06.159 [debug] Executing fun with value: 10
11:56:06.159 [debug] Evaluating bend block with value: 10
11:56:06.159 [debug] Block returned: %{variant: :leaf}
11:56:06.159 [debug] Fun returned result: %{variant: :leaf}
11:56:06.159 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.159 [debug] do_bend final result: %{variant: :leaf}
11:56:06.159 [debug] Executing bend with initial: 10
11:56:06.159 [debug] Executing fun with value: 10
11:56:06.159 [debug] Evaluating bend block with value: 10
11:56:06.159 [debug] Block returned: %{variant: :leaf}
11:56:06.159 [debug] Fun returned result: %{variant: :leaf}
11:56:06.159 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.159 [debug] do_bend final result: %{variant: :leaf}
11:56:06.159 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.159 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.159 [debug] Executing bend with initial: 8
11:56:06.159 [debug] Executing fun with value: 8
11:56:06.159 [debug] Evaluating bend block with value: 8
11:56:06.159 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.159 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.159 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.159 [debug] Executing bend with initial: 9
11:56:06.159 [debug] Executing fun with value: 9
11:56:06.159 [debug] Evaluating bend block with value: 9
11:56:06.159 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.159 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.159 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.159 [debug] Executing bend with initial: 10
11:56:06.159 [debug] Executing fun with value: 10
11:56:06.159 [debug] Evaluating bend block with value: 10
11:56:06.159 [debug] Block returned: %{variant: :leaf}
11:56:06.159 [debug] Fun returned result: %{variant: :leaf}
11:56:06.159 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.159 [debug] do_bend final result: %{variant: :leaf}
11:56:06.159 [debug] Executing bend with initial: 10
11:56:06.159 [debug] Executing fun with value: 10
11:56:06.159 [debug] Evaluating bend block with value: 10
11:56:06.159 [debug] Block returned: %{variant: :leaf}
11:56:06.159 [debug] Fun returned result: %{variant: :leaf}
11:56:06.159 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.159 [debug] do_bend final result: %{variant: :leaf}
11:56:06.159 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.159 [debug] Executing bend with initial: 9
11:56:06.159 [debug] Executing fun with value: 9
11:56:06.159 [debug] Evaluating bend block with value: 9
11:56:06.159 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.159 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.159 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.159 [debug] Executing bend with initial: 10
11:56:06.159 [debug] Executing fun with value: 10
11:56:06.159 [debug] Evaluating bend block with value: 10
11:56:06.159 [debug] Block returned: %{variant: :leaf}
11:56:06.159 [debug] Fun returned result: %{variant: :leaf}
11:56:06.159 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.159 [debug] do_bend final result: %{variant: :leaf}
11:56:06.159 [debug] Executing bend with initial: 10
11:56:06.159 [debug] Executing fun with value: 10
11:56:06.159 [debug] Evaluating bend block with value: 10
11:56:06.159 [debug] Block returned: %{variant: :leaf}
11:56:06.159 [debug] Fun returned result: %{variant: :leaf}
11:56:06.159 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.159 [debug] do_bend final result: %{variant: :leaf}
11:56:06.159 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.159 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.159 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.159 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.160 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.160 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.160 [debug] Executing bend with initial: 4
11:56:06.160 [debug] Executing fun with value: 4
11:56:06.160 [debug] Evaluating bend block with value: 4
11:56:06.160 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.160 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.160 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.160 [debug] Executing bend with initial: 5
11:56:06.160 [debug] Executing fun with value: 5
11:56:06.160 [debug] Evaluating bend block with value: 5
11:56:06.160 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.160 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.161 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.161 [debug] Executing bend with initial: 6
11:56:06.161 [debug] Executing fun with value: 6
11:56:06.161 [debug] Evaluating bend block with value: 6
11:56:06.161 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.161 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.161 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.161 [debug] Executing bend with initial: 7
11:56:06.161 [debug] Executing fun with value: 7
11:56:06.161 [debug] Evaluating bend block with value: 7
11:56:06.161 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.161 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.161 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.161 [debug] Executing bend with initial: 8
11:56:06.161 [debug] Executing fun with value: 8
11:56:06.161 [debug] Evaluating bend block with value: 8
11:56:06.161 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.161 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.161 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.161 [debug] Executing bend with initial: 9
11:56:06.161 [debug] Executing fun with value: 9
11:56:06.161 [debug] Evaluating bend block with value: 9
11:56:06.161 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.161 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.161 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.161 [debug] Executing bend with initial: 10
11:56:06.161 [debug] Executing fun with value: 10
11:56:06.161 [debug] Evaluating bend block with value: 10
11:56:06.161 [debug] Block returned: %{variant: :leaf}
11:56:06.161 [debug] Fun returned result: %{variant: :leaf}
11:56:06.161 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.161 [debug] do_bend final result: %{variant: :leaf}
11:56:06.161 [debug] Executing bend with initial: 10
11:56:06.161 [debug] Executing fun with value: 10
11:56:06.161 [debug] Evaluating bend block with value: 10
11:56:06.161 [debug] Block returned: %{variant: :leaf}
11:56:06.161 [debug] Fun returned result: %{variant: :leaf}
11:56:06.161 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.161 [debug] do_bend final result: %{variant: :leaf}
11:56:06.161 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.161 [debug] Executing bend with initial: 9
11:56:06.161 [debug] Executing fun with value: 9
11:56:06.161 [debug] Evaluating bend block with value: 9
11:56:06.161 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.161 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.161 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.161 [debug] Executing bend with initial: 10
11:56:06.161 [debug] Executing fun with value: 10
11:56:06.161 [debug] Evaluating bend block with value: 10
11:56:06.161 [debug] Block returned: %{variant: :leaf}
11:56:06.161 [debug] Fun returned result: %{variant: :leaf}
11:56:06.161 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.161 [debug] do_bend final result: %{variant: :leaf}
11:56:06.161 [debug] Executing bend with initial: 10
11:56:06.161 [debug] Executing fun with value: 10
11:56:06.161 [debug] Evaluating bend block with value: 10
11:56:06.161 [debug] Block returned: %{variant: :leaf}
11:56:06.161 [debug] Fun returned result: %{variant: :leaf}
11:56:06.161 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.161 [debug] do_bend final result: %{variant: :leaf}
11:56:06.161 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.161 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.161 [debug] Executing bend with initial: 8
11:56:06.161 [debug] Executing fun with value: 8
11:56:06.161 [debug] Evaluating bend block with value: 8
11:56:06.161 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.161 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.161 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.161 [debug] Executing bend with initial: 9
11:56:06.161 [debug] Executing fun with value: 9
11:56:06.161 [debug] Evaluating bend block with value: 9
11:56:06.161 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.161 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.161 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.162 [debug] Executing bend with initial: 10
11:56:06.162 [debug] Executing fun with value: 10
11:56:06.162 [debug] Evaluating bend block with value: 10
11:56:06.162 [debug] Block returned: %{variant: :leaf}
11:56:06.162 [debug] Fun returned result: %{variant: :leaf}
11:56:06.162 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.162 [debug] do_bend final result: %{variant: :leaf}
11:56:06.162 [debug] Executing bend with initial: 10
11:56:06.162 [debug] Executing fun with value: 10
11:56:06.162 [debug] Evaluating bend block with value: 10
11:56:06.162 [debug] Block returned: %{variant: :leaf}
11:56:06.162 [debug] Fun returned result: %{variant: :leaf}
11:56:06.162 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.162 [debug] do_bend final result: %{variant: :leaf}
11:56:06.162 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.162 [debug] Executing bend with initial: 9
11:56:06.162 [debug] Executing fun with value: 9
11:56:06.162 [debug] Evaluating bend block with value: 9
11:56:06.162 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.162 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.162 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.162 [debug] Executing bend with initial: 10
11:56:06.162 [debug] Executing fun with value: 10
11:56:06.162 [debug] Evaluating bend block with value: 10
11:56:06.162 [debug] Block returned: %{variant: :leaf}
11:56:06.162 [debug] Fun returned result: %{variant: :leaf}
11:56:06.162 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.162 [debug] do_bend final result: %{variant: :leaf}
11:56:06.162 [debug] Executing bend with initial: 10
11:56:06.162 [debug] Executing fun with value: 10
11:56:06.162 [debug] Evaluating bend block with value: 10
11:56:06.162 [debug] Block returned: %{variant: :leaf}
11:56:06.162 [debug] Fun returned result: %{variant: :leaf}
11:56:06.162 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.162 [debug] do_bend final result: %{variant: :leaf}
11:56:06.162 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.162 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.162 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.162 [debug] Executing bend with initial: 7
11:56:06.162 [debug] Executing fun with value: 7
11:56:06.162 [debug] Evaluating bend block with value: 7
11:56:06.162 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.162 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.162 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.162 [debug] Executing bend with initial: 8
11:56:06.162 [debug] Executing fun with value: 8
11:56:06.162 [debug] Evaluating bend block with value: 8
11:56:06.162 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.162 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.162 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.162 [debug] Executing bend with initial: 9
11:56:06.162 [debug] Executing fun with value: 9
11:56:06.162 [debug] Evaluating bend block with value: 9
11:56:06.163 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.163 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.163 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.163 [debug] Executing bend with initial: 10
11:56:06.163 [debug] Executing fun with value: 10
11:56:06.163 [debug] Evaluating bend block with value: 10
11:56:06.163 [debug] Block returned: %{variant: :leaf}
11:56:06.163 [debug] Fun returned result: %{variant: :leaf}
11:56:06.163 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.163 [debug] do_bend final result: %{variant: :leaf}
11:56:06.163 [debug] Executing bend with initial: 10
11:56:06.163 [debug] Executing fun with value: 10
11:56:06.163 [debug] Evaluating bend block with value: 10
11:56:06.163 [debug] Block returned: %{variant: :leaf}
11:56:06.163 [debug] Fun returned result: %{variant: :leaf}
11:56:06.163 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.163 [debug] do_bend final result: %{variant: :leaf}
11:56:06.163 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.163 [debug] Executing bend with initial: 9
11:56:06.163 [debug] Executing fun with value: 9
11:56:06.163 [debug] Evaluating bend block with value: 9
11:56:06.163 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.163 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.163 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.163 [debug] Executing bend with initial: 10
11:56:06.163 [debug] Executing fun with value: 10
11:56:06.163 [debug] Evaluating bend block with value: 10
11:56:06.163 [debug] Block returned: %{variant: :leaf}
11:56:06.163 [debug] Fun returned result: %{variant: :leaf}
11:56:06.163 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.163 [debug] do_bend final result: %{variant: :leaf}
11:56:06.163 [debug] Executing bend with initial: 10
11:56:06.163 [debug] Executing fun with value: 10
11:56:06.163 [debug] Evaluating bend block with value: 10
11:56:06.163 [debug] Block returned: %{variant: :leaf}
11:56:06.163 [debug] Fun returned result: %{variant: :leaf}
11:56:06.163 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.163 [debug] do_bend final result: %{variant: :leaf}
11:56:06.163 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.163 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.163 [debug] Executing bend with initial: 8
11:56:06.163 [debug] Executing fun with value: 8
11:56:06.163 [debug] Evaluating bend block with value: 8
11:56:06.163 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.163 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.163 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.163 [debug] Executing bend with initial: 9
11:56:06.163 [debug] Executing fun with value: 9
11:56:06.163 [debug] Evaluating bend block with value: 9
11:56:06.163 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.163 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.163 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.163 [debug] Executing bend with initial: 10
11:56:06.163 [debug] Executing fun with value: 10
11:56:06.164 [debug] Evaluating bend block with value: 10
11:56:06.164 [debug] Block returned: %{variant: :leaf}
11:56:06.164 [debug] Fun returned result: %{variant: :leaf}
11:56:06.164 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.164 [debug] do_bend final result: %{variant: :leaf}
11:56:06.164 [debug] Executing bend with initial: 10
11:56:06.164 [debug] Executing fun with value: 10
11:56:06.164 [debug] Evaluating bend block with value: 10
11:56:06.164 [debug] Block returned: %{variant: :leaf}
11:56:06.164 [debug] Fun returned result: %{variant: :leaf}
11:56:06.164 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.164 [debug] do_bend final result: %{variant: :leaf}
11:56:06.164 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.164 [debug] Executing bend with initial: 9
11:56:06.164 [debug] Executing fun with value: 9
11:56:06.164 [debug] Evaluating bend block with value: 9
11:56:06.164 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.164 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.164 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.164 [debug] Executing bend with initial: 10
11:56:06.164 [debug] Executing fun with value: 10
11:56:06.164 [debug] Evaluating bend block with value: 10
11:56:06.164 [debug] Block returned: %{variant: :leaf}
11:56:06.164 [debug] Fun returned result: %{variant: :leaf}
11:56:06.164 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.164 [debug] do_bend final result: %{variant: :leaf}
11:56:06.164 [debug] Executing bend with initial: 10
11:56:06.164 [debug] Executing fun with value: 10
11:56:06.164 [debug] Evaluating bend block with value: 10
11:56:06.164 [debug] Block returned: %{variant: :leaf}
11:56:06.164 [debug] Fun returned result: %{variant: :leaf}
11:56:06.164 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.164 [debug] do_bend final result: %{variant: :leaf}
11:56:06.164 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.164 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.164 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.164 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.164 [debug] Executing bend with initial: 6
11:56:06.164 [debug] Executing fun with value: 6
11:56:06.164 [debug] Evaluating bend block with value: 6
11:56:06.164 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.164 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.164 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.164 [debug] Executing bend with initial: 7
11:56:06.164 [debug] Executing fun with value: 7
11:56:06.164 [debug] Evaluating bend block with value: 7
11:56:06.164 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.164 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.164 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.164 [debug] Executing bend with initial: 8
11:56:06.164 [debug] Executing fun with value: 8
11:56:06.164 [debug] Evaluating bend block with value: 8
11:56:06.164 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.164 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.164 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.164 [debug] Executing bend with initial: 9
11:56:06.164 [debug] Executing fun with value: 9
11:56:06.164 [debug] Evaluating bend block with value: 9
11:56:06.164 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.164 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.164 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.164 [debug] Executing bend with initial: 10
11:56:06.164 [debug] Executing fun with value: 10
11:56:06.164 [debug] Evaluating bend block with value: 10
11:56:06.164 [debug] Block returned: %{variant: :leaf}
11:56:06.164 [debug] Fun returned result: %{variant: :leaf}
11:56:06.164 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.164 [debug] do_bend final result: %{variant: :leaf}
11:56:06.164 [debug] Executing bend with initial: 10
11:56:06.164 [debug] Executing fun with value: 10
11:56:06.164 [debug] Evaluating bend block with value: 10
11:56:06.164 [debug] Block returned: %{variant: :leaf}
11:56:06.164 [debug] Fun returned result: %{variant: :leaf}
11:56:06.164 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.164 [debug] do_bend final result: %{variant: :leaf}
11:56:06.164 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.164 [debug] Executing bend with initial: 9
11:56:06.164 [debug] Executing fun with value: 9
11:56:06.164 [debug] Evaluating bend block with value: 9
11:56:06.164 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.165 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.165 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.165 [debug] Executing bend with initial: 10
11:56:06.165 [debug] Executing fun with value: 10
11:56:06.165 [debug] Evaluating bend block with value: 10
11:56:06.165 [debug] Block returned: %{variant: :leaf}
11:56:06.165 [debug] Fun returned result: %{variant: :leaf}
11:56:06.165 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.165 [debug] do_bend final result: %{variant: :leaf}
11:56:06.165 [debug] Executing bend with initial: 10
11:56:06.165 [debug] Executing fun with value: 10
11:56:06.165 [debug] Evaluating bend block with value: 10
11:56:06.165 [debug] Block returned: %{variant: :leaf}
11:56:06.165 [debug] Fun returned result: %{variant: :leaf}
11:56:06.165 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.165 [debug] do_bend final result: %{variant: :leaf}
11:56:06.165 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.165 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.165 [debug] Executing bend with initial: 8
11:56:06.165 [debug] Executing fun with value: 8
11:56:06.165 [debug] Evaluating bend block with value: 8
11:56:06.165 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.165 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.165 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.165 [debug] Executing bend with initial: 9
11:56:06.165 [debug] Executing fun with value: 9
11:56:06.165 [debug] Evaluating bend block with value: 9
11:56:06.165 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.165 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.165 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.165 [debug] Executing bend with initial: 10
11:56:06.165 [debug] Executing fun with value: 10
11:56:06.165 [debug] Evaluating bend block with value: 10
11:56:06.165 [debug] Block returned: %{variant: :leaf}
11:56:06.165 [debug] Fun returned result: %{variant: :leaf}
11:56:06.165 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.165 [debug] do_bend final result: %{variant: :leaf}
11:56:06.165 [debug] Executing bend with initial: 10
11:56:06.165 [debug] Executing fun with value: 10
11:56:06.165 [debug] Evaluating bend block with value: 10
11:56:06.165 [debug] Block returned: %{variant: :leaf}
11:56:06.165 [debug] Fun returned result: %{variant: :leaf}
11:56:06.165 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.165 [debug] do_bend final result: %{variant: :leaf}
11:56:06.165 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.165 [debug] Executing bend with initial: 9
11:56:06.165 [debug] Executing fun with value: 9
11:56:06.165 [debug] Evaluating bend block with value: 9
11:56:06.165 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.165 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.165 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.165 [debug] Executing bend with initial: 10
11:56:06.165 [debug] Executing fun with value: 10
11:56:06.165 [debug] Evaluating bend block with value: 10
11:56:06.165 [debug] Block returned: %{variant: :leaf}
11:56:06.165 [debug] Fun returned result: %{variant: :leaf}
11:56:06.165 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.165 [debug] do_bend final result: %{variant: :leaf}
11:56:06.165 [debug] Executing bend with initial: 10
11:56:06.165 [debug] Executing fun with value: 10
11:56:06.165 [debug] Evaluating bend block with value: 10
11:56:06.165 [debug] Block returned: %{variant: :leaf}
11:56:06.165 [debug] Fun returned result: %{variant: :leaf}
11:56:06.165 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.165 [debug] do_bend final result: %{variant: :leaf}
11:56:06.165 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.165 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.165 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.165 [debug] Executing bend with initial: 7
11:56:06.165 [debug] Executing fun with value: 7
11:56:06.165 [debug] Evaluating bend block with value: 7
11:56:06.165 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.165 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.165 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.165 [debug] Executing bend with initial: 8
11:56:06.165 [debug] Executing fun with value: 8
11:56:06.165 [debug] Evaluating bend block with value: 8
11:56:06.165 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.166 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.166 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.166 [debug] Executing bend with initial: 9
11:56:06.166 [debug] Executing fun with value: 9
11:56:06.166 [debug] Evaluating bend block with value: 9
11:56:06.166 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.166 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.166 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.166 [debug] Executing bend with initial: 10
11:56:06.166 [debug] Executing fun with value: 10
11:56:06.166 [debug] Evaluating bend block with value: 10
11:56:06.166 [debug] Block returned: %{variant: :leaf}
11:56:06.166 [debug] Fun returned result: %{variant: :leaf}
11:56:06.166 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.166 [debug] do_bend final result: %{variant: :leaf}
11:56:06.166 [debug] Executing bend with initial: 10
11:56:06.166 [debug] Executing fun with value: 10
11:56:06.166 [debug] Evaluating bend block with value: 10
11:56:06.166 [debug] Block returned: %{variant: :leaf}
11:56:06.166 [debug] Fun returned result: %{variant: :leaf}
11:56:06.166 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.166 [debug] do_bend final result: %{variant: :leaf}
11:56:06.166 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.166 [debug] Executing bend with initial: 9
11:56:06.166 [debug] Executing fun with value: 9
11:56:06.166 [debug] Evaluating bend block with value: 9
11:56:06.166 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.166 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.166 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.166 [debug] Executing bend with initial: 10
11:56:06.166 [debug] Executing fun with value: 10
11:56:06.166 [debug] Evaluating bend block with value: 10
11:56:06.166 [debug] Block returned: %{variant: :leaf}
11:56:06.166 [debug] Fun returned result: %{variant: :leaf}
11:56:06.166 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.166 [debug] do_bend final result: %{variant: :leaf}
11:56:06.166 [debug] Executing bend with initial: 10
11:56:06.166 [debug] Executing fun with value: 10
11:56:06.166 [debug] Evaluating bend block with value: 10
11:56:06.166 [debug] Block returned: %{variant: :leaf}
11:56:06.166 [debug] Fun returned result: %{variant: :leaf}
11:56:06.166 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.166 [debug] do_bend final result: %{variant: :leaf}
11:56:06.166 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.166 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.166 [debug] Executing bend with initial: 8
11:56:06.166 [debug] Executing fun with value: 8
11:56:06.166 [debug] Evaluating bend block with value: 8
11:56:06.166 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.166 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.166 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.166 [debug] Executing bend with initial: 9
11:56:06.166 [debug] Executing fun with value: 9
11:56:06.166 [debug] Evaluating bend block with value: 9
11:56:06.166 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.166 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.166 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.166 [debug] Executing bend with initial: 10
11:56:06.166 [debug] Executing fun with value: 10
11:56:06.166 [debug] Evaluating bend block with value: 10
11:56:06.166 [debug] Block returned: %{variant: :leaf}
11:56:06.166 [debug] Fun returned result: %{variant: :leaf}
11:56:06.166 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.166 [debug] do_bend final result: %{variant: :leaf}
11:56:06.166 [debug] Executing bend with initial: 10
11:56:06.166 [debug] Executing fun with value: 10
11:56:06.166 [debug] Evaluating bend block with value: 10
11:56:06.166 [debug] Block returned: %{variant: :leaf}
11:56:06.166 [debug] Fun returned result: %{variant: :leaf}
11:56:06.166 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.166 [debug] do_bend final result: %{variant: :leaf}
11:56:06.166 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.166 [debug] Executing bend with initial: 9
11:56:06.166 [debug] Executing fun with value: 9
11:56:06.166 [debug] Evaluating bend block with value: 9
11:56:06.166 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.166 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.166 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.166 [debug] Executing bend with initial: 10
11:56:06.166 [debug] Executing fun with value: 10
11:56:06.166 [debug] Evaluating bend block with value: 10
11:56:06.166 [debug] Block returned: %{variant: :leaf}
11:56:06.166 [debug] Fun returned result: %{variant: :leaf}
11:56:06.166 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.166 [debug] do_bend final result: %{variant: :leaf}
11:56:06.166 [debug] Executing bend with initial: 10
11:56:06.166 [debug] Executing fun with value: 10
11:56:06.166 [debug] Evaluating bend block with value: 10
11:56:06.166 [debug] Block returned: %{variant: :leaf}
11:56:06.166 [debug] Fun returned result: %{variant: :leaf}
11:56:06.166 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.166 [debug] do_bend final result: %{variant: :leaf}
11:56:06.166 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.166 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.166 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.167 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.167 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.167 [debug] Executing bend with initial: 5
11:56:06.167 [debug] Executing fun with value: 5
11:56:06.167 [debug] Evaluating bend block with value: 5
11:56:06.167 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.167 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.167 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.167 [debug] Executing bend with initial: 6
11:56:06.167 [debug] Executing fun with value: 6
11:56:06.167 [debug] Evaluating bend block with value: 6
11:56:06.167 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.167 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.167 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.167 [debug] Executing bend with initial: 7
11:56:06.167 [debug] Executing fun with value: 7
11:56:06.167 [debug] Evaluating bend block with value: 7
11:56:06.167 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.167 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.167 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.167 [debug] Executing bend with initial: 8
11:56:06.167 [debug] Executing fun with value: 8
11:56:06.167 [debug] Evaluating bend block with value: 8
11:56:06.167 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.167 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.167 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.167 [debug] Executing bend with initial: 9
11:56:06.167 [debug] Executing fun with value: 9
11:56:06.167 [debug] Evaluating bend block with value: 9
11:56:06.167 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.167 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.167 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.167 [debug] Executing bend with initial: 10
11:56:06.167 [debug] Executing fun with value: 10
11:56:06.167 [debug] Evaluating bend block with value: 10
11:56:06.167 [debug] Block returned: %{variant: :leaf}
11:56:06.167 [debug] Fun returned result: %{variant: :leaf}
11:56:06.167 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.167 [debug] do_bend final result: %{variant: :leaf}
11:56:06.167 [debug] Executing bend with initial: 10
11:56:06.167 [debug] Executing fun with value: 10
11:56:06.167 [debug] Evaluating bend block with value: 10
11:56:06.167 [debug] Block returned: %{variant: :leaf}
11:56:06.167 [debug] Fun returned result: %{variant: :leaf}
11:56:06.167 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.167 [debug] do_bend final result: %{variant: :leaf}
11:56:06.167 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.167 [debug] Executing bend with initial: 9
11:56:06.167 [debug] Executing fun with value: 9
11:56:06.167 [debug] Evaluating bend block with value: 9
11:56:06.167 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.167 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.167 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.167 [debug] Executing bend with initial: 10
11:56:06.167 [debug] Executing fun with value: 10
11:56:06.167 [debug] Evaluating bend block with value: 10
11:56:06.167 [debug] Block returned: %{variant: :leaf}
11:56:06.167 [debug] Fun returned result: %{variant: :leaf}
11:56:06.167 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.167 [debug] do_bend final result: %{variant: :leaf}
11:56:06.167 [debug] Executing bend with initial: 10
11:56:06.167 [debug] Executing fun with value: 10
11:56:06.167 [debug] Evaluating bend block with value: 10
11:56:06.167 [debug] Block returned: %{variant: :leaf}
11:56:06.167 [debug] Fun returned result: %{variant: :leaf}
11:56:06.167 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.167 [debug] do_bend final result: %{variant: :leaf}
11:56:06.167 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.167 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.167 [debug] Executing bend with initial: 8
11:56:06.167 [debug] Executing fun with value: 8
11:56:06.167 [debug] Evaluating bend block with value: 8
11:56:06.167 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.168 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.168 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.168 [debug] Executing bend with initial: 9
11:56:06.168 [debug] Executing fun with value: 9
11:56:06.168 [debug] Evaluating bend block with value: 9
11:56:06.168 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.168 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.168 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.168 [debug] Executing bend with initial: 10
11:56:06.168 [debug] Executing fun with value: 10
11:56:06.168 [debug] Evaluating bend block with value: 10
11:56:06.168 [debug] Block returned: %{variant: :leaf}
11:56:06.168 [debug] Fun returned result: %{variant: :leaf}
11:56:06.168 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.168 [debug] do_bend final result: %{variant: :leaf}
11:56:06.168 [debug] Executing bend with initial: 10
11:56:06.168 [debug] Executing fun with value: 10
11:56:06.168 [debug] Evaluating bend block with value: 10
11:56:06.168 [debug] Block returned: %{variant: :leaf}
11:56:06.168 [debug] Fun returned result: %{variant: :leaf}
11:56:06.168 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.168 [debug] do_bend final result: %{variant: :leaf}
11:56:06.168 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.168 [debug] Executing bend with initial: 9
11:56:06.168 [debug] Executing fun with value: 9
11:56:06.168 [debug] Evaluating bend block with value: 9
11:56:06.168 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.168 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.168 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.168 [debug] Executing bend with initial: 10
11:56:06.168 [debug] Executing fun with value: 10
11:56:06.168 [debug] Evaluating bend block with value: 10
11:56:06.168 [debug] Block returned: %{variant: :leaf}
11:56:06.168 [debug] Fun returned result: %{variant: :leaf}
11:56:06.168 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.168 [debug] do_bend final result: %{variant: :leaf}
11:56:06.168 [debug] Executing bend with initial: 10
11:56:06.168 [debug] Executing fun with value: 10
11:56:06.168 [debug] Evaluating bend block with value: 10
11:56:06.168 [debug] Block returned: %{variant: :leaf}
11:56:06.168 [debug] Fun returned result: %{variant: :leaf}
11:56:06.168 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.168 [debug] do_bend final result: %{variant: :leaf}
11:56:06.168 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.168 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.168 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.168 [debug] Executing bend with initial: 7
11:56:06.168 [debug] Executing fun with value: 7
11:56:06.168 [debug] Evaluating bend block with value: 7
11:56:06.168 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.168 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.168 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.168 [debug] Executing bend with initial: 8
11:56:06.168 [debug] Executing fun with value: 8
11:56:06.168 [debug] Evaluating bend block with value: 8
11:56:06.168 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.168 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.168 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.168 [debug] Executing bend with initial: 9
11:56:06.168 [debug] Executing fun with value: 9
11:56:06.168 [debug] Evaluating bend block with value: 9
11:56:06.168 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.168 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.168 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.168 [debug] Executing bend with initial: 10
11:56:06.168 [debug] Executing fun with value: 10
11:56:06.168 [debug] Evaluating bend block with value: 10
11:56:06.168 [debug] Block returned: %{variant: :leaf}
11:56:06.168 [debug] Fun returned result: %{variant: :leaf}
11:56:06.168 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.168 [debug] do_bend final result: %{variant: :leaf}
11:56:06.168 [debug] Executing bend with initial: 10
11:56:06.168 [debug] Executing fun with value: 10
11:56:06.168 [debug] Evaluating bend block with value: 10
11:56:06.168 [debug] Block returned: %{variant: :leaf}
11:56:06.168 [debug] Fun returned result: %{variant: :leaf}
11:56:06.168 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.168 [debug] do_bend final result: %{variant: :leaf}
11:56:06.168 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.168 [debug] Executing bend with initial: 9
11:56:06.168 [debug] Executing fun with value: 9
11:56:06.168 [debug] Evaluating bend block with value: 9
11:56:06.169 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.169 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.169 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.169 [debug] Executing bend with initial: 10
11:56:06.169 [debug] Executing fun with value: 10
11:56:06.169 [debug] Evaluating bend block with value: 10
11:56:06.169 [debug] Block returned: %{variant: :leaf}
11:56:06.169 [debug] Fun returned result: %{variant: :leaf}
11:56:06.169 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.169 [debug] do_bend final result: %{variant: :leaf}
11:56:06.169 [debug] Executing bend with initial: 10
11:56:06.169 [debug] Executing fun with value: 10
11:56:06.169 [debug] Evaluating bend block with value: 10
11:56:06.169 [debug] Block returned: %{variant: :leaf}
11:56:06.169 [debug] Fun returned result: %{variant: :leaf}
11:56:06.169 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.169 [debug] do_bend final result: %{variant: :leaf}
11:56:06.169 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.169 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.169 [debug] Executing bend with initial: 8
11:56:06.169 [debug] Executing fun with value: 8
11:56:06.169 [debug] Evaluating bend block with value: 8
11:56:06.169 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.169 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.169 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.169 [debug] Executing bend with initial: 9
11:56:06.169 [debug] Executing fun with value: 9
11:56:06.169 [debug] Evaluating bend block with value: 9
11:56:06.169 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.169 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.169 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.169 [debug] Executing bend with initial: 10
11:56:06.169 [debug] Executing fun with value: 10
11:56:06.169 [debug] Evaluating bend block with value: 10
11:56:06.169 [debug] Block returned: %{variant: :leaf}
11:56:06.169 [debug] Fun returned result: %{variant: :leaf}
11:56:06.169 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.169 [debug] do_bend final result: %{variant: :leaf}
11:56:06.169 [debug] Executing bend with initial: 10
11:56:06.169 [debug] Executing fun with value: 10
11:56:06.169 [debug] Evaluating bend block with value: 10
11:56:06.169 [debug] Block returned: %{variant: :leaf}
11:56:06.169 [debug] Fun returned result: %{variant: :leaf}
11:56:06.169 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.169 [debug] do_bend final result: %{variant: :leaf}
11:56:06.169 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.169 [debug] Executing bend with initial: 9
11:56:06.169 [debug] Executing fun with value: 9
11:56:06.169 [debug] Evaluating bend block with value: 9
11:56:06.169 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.169 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.169 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.169 [debug] Executing bend with initial: 10
11:56:06.169 [debug] Executing fun with value: 10
11:56:06.169 [debug] Evaluating bend block with value: 10
11:56:06.169 [debug] Block returned: %{variant: :leaf}
11:56:06.169 [debug] Fun returned result: %{variant: :leaf}
11:56:06.169 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.169 [debug] do_bend final result: %{variant: :leaf}
11:56:06.169 [debug] Executing bend with initial: 10
11:56:06.169 [debug] Executing fun with value: 10
11:56:06.169 [debug] Evaluating bend block with value: 10
11:56:06.169 [debug] Block returned: %{variant: :leaf}
11:56:06.169 [debug] Fun returned result: %{variant: :leaf}
11:56:06.169 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.169 [debug] do_bend final result: %{variant: :leaf}
11:56:06.169 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.169 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.170 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.170 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.170 [debug] Executing bend with initial: 6
11:56:06.170 [debug] Executing fun with value: 6
11:56:06.170 [debug] Evaluating bend block with value: 6
11:56:06.170 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.170 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.170 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.170 [debug] Executing bend with initial: 7
11:56:06.170 [debug] Executing fun with value: 7
11:56:06.170 [debug] Evaluating bend block with value: 7
11:56:06.170 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.170 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.170 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.170 [debug] Executing bend with initial: 8
11:56:06.170 [debug] Executing fun with value: 8
11:56:06.170 [debug] Evaluating bend block with value: 8
11:56:06.170 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.170 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.170 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.170 [debug] Executing bend with initial: 9
11:56:06.170 [debug] Executing fun with value: 9
11:56:06.170 [debug] Evaluating bend block with value: 9
11:56:06.170 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.170 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.170 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.170 [debug] Executing bend with initial: 10
11:56:06.170 [debug] Executing fun with value: 10
11:56:06.170 [debug] Evaluating bend block with value: 10
11:56:06.170 [debug] Block returned: %{variant: :leaf}
11:56:06.170 [debug] Fun returned result: %{variant: :leaf}
11:56:06.170 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.170 [debug] do_bend final result: %{variant: :leaf}
11:56:06.170 [debug] Executing bend with initial: 10
11:56:06.170 [debug] Executing fun with value: 10
11:56:06.170 [debug] Evaluating bend block with value: 10
11:56:06.170 [debug] Block returned: %{variant: :leaf}
11:56:06.170 [debug] Fun returned result: %{variant: :leaf}
11:56:06.170 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.170 [debug] do_bend final result: %{variant: :leaf}
11:56:06.170 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.170 [debug] Executing bend with initial: 9
11:56:06.170 [debug] Executing fun with value: 9
11:56:06.170 [debug] Evaluating bend block with value: 9
11:56:06.170 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.170 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.170 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.170 [debug] Executing bend with initial: 10
11:56:06.170 [debug] Executing fun with value: 10
11:56:06.170 [debug] Evaluating bend block with value: 10
11:56:06.170 [debug] Block returned: %{variant: :leaf}
11:56:06.170 [debug] Fun returned result: %{variant: :leaf}
11:56:06.170 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.170 [debug] do_bend final result: %{variant: :leaf}
11:56:06.170 [debug] Executing bend with initial: 10
11:56:06.170 [debug] Executing fun with value: 10
11:56:06.170 [debug] Evaluating bend block with value: 10
11:56:06.170 [debug] Block returned: %{variant: :leaf}
11:56:06.170 [debug] Fun returned result: %{variant: :leaf}
11:56:06.170 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.170 [debug] do_bend final result: %{variant: :leaf}
11:56:06.170 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.170 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.170 [debug] Executing bend with initial: 8
11:56:06.171 [debug] Executing fun with value: 8
11:56:06.171 [debug] Evaluating bend block with value: 8
11:56:06.171 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.171 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.171 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.171 [debug] Executing bend with initial: 9
11:56:06.171 [debug] Executing fun with value: 9
11:56:06.171 [debug] Evaluating bend block with value: 9
11:56:06.171 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.171 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.171 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.171 [debug] Executing bend with initial: 10
11:56:06.171 [debug] Executing fun with value: 10
11:56:06.171 [debug] Evaluating bend block with value: 10
11:56:06.171 [debug] Block returned: %{variant: :leaf}
11:56:06.171 [debug] Fun returned result: %{variant: :leaf}
11:56:06.171 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.171 [debug] do_bend final result: %{variant: :leaf}
11:56:06.171 [debug] Executing bend with initial: 10
11:56:06.171 [debug] Executing fun with value: 10
11:56:06.171 [debug] Evaluating bend block with value: 10
11:56:06.171 [debug] Block returned: %{variant: :leaf}
11:56:06.171 [debug] Fun returned result: %{variant: :leaf}
11:56:06.171 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.171 [debug] do_bend final result: %{variant: :leaf}
11:56:06.171 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.171 [debug] Executing bend with initial: 9
11:56:06.171 [debug] Executing fun with value: 9
11:56:06.171 [debug] Evaluating bend block with value: 9
11:56:06.171 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.171 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.171 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.171 [debug] Executing bend with initial: 10
11:56:06.171 [debug] Executing fun with value: 10
11:56:06.171 [debug] Evaluating bend block with value: 10
11:56:06.171 [debug] Block returned: %{variant: :leaf}
11:56:06.171 [debug] Fun returned result: %{variant: :leaf}
11:56:06.171 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.171 [debug] do_bend final result: %{variant: :leaf}
11:56:06.171 [debug] Executing bend with initial: 10
11:56:06.171 [debug] Executing fun with value: 10
11:56:06.171 [debug] Evaluating bend block with value: 10
11:56:06.171 [debug] Block returned: %{variant: :leaf}
11:56:06.171 [debug] Fun returned result: %{variant: :leaf}
11:56:06.171 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.171 [debug] do_bend final result: %{variant: :leaf}
11:56:06.171 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.171 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.171 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.171 [debug] Executing bend with initial: 7
11:56:06.171 [debug] Executing fun with value: 7
11:56:06.171 [debug] Evaluating bend block with value: 7
11:56:06.171 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.171 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.171 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.171 [debug] Executing bend with initial: 8
11:56:06.171 [debug] Executing fun with value: 8
11:56:06.172 [debug] Evaluating bend block with value: 8
11:56:06.172 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.172 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.172 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.172 [debug] Executing bend with initial: 9
11:56:06.172 [debug] Executing fun with value: 9
11:56:06.172 [debug] Evaluating bend block with value: 9
11:56:06.172 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.172 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.172 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.172 [debug] Executing bend with initial: 10
11:56:06.172 [debug] Executing fun with value: 10
11:56:06.172 [debug] Evaluating bend block with value: 10
11:56:06.172 [debug] Block returned: %{variant: :leaf}
11:56:06.172 [debug] Fun returned result: %{variant: :leaf}
11:56:06.172 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.172 [debug] do_bend final result: %{variant: :leaf}
11:56:06.172 [debug] Executing bend with initial: 10
11:56:06.172 [debug] Executing fun with value: 10
11:56:06.172 [debug] Evaluating bend block with value: 10
11:56:06.172 [debug] Block returned: %{variant: :leaf}
11:56:06.172 [debug] Fun returned result: %{variant: :leaf}
11:56:06.172 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.172 [debug] do_bend final result: %{variant: :leaf}
11:56:06.172 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.172 [debug] Executing bend with initial: 9
11:56:06.172 [debug] Executing fun with value: 9
11:56:06.172 [debug] Evaluating bend block with value: 9
11:56:06.172 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.172 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.172 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.172 [debug] Executing bend with initial: 10
11:56:06.172 [debug] Executing fun with value: 10
11:56:06.172 [debug] Evaluating bend block with value: 10
11:56:06.172 [debug] Block returned: %{variant: :leaf}
11:56:06.172 [debug] Fun returned result: %{variant: :leaf}
11:56:06.172 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.172 [debug] do_bend final result: %{variant: :leaf}
11:56:06.172 [debug] Executing bend with initial: 10
11:56:06.172 [debug] Executing fun with value: 10
11:56:06.172 [debug] Evaluating bend block with value: 10
11:56:06.172 [debug] Block returned: %{variant: :leaf}
11:56:06.172 [debug] Fun returned result: %{variant: :leaf}
11:56:06.172 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.172 [debug] do_bend final result: %{variant: :leaf}
11:56:06.172 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.172 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.172 [debug] Executing bend with initial: 8
11:56:06.172 [debug] Executing fun with value: 8
11:56:06.172 [debug] Evaluating bend block with value: 8
11:56:06.172 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.172 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.172 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.172 [debug] Executing bend with initial: 9
11:56:06.172 [debug] Executing fun with value: 9
11:56:06.172 [debug] Evaluating bend block with value: 9
11:56:06.172 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.172 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.172 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.172 [debug] Executing bend with initial: 10
11:56:06.172 [debug] Executing fun with value: 10
11:56:06.172 [debug] Evaluating bend block with value: 10
11:56:06.172 [debug] Block returned: %{variant: :leaf}
11:56:06.172 [debug] Fun returned result: %{variant: :leaf}
11:56:06.172 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.172 [debug] do_bend final result: %{variant: :leaf}
11:56:06.172 [debug] Executing bend with initial: 10
11:56:06.172 [debug] Executing fun with value: 10
11:56:06.173 [debug] Evaluating bend block with value: 10
11:56:06.173 [debug] Block returned: %{variant: :leaf}
11:56:06.173 [debug] Fun returned result: %{variant: :leaf}
11:56:06.173 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.173 [debug] do_bend final result: %{variant: :leaf}
11:56:06.173 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.173 [debug] Executing bend with initial: 9
11:56:06.173 [debug] Executing fun with value: 9
11:56:06.173 [debug] Evaluating bend block with value: 9
11:56:06.173 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.173 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.173 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.173 [debug] Executing bend with initial: 10
11:56:06.173 [debug] Executing fun with value: 10
11:56:06.173 [debug] Evaluating bend block with value: 10
11:56:06.173 [debug] Block returned: %{variant: :leaf}
11:56:06.173 [debug] Fun returned result: %{variant: :leaf}
11:56:06.173 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.173 [debug] do_bend final result: %{variant: :leaf}
11:56:06.173 [debug] Executing bend with initial: 10
11:56:06.173 [debug] Executing fun with value: 10
11:56:06.173 [debug] Evaluating bend block with value: 10
11:56:06.173 [debug] Block returned: %{variant: :leaf}
11:56:06.173 [debug] Fun returned result: %{variant: :leaf}
11:56:06.173 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.173 [debug] do_bend final result: %{variant: :leaf}
11:56:06.173 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.173 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.173 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.173 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.174 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.174 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.176 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.179 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, (truncated)
11:56:06.183 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, (truncated)
11:56:06.184 [debug] Executing bend with initial: 1
11:56:06.184 [debug] Executing fun with value: 1
11:56:06.184 [debug] Evaluating bend block with value: 1
11:56:06.184 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}
11:56:06.184 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}
11:56:06.184 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}
11:56:06.184 [debug] Executing bend with initial: 2
11:56:06.184 [debug] Executing fun with value: 2
11:56:06.184 [debug] Evaluating bend block with value: 2
11:56:06.184 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:06.184 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:06.184 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:06.184 [debug] Executing bend with initial: 3
11:56:06.184 [debug] Executing fun with value: 3
11:56:06.184 [debug] Evaluating bend block with value: 3
11:56:06.184 [debug] Block returned: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.184 [debug] Fun returned result: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.184 [debug] Processing constructed value: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.184 [debug] Executing bend with initial: 4
11:56:06.184 [debug] Executing fun with value: 4
11:56:06.184 [debug] Evaluating bend block with value: 4
11:56:06.184 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.184 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.184 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.184 [debug] Executing bend with initial: 5
11:56:06.184 [debug] Executing fun with value: 5
11:56:06.184 [debug] Evaluating bend block with value: 5
11:56:06.184 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.184 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.184 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.184 [debug] Executing bend with initial: 6
11:56:06.184 [debug] Executing fun with value: 6
11:56:06.184 [debug] Evaluating bend block with value: 6
11:56:06.184 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.184 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.184 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.184 [debug] Executing bend with initial: 7
11:56:06.184 [debug] Executing fun with value: 7
11:56:06.184 [debug] Evaluating bend block with value: 7
11:56:06.184 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.184 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.184 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.184 [debug] Executing bend with initial: 8
11:56:06.184 [debug] Executing fun with value: 8
11:56:06.184 [debug] Evaluating bend block with value: 8
11:56:06.184 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.184 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.184 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.184 [debug] Executing bend with initial: 9
11:56:06.184 [debug] Executing fun with value: 9
11:56:06.184 [debug] Evaluating bend block with value: 9
11:56:06.184 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.184 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.184 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.184 [debug] Executing bend with initial: 10
11:56:06.184 [debug] Executing fun with value: 10
11:56:06.184 [debug] Evaluating bend block with value: 10
11:56:06.184 [debug] Block returned: %{variant: :leaf}
11:56:06.184 [debug] Fun returned result: %{variant: :leaf}
11:56:06.184 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.184 [debug] do_bend final result: %{variant: :leaf}
11:56:06.184 [debug] Executing bend with initial: 10
11:56:06.184 [debug] Executing fun with value: 10
11:56:06.184 [debug] Evaluating bend block with value: 10
11:56:06.184 [debug] Block returned: %{variant: :leaf}
11:56:06.184 [debug] Fun returned result: %{variant: :leaf}
11:56:06.184 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.184 [debug] do_bend final result: %{variant: :leaf}
11:56:06.184 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.184 [debug] Executing bend with initial: 9
11:56:06.184 [debug] Executing fun with value: 9
11:56:06.184 [debug] Evaluating bend block with value: 9
11:56:06.184 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.184 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.184 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.184 [debug] Executing bend with initial: 10
11:56:06.184 [debug] Executing fun with value: 10
11:56:06.184 [debug] Evaluating bend block with value: 10
11:56:06.184 [debug] Block returned: %{variant: :leaf}
11:56:06.184 [debug] Fun returned result: %{variant: :leaf}
11:56:06.184 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.184 [debug] do_bend final result: %{variant: :leaf}
11:56:06.184 [debug] Executing bend with initial: 10
11:56:06.184 [debug] Executing fun with value: 10
11:56:06.184 [debug] Evaluating bend block with value: 10
11:56:06.184 [debug] Block returned: %{variant: :leaf}
11:56:06.184 [debug] Fun returned result: %{variant: :leaf}
11:56:06.185 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.185 [debug] do_bend final result: %{variant: :leaf}
11:56:06.185 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.185 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.185 [debug] Executing bend with initial: 8
11:56:06.185 [debug] Executing fun with value: 8
11:56:06.185 [debug] Evaluating bend block with value: 8
11:56:06.185 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.185 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.185 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.185 [debug] Executing bend with initial: 9
11:56:06.185 [debug] Executing fun with value: 9
11:56:06.185 [debug] Evaluating bend block with value: 9
11:56:06.185 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.185 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.185 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.185 [debug] Executing bend with initial: 10
11:56:06.185 [debug] Executing fun with value: 10
11:56:06.185 [debug] Evaluating bend block with value: 10
11:56:06.185 [debug] Block returned: %{variant: :leaf}
11:56:06.185 [debug] Fun returned result: %{variant: :leaf}
11:56:06.185 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.185 [debug] do_bend final result: %{variant: :leaf}
11:56:06.185 [debug] Executing bend with initial: 10
11:56:06.185 [debug] Executing fun with value: 10
11:56:06.185 [debug] Evaluating bend block with value: 10
11:56:06.185 [debug] Block returned: %{variant: :leaf}
11:56:06.185 [debug] Fun returned result: %{variant: :leaf}
11:56:06.185 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.185 [debug] do_bend final result: %{variant: :leaf}
11:56:06.185 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.185 [debug] Executing bend with initial: 9
11:56:06.185 [debug] Executing fun with value: 9
11:56:06.185 [debug] Evaluating bend block with value: 9
11:56:06.185 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.185 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.185 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.185 [debug] Executing bend with initial: 10
11:56:06.185 [debug] Executing fun with value: 10
11:56:06.185 [debug] Evaluating bend block with value: 10
11:56:06.185 [debug] Block returned: %{variant: :leaf}
11:56:06.185 [debug] Fun returned result: %{variant: :leaf}
11:56:06.185 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.185 [debug] do_bend final result: %{variant: :leaf}
11:56:06.185 [debug] Executing bend with initial: 10
11:56:06.185 [debug] Executing fun with value: 10
11:56:06.185 [debug] Evaluating bend block with value: 10
11:56:06.185 [debug] Block returned: %{variant: :leaf}
11:56:06.185 [debug] Fun returned result: %{variant: :leaf}
11:56:06.185 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.185 [debug] do_bend final result: %{variant: :leaf}
11:56:06.185 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.185 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.185 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.185 [debug] Executing bend with initial: 7
11:56:06.185 [debug] Executing fun with value: 7
11:56:06.185 [debug] Evaluating bend block with value: 7
11:56:06.185 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.185 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.185 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.185 [debug] Executing bend with initial: 8
11:56:06.185 [debug] Executing fun with value: 8
11:56:06.185 [debug] Evaluating bend block with value: 8
11:56:06.185 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.185 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.186 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.186 [debug] Executing bend with initial: 9
11:56:06.186 [debug] Executing fun with value: 9
11:56:06.186 [debug] Evaluating bend block with value: 9
11:56:06.186 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.186 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.186 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.186 [debug] Executing bend with initial: 10
11:56:06.186 [debug] Executing fun with value: 10
11:56:06.186 [debug] Evaluating bend block with value: 10
11:56:06.186 [debug] Block returned: %{variant: :leaf}
11:56:06.186 [debug] Fun returned result: %{variant: :leaf}
11:56:06.186 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.186 [debug] do_bend final result: %{variant: :leaf}
11:56:06.186 [debug] Executing bend with initial: 10
11:56:06.186 [debug] Executing fun with value: 10
11:56:06.186 [debug] Evaluating bend block with value: 10
11:56:06.186 [debug] Block returned: %{variant: :leaf}
11:56:06.186 [debug] Fun returned result: %{variant: :leaf}
11:56:06.186 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.186 [debug] do_bend final result: %{variant: :leaf}
11:56:06.186 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.186 [debug] Executing bend with initial: 9
11:56:06.186 [debug] Executing fun with value: 9
11:56:06.186 [debug] Evaluating bend block with value: 9
11:56:06.186 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.186 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.186 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.186 [debug] Executing bend with initial: 10
11:56:06.186 [debug] Executing fun with value: 10
11:56:06.186 [debug] Evaluating bend block with value: 10
11:56:06.186 [debug] Block returned: %{variant: :leaf}
11:56:06.186 [debug] Fun returned result: %{variant: :leaf}
11:56:06.186 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.186 [debug] do_bend final result: %{variant: :leaf}
11:56:06.186 [debug] Executing bend with initial: 10
11:56:06.186 [debug] Executing fun with value: 10
11:56:06.186 [debug] Evaluating bend block with value: 10
11:56:06.186 [debug] Block returned: %{variant: :leaf}
11:56:06.186 [debug] Fun returned result: %{variant: :leaf}
11:56:06.186 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.186 [debug] do_bend final result: %{variant: :leaf}
11:56:06.186 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.186 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.186 [debug] Executing bend with initial: 8
11:56:06.186 [debug] Executing fun with value: 8
11:56:06.186 [debug] Evaluating bend block with value: 8
11:56:06.186 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.186 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.186 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.186 [debug] Executing bend with initial: 9
11:56:06.186 [debug] Executing fun with value: 9
11:56:06.186 [debug] Evaluating bend block with value: 9
11:56:06.186 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.186 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.186 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.186 [debug] Executing bend with initial: 10
11:56:06.186 [debug] Executing fun with value: 10
11:56:06.186 [debug] Evaluating bend block with value: 10
11:56:06.186 [debug] Block returned: %{variant: :leaf}
11:56:06.186 [debug] Fun returned result: %{variant: :leaf}
11:56:06.186 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.186 [debug] do_bend final result: %{variant: :leaf}
11:56:06.186 [debug] Executing bend with initial: 10
11:56:06.186 [debug] Executing fun with value: 10
11:56:06.186 [debug] Evaluating bend block with value: 10
11:56:06.186 [debug] Block returned: %{variant: :leaf}
11:56:06.186 [debug] Fun returned result: %{variant: :leaf}
11:56:06.186 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.186 [debug] do_bend final result: %{variant: :leaf}
11:56:06.186 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.186 [debug] Executing bend with initial: 9
11:56:06.186 [debug] Executing fun with value: 9
11:56:06.186 [debug] Evaluating bend block with value: 9
11:56:06.186 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.186 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.186 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.187 [debug] Executing bend with initial: 10
11:56:06.187 [debug] Executing fun with value: 10
11:56:06.187 [debug] Evaluating bend block with value: 10
11:56:06.187 [debug] Block returned: %{variant: :leaf}
11:56:06.187 [debug] Fun returned result: %{variant: :leaf}
11:56:06.187 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.187 [debug] do_bend final result: %{variant: :leaf}
11:56:06.187 [debug] Executing bend with initial: 10
11:56:06.187 [debug] Executing fun with value: 10
11:56:06.187 [debug] Evaluating bend block with value: 10
11:56:06.187 [debug] Block returned: %{variant: :leaf}
11:56:06.187 [debug] Fun returned result: %{variant: :leaf}
11:56:06.187 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.187 [debug] do_bend final result: %{variant: :leaf}
11:56:06.187 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.187 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.187 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.187 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.187 [debug] Executing bend with initial: 6
11:56:06.187 [debug] Executing fun with value: 6
11:56:06.187 [debug] Evaluating bend block with value: 6
11:56:06.187 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.187 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.187 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.187 [debug] Executing bend with initial: 7
11:56:06.187 [debug] Executing fun with value: 7
11:56:06.187 [debug] Evaluating bend block with value: 7
11:56:06.187 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.187 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.187 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.187 [debug] Executing bend with initial: 8
11:56:06.187 [debug] Executing fun with value: 8
11:56:06.187 [debug] Evaluating bend block with value: 8
11:56:06.187 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.187 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.187 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.187 [debug] Executing bend with initial: 9
11:56:06.187 [debug] Executing fun with value: 9
11:56:06.187 [debug] Evaluating bend block with value: 9
11:56:06.187 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.187 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.187 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.187 [debug] Executing bend with initial: 10
11:56:06.187 [debug] Executing fun with value: 10
11:56:06.187 [debug] Evaluating bend block with value: 10
11:56:06.187 [debug] Block returned: %{variant: :leaf}
11:56:06.187 [debug] Fun returned result: %{variant: :leaf}
11:56:06.187 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.187 [debug] do_bend final result: %{variant: :leaf}
11:56:06.187 [debug] Executing bend with initial: 10
11:56:06.187 [debug] Executing fun with value: 10
11:56:06.187 [debug] Evaluating bend block with value: 10
11:56:06.187 [debug] Block returned: %{variant: :leaf}
11:56:06.187 [debug] Fun returned result: %{variant: :leaf}
11:56:06.187 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.187 [debug] do_bend final result: %{variant: :leaf}
11:56:06.187 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.187 [debug] Executing bend with initial: 9
11:56:06.187 [debug] Executing fun with value: 9
11:56:06.187 [debug] Evaluating bend block with value: 9
11:56:06.187 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.187 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.187 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.187 [debug] Executing bend with initial: 10
11:56:06.187 [debug] Executing fun with value: 10
11:56:06.187 [debug] Evaluating bend block with value: 10
11:56:06.187 [debug] Block returned: %{variant: :leaf}
11:56:06.187 [debug] Fun returned result: %{variant: :leaf}
11:56:06.187 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.187 [debug] do_bend final result: %{variant: :leaf}
11:56:06.187 [debug] Executing bend with initial: 10
11:56:06.187 [debug] Executing fun with value: 10
11:56:06.187 [debug] Evaluating bend block with value: 10
11:56:06.187 [debug] Block returned: %{variant: :leaf}
11:56:06.187 [debug] Fun returned result: %{variant: :leaf}
11:56:06.187 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.187 [debug] do_bend final result: %{variant: :leaf}
11:56:06.188 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.188 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.188 [debug] Executing bend with initial: 8
11:56:06.188 [debug] Executing fun with value: 8
11:56:06.188 [debug] Evaluating bend block with value: 8
11:56:06.188 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.188 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.188 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.188 [debug] Executing bend with initial: 9
11:56:06.188 [debug] Executing fun with value: 9
11:56:06.188 [debug] Evaluating bend block with value: 9
11:56:06.188 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.188 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.188 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.188 [debug] Executing bend with initial: 10
11:56:06.188 [debug] Executing fun with value: 10
11:56:06.188 [debug] Evaluating bend block with value: 10
11:56:06.188 [debug] Block returned: %{variant: :leaf}
11:56:06.188 [debug] Fun returned result: %{variant: :leaf}
11:56:06.188 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.188 [debug] do_bend final result: %{variant: :leaf}
11:56:06.188 [debug] Executing bend with initial: 10
11:56:06.188 [debug] Executing fun with value: 10
11:56:06.188 [debug] Evaluating bend block with value: 10
11:56:06.188 [debug] Block returned: %{variant: :leaf}
11:56:06.188 [debug] Fun returned result: %{variant: :leaf}
11:56:06.188 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.188 [debug] do_bend final result: %{variant: :leaf}
11:56:06.188 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.188 [debug] Executing bend with initial: 9
11:56:06.188 [debug] Executing fun with value: 9
11:56:06.188 [debug] Evaluating bend block with value: 9
11:56:06.188 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.188 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.188 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.188 [debug] Executing bend with initial: 10
11:56:06.188 [debug] Executing fun with value: 10
11:56:06.188 [debug] Evaluating bend block with value: 10
11:56:06.188 [debug] Block returned: %{variant: :leaf}
11:56:06.188 [debug] Fun returned result: %{variant: :leaf}
11:56:06.188 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.188 [debug] do_bend final result: %{variant: :leaf}
11:56:06.188 [debug] Executing bend with initial: 10
11:56:06.188 [debug] Executing fun with value: 10
11:56:06.188 [debug] Evaluating bend block with value: 10
11:56:06.188 [debug] Block returned: %{variant: :leaf}
11:56:06.188 [debug] Fun returned result: %{variant: :leaf}
11:56:06.188 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.188 [debug] do_bend final result: %{variant: :leaf}
11:56:06.188 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.188 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.188 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.188 [debug] Executing bend with initial: 7
11:56:06.188 [debug] Executing fun with value: 7
11:56:06.188 [debug] Evaluating bend block with value: 7
11:56:06.188 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.188 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.188 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.188 [debug] Executing bend with initial: 8
11:56:06.188 [debug] Executing fun with value: 8
11:56:06.188 [debug] Evaluating bend block with value: 8
11:56:06.188 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.188 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.188 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.188 [debug] Executing bend with initial: 9
11:56:06.188 [debug] Executing fun with value: 9
11:56:06.188 [debug] Evaluating bend block with value: 9
11:56:06.188 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.188 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.188 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.188 [debug] Executing bend with initial: 10
11:56:06.188 [debug] Executing fun with value: 10
11:56:06.189 [debug] Evaluating bend block with value: 10
11:56:06.189 [debug] Block returned: %{variant: :leaf}
11:56:06.189 [debug] Fun returned result: %{variant: :leaf}
11:56:06.189 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.189 [debug] do_bend final result: %{variant: :leaf}
11:56:06.189 [debug] Executing bend with initial: 10
11:56:06.189 [debug] Executing fun with value: 10
11:56:06.189 [debug] Evaluating bend block with value: 10
11:56:06.189 [debug] Block returned: %{variant: :leaf}
11:56:06.189 [debug] Fun returned result: %{variant: :leaf}
11:56:06.189 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.189 [debug] do_bend final result: %{variant: :leaf}
11:56:06.189 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.189 [debug] Executing bend with initial: 9
11:56:06.189 [debug] Executing fun with value: 9
11:56:06.189 [debug] Evaluating bend block with value: 9
11:56:06.189 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.189 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.189 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.189 [debug] Executing bend with initial: 10
11:56:06.189 [debug] Executing fun with value: 10
11:56:06.189 [debug] Evaluating bend block with value: 10
11:56:06.189 [debug] Block returned: %{variant: :leaf}
11:56:06.189 [debug] Fun returned result: %{variant: :leaf}
11:56:06.189 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.189 [debug] do_bend final result: %{variant: :leaf}
11:56:06.189 [debug] Executing bend with initial: 10
11:56:06.189 [debug] Executing fun with value: 10
11:56:06.189 [debug] Evaluating bend block with value: 10
11:56:06.189 [debug] Block returned: %{variant: :leaf}
11:56:06.189 [debug] Fun returned result: %{variant: :leaf}
11:56:06.189 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.189 [debug] do_bend final result: %{variant: :leaf}
11:56:06.189 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.189 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.189 [debug] Executing bend with initial: 8
11:56:06.189 [debug] Executing fun with value: 8
11:56:06.189 [debug] Evaluating bend block with value: 8
11:56:06.189 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.189 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.189 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.189 [debug] Executing bend with initial: 9
11:56:06.189 [debug] Executing fun with value: 9
11:56:06.189 [debug] Evaluating bend block with value: 9
11:56:06.189 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.189 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.189 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.189 [debug] Executing bend with initial: 10
11:56:06.189 [debug] Executing fun with value: 10
11:56:06.189 [debug] Evaluating bend block with value: 10
11:56:06.189 [debug] Block returned: %{variant: :leaf}
11:56:06.189 [debug] Fun returned result: %{variant: :leaf}
11:56:06.189 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.189 [debug] do_bend final result: %{variant: :leaf}
11:56:06.189 [debug] Executing bend with initial: 10
11:56:06.189 [debug] Executing fun with value: 10
11:56:06.189 [debug] Evaluating bend block with value: 10
11:56:06.189 [debug] Block returned: %{variant: :leaf}
11:56:06.189 [debug] Fun returned result: %{variant: :leaf}
11:56:06.189 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.189 [debug] do_bend final result: %{variant: :leaf}
11:56:06.189 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.189 [debug] Executing bend with initial: 9
11:56:06.189 [debug] Executing fun with value: 9
11:56:06.189 [debug] Evaluating bend block with value: 9
11:56:06.189 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.189 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.190 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.190 [debug] Executing bend with initial: 10
11:56:06.190 [debug] Executing fun with value: 10
11:56:06.190 [debug] Evaluating bend block with value: 10
11:56:06.190 [debug] Block returned: %{variant: :leaf}
11:56:06.190 [debug] Fun returned result: %{variant: :leaf}
11:56:06.190 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.190 [debug] do_bend final result: %{variant: :leaf}
11:56:06.190 [debug] Executing bend with initial: 10
11:56:06.190 [debug] Executing fun with value: 10
11:56:06.190 [debug] Evaluating bend block with value: 10
11:56:06.190 [debug] Block returned: %{variant: :leaf}
11:56:06.190 [debug] Fun returned result: %{variant: :leaf}
11:56:06.190 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.190 [debug] do_bend final result: %{variant: :leaf}
11:56:06.190 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.190 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.190 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.190 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.190 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.190 [debug] Executing bend with initial: 5
11:56:06.190 [debug] Executing fun with value: 5
11:56:06.190 [debug] Evaluating bend block with value: 5
11:56:06.190 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.190 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.190 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.190 [debug] Executing bend with initial: 6
11:56:06.190 [debug] Executing fun with value: 6
11:56:06.190 [debug] Evaluating bend block with value: 6
11:56:06.190 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.190 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.190 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.190 [debug] Executing bend with initial: 7
11:56:06.190 [debug] Executing fun with value: 7
11:56:06.190 [debug] Evaluating bend block with value: 7
11:56:06.190 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.190 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.190 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.190 [debug] Executing bend with initial: 8
11:56:06.190 [debug] Executing fun with value: 8
11:56:06.190 [debug] Evaluating bend block with value: 8
11:56:06.190 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.190 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.190 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.190 [debug] Executing bend with initial: 9
11:56:06.190 [debug] Executing fun with value: 9
11:56:06.190 [debug] Evaluating bend block with value: 9
11:56:06.190 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.190 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.190 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.190 [debug] Executing bend with initial: 10
11:56:06.190 [debug] Executing fun with value: 10
11:56:06.190 [debug] Evaluating bend block with value: 10
11:56:06.190 [debug] Block returned: %{variant: :leaf}
11:56:06.190 [debug] Fun returned result: %{variant: :leaf}
11:56:06.190 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.191 [debug] do_bend final result: %{variant: :leaf}
11:56:06.191 [debug] Executing bend with initial: 10
11:56:06.191 [debug] Executing fun with value: 10
11:56:06.191 [debug] Evaluating bend block with value: 10
11:56:06.191 [debug] Block returned: %{variant: :leaf}
11:56:06.191 [debug] Fun returned result: %{variant: :leaf}
11:56:06.191 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.191 [debug] do_bend final result: %{variant: :leaf}
11:56:06.191 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.191 [debug] Executing bend with initial: 9
11:56:06.191 [debug] Executing fun with value: 9
11:56:06.191 [debug] Evaluating bend block with value: 9
11:56:06.191 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.191 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.191 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.191 [debug] Executing bend with initial: 10
11:56:06.191 [debug] Executing fun with value: 10
11:56:06.191 [debug] Evaluating bend block with value: 10
11:56:06.191 [debug] Block returned: %{variant: :leaf}
11:56:06.191 [debug] Fun returned result: %{variant: :leaf}
11:56:06.191 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.191 [debug] do_bend final result: %{variant: :leaf}
11:56:06.191 [debug] Executing bend with initial: 10
11:56:06.191 [debug] Executing fun with value: 10
11:56:06.191 [debug] Evaluating bend block with value: 10
11:56:06.191 [debug] Block returned: %{variant: :leaf}
11:56:06.191 [debug] Fun returned result: %{variant: :leaf}
11:56:06.191 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.191 [debug] do_bend final result: %{variant: :leaf}
11:56:06.191 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.191 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.191 [debug] Executing bend with initial: 8
11:56:06.191 [debug] Executing fun with value: 8
11:56:06.191 [debug] Evaluating bend block with value: 8
11:56:06.191 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.191 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.191 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.191 [debug] Executing bend with initial: 9
11:56:06.191 [debug] Executing fun with value: 9
11:56:06.191 [debug] Evaluating bend block with value: 9
11:56:06.191 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.191 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.191 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.191 [debug] Executing bend with initial: 10
11:56:06.191 [debug] Executing fun with value: 10
11:56:06.191 [debug] Evaluating bend block with value: 10
11:56:06.191 [debug] Block returned: %{variant: :leaf}
11:56:06.191 [debug] Fun returned result: %{variant: :leaf}
11:56:06.191 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.191 [debug] do_bend final result: %{variant: :leaf}
11:56:06.191 [debug] Executing bend with initial: 10
11:56:06.191 [debug] Executing fun with value: 10
11:56:06.191 [debug] Evaluating bend block with value: 10
11:56:06.191 [debug] Block returned: %{variant: :leaf}
11:56:06.191 [debug] Fun returned result: %{variant: :leaf}
11:56:06.191 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.191 [debug] do_bend final result: %{variant: :leaf}
11:56:06.191 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.191 [debug] Executing bend with initial: 9
11:56:06.191 [debug] Executing fun with value: 9
11:56:06.191 [debug] Evaluating bend block with value: 9
11:56:06.191 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.191 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.191 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.191 [debug] Executing bend with initial: 10
11:56:06.191 [debug] Executing fun with value: 10
11:56:06.191 [debug] Evaluating bend block with value: 10
11:56:06.191 [debug] Block returned: %{variant: :leaf}
11:56:06.191 [debug] Fun returned result: %{variant: :leaf}
11:56:06.191 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.191 [debug] do_bend final result: %{variant: :leaf}
11:56:06.191 [debug] Executing bend with initial: 10
11:56:06.191 [debug] Executing fun with value: 10
11:56:06.191 [debug] Evaluating bend block with value: 10
11:56:06.191 [debug] Block returned: %{variant: :leaf}
11:56:06.191 [debug] Fun returned result: %{variant: :leaf}
11:56:06.191 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.191 [debug] do_bend final result: %{variant: :leaf}
11:56:06.191 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.191 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.191 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.191 [debug] Executing bend with initial: 7
11:56:06.191 [debug] Executing fun with value: 7
11:56:06.191 [debug] Evaluating bend block with value: 7
11:56:06.191 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.191 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.191 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.191 [debug] Executing bend with initial: 8
11:56:06.191 [debug] Executing fun with value: 8
11:56:06.191 [debug] Evaluating bend block with value: 8
11:56:06.191 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.191 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.191 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.191 [debug] Executing bend with initial: 9
11:56:06.191 [debug] Executing fun with value: 9
11:56:06.191 [debug] Evaluating bend block with value: 9
11:56:06.191 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.191 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.192 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.192 [debug] Executing bend with initial: 10
11:56:06.192 [debug] Executing fun with value: 10
11:56:06.192 [debug] Evaluating bend block with value: 10
11:56:06.192 [debug] Block returned: %{variant: :leaf}
11:56:06.192 [debug] Fun returned result: %{variant: :leaf}
11:56:06.192 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.192 [debug] do_bend final result: %{variant: :leaf}
11:56:06.192 [debug] Executing bend with initial: 10
11:56:06.192 [debug] Executing fun with value: 10
11:56:06.192 [debug] Evaluating bend block with value: 10
11:56:06.192 [debug] Block returned: %{variant: :leaf}
11:56:06.192 [debug] Fun returned result: %{variant: :leaf}
11:56:06.192 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.192 [debug] do_bend final result: %{variant: :leaf}
11:56:06.192 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.192 [debug] Executing bend with initial: 9
11:56:06.192 [debug] Executing fun with value: 9
11:56:06.192 [debug] Evaluating bend block with value: 9
11:56:06.192 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.192 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.192 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.192 [debug] Executing bend with initial: 10
11:56:06.192 [debug] Executing fun with value: 10
11:56:06.192 [debug] Evaluating bend block with value: 10
11:56:06.192 [debug] Block returned: %{variant: :leaf}
11:56:06.192 [debug] Fun returned result: %{variant: :leaf}
11:56:06.192 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.192 [debug] do_bend final result: %{variant: :leaf}
11:56:06.192 [debug] Executing bend with initial: 10
11:56:06.192 [debug] Executing fun with value: 10
11:56:06.192 [debug] Evaluating bend block with value: 10
11:56:06.192 [debug] Block returned: %{variant: :leaf}
11:56:06.192 [debug] Fun returned result: %{variant: :leaf}
11:56:06.192 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.192 [debug] do_bend final result: %{variant: :leaf}
11:56:06.192 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.192 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.192 [debug] Executing bend with initial: 8
11:56:06.192 [debug] Executing fun with value: 8
11:56:06.192 [debug] Evaluating bend block with value: 8
11:56:06.192 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.192 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.192 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.192 [debug] Executing bend with initial: 9
11:56:06.192 [debug] Executing fun with value: 9
11:56:06.192 [debug] Evaluating bend block with value: 9
11:56:06.192 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.192 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.192 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.192 [debug] Executing bend with initial: 10
11:56:06.192 [debug] Executing fun with value: 10
11:56:06.192 [debug] Evaluating bend block with value: 10
11:56:06.192 [debug] Block returned: %{variant: :leaf}
11:56:06.192 [debug] Fun returned result: %{variant: :leaf}
11:56:06.192 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.192 [debug] do_bend final result: %{variant: :leaf}
11:56:06.192 [debug] Executing bend with initial: 10
11:56:06.192 [debug] Executing fun with value: 10
11:56:06.192 [debug] Evaluating bend block with value: 10
11:56:06.192 [debug] Block returned: %{variant: :leaf}
11:56:06.192 [debug] Fun returned result: %{variant: :leaf}
11:56:06.192 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.192 [debug] do_bend final result: %{variant: :leaf}
11:56:06.192 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.192 [debug] Executing bend with initial: 9
11:56:06.192 [debug] Executing fun with value: 9
11:56:06.192 [debug] Evaluating bend block with value: 9
11:56:06.192 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.192 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.192 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.192 [debug] Executing bend with initial: 10
11:56:06.192 [debug] Executing fun with value: 10
11:56:06.192 [debug] Evaluating bend block with value: 10
11:56:06.192 [debug] Block returned: %{variant: :leaf}
11:56:06.192 [debug] Fun returned result: %{variant: :leaf}
11:56:06.192 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.192 [debug] do_bend final result: %{variant: :leaf}
11:56:06.192 [debug] Executing bend with initial: 10
11:56:06.192 [debug] Executing fun with value: 10
11:56:06.192 [debug] Evaluating bend block with value: 10
11:56:06.192 [debug] Block returned: %{variant: :leaf}
11:56:06.192 [debug] Fun returned result: %{variant: :leaf}
11:56:06.192 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.192 [debug] do_bend final result: %{variant: :leaf}
11:56:06.192 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.192 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.192 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.192 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.192 [debug] Executing bend with initial: 6
11:56:06.193 [debug] Executing fun with value: 6
11:56:06.193 [debug] Evaluating bend block with value: 6
11:56:06.193 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.193 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.193 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.193 [debug] Executing bend with initial: 7
11:56:06.193 [debug] Executing fun with value: 7
11:56:06.193 [debug] Evaluating bend block with value: 7
11:56:06.193 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.193 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.193 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.193 [debug] Executing bend with initial: 8
11:56:06.193 [debug] Executing fun with value: 8
11:56:06.193 [debug] Evaluating bend block with value: 8
11:56:06.193 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.193 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.193 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.193 [debug] Executing bend with initial: 9
11:56:06.193 [debug] Executing fun with value: 9
11:56:06.193 [debug] Evaluating bend block with value: 9
11:56:06.193 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.193 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.193 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.193 [debug] Executing bend with initial: 10
11:56:06.193 [debug] Executing fun with value: 10
11:56:06.193 [debug] Evaluating bend block with value: 10
11:56:06.193 [debug] Block returned: %{variant: :leaf}
11:56:06.193 [debug] Fun returned result: %{variant: :leaf}
11:56:06.193 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.193 [debug] do_bend final result: %{variant: :leaf}
11:56:06.193 [debug] Executing bend with initial: 10
11:56:06.193 [debug] Executing fun with value: 10
11:56:06.193 [debug] Evaluating bend block with value: 10
11:56:06.193 [debug] Block returned: %{variant: :leaf}
11:56:06.193 [debug] Fun returned result: %{variant: :leaf}
11:56:06.193 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.193 [debug] do_bend final result: %{variant: :leaf}
11:56:06.193 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.193 [debug] Executing bend with initial: 9
11:56:06.193 [debug] Executing fun with value: 9
11:56:06.193 [debug] Evaluating bend block with value: 9
11:56:06.193 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.193 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.193 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.193 [debug] Executing bend with initial: 10
11:56:06.193 [debug] Executing fun with value: 10
11:56:06.193 [debug] Evaluating bend block with value: 10
11:56:06.193 [debug] Block returned: %{variant: :leaf}
11:56:06.193 [debug] Fun returned result: %{variant: :leaf}
11:56:06.193 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.193 [debug] do_bend final result: %{variant: :leaf}
11:56:06.193 [debug] Executing bend with initial: 10
11:56:06.193 [debug] Executing fun with value: 10
11:56:06.193 [debug] Evaluating bend block with value: 10
11:56:06.193 [debug] Block returned: %{variant: :leaf}
11:56:06.193 [debug] Fun returned result: %{variant: :leaf}
11:56:06.193 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.193 [debug] do_bend final result: %{variant: :leaf}
11:56:06.193 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.193 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.193 [debug] Executing bend with initial: 8
11:56:06.193 [debug] Executing fun with value: 8
11:56:06.193 [debug] Evaluating bend block with value: 8
11:56:06.193 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.193 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.193 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.193 [debug] Executing bend with initial: 9
11:56:06.193 [debug] Executing fun with value: 9
11:56:06.193 [debug] Evaluating bend block with value: 9
11:56:06.193 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.193 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.193 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.193 [debug] Executing bend with initial: 10
11:56:06.193 [debug] Executing fun with value: 10
11:56:06.193 [debug] Evaluating bend block with value: 10
11:56:06.193 [debug] Block returned: %{variant: :leaf}
11:56:06.193 [debug] Fun returned result: %{variant: :leaf}
11:56:06.193 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.193 [debug] do_bend final result: %{variant: :leaf}
11:56:06.193 [debug] Executing bend with initial: 10
11:56:06.193 [debug] Executing fun with value: 10
11:56:06.193 [debug] Evaluating bend block with value: 10
11:56:06.193 [debug] Block returned: %{variant: :leaf}
11:56:06.193 [debug] Fun returned result: %{variant: :leaf}
11:56:06.193 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.193 [debug] do_bend final result: %{variant: :leaf}
11:56:06.193 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.193 [debug] Executing bend with initial: 9
11:56:06.193 [debug] Executing fun with value: 9
11:56:06.193 [debug] Evaluating bend block with value: 9
11:56:06.193 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.193 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.193 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.193 [debug] Executing bend with initial: 10
11:56:06.193 [debug] Executing fun with value: 10
11:56:06.193 [debug] Evaluating bend block with value: 10
11:56:06.193 [debug] Block returned: %{variant: :leaf}
11:56:06.193 [debug] Fun returned result: %{variant: :leaf}
11:56:06.193 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.193 [debug] do_bend final result: %{variant: :leaf}
11:56:06.193 [debug] Executing bend with initial: 10
11:56:06.193 [debug] Executing fun with value: 10
11:56:06.193 [debug] Evaluating bend block with value: 10
11:56:06.193 [debug] Block returned: %{variant: :leaf}
11:56:06.193 [debug] Fun returned result: %{variant: :leaf}
11:56:06.193 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.194 [debug] do_bend final result: %{variant: :leaf}
11:56:06.194 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.194 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.194 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.194 [debug] Executing bend with initial: 7
11:56:06.194 [debug] Executing fun with value: 7
11:56:06.194 [debug] Evaluating bend block with value: 7
11:56:06.194 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.194 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.194 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.194 [debug] Executing bend with initial: 8
11:56:06.194 [debug] Executing fun with value: 8
11:56:06.194 [debug] Evaluating bend block with value: 8
11:56:06.194 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.194 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.194 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.194 [debug] Executing bend with initial: 9
11:56:06.194 [debug] Executing fun with value: 9
11:56:06.194 [debug] Evaluating bend block with value: 9
11:56:06.194 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.194 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.194 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.194 [debug] Executing bend with initial: 10
11:56:06.194 [debug] Executing fun with value: 10
11:56:06.194 [debug] Evaluating bend block with value: 10
11:56:06.194 [debug] Block returned: %{variant: :leaf}
11:56:06.194 [debug] Fun returned result: %{variant: :leaf}
11:56:06.194 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.194 [debug] do_bend final result: %{variant: :leaf}
11:56:06.194 [debug] Executing bend with initial: 10
11:56:06.194 [debug] Executing fun with value: 10
11:56:06.194 [debug] Evaluating bend block with value: 10
11:56:06.194 [debug] Block returned: %{variant: :leaf}
11:56:06.194 [debug] Fun returned result: %{variant: :leaf}
11:56:06.194 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.194 [debug] do_bend final result: %{variant: :leaf}
11:56:06.194 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.194 [debug] Executing bend with initial: 9
11:56:06.194 [debug] Executing fun with value: 9
11:56:06.194 [debug] Evaluating bend block with value: 9
11:56:06.194 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.194 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.194 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.194 [debug] Executing bend with initial: 10
11:56:06.194 [debug] Executing fun with value: 10
11:56:06.194 [debug] Evaluating bend block with value: 10
11:56:06.194 [debug] Block returned: %{variant: :leaf}
11:56:06.194 [debug] Fun returned result: %{variant: :leaf}
11:56:06.194 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.194 [debug] do_bend final result: %{variant: :leaf}
11:56:06.194 [debug] Executing bend with initial: 10
11:56:06.194 [debug] Executing fun with value: 10
11:56:06.194 [debug] Evaluating bend block with value: 10
11:56:06.194 [debug] Block returned: %{variant: :leaf}
11:56:06.194 [debug] Fun returned result: %{variant: :leaf}
11:56:06.194 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.194 [debug] do_bend final result: %{variant: :leaf}
11:56:06.194 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.194 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.194 [debug] Executing bend with initial: 8
11:56:06.194 [debug] Executing fun with value: 8
11:56:06.194 [debug] Evaluating bend block with value: 8
11:56:06.194 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.194 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.194 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.194 [debug] Executing bend with initial: 9
11:56:06.194 [debug] Executing fun with value: 9
11:56:06.194 [debug] Evaluating bend block with value: 9
11:56:06.194 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.194 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.194 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.194 [debug] Executing bend with initial: 10
11:56:06.194 [debug] Executing fun with value: 10
11:56:06.194 [debug] Evaluating bend block with value: 10
11:56:06.194 [debug] Block returned: %{variant: :leaf}
11:56:06.194 [debug] Fun returned result: %{variant: :leaf}
11:56:06.194 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.194 [debug] do_bend final result: %{variant: :leaf}
11:56:06.194 [debug] Executing bend with initial: 10
11:56:06.194 [debug] Executing fun with value: 10
11:56:06.194 [debug] Evaluating bend block with value: 10
11:56:06.194 [debug] Block returned: %{variant: :leaf}
11:56:06.194 [debug] Fun returned result: %{variant: :leaf}
11:56:06.194 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.194 [debug] do_bend final result: %{variant: :leaf}
11:56:06.194 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.194 [debug] Executing bend with initial: 9
11:56:06.194 [debug] Executing fun with value: 9
11:56:06.194 [debug] Evaluating bend block with value: 9
11:56:06.194 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.194 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.194 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.194 [debug] Executing bend with initial: 10
11:56:06.194 [debug] Executing fun with value: 10
11:56:06.194 [debug] Evaluating bend block with value: 10
11:56:06.194 [debug] Block returned: %{variant: :leaf}
11:56:06.194 [debug] Fun returned result: %{variant: :leaf}
11:56:06.195 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.195 [debug] do_bend final result: %{variant: :leaf}
11:56:06.195 [debug] Executing bend with initial: 10
11:56:06.195 [debug] Executing fun with value: 10
11:56:06.195 [debug] Evaluating bend block with value: 10
11:56:06.195 [debug] Block returned: %{variant: :leaf}
11:56:06.195 [debug] Fun returned result: %{variant: :leaf}
11:56:06.195 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.195 [debug] do_bend final result: %{variant: :leaf}
11:56:06.195 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.195 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.195 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.195 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.195 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.195 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.195 [debug] Executing bend with initial: 4
11:56:06.195 [debug] Executing fun with value: 4
11:56:06.195 [debug] Evaluating bend block with value: 4
11:56:06.195 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.195 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.195 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.195 [debug] Executing bend with initial: 5
11:56:06.195 [debug] Executing fun with value: 5
11:56:06.195 [debug] Evaluating bend block with value: 5
11:56:06.195 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.195 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.195 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.195 [debug] Executing bend with initial: 6
11:56:06.195 [debug] Executing fun with value: 6
11:56:06.195 [debug] Evaluating bend block with value: 6
11:56:06.195 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.196 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.196 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.196 [debug] Executing bend with initial: 7
11:56:06.196 [debug] Executing fun with value: 7
11:56:06.196 [debug] Evaluating bend block with value: 7
11:56:06.196 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.196 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.196 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.196 [debug] Executing bend with initial: 8
11:56:06.196 [debug] Executing fun with value: 8
11:56:06.196 [debug] Evaluating bend block with value: 8
11:56:06.196 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.196 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.196 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.196 [debug] Executing bend with initial: 9
11:56:06.196 [debug] Executing fun with value: 9
11:56:06.196 [debug] Evaluating bend block with value: 9
11:56:06.196 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.196 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.196 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.196 [debug] Executing bend with initial: 10
11:56:06.196 [debug] Executing fun with value: 10
11:56:06.196 [debug] Evaluating bend block with value: 10
11:56:06.196 [debug] Block returned: %{variant: :leaf}
11:56:06.196 [debug] Fun returned result: %{variant: :leaf}
11:56:06.196 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.196 [debug] do_bend final result: %{variant: :leaf}
11:56:06.196 [debug] Executing bend with initial: 10
11:56:06.196 [debug] Executing fun with value: 10
11:56:06.196 [debug] Evaluating bend block with value: 10
11:56:06.196 [debug] Block returned: %{variant: :leaf}
11:56:06.196 [debug] Fun returned result: %{variant: :leaf}
11:56:06.196 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.196 [debug] do_bend final result: %{variant: :leaf}
11:56:06.196 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.196 [debug] Executing bend with initial: 9
11:56:06.196 [debug] Executing fun with value: 9
11:56:06.196 [debug] Evaluating bend block with value: 9
11:56:06.196 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.196 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.196 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.196 [debug] Executing bend with initial: 10
11:56:06.196 [debug] Executing fun with value: 10
11:56:06.196 [debug] Evaluating bend block with value: 10
11:56:06.196 [debug] Block returned: %{variant: :leaf}
11:56:06.196 [debug] Fun returned result: %{variant: :leaf}
11:56:06.196 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.196 [debug] do_bend final result: %{variant: :leaf}
11:56:06.196 [debug] Executing bend with initial: 10
11:56:06.196 [debug] Executing fun with value: 10
11:56:06.196 [debug] Evaluating bend block with value: 10
11:56:06.196 [debug] Block returned: %{variant: :leaf}
11:56:06.196 [debug] Fun returned result: %{variant: :leaf}
11:56:06.196 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.196 [debug] do_bend final result: %{variant: :leaf}
11:56:06.196 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.196 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.196 [debug] Executing bend with initial: 8
11:56:06.196 [debug] Executing fun with value: 8
11:56:06.196 [debug] Evaluating bend block with value: 8
11:56:06.196 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.196 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.196 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.196 [debug] Executing bend with initial: 9
11:56:06.196 [debug] Executing fun with value: 9
11:56:06.196 [debug] Evaluating bend block with value: 9
11:56:06.196 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.196 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.196 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.196 [debug] Executing bend with initial: 10
11:56:06.196 [debug] Executing fun with value: 10
11:56:06.196 [debug] Evaluating bend block with value: 10
11:56:06.196 [debug] Block returned: %{variant: :leaf}
11:56:06.196 [debug] Fun returned result: %{variant: :leaf}
11:56:06.196 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.196 [debug] do_bend final result: %{variant: :leaf}
11:56:06.196 [debug] Executing bend with initial: 10
11:56:06.196 [debug] Executing fun with value: 10
11:56:06.196 [debug] Evaluating bend block with value: 10
11:56:06.196 [debug] Block returned: %{variant: :leaf}
11:56:06.196 [debug] Fun returned result: %{variant: :leaf}
11:56:06.196 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.196 [debug] do_bend final result: %{variant: :leaf}
11:56:06.196 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.196 [debug] Executing bend with initial: 9
11:56:06.196 [debug] Executing fun with value: 9
11:56:06.196 [debug] Evaluating bend block with value: 9
11:56:06.196 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.196 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.196 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.196 [debug] Executing bend with initial: 10
11:56:06.196 [debug] Executing fun with value: 10
11:56:06.196 [debug] Evaluating bend block with value: 10
11:56:06.196 [debug] Block returned: %{variant: :leaf}
11:56:06.196 [debug] Fun returned result: %{variant: :leaf}
11:56:06.196 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.196 [debug] do_bend final result: %{variant: :leaf}
11:56:06.196 [debug] Executing bend with initial: 10
11:56:06.196 [debug] Executing fun with value: 10
11:56:06.196 [debug] Evaluating bend block with value: 10
11:56:06.196 [debug] Block returned: %{variant: :leaf}
11:56:06.197 [debug] Fun returned result: %{variant: :leaf}
11:56:06.197 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.197 [debug] do_bend final result: %{variant: :leaf}
11:56:06.197 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.197 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.197 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.197 [debug] Executing bend with initial: 7
11:56:06.197 [debug] Executing fun with value: 7
11:56:06.197 [debug] Evaluating bend block with value: 7
11:56:06.197 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.197 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.197 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.197 [debug] Executing bend with initial: 8
11:56:06.197 [debug] Executing fun with value: 8
11:56:06.197 [debug] Evaluating bend block with value: 8
11:56:06.197 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.197 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.197 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.197 [debug] Executing bend with initial: 9
11:56:06.197 [debug] Executing fun with value: 9
11:56:06.197 [debug] Evaluating bend block with value: 9
11:56:06.197 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.197 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.197 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.197 [debug] Executing bend with initial: 10
11:56:06.197 [debug] Executing fun with value: 10
11:56:06.197 [debug] Evaluating bend block with value: 10
11:56:06.197 [debug] Block returned: %{variant: :leaf}
11:56:06.197 [debug] Fun returned result: %{variant: :leaf}
11:56:06.197 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.197 [debug] do_bend final result: %{variant: :leaf}
11:56:06.197 [debug] Executing bend with initial: 10
11:56:06.197 [debug] Executing fun with value: 10
11:56:06.197 [debug] Evaluating bend block with value: 10
11:56:06.197 [debug] Block returned: %{variant: :leaf}
11:56:06.197 [debug] Fun returned result: %{variant: :leaf}
11:56:06.197 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.197 [debug] do_bend final result: %{variant: :leaf}
11:56:06.197 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.197 [debug] Executing bend with initial: 9
11:56:06.197 [debug] Executing fun with value: 9
11:56:06.197 [debug] Evaluating bend block with value: 9
11:56:06.197 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.197 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.197 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.197 [debug] Executing bend with initial: 10
11:56:06.197 [debug] Executing fun with value: 10
11:56:06.197 [debug] Evaluating bend block with value: 10
11:56:06.197 [debug] Block returned: %{variant: :leaf}
11:56:06.197 [debug] Fun returned result: %{variant: :leaf}
11:56:06.197 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.197 [debug] do_bend final result: %{variant: :leaf}
11:56:06.197 [debug] Executing bend with initial: 10
11:56:06.197 [debug] Executing fun with value: 10
11:56:06.197 [debug] Evaluating bend block with value: 10
11:56:06.197 [debug] Block returned: %{variant: :leaf}
11:56:06.197 [debug] Fun returned result: %{variant: :leaf}
11:56:06.197 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.197 [debug] do_bend final result: %{variant: :leaf}
11:56:06.197 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.197 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.197 [debug] Executing bend with initial: 8
11:56:06.197 [debug] Executing fun with value: 8
11:56:06.197 [debug] Evaluating bend block with value: 8
11:56:06.197 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.197 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.197 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.197 [debug] Executing bend with initial: 9
11:56:06.197 [debug] Executing fun with value: 9
11:56:06.197 [debug] Evaluating bend block with value: 9
11:56:06.197 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.197 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.197 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.197 [debug] Executing bend with initial: 10
11:56:06.197 [debug] Executing fun with value: 10
11:56:06.197 [debug] Evaluating bend block with value: 10
11:56:06.197 [debug] Block returned: %{variant: :leaf}
11:56:06.197 [debug] Fun returned result: %{variant: :leaf}
11:56:06.197 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.197 [debug] do_bend final result: %{variant: :leaf}
11:56:06.197 [debug] Executing bend with initial: 10
11:56:06.197 [debug] Executing fun with value: 10
11:56:06.197 [debug] Evaluating bend block with value: 10
11:56:06.197 [debug] Block returned: %{variant: :leaf}
11:56:06.197 [debug] Fun returned result: %{variant: :leaf}
11:56:06.197 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.197 [debug] do_bend final result: %{variant: :leaf}
11:56:06.197 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.197 [debug] Executing bend with initial: 9
11:56:06.197 [debug] Executing fun with value: 9
11:56:06.197 [debug] Evaluating bend block with value: 9
11:56:06.197 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.197 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.197 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.197 [debug] Executing bend with initial: 10
11:56:06.197 [debug] Executing fun with value: 10
11:56:06.197 [debug] Evaluating bend block with value: 10
11:56:06.197 [debug] Block returned: %{variant: :leaf}
11:56:06.197 [debug] Fun returned result: %{variant: :leaf}
11:56:06.198 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.198 [debug] do_bend final result: %{variant: :leaf}
11:56:06.198 [debug] Executing bend with initial: 10
11:56:06.198 [debug] Executing fun with value: 10
11:56:06.198 [debug] Evaluating bend block with value: 10
11:56:06.198 [debug] Block returned: %{variant: :leaf}
11:56:06.198 [debug] Fun returned result: %{variant: :leaf}
11:56:06.198 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.198 [debug] do_bend final result: %{variant: :leaf}
11:56:06.198 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.198 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.198 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.198 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.198 [debug] Executing bend with initial: 6
11:56:06.198 [debug] Executing fun with value: 6
11:56:06.198 [debug] Evaluating bend block with value: 6
11:56:06.198 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.198 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.198 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.198 [debug] Executing bend with initial: 7
11:56:06.198 [debug] Executing fun with value: 7
11:56:06.198 [debug] Evaluating bend block with value: 7
11:56:06.198 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.198 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.198 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.198 [debug] Executing bend with initial: 8
11:56:06.198 [debug] Executing fun with value: 8
11:56:06.198 [debug] Evaluating bend block with value: 8
11:56:06.198 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.198 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.198 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.198 [debug] Executing bend with initial: 9
11:56:06.198 [debug] Executing fun with value: 9
11:56:06.198 [debug] Evaluating bend block with value: 9
11:56:06.198 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.198 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.198 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.198 [debug] Executing bend with initial: 10
11:56:06.198 [debug] Executing fun with value: 10
11:56:06.198 [debug] Evaluating bend block with value: 10
11:56:06.198 [debug] Block returned: %{variant: :leaf}
11:56:06.198 [debug] Fun returned result: %{variant: :leaf}
11:56:06.198 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.198 [debug] do_bend final result: %{variant: :leaf}
11:56:06.198 [debug] Executing bend with initial: 10
11:56:06.198 [debug] Executing fun with value: 10
11:56:06.198 [debug] Evaluating bend block with value: 10
11:56:06.198 [debug] Block returned: %{variant: :leaf}
11:56:06.198 [debug] Fun returned result: %{variant: :leaf}
11:56:06.198 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.198 [debug] do_bend final result: %{variant: :leaf}
11:56:06.198 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.198 [debug] Executing bend with initial: 9
11:56:06.198 [debug] Executing fun with value: 9
11:56:06.198 [debug] Evaluating bend block with value: 9
11:56:06.198 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.198 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.198 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.198 [debug] Executing bend with initial: 10
11:56:06.198 [debug] Executing fun with value: 10
11:56:06.198 [debug] Evaluating bend block with value: 10
11:56:06.198 [debug] Block returned: %{variant: :leaf}
11:56:06.198 [debug] Fun returned result: %{variant: :leaf}
11:56:06.198 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.198 [debug] do_bend final result: %{variant: :leaf}
11:56:06.198 [debug] Executing bend with initial: 10
11:56:06.198 [debug] Executing fun with value: 10
11:56:06.198 [debug] Evaluating bend block with value: 10
11:56:06.198 [debug] Block returned: %{variant: :leaf}
11:56:06.198 [debug] Fun returned result: %{variant: :leaf}
11:56:06.198 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.198 [debug] do_bend final result: %{variant: :leaf}
11:56:06.198 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.198 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.198 [debug] Executing bend with initial: 8
11:56:06.198 [debug] Executing fun with value: 8
11:56:06.198 [debug] Evaluating bend block with value: 8
11:56:06.198 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.198 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.198 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.198 [debug] Executing bend with initial: 9
11:56:06.198 [debug] Executing fun with value: 9
11:56:06.198 [debug] Evaluating bend block with value: 9
11:56:06.198 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.198 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.198 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.198 [debug] Executing bend with initial: 10
11:56:06.198 [debug] Executing fun with value: 10
11:56:06.198 [debug] Evaluating bend block with value: 10
11:56:06.198 [debug] Block returned: %{variant: :leaf}
11:56:06.199 [debug] Fun returned result: %{variant: :leaf}
11:56:06.199 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.199 [debug] do_bend final result: %{variant: :leaf}
11:56:06.199 [debug] Executing bend with initial: 10
11:56:06.199 [debug] Executing fun with value: 10
11:56:06.199 [debug] Evaluating bend block with value: 10
11:56:06.199 [debug] Block returned: %{variant: :leaf}
11:56:06.199 [debug] Fun returned result: %{variant: :leaf}
11:56:06.199 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.199 [debug] do_bend final result: %{variant: :leaf}
11:56:06.199 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.199 [debug] Executing bend with initial: 9
11:56:06.199 [debug] Executing fun with value: 9
11:56:06.199 [debug] Evaluating bend block with value: 9
11:56:06.199 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.199 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.199 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.199 [debug] Executing bend with initial: 10
11:56:06.199 [debug] Executing fun with value: 10
11:56:06.199 [debug] Evaluating bend block with value: 10
11:56:06.199 [debug] Block returned: %{variant: :leaf}
11:56:06.199 [debug] Fun returned result: %{variant: :leaf}
11:56:06.199 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.199 [debug] do_bend final result: %{variant: :leaf}
11:56:06.199 [debug] Executing bend with initial: 10
11:56:06.199 [debug] Executing fun with value: 10
11:56:06.199 [debug] Evaluating bend block with value: 10
11:56:06.199 [debug] Block returned: %{variant: :leaf}
11:56:06.199 [debug] Fun returned result: %{variant: :leaf}
11:56:06.199 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.199 [debug] do_bend final result: %{variant: :leaf}
11:56:06.199 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.199 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.199 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.199 [debug] Executing bend with initial: 7
11:56:06.199 [debug] Executing fun with value: 7
11:56:06.199 [debug] Evaluating bend block with value: 7
11:56:06.199 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.199 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.199 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.199 [debug] Executing bend with initial: 8
11:56:06.199 [debug] Executing fun with value: 8
11:56:06.199 [debug] Evaluating bend block with value: 8
11:56:06.199 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.199 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.199 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.199 [debug] Executing bend with initial: 9
11:56:06.199 [debug] Executing fun with value: 9
11:56:06.199 [debug] Evaluating bend block with value: 9
11:56:06.199 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.199 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.199 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.199 [debug] Executing bend with initial: 10
11:56:06.199 [debug] Executing fun with value: 10
11:56:06.199 [debug] Evaluating bend block with value: 10
11:56:06.199 [debug] Block returned: %{variant: :leaf}
11:56:06.199 [debug] Fun returned result: %{variant: :leaf}
11:56:06.199 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.199 [debug] do_bend final result: %{variant: :leaf}
11:56:06.199 [debug] Executing bend with initial: 10
11:56:06.199 [debug] Executing fun with value: 10
11:56:06.199 [debug] Evaluating bend block with value: 10
11:56:06.199 [debug] Block returned: %{variant: :leaf}
11:56:06.199 [debug] Fun returned result: %{variant: :leaf}
11:56:06.199 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.199 [debug] do_bend final result: %{variant: :leaf}
11:56:06.199 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.199 [debug] Executing bend with initial: 9
11:56:06.199 [debug] Executing fun with value: 9
11:56:06.199 [debug] Evaluating bend block with value: 9
11:56:06.199 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.199 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.199 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.199 [debug] Executing bend with initial: 10
11:56:06.199 [debug] Executing fun with value: 10
11:56:06.199 [debug] Evaluating bend block with value: 10
11:56:06.199 [debug] Block returned: %{variant: :leaf}
11:56:06.199 [debug] Fun returned result: %{variant: :leaf}
11:56:06.199 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.199 [debug] do_bend final result: %{variant: :leaf}
11:56:06.199 [debug] Executing bend with initial: 10
11:56:06.199 [debug] Executing fun with value: 10
11:56:06.199 [debug] Evaluating bend block with value: 10
11:56:06.199 [debug] Block returned: %{variant: :leaf}
11:56:06.199 [debug] Fun returned result: %{variant: :leaf}
11:56:06.199 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.199 [debug] do_bend final result: %{variant: :leaf}
11:56:06.199 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.199 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.199 [debug] Executing bend with initial: 8
11:56:06.199 [debug] Executing fun with value: 8
11:56:06.199 [debug] Evaluating bend block with value: 8
11:56:06.199 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.199 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.199 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.199 [debug] Executing bend with initial: 9
11:56:06.199 [debug] Executing fun with value: 9
11:56:06.199 [debug] Evaluating bend block with value: 9
11:56:06.199 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.199 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.200 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.200 [debug] Executing bend with initial: 10
11:56:06.200 [debug] Executing fun with value: 10
11:56:06.200 [debug] Evaluating bend block with value: 10
11:56:06.200 [debug] Block returned: %{variant: :leaf}
11:56:06.200 [debug] Fun returned result: %{variant: :leaf}
11:56:06.200 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.200 [debug] do_bend final result: %{variant: :leaf}
11:56:06.200 [debug] Executing bend with initial: 10
11:56:06.200 [debug] Executing fun with value: 10
11:56:06.200 [debug] Evaluating bend block with value: 10
11:56:06.200 [debug] Block returned: %{variant: :leaf}
11:56:06.200 [debug] Fun returned result: %{variant: :leaf}
11:56:06.200 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.200 [debug] do_bend final result: %{variant: :leaf}
11:56:06.200 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.200 [debug] Executing bend with initial: 9
11:56:06.200 [debug] Executing fun with value: 9
11:56:06.200 [debug] Evaluating bend block with value: 9
11:56:06.200 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.200 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.200 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.200 [debug] Executing bend with initial: 10
11:56:06.200 [debug] Executing fun with value: 10
11:56:06.200 [debug] Evaluating bend block with value: 10
11:56:06.200 [debug] Block returned: %{variant: :leaf}
11:56:06.200 [debug] Fun returned result: %{variant: :leaf}
11:56:06.200 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.200 [debug] do_bend final result: %{variant: :leaf}
11:56:06.200 [debug] Executing bend with initial: 10
11:56:06.200 [debug] Executing fun with value: 10
11:56:06.200 [debug] Evaluating bend block with value: 10
11:56:06.200 [debug] Block returned: %{variant: :leaf}
11:56:06.200 [debug] Fun returned result: %{variant: :leaf}
11:56:06.200 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.200 [debug] do_bend final result: %{variant: :leaf}
11:56:06.200 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.200 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.200 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.200 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.200 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.200 [debug] Executing bend with initial: 5
11:56:06.200 [debug] Executing fun with value: 5
11:56:06.200 [debug] Evaluating bend block with value: 5
11:56:06.200 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.200 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.200 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.200 [debug] Executing bend with initial: 6
11:56:06.200 [debug] Executing fun with value: 6
11:56:06.200 [debug] Evaluating bend block with value: 6
11:56:06.200 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.200 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.200 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.200 [debug] Executing bend with initial: 7
11:56:06.200 [debug] Executing fun with value: 7
11:56:06.200 [debug] Evaluating bend block with value: 7
11:56:06.200 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.200 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.200 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.200 [debug] Executing bend with initial: 8
11:56:06.200 [debug] Executing fun with value: 8
11:56:06.200 [debug] Evaluating bend block with value: 8
11:56:06.200 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.200 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.200 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.200 [debug] Executing bend with initial: 9
11:56:06.200 [debug] Executing fun with value: 9
11:56:06.200 [debug] Evaluating bend block with value: 9
11:56:06.200 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.200 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.200 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.200 [debug] Executing bend with initial: 10
11:56:06.200 [debug] Executing fun with value: 10
11:56:06.200 [debug] Evaluating bend block with value: 10
11:56:06.200 [debug] Block returned: %{variant: :leaf}
11:56:06.201 [debug] Fun returned result: %{variant: :leaf}
11:56:06.201 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.201 [debug] do_bend final result: %{variant: :leaf}
11:56:06.201 [debug] Executing bend with initial: 10
11:56:06.201 [debug] Executing fun with value: 10
11:56:06.201 [debug] Evaluating bend block with value: 10
11:56:06.201 [debug] Block returned: %{variant: :leaf}
11:56:06.201 [debug] Fun returned result: %{variant: :leaf}
11:56:06.201 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.201 [debug] do_bend final result: %{variant: :leaf}
11:56:06.201 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.201 [debug] Executing bend with initial: 9
11:56:06.201 [debug] Executing fun with value: 9
11:56:06.201 [debug] Evaluating bend block with value: 9
11:56:06.201 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.201 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.201 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.201 [debug] Executing bend with initial: 10
11:56:06.201 [debug] Executing fun with value: 10
11:56:06.201 [debug] Evaluating bend block with value: 10
11:56:06.201 [debug] Block returned: %{variant: :leaf}
11:56:06.201 [debug] Fun returned result: %{variant: :leaf}
11:56:06.201 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.201 [debug] do_bend final result: %{variant: :leaf}
11:56:06.201 [debug] Executing bend with initial: 10
11:56:06.201 [debug] Executing fun with value: 10
11:56:06.201 [debug] Evaluating bend block with value: 10
11:56:06.201 [debug] Block returned: %{variant: :leaf}
11:56:06.201 [debug] Fun returned result: %{variant: :leaf}
11:56:06.201 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.201 [debug] do_bend final result: %{variant: :leaf}
11:56:06.201 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.201 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.201 [debug] Executing bend with initial: 8
11:56:06.201 [debug] Executing fun with value: 8
11:56:06.201 [debug] Evaluating bend block with value: 8
11:56:06.201 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.201 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.201 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.201 [debug] Executing bend with initial: 9
11:56:06.201 [debug] Executing fun with value: 9
11:56:06.201 [debug] Evaluating bend block with value: 9
11:56:06.201 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.201 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.201 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.201 [debug] Executing bend with initial: 10
11:56:06.201 [debug] Executing fun with value: 10
11:56:06.201 [debug] Evaluating bend block with value: 10
11:56:06.201 [debug] Block returned: %{variant: :leaf}
11:56:06.201 [debug] Fun returned result: %{variant: :leaf}
11:56:06.201 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.201 [debug] do_bend final result: %{variant: :leaf}
11:56:06.201 [debug] Executing bend with initial: 10
11:56:06.201 [debug] Executing fun with value: 10
11:56:06.201 [debug] Evaluating bend block with value: 10
11:56:06.201 [debug] Block returned: %{variant: :leaf}
11:56:06.201 [debug] Fun returned result: %{variant: :leaf}
11:56:06.201 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.201 [debug] do_bend final result: %{variant: :leaf}
11:56:06.201 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.201 [debug] Executing bend with initial: 9
11:56:06.201 [debug] Executing fun with value: 9
11:56:06.201 [debug] Evaluating bend block with value: 9
11:56:06.201 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.201 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.201 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.201 [debug] Executing bend with initial: 10
11:56:06.201 [debug] Executing fun with value: 10
11:56:06.201 [debug] Evaluating bend block with value: 10
11:56:06.201 [debug] Block returned: %{variant: :leaf}
11:56:06.201 [debug] Fun returned result: %{variant: :leaf}
11:56:06.201 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.201 [debug] do_bend final result: %{variant: :leaf}
11:56:06.201 [debug] Executing bend with initial: 10
11:56:06.201 [debug] Executing fun with value: 10
11:56:06.201 [debug] Evaluating bend block with value: 10
11:56:06.201 [debug] Block returned: %{variant: :leaf}
11:56:06.201 [debug] Fun returned result: %{variant: :leaf}
11:56:06.201 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.201 [debug] do_bend final result: %{variant: :leaf}
11:56:06.201 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.201 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.201 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.202 [debug] Executing bend with initial: 7
11:56:06.202 [debug] Executing fun with value: 7
11:56:06.202 [debug] Evaluating bend block with value: 7
11:56:06.202 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.202 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.202 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.202 [debug] Executing bend with initial: 8
11:56:06.202 [debug] Executing fun with value: 8
11:56:06.202 [debug] Evaluating bend block with value: 8
11:56:06.202 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.202 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.202 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.202 [debug] Executing bend with initial: 9
11:56:06.202 [debug] Executing fun with value: 9
11:56:06.202 [debug] Evaluating bend block with value: 9
11:56:06.202 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.202 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.202 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.202 [debug] Executing bend with initial: 10
11:56:06.202 [debug] Executing fun with value: 10
11:56:06.202 [debug] Evaluating bend block with value: 10
11:56:06.202 [debug] Block returned: %{variant: :leaf}
11:56:06.202 [debug] Fun returned result: %{variant: :leaf}
11:56:06.202 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.202 [debug] do_bend final result: %{variant: :leaf}
11:56:06.202 [debug] Executing bend with initial: 10
11:56:06.202 [debug] Executing fun with value: 10
11:56:06.202 [debug] Evaluating bend block with value: 10
11:56:06.202 [debug] Block returned: %{variant: :leaf}
11:56:06.202 [debug] Fun returned result: %{variant: :leaf}
11:56:06.202 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.202 [debug] do_bend final result: %{variant: :leaf}
11:56:06.202 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.202 [debug] Executing bend with initial: 9
11:56:06.202 [debug] Executing fun with value: 9
11:56:06.202 [debug] Evaluating bend block with value: 9
11:56:06.202 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.202 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.202 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.202 [debug] Executing bend with initial: 10
11:56:06.202 [debug] Executing fun with value: 10
11:56:06.202 [debug] Evaluating bend block with value: 10
11:56:06.202 [debug] Block returned: %{variant: :leaf}
11:56:06.202 [debug] Fun returned result: %{variant: :leaf}
11:56:06.202 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.202 [debug] do_bend final result: %{variant: :leaf}
11:56:06.202 [debug] Executing bend with initial: 10
11:56:06.202 [debug] Executing fun with value: 10
11:56:06.202 [debug] Evaluating bend block with value: 10
11:56:06.202 [debug] Block returned: %{variant: :leaf}
11:56:06.202 [debug] Fun returned result: %{variant: :leaf}
11:56:06.202 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.202 [debug] do_bend final result: %{variant: :leaf}
11:56:06.202 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.202 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.202 [debug] Executing bend with initial: 8
11:56:06.202 [debug] Executing fun with value: 8
11:56:06.202 [debug] Evaluating bend block with value: 8
11:56:06.202 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.202 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.202 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.202 [debug] Executing bend with initial: 9
11:56:06.202 [debug] Executing fun with value: 9
11:56:06.202 [debug] Evaluating bend block with value: 9
11:56:06.202 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.202 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.202 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.202 [debug] Executing bend with initial: 10
11:56:06.202 [debug] Executing fun with value: 10
11:56:06.202 [debug] Evaluating bend block with value: 10
11:56:06.202 [debug] Block returned: %{variant: :leaf}
11:56:06.202 [debug] Fun returned result: %{variant: :leaf}
11:56:06.202 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.202 [debug] do_bend final result: %{variant: :leaf}
11:56:06.202 [debug] Executing bend with initial: 10
11:56:06.202 [debug] Executing fun with value: 10
11:56:06.202 [debug] Evaluating bend block with value: 10
11:56:06.202 [debug] Block returned: %{variant: :leaf}
11:56:06.202 [debug] Fun returned result: %{variant: :leaf}
11:56:06.202 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.202 [debug] do_bend final result: %{variant: :leaf}
11:56:06.202 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.202 [debug] Executing bend with initial: 9
11:56:06.202 [debug] Executing fun with value: 9
11:56:06.202 [debug] Evaluating bend block with value: 9
11:56:06.202 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.202 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.202 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.202 [debug] Executing bend with initial: 10
11:56:06.202 [debug] Executing fun with value: 10
11:56:06.202 [debug] Evaluating bend block with value: 10
11:56:06.202 [debug] Block returned: %{variant: :leaf}
11:56:06.202 [debug] Fun returned result: %{variant: :leaf}
11:56:06.202 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.202 [debug] do_bend final result: %{variant: :leaf}
11:56:06.202 [debug] Executing bend with initial: 10
11:56:06.202 [debug] Executing fun with value: 10
11:56:06.203 [debug] Evaluating bend block with value: 10
11:56:06.203 [debug] Block returned: %{variant: :leaf}
11:56:06.203 [debug] Fun returned result: %{variant: :leaf}
11:56:06.203 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.203 [debug] do_bend final result: %{variant: :leaf}
11:56:06.203 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.203 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.203 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.203 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.203 [debug] Executing bend with initial: 6
11:56:06.203 [debug] Executing fun with value: 6
11:56:06.203 [debug] Evaluating bend block with value: 6
11:56:06.203 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.203 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.203 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.203 [debug] Executing bend with initial: 7
11:56:06.203 [debug] Executing fun with value: 7
11:56:06.203 [debug] Evaluating bend block with value: 7
11:56:06.203 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.203 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.203 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.203 [debug] Executing bend with initial: 8
11:56:06.203 [debug] Executing fun with value: 8
11:56:06.203 [debug] Evaluating bend block with value: 8
11:56:06.203 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.203 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.203 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.203 [debug] Executing bend with initial: 9
11:56:06.203 [debug] Executing fun with value: 9
11:56:06.203 [debug] Evaluating bend block with value: 9
11:56:06.203 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.203 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.203 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.203 [debug] Executing bend with initial: 10
11:56:06.203 [debug] Executing fun with value: 10
11:56:06.203 [debug] Evaluating bend block with value: 10
11:56:06.203 [debug] Block returned: %{variant: :leaf}
11:56:06.203 [debug] Fun returned result: %{variant: :leaf}
11:56:06.203 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.203 [debug] do_bend final result: %{variant: :leaf}
11:56:06.203 [debug] Executing bend with initial: 10
11:56:06.203 [debug] Executing fun with value: 10
11:56:06.203 [debug] Evaluating bend block with value: 10
11:56:06.203 [debug] Block returned: %{variant: :leaf}
11:56:06.203 [debug] Fun returned result: %{variant: :leaf}
11:56:06.203 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.203 [debug] do_bend final result: %{variant: :leaf}
11:56:06.203 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.203 [debug] Executing bend with initial: 9
11:56:06.203 [debug] Executing fun with value: 9
11:56:06.203 [debug] Evaluating bend block with value: 9
11:56:06.203 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.203 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.203 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.203 [debug] Executing bend with initial: 10
11:56:06.203 [debug] Executing fun with value: 10
11:56:06.203 [debug] Evaluating bend block with value: 10
11:56:06.203 [debug] Block returned: %{variant: :leaf}
11:56:06.203 [debug] Fun returned result: %{variant: :leaf}
11:56:06.203 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.203 [debug] do_bend final result: %{variant: :leaf}
11:56:06.203 [debug] Executing bend with initial: 10
11:56:06.203 [debug] Executing fun with value: 10
11:56:06.203 [debug] Evaluating bend block with value: 10
11:56:06.203 [debug] Block returned: %{variant: :leaf}
11:56:06.203 [debug] Fun returned result: %{variant: :leaf}
11:56:06.203 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.203 [debug] do_bend final result: %{variant: :leaf}
11:56:06.203 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.203 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.203 [debug] Executing bend with initial: 8
11:56:06.203 [debug] Executing fun with value: 8
11:56:06.203 [debug] Evaluating bend block with value: 8
11:56:06.203 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.203 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.203 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.203 [debug] Executing bend with initial: 9
11:56:06.203 [debug] Executing fun with value: 9
11:56:06.203 [debug] Evaluating bend block with value: 9
11:56:06.203 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.203 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.203 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.203 [debug] Executing bend with initial: 10
11:56:06.203 [debug] Executing fun with value: 10
11:56:06.204 [debug] Evaluating bend block with value: 10
11:56:06.204 [debug] Block returned: %{variant: :leaf}
11:56:06.204 [debug] Fun returned result: %{variant: :leaf}
11:56:06.204 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.204 [debug] do_bend final result: %{variant: :leaf}
11:56:06.204 [debug] Executing bend with initial: 10
11:56:06.204 [debug] Executing fun with value: 10
11:56:06.204 [debug] Evaluating bend block with value: 10
11:56:06.204 [debug] Block returned: %{variant: :leaf}
11:56:06.204 [debug] Fun returned result: %{variant: :leaf}
11:56:06.204 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.204 [debug] do_bend final result: %{variant: :leaf}
11:56:06.204 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.204 [debug] Executing bend with initial: 9
11:56:06.204 [debug] Executing fun with value: 9
11:56:06.204 [debug] Evaluating bend block with value: 9
11:56:06.204 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.204 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.204 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.204 [debug] Executing bend with initial: 10
11:56:06.204 [debug] Executing fun with value: 10
11:56:06.204 [debug] Evaluating bend block with value: 10
11:56:06.204 [debug] Block returned: %{variant: :leaf}
11:56:06.204 [debug] Fun returned result: %{variant: :leaf}
11:56:06.204 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.204 [debug] do_bend final result: %{variant: :leaf}
11:56:06.204 [debug] Executing bend with initial: 10
11:56:06.204 [debug] Executing fun with value: 10
11:56:06.204 [debug] Evaluating bend block with value: 10
11:56:06.204 [debug] Block returned: %{variant: :leaf}
11:56:06.204 [debug] Fun returned result: %{variant: :leaf}
11:56:06.204 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.204 [debug] do_bend final result: %{variant: :leaf}
11:56:06.204 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.204 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.204 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.204 [debug] Executing bend with initial: 7
11:56:06.204 [debug] Executing fun with value: 7
11:56:06.204 [debug] Evaluating bend block with value: 7
11:56:06.204 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.204 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.204 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.204 [debug] Executing bend with initial: 8
11:56:06.204 [debug] Executing fun with value: 8
11:56:06.204 [debug] Evaluating bend block with value: 8
11:56:06.204 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.204 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.204 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.204 [debug] Executing bend with initial: 9
11:56:06.204 [debug] Executing fun with value: 9
11:56:06.204 [debug] Evaluating bend block with value: 9
11:56:06.204 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.204 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.204 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.204 [debug] Executing bend with initial: 10
11:56:06.204 [debug] Executing fun with value: 10
11:56:06.204 [debug] Evaluating bend block with value: 10
11:56:06.204 [debug] Block returned: %{variant: :leaf}
11:56:06.204 [debug] Fun returned result: %{variant: :leaf}
11:56:06.204 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.204 [debug] do_bend final result: %{variant: :leaf}
11:56:06.204 [debug] Executing bend with initial: 10
11:56:06.204 [debug] Executing fun with value: 10
11:56:06.204 [debug] Evaluating bend block with value: 10
11:56:06.204 [debug] Block returned: %{variant: :leaf}
11:56:06.204 [debug] Fun returned result: %{variant: :leaf}
11:56:06.204 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.204 [debug] do_bend final result: %{variant: :leaf}
11:56:06.204 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.204 [debug] Executing bend with initial: 9
11:56:06.204 [debug] Executing fun with value: 9
11:56:06.204 [debug] Evaluating bend block with value: 9
11:56:06.204 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.204 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.204 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.204 [debug] Executing bend with initial: 10
11:56:06.204 [debug] Executing fun with value: 10
11:56:06.204 [debug] Evaluating bend block with value: 10
11:56:06.204 [debug] Block returned: %{variant: :leaf}
11:56:06.204 [debug] Fun returned result: %{variant: :leaf}
11:56:06.204 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.204 [debug] do_bend final result: %{variant: :leaf}
11:56:06.204 [debug] Executing bend with initial: 10
11:56:06.204 [debug] Executing fun with value: 10
11:56:06.204 [debug] Evaluating bend block with value: 10
11:56:06.204 [debug] Block returned: %{variant: :leaf}
11:56:06.204 [debug] Fun returned result: %{variant: :leaf}
11:56:06.204 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.204 [debug] do_bend final result: %{variant: :leaf}
11:56:06.204 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.204 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.204 [debug] Executing bend with initial: 8
11:56:06.204 [debug] Executing fun with value: 8
11:56:06.204 [debug] Evaluating bend block with value: 8
11:56:06.204 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.204 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.204 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.204 [debug] Executing bend with initial: 9
11:56:06.204 [debug] Executing fun with value: 9
11:56:06.204 [debug] Evaluating bend block with value: 9
11:56:06.205 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.205 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.205 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.205 [debug] Executing bend with initial: 10
11:56:06.205 [debug] Executing fun with value: 10
11:56:06.205 [debug] Evaluating bend block with value: 10
11:56:06.205 [debug] Block returned: %{variant: :leaf}
11:56:06.205 [debug] Fun returned result: %{variant: :leaf}
11:56:06.205 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.205 [debug] do_bend final result: %{variant: :leaf}
11:56:06.205 [debug] Executing bend with initial: 10
11:56:06.205 [debug] Executing fun with value: 10
11:56:06.205 [debug] Evaluating bend block with value: 10
11:56:06.205 [debug] Block returned: %{variant: :leaf}
11:56:06.205 [debug] Fun returned result: %{variant: :leaf}
11:56:06.205 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.205 [debug] do_bend final result: %{variant: :leaf}
11:56:06.205 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.205 [debug] Executing bend with initial: 9
11:56:06.205 [debug] Executing fun with value: 9
11:56:06.205 [debug] Evaluating bend block with value: 9
11:56:06.205 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.205 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.205 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.205 [debug] Executing bend with initial: 10
11:56:06.205 [debug] Executing fun with value: 10
11:56:06.205 [debug] Evaluating bend block with value: 10
11:56:06.205 [debug] Block returned: %{variant: :leaf}
11:56:06.205 [debug] Fun returned result: %{variant: :leaf}
11:56:06.205 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.205 [debug] do_bend final result: %{variant: :leaf}
11:56:06.205 [debug] Executing bend with initial: 10
11:56:06.205 [debug] Executing fun with value: 10
11:56:06.205 [debug] Evaluating bend block with value: 10
11:56:06.205 [debug] Block returned: %{variant: :leaf}
11:56:06.205 [debug] Fun returned result: %{variant: :leaf}
11:56:06.205 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.205 [debug] do_bend final result: %{variant: :leaf}
11:56:06.205 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.205 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.205 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.205 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.205 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.206 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.207 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.207 [debug] Executing bend with initial: 3
11:56:06.207 [debug] Executing fun with value: 3
11:56:06.207 [debug] Evaluating bend block with value: 3
11:56:06.207 [debug] Block returned: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.207 [debug] Fun returned result: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.207 [debug] Processing constructed value: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.207 [debug] Executing bend with initial: 4
11:56:06.207 [debug] Executing fun with value: 4
11:56:06.207 [debug] Evaluating bend block with value: 4
11:56:06.207 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.207 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.207 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.207 [debug] Executing bend with initial: 5
11:56:06.207 [debug] Executing fun with value: 5
11:56:06.207 [debug] Evaluating bend block with value: 5
11:56:06.207 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.207 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.207 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.207 [debug] Executing bend with initial: 6
11:56:06.207 [debug] Executing fun with value: 6
11:56:06.207 [debug] Evaluating bend block with value: 6
11:56:06.207 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.207 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.207 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.207 [debug] Executing bend with initial: 7
11:56:06.207 [debug] Executing fun with value: 7
11:56:06.207 [debug] Evaluating bend block with value: 7
11:56:06.207 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.207 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.207 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.207 [debug] Executing bend with initial: 8
11:56:06.207 [debug] Executing fun with value: 8
11:56:06.207 [debug] Evaluating bend block with value: 8
11:56:06.207 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.207 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.207 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.207 [debug] Executing bend with initial: 9
11:56:06.207 [debug] Executing fun with value: 9
11:56:06.207 [debug] Evaluating bend block with value: 9
11:56:06.207 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.207 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.207 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.207 [debug] Executing bend with initial: 10
11:56:06.207 [debug] Executing fun with value: 10
11:56:06.207 [debug] Evaluating bend block with value: 10
11:56:06.207 [debug] Block returned: %{variant: :leaf}
11:56:06.207 [debug] Fun returned result: %{variant: :leaf}
11:56:06.207 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.207 [debug] do_bend final result: %{variant: :leaf}
11:56:06.207 [debug] Executing bend with initial: 10
11:56:06.207 [debug] Executing fun with value: 10
11:56:06.207 [debug] Evaluating bend block with value: 10
11:56:06.207 [debug] Block returned: %{variant: :leaf}
11:56:06.207 [debug] Fun returned result: %{variant: :leaf}
11:56:06.207 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.207 [debug] do_bend final result: %{variant: :leaf}
11:56:06.207 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.207 [debug] Executing bend with initial: 9
11:56:06.207 [debug] Executing fun with value: 9
11:56:06.207 [debug] Evaluating bend block with value: 9
11:56:06.207 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.207 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.207 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.207 [debug] Executing bend with initial: 10
11:56:06.207 [debug] Executing fun with value: 10
11:56:06.208 [debug] Evaluating bend block with value: 10
11:56:06.208 [debug] Block returned: %{variant: :leaf}
11:56:06.208 [debug] Fun returned result: %{variant: :leaf}
11:56:06.208 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.208 [debug] do_bend final result: %{variant: :leaf}
11:56:06.208 [debug] Executing bend with initial: 10
11:56:06.208 [debug] Executing fun with value: 10
11:56:06.208 [debug] Evaluating bend block with value: 10
11:56:06.208 [debug] Block returned: %{variant: :leaf}
11:56:06.208 [debug] Fun returned result: %{variant: :leaf}
11:56:06.208 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.208 [debug] do_bend final result: %{variant: :leaf}
11:56:06.208 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.208 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.208 [debug] Executing bend with initial: 8
11:56:06.208 [debug] Executing fun with value: 8
11:56:06.208 [debug] Evaluating bend block with value: 8
11:56:06.208 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.208 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.208 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.208 [debug] Executing bend with initial: 9
11:56:06.208 [debug] Executing fun with value: 9
11:56:06.208 [debug] Evaluating bend block with value: 9
11:56:06.208 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.208 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.208 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.208 [debug] Executing bend with initial: 10
11:56:06.208 [debug] Executing fun with value: 10
11:56:06.208 [debug] Evaluating bend block with value: 10
11:56:06.208 [debug] Block returned: %{variant: :leaf}
11:56:06.208 [debug] Fun returned result: %{variant: :leaf}
11:56:06.208 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.208 [debug] do_bend final result: %{variant: :leaf}
11:56:06.208 [debug] Executing bend with initial: 10
11:56:06.208 [debug] Executing fun with value: 10
11:56:06.208 [debug] Evaluating bend block with value: 10
11:56:06.208 [debug] Block returned: %{variant: :leaf}
11:56:06.208 [debug] Fun returned result: %{variant: :leaf}
11:56:06.208 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.208 [debug] do_bend final result: %{variant: :leaf}
11:56:06.208 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.208 [debug] Executing bend with initial: 9
11:56:06.208 [debug] Executing fun with value: 9
11:56:06.208 [debug] Evaluating bend block with value: 9
11:56:06.208 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.208 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.208 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.208 [debug] Executing bend with initial: 10
11:56:06.208 [debug] Executing fun with value: 10
11:56:06.208 [debug] Evaluating bend block with value: 10
11:56:06.208 [debug] Block returned: %{variant: :leaf}
11:56:06.208 [debug] Fun returned result: %{variant: :leaf}
11:56:06.208 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.208 [debug] do_bend final result: %{variant: :leaf}
11:56:06.208 [debug] Executing bend with initial: 10
11:56:06.208 [debug] Executing fun with value: 10
11:56:06.208 [debug] Evaluating bend block with value: 10
11:56:06.208 [debug] Block returned: %{variant: :leaf}
11:56:06.208 [debug] Fun returned result: %{variant: :leaf}
11:56:06.208 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.208 [debug] do_bend final result: %{variant: :leaf}
11:56:06.208 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.208 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.208 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.208 [debug] Executing bend with initial: 7
11:56:06.208 [debug] Executing fun with value: 7
11:56:06.208 [debug] Evaluating bend block with value: 7
11:56:06.208 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.208 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.208 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.208 [debug] Executing bend with initial: 8
11:56:06.208 [debug] Executing fun with value: 8
11:56:06.208 [debug] Evaluating bend block with value: 8
11:56:06.208 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.208 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.208 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.208 [debug] Executing bend with initial: 9
11:56:06.208 [debug] Executing fun with value: 9
11:56:06.208 [debug] Evaluating bend block with value: 9
11:56:06.208 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.209 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.209 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.209 [debug] Executing bend with initial: 10
11:56:06.209 [debug] Executing fun with value: 10
11:56:06.209 [debug] Evaluating bend block with value: 10
11:56:06.209 [debug] Block returned: %{variant: :leaf}
11:56:06.209 [debug] Fun returned result: %{variant: :leaf}
11:56:06.209 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.209 [debug] do_bend final result: %{variant: :leaf}
11:56:06.209 [debug] Executing bend with initial: 10
11:56:06.209 [debug] Executing fun with value: 10
11:56:06.209 [debug] Evaluating bend block with value: 10
11:56:06.209 [debug] Block returned: %{variant: :leaf}
11:56:06.209 [debug] Fun returned result: %{variant: :leaf}
11:56:06.209 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.209 [debug] do_bend final result: %{variant: :leaf}
11:56:06.209 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.209 [debug] Executing bend with initial: 9
11:56:06.209 [debug] Executing fun with value: 9
11:56:06.209 [debug] Evaluating bend block with value: 9
11:56:06.209 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.209 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.209 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.209 [debug] Executing bend with initial: 10
11:56:06.209 [debug] Executing fun with value: 10
11:56:06.209 [debug] Evaluating bend block with value: 10
11:56:06.209 [debug] Block returned: %{variant: :leaf}
11:56:06.209 [debug] Fun returned result: %{variant: :leaf}
11:56:06.209 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.209 [debug] do_bend final result: %{variant: :leaf}
11:56:06.209 [debug] Executing bend with initial: 10
11:56:06.209 [debug] Executing fun with value: 10
11:56:06.209 [debug] Evaluating bend block with value: 10
11:56:06.209 [debug] Block returned: %{variant: :leaf}
11:56:06.209 [debug] Fun returned result: %{variant: :leaf}
11:56:06.209 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.209 [debug] do_bend final result: %{variant: :leaf}
11:56:06.209 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.209 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.209 [debug] Executing bend with initial: 8
11:56:06.209 [debug] Executing fun with value: 8
11:56:06.209 [debug] Evaluating bend block with value: 8
11:56:06.209 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.209 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.209 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.209 [debug] Executing bend with initial: 9
11:56:06.209 [debug] Executing fun with value: 9
11:56:06.209 [debug] Evaluating bend block with value: 9
11:56:06.209 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.209 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.209 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.209 [debug] Executing bend with initial: 10
11:56:06.209 [debug] Executing fun with value: 10
11:56:06.209 [debug] Evaluating bend block with value: 10
11:56:06.209 [debug] Block returned: %{variant: :leaf}
11:56:06.209 [debug] Fun returned result: %{variant: :leaf}
11:56:06.209 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.209 [debug] do_bend final result: %{variant: :leaf}
11:56:06.209 [debug] Executing bend with initial: 10
11:56:06.209 [debug] Executing fun with value: 10
11:56:06.209 [debug] Evaluating bend block with value: 10
11:56:06.209 [debug] Block returned: %{variant: :leaf}
11:56:06.209 [debug] Fun returned result: %{variant: :leaf}
11:56:06.209 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.209 [debug] do_bend final result: %{variant: :leaf}
11:56:06.209 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.209 [debug] Executing bend with initial: 9
11:56:06.209 [debug] Executing fun with value: 9
11:56:06.209 [debug] Evaluating bend block with value: 9
11:56:06.209 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.210 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.210 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.210 [debug] Executing bend with initial: 10
11:56:06.210 [debug] Executing fun with value: 10
11:56:06.210 [debug] Evaluating bend block with value: 10
11:56:06.210 [debug] Block returned: %{variant: :leaf}
11:56:06.210 [debug] Fun returned result: %{variant: :leaf}
11:56:06.210 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.210 [debug] do_bend final result: %{variant: :leaf}
11:56:06.210 [debug] Executing bend with initial: 10
11:56:06.210 [debug] Executing fun with value: 10
11:56:06.210 [debug] Evaluating bend block with value: 10
11:56:06.210 [debug] Block returned: %{variant: :leaf}
11:56:06.210 [debug] Fun returned result: %{variant: :leaf}
11:56:06.210 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.210 [debug] do_bend final result: %{variant: :leaf}
11:56:06.210 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.210 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.210 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.210 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.210 [debug] Executing bend with initial: 6
11:56:06.210 [debug] Executing fun with value: 6
11:56:06.210 [debug] Evaluating bend block with value: 6
11:56:06.210 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.210 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.210 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.210 [debug] Executing bend with initial: 7
11:56:06.210 [debug] Executing fun with value: 7
11:56:06.210 [debug] Evaluating bend block with value: 7
11:56:06.210 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.210 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.210 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.210 [debug] Executing bend with initial: 8
11:56:06.210 [debug] Executing fun with value: 8
11:56:06.210 [debug] Evaluating bend block with value: 8
11:56:06.210 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.210 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.210 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.210 [debug] Executing bend with initial: 9
11:56:06.210 [debug] Executing fun with value: 9
11:56:06.210 [debug] Evaluating bend block with value: 9
11:56:06.210 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.210 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.210 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.210 [debug] Executing bend with initial: 10
11:56:06.210 [debug] Executing fun with value: 10
11:56:06.210 [debug] Evaluating bend block with value: 10
11:56:06.210 [debug] Block returned: %{variant: :leaf}
11:56:06.210 [debug] Fun returned result: %{variant: :leaf}
11:56:06.210 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.210 [debug] do_bend final result: %{variant: :leaf}
11:56:06.210 [debug] Executing bend with initial: 10
11:56:06.210 [debug] Executing fun with value: 10
11:56:06.210 [debug] Evaluating bend block with value: 10
11:56:06.210 [debug] Block returned: %{variant: :leaf}
11:56:06.210 [debug] Fun returned result: %{variant: :leaf}
11:56:06.210 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.210 [debug] do_bend final result: %{variant: :leaf}
11:56:06.210 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.210 [debug] Executing bend with initial: 9
11:56:06.210 [debug] Executing fun with value: 9
11:56:06.210 [debug] Evaluating bend block with value: 9
11:56:06.210 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.210 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.210 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.210 [debug] Executing bend with initial: 10
11:56:06.210 [debug] Executing fun with value: 10
11:56:06.210 [debug] Evaluating bend block with value: 10
11:56:06.211 [debug] Block returned: %{variant: :leaf}
11:56:06.211 [debug] Fun returned result: %{variant: :leaf}
11:56:06.211 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.211 [debug] do_bend final result: %{variant: :leaf}
11:56:06.211 [debug] Executing bend with initial: 10
11:56:06.211 [debug] Executing fun with value: 10
11:56:06.211 [debug] Evaluating bend block with value: 10
11:56:06.211 [debug] Block returned: %{variant: :leaf}
11:56:06.211 [debug] Fun returned result: %{variant: :leaf}
11:56:06.211 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.211 [debug] do_bend final result: %{variant: :leaf}
11:56:06.211 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.211 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.211 [debug] Executing bend with initial: 8
11:56:06.211 [debug] Executing fun with value: 8
11:56:06.211 [debug] Evaluating bend block with value: 8
11:56:06.211 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.211 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.211 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.211 [debug] Executing bend with initial: 9
11:56:06.211 [debug] Executing fun with value: 9
11:56:06.211 [debug] Evaluating bend block with value: 9
11:56:06.211 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.211 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.211 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.211 [debug] Executing bend with initial: 10
11:56:06.211 [debug] Executing fun with value: 10
11:56:06.211 [debug] Evaluating bend block with value: 10
11:56:06.211 [debug] Block returned: %{variant: :leaf}
11:56:06.211 [debug] Fun returned result: %{variant: :leaf}
11:56:06.211 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.211 [debug] do_bend final result: %{variant: :leaf}
11:56:06.211 [debug] Executing bend with initial: 10
11:56:06.211 [debug] Executing fun with value: 10
11:56:06.211 [debug] Evaluating bend block with value: 10
11:56:06.211 [debug] Block returned: %{variant: :leaf}
11:56:06.211 [debug] Fun returned result: %{variant: :leaf}
11:56:06.211 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.211 [debug] do_bend final result: %{variant: :leaf}
11:56:06.211 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.211 [debug] Executing bend with initial: 9
11:56:06.211 [debug] Executing fun with value: 9
11:56:06.211 [debug] Evaluating bend block with value: 9
11:56:06.211 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.211 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.211 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.211 [debug] Executing bend with initial: 10
11:56:06.211 [debug] Executing fun with value: 10
11:56:06.211 [debug] Evaluating bend block with value: 10
11:56:06.211 [debug] Block returned: %{variant: :leaf}
11:56:06.211 [debug] Fun returned result: %{variant: :leaf}
11:56:06.211 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.211 [debug] do_bend final result: %{variant: :leaf}
11:56:06.211 [debug] Executing bend with initial: 10
11:56:06.211 [debug] Executing fun with value: 10
11:56:06.211 [debug] Evaluating bend block with value: 10
11:56:06.211 [debug] Block returned: %{variant: :leaf}
11:56:06.211 [debug] Fun returned result: %{variant: :leaf}
11:56:06.211 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.211 [debug] do_bend final result: %{variant: :leaf}
11:56:06.211 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.211 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.211 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.211 [debug] Executing bend with initial: 7
11:56:06.211 [debug] Executing fun with value: 7
11:56:06.211 [debug] Evaluating bend block with value: 7
11:56:06.211 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.211 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.211 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.211 [debug] Executing bend with initial: 8
11:56:06.211 [debug] Executing fun with value: 8
11:56:06.211 [debug] Evaluating bend block with value: 8
11:56:06.211 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.211 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.211 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.211 [debug] Executing bend with initial: 9
11:56:06.211 [debug] Executing fun with value: 9
11:56:06.211 [debug] Evaluating bend block with value: 9
11:56:06.211 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.211 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.211 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.211 [debug] Executing bend with initial: 10
11:56:06.211 [debug] Executing fun with value: 10
11:56:06.211 [debug] Evaluating bend block with value: 10
11:56:06.211 [debug] Block returned: %{variant: :leaf}
11:56:06.211 [debug] Fun returned result: %{variant: :leaf}
11:56:06.211 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.211 [debug] do_bend final result: %{variant: :leaf}
11:56:06.211 [debug] Executing bend with initial: 10
11:56:06.211 [debug] Executing fun with value: 10
11:56:06.211 [debug] Evaluating bend block with value: 10
11:56:06.211 [debug] Block returned: %{variant: :leaf}
11:56:06.211 [debug] Fun returned result: %{variant: :leaf}
11:56:06.211 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.211 [debug] do_bend final result: %{variant: :leaf}
11:56:06.211 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.211 [debug] Executing bend with initial: 9
11:56:06.212 [debug] Executing fun with value: 9
11:56:06.212 [debug] Evaluating bend block with value: 9
11:56:06.212 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.212 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.212 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.212 [debug] Executing bend with initial: 10
11:56:06.212 [debug] Executing fun with value: 10
11:56:06.212 [debug] Evaluating bend block with value: 10
11:56:06.212 [debug] Block returned: %{variant: :leaf}
11:56:06.212 [debug] Fun returned result: %{variant: :leaf}
11:56:06.212 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.212 [debug] do_bend final result: %{variant: :leaf}
11:56:06.212 [debug] Executing bend with initial: 10
11:56:06.212 [debug] Executing fun with value: 10
11:56:06.212 [debug] Evaluating bend block with value: 10
11:56:06.212 [debug] Block returned: %{variant: :leaf}
11:56:06.212 [debug] Fun returned result: %{variant: :leaf}
11:56:06.212 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.212 [debug] do_bend final result: %{variant: :leaf}
11:56:06.212 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.212 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.212 [debug] Executing bend with initial: 8
11:56:06.212 [debug] Executing fun with value: 8
11:56:06.212 [debug] Evaluating bend block with value: 8
11:56:06.212 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.212 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.212 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.212 [debug] Executing bend with initial: 9
11:56:06.212 [debug] Executing fun with value: 9
11:56:06.212 [debug] Evaluating bend block with value: 9
11:56:06.212 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.212 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.212 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.212 [debug] Executing bend with initial: 10
11:56:06.212 [debug] Executing fun with value: 10
11:56:06.212 [debug] Evaluating bend block with value: 10
11:56:06.212 [debug] Block returned: %{variant: :leaf}
11:56:06.212 [debug] Fun returned result: %{variant: :leaf}
11:56:06.212 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.212 [debug] do_bend final result: %{variant: :leaf}
11:56:06.212 [debug] Executing bend with initial: 10
11:56:06.212 [debug] Executing fun with value: 10
11:56:06.212 [debug] Evaluating bend block with value: 10
11:56:06.212 [debug] Block returned: %{variant: :leaf}
11:56:06.212 [debug] Fun returned result: %{variant: :leaf}
11:56:06.212 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.212 [debug] do_bend final result: %{variant: :leaf}
11:56:06.212 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.212 [debug] Executing bend with initial: 9
11:56:06.212 [debug] Executing fun with value: 9
11:56:06.212 [debug] Evaluating bend block with value: 9
11:56:06.212 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.212 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.212 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.212 [debug] Executing bend with initial: 10
11:56:06.212 [debug] Executing fun with value: 10
11:56:06.212 [debug] Evaluating bend block with value: 10
11:56:06.212 [debug] Block returned: %{variant: :leaf}
11:56:06.212 [debug] Fun returned result: %{variant: :leaf}
11:56:06.212 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.212 [debug] do_bend final result: %{variant: :leaf}
11:56:06.212 [debug] Executing bend with initial: 10
11:56:06.212 [debug] Executing fun with value: 10
11:56:06.212 [debug] Evaluating bend block with value: 10
11:56:06.212 [debug] Block returned: %{variant: :leaf}
11:56:06.212 [debug] Fun returned result: %{variant: :leaf}
11:56:06.212 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.212 [debug] do_bend final result: %{variant: :leaf}
11:56:06.212 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.212 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.212 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.212 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.213 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.213 [debug] Executing bend with initial: 5
11:56:06.213 [debug] Executing fun with value: 5
11:56:06.213 [debug] Evaluating bend block with value: 5
11:56:06.213 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.213 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.213 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.213 [debug] Executing bend with initial: 6
11:56:06.213 [debug] Executing fun with value: 6
11:56:06.213 [debug] Evaluating bend block with value: 6
11:56:06.213 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.213 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.213 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.213 [debug] Executing bend with initial: 7
11:56:06.213 [debug] Executing fun with value: 7
11:56:06.213 [debug] Evaluating bend block with value: 7
11:56:06.213 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.213 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.213 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.213 [debug] Executing bend with initial: 8
11:56:06.213 [debug] Executing fun with value: 8
11:56:06.213 [debug] Evaluating bend block with value: 8
11:56:06.213 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.213 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.213 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.213 [debug] Executing bend with initial: 9
11:56:06.213 [debug] Executing fun with value: 9
11:56:06.213 [debug] Evaluating bend block with value: 9
11:56:06.213 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.213 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.213 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.213 [debug] Executing bend with initial: 10
11:56:06.213 [debug] Executing fun with value: 10
11:56:06.213 [debug] Evaluating bend block with value: 10
11:56:06.213 [debug] Block returned: %{variant: :leaf}
11:56:06.213 [debug] Fun returned result: %{variant: :leaf}
11:56:06.213 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.213 [debug] do_bend final result: %{variant: :leaf}
11:56:06.213 [debug] Executing bend with initial: 10
11:56:06.213 [debug] Executing fun with value: 10
11:56:06.213 [debug] Evaluating bend block with value: 10
11:56:06.213 [debug] Block returned: %{variant: :leaf}
11:56:06.213 [debug] Fun returned result: %{variant: :leaf}
11:56:06.213 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.213 [debug] do_bend final result: %{variant: :leaf}
11:56:06.213 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.213 [debug] Executing bend with initial: 9
11:56:06.213 [debug] Executing fun with value: 9
11:56:06.213 [debug] Evaluating bend block with value: 9
11:56:06.213 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.213 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.213 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.213 [debug] Executing bend with initial: 10
11:56:06.213 [debug] Executing fun with value: 10
11:56:06.213 [debug] Evaluating bend block with value: 10
11:56:06.213 [debug] Block returned: %{variant: :leaf}
11:56:06.213 [debug] Fun returned result: %{variant: :leaf}
11:56:06.213 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.213 [debug] do_bend final result: %{variant: :leaf}
11:56:06.213 [debug] Executing bend with initial: 10
11:56:06.213 [debug] Executing fun with value: 10
11:56:06.213 [debug] Evaluating bend block with value: 10
11:56:06.213 [debug] Block returned: %{variant: :leaf}
11:56:06.213 [debug] Fun returned result: %{variant: :leaf}
11:56:06.213 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.213 [debug] do_bend final result: %{variant: :leaf}
11:56:06.214 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.214 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.214 [debug] Executing bend with initial: 8
11:56:06.214 [debug] Executing fun with value: 8
11:56:06.214 [debug] Evaluating bend block with value: 8
11:56:06.214 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.214 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.214 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.214 [debug] Executing bend with initial: 9
11:56:06.214 [debug] Executing fun with value: 9
11:56:06.214 [debug] Evaluating bend block with value: 9
11:56:06.214 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.214 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.214 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.214 [debug] Executing bend with initial: 10
11:56:06.214 [debug] Executing fun with value: 10
11:56:06.214 [debug] Evaluating bend block with value: 10
11:56:06.214 [debug] Block returned: %{variant: :leaf}
11:56:06.214 [debug] Fun returned result: %{variant: :leaf}
11:56:06.214 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.214 [debug] do_bend final result: %{variant: :leaf}
11:56:06.214 [debug] Executing bend with initial: 10
11:56:06.214 [debug] Executing fun with value: 10
11:56:06.214 [debug] Evaluating bend block with value: 10
11:56:06.214 [debug] Block returned: %{variant: :leaf}
11:56:06.214 [debug] Fun returned result: %{variant: :leaf}
11:56:06.214 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.214 [debug] do_bend final result: %{variant: :leaf}
11:56:06.214 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.214 [debug] Executing bend with initial: 9
11:56:06.214 [debug] Executing fun with value: 9
11:56:06.214 [debug] Evaluating bend block with value: 9
11:56:06.214 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.214 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.214 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.214 [debug] Executing bend with initial: 10
11:56:06.214 [debug] Executing fun with value: 10
11:56:06.214 [debug] Evaluating bend block with value: 10
11:56:06.214 [debug] Block returned: %{variant: :leaf}
11:56:06.214 [debug] Fun returned result: %{variant: :leaf}
11:56:06.214 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.214 [debug] do_bend final result: %{variant: :leaf}
11:56:06.214 [debug] Executing bend with initial: 10
11:56:06.214 [debug] Executing fun with value: 10
11:56:06.214 [debug] Evaluating bend block with value: 10
11:56:06.214 [debug] Block returned: %{variant: :leaf}
11:56:06.214 [debug] Fun returned result: %{variant: :leaf}
11:56:06.214 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.214 [debug] do_bend final result: %{variant: :leaf}
11:56:06.214 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.214 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.214 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.214 [debug] Executing bend with initial: 7
11:56:06.214 [debug] Executing fun with value: 7
11:56:06.214 [debug] Evaluating bend block with value: 7
11:56:06.214 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.214 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.214 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.214 [debug] Executing bend with initial: 8
11:56:06.214 [debug] Executing fun with value: 8
11:56:06.214 [debug] Evaluating bend block with value: 8
11:56:06.214 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.214 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.215 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.215 [debug] Executing bend with initial: 9
11:56:06.215 [debug] Executing fun with value: 9
11:56:06.215 [debug] Evaluating bend block with value: 9
11:56:06.215 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.215 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.215 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.215 [debug] Executing bend with initial: 10
11:56:06.215 [debug] Executing fun with value: 10
11:56:06.215 [debug] Evaluating bend block with value: 10
11:56:06.215 [debug] Block returned: %{variant: :leaf}
11:56:06.215 [debug] Fun returned result: %{variant: :leaf}
11:56:06.215 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.215 [debug] do_bend final result: %{variant: :leaf}
11:56:06.215 [debug] Executing bend with initial: 10
11:56:06.215 [debug] Executing fun with value: 10
11:56:06.215 [debug] Evaluating bend block with value: 10
11:56:06.215 [debug] Block returned: %{variant: :leaf}
11:56:06.215 [debug] Fun returned result: %{variant: :leaf}
11:56:06.215 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.215 [debug] do_bend final result: %{variant: :leaf}
11:56:06.215 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.215 [debug] Executing bend with initial: 9
11:56:06.215 [debug] Executing fun with value: 9
11:56:06.215 [debug] Evaluating bend block with value: 9
11:56:06.215 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.215 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.215 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.215 [debug] Executing bend with initial: 10
11:56:06.215 [debug] Executing fun with value: 10
11:56:06.215 [debug] Evaluating bend block with value: 10
11:56:06.215 [debug] Block returned: %{variant: :leaf}
11:56:06.215 [debug] Fun returned result: %{variant: :leaf}
11:56:06.215 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.215 [debug] do_bend final result: %{variant: :leaf}
11:56:06.215 [debug] Executing bend with initial: 10
11:56:06.215 [debug] Executing fun with value: 10
11:56:06.215 [debug] Evaluating bend block with value: 10
11:56:06.215 [debug] Block returned: %{variant: :leaf}
11:56:06.215 [debug] Fun returned result: %{variant: :leaf}
11:56:06.215 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.215 [debug] do_bend final result: %{variant: :leaf}
11:56:06.215 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.215 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.215 [debug] Executing bend with initial: 8
11:56:06.215 [debug] Executing fun with value: 8
11:56:06.215 [debug] Evaluating bend block with value: 8
11:56:06.215 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.215 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.215 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.215 [debug] Executing bend with initial: 9
11:56:06.215 [debug] Executing fun with value: 9
11:56:06.215 [debug] Evaluating bend block with value: 9
11:56:06.215 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.215 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.215 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.215 [debug] Executing bend with initial: 10
11:56:06.215 [debug] Executing fun with value: 10
11:56:06.215 [debug] Evaluating bend block with value: 10
11:56:06.216 [debug] Block returned: %{variant: :leaf}
11:56:06.216 [debug] Fun returned result: %{variant: :leaf}
11:56:06.216 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.216 [debug] do_bend final result: %{variant: :leaf}
11:56:06.216 [debug] Executing bend with initial: 10
11:56:06.216 [debug] Executing fun with value: 10
11:56:06.216 [debug] Evaluating bend block with value: 10
11:56:06.216 [debug] Block returned: %{variant: :leaf}
11:56:06.216 [debug] Fun returned result: %{variant: :leaf}
11:56:06.216 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.216 [debug] do_bend final result: %{variant: :leaf}
11:56:06.216 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.216 [debug] Executing bend with initial: 9
11:56:06.216 [debug] Executing fun with value: 9
11:56:06.216 [debug] Evaluating bend block with value: 9
11:56:06.216 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.216 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.216 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.216 [debug] Executing bend with initial: 10
11:56:06.216 [debug] Executing fun with value: 10
11:56:06.216 [debug] Evaluating bend block with value: 10
11:56:06.216 [debug] Block returned: %{variant: :leaf}
11:56:06.216 [debug] Fun returned result: %{variant: :leaf}
11:56:06.216 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.216 [debug] do_bend final result: %{variant: :leaf}
11:56:06.216 [debug] Executing bend with initial: 10
11:56:06.216 [debug] Executing fun with value: 10
11:56:06.216 [debug] Evaluating bend block with value: 10
11:56:06.216 [debug] Block returned: %{variant: :leaf}
11:56:06.216 [debug] Fun returned result: %{variant: :leaf}
11:56:06.216 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.216 [debug] do_bend final result: %{variant: :leaf}
11:56:06.216 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.216 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.216 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.216 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.216 [debug] Executing bend with initial: 6
11:56:06.216 [debug] Executing fun with value: 6
11:56:06.216 [debug] Evaluating bend block with value: 6
11:56:06.216 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.216 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.216 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.216 [debug] Executing bend with initial: 7
11:56:06.216 [debug] Executing fun with value: 7
11:56:06.216 [debug] Evaluating bend block with value: 7
11:56:06.216 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.216 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.216 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.216 [debug] Executing bend with initial: 8
11:56:06.216 [debug] Executing fun with value: 8
11:56:06.216 [debug] Evaluating bend block with value: 8
11:56:06.216 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.216 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.216 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.216 [debug] Executing bend with initial: 9
11:56:06.216 [debug] Executing fun with value: 9
11:56:06.216 [debug] Evaluating bend block with value: 9
11:56:06.216 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.216 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.216 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.216 [debug] Executing bend with initial: 10
11:56:06.216 [debug] Executing fun with value: 10
11:56:06.216 [debug] Evaluating bend block with value: 10
11:56:06.216 [debug] Block returned: %{variant: :leaf}
11:56:06.216 [debug] Fun returned result: %{variant: :leaf}
11:56:06.216 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.216 [debug] do_bend final result: %{variant: :leaf}
11:56:06.216 [debug] Executing bend with initial: 10
11:56:06.216 [debug] Executing fun with value: 10
11:56:06.216 [debug] Evaluating bend block with value: 10
11:56:06.216 [debug] Block returned: %{variant: :leaf}
11:56:06.216 [debug] Fun returned result: %{variant: :leaf}
11:56:06.216 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.216 [debug] do_bend final result: %{variant: :leaf}
11:56:06.216 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.216 [debug] Executing bend with initial: 9
11:56:06.216 [debug] Executing fun with value: 9
11:56:06.216 [debug] Evaluating bend block with value: 9
11:56:06.216 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.216 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.216 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.216 [debug] Executing bend with initial: 10
11:56:06.216 [debug] Executing fun with value: 10
11:56:06.216 [debug] Evaluating bend block with value: 10
11:56:06.216 [debug] Block returned: %{variant: :leaf}
11:56:06.216 [debug] Fun returned result: %{variant: :leaf}
11:56:06.216 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.216 [debug] do_bend final result: %{variant: :leaf}
11:56:06.216 [debug] Executing bend with initial: 10
11:56:06.216 [debug] Executing fun with value: 10
11:56:06.216 [debug] Evaluating bend block with value: 10
11:56:06.216 [debug] Block returned: %{variant: :leaf}
11:56:06.216 [debug] Fun returned result: %{variant: :leaf}
11:56:06.216 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.216 [debug] do_bend final result: %{variant: :leaf}
11:56:06.216 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.216 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.216 [debug] Executing bend with initial: 8
11:56:06.216 [debug] Executing fun with value: 8
11:56:06.216 [debug] Evaluating bend block with value: 8
11:56:06.217 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.217 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.217 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.217 [debug] Executing bend with initial: 9
11:56:06.217 [debug] Executing fun with value: 9
11:56:06.217 [debug] Evaluating bend block with value: 9
11:56:06.217 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.217 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.217 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.217 [debug] Executing bend with initial: 10
11:56:06.217 [debug] Executing fun with value: 10
11:56:06.217 [debug] Evaluating bend block with value: 10
11:56:06.217 [debug] Block returned: %{variant: :leaf}
11:56:06.217 [debug] Fun returned result: %{variant: :leaf}
11:56:06.217 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.217 [debug] do_bend final result: %{variant: :leaf}
11:56:06.217 [debug] Executing bend with initial: 10
11:56:06.217 [debug] Executing fun with value: 10
11:56:06.217 [debug] Evaluating bend block with value: 10
11:56:06.217 [debug] Block returned: %{variant: :leaf}
11:56:06.217 [debug] Fun returned result: %{variant: :leaf}
11:56:06.217 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.217 [debug] do_bend final result: %{variant: :leaf}
11:56:06.217 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.217 [debug] Executing bend with initial: 9
11:56:06.217 [debug] Executing fun with value: 9
11:56:06.217 [debug] Evaluating bend block with value: 9
11:56:06.217 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.217 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.217 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.217 [debug] Executing bend with initial: 10
11:56:06.217 [debug] Executing fun with value: 10
11:56:06.217 [debug] Evaluating bend block with value: 10
11:56:06.217 [debug] Block returned: %{variant: :leaf}
11:56:06.217 [debug] Fun returned result: %{variant: :leaf}
11:56:06.217 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.217 [debug] do_bend final result: %{variant: :leaf}
11:56:06.217 [debug] Executing bend with initial: 10
11:56:06.217 [debug] Executing fun with value: 10
11:56:06.217 [debug] Evaluating bend block with value: 10
11:56:06.217 [debug] Block returned: %{variant: :leaf}
11:56:06.217 [debug] Fun returned result: %{variant: :leaf}
11:56:06.217 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.217 [debug] do_bend final result: %{variant: :leaf}
11:56:06.217 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.217 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.217 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.217 [debug] Executing bend with initial: 7
11:56:06.217 [debug] Executing fun with value: 7
11:56:06.217 [debug] Evaluating bend block with value: 7
11:56:06.217 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.217 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.217 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.217 [debug] Executing bend with initial: 8
11:56:06.217 [debug] Executing fun with value: 8
11:56:06.217 [debug] Evaluating bend block with value: 8
11:56:06.217 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.217 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.217 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.217 [debug] Executing bend with initial: 9
11:56:06.217 [debug] Executing fun with value: 9
11:56:06.217 [debug] Evaluating bend block with value: 9
11:56:06.217 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.217 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.217 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.217 [debug] Executing bend with initial: 10
11:56:06.217 [debug] Executing fun with value: 10
11:56:06.217 [debug] Evaluating bend block with value: 10
11:56:06.217 [debug] Block returned: %{variant: :leaf}
11:56:06.217 [debug] Fun returned result: %{variant: :leaf}
11:56:06.217 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.217 [debug] do_bend final result: %{variant: :leaf}
11:56:06.217 [debug] Executing bend with initial: 10
11:56:06.217 [debug] Executing fun with value: 10
11:56:06.217 [debug] Evaluating bend block with value: 10
11:56:06.217 [debug] Block returned: %{variant: :leaf}
11:56:06.217 [debug] Fun returned result: %{variant: :leaf}
11:56:06.217 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.217 [debug] do_bend final result: %{variant: :leaf}
11:56:06.217 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.217 [debug] Executing bend with initial: 9
11:56:06.217 [debug] Executing fun with value: 9
11:56:06.217 [debug] Evaluating bend block with value: 9
11:56:06.217 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.217 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.217 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.217 [debug] Executing bend with initial: 10
11:56:06.217 [debug] Executing fun with value: 10
11:56:06.217 [debug] Evaluating bend block with value: 10
11:56:06.217 [debug] Block returned: %{variant: :leaf}
11:56:06.217 [debug] Fun returned result: %{variant: :leaf}
11:56:06.217 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.217 [debug] do_bend final result: %{variant: :leaf}
11:56:06.217 [debug] Executing bend with initial: 10
11:56:06.217 [debug] Executing fun with value: 10
11:56:06.217 [debug] Evaluating bend block with value: 10
11:56:06.217 [debug] Block returned: %{variant: :leaf}
11:56:06.217 [debug] Fun returned result: %{variant: :leaf}
11:56:06.217 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.217 [debug] do_bend final result: %{variant: :leaf}
11:56:06.217 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.217 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.217 [debug] Executing bend with initial: 8
11:56:06.217 [debug] Executing fun with value: 8
11:56:06.217 [debug] Evaluating bend block with value: 8
11:56:06.217 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.217 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.217 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.217 [debug] Executing bend with initial: 9
11:56:06.217 [debug] Executing fun with value: 9
11:56:06.218 [debug] Evaluating bend block with value: 9
11:56:06.218 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.218 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.218 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.218 [debug] Executing bend with initial: 10
11:56:06.218 [debug] Executing fun with value: 10
11:56:06.218 [debug] Evaluating bend block with value: 10
11:56:06.218 [debug] Block returned: %{variant: :leaf}
11:56:06.218 [debug] Fun returned result: %{variant: :leaf}
11:56:06.218 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.218 [debug] do_bend final result: %{variant: :leaf}
11:56:06.218 [debug] Executing bend with initial: 10
11:56:06.218 [debug] Executing fun with value: 10
11:56:06.218 [debug] Evaluating bend block with value: 10
11:56:06.218 [debug] Block returned: %{variant: :leaf}
11:56:06.218 [debug] Fun returned result: %{variant: :leaf}
11:56:06.218 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.218 [debug] do_bend final result: %{variant: :leaf}
11:56:06.218 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.218 [debug] Executing bend with initial: 9
11:56:06.218 [debug] Executing fun with value: 9
11:56:06.218 [debug] Evaluating bend block with value: 9
11:56:06.218 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.218 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.218 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.218 [debug] Executing bend with initial: 10
11:56:06.218 [debug] Executing fun with value: 10
11:56:06.218 [debug] Evaluating bend block with value: 10
11:56:06.218 [debug] Block returned: %{variant: :leaf}
11:56:06.218 [debug] Fun returned result: %{variant: :leaf}
11:56:06.218 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.218 [debug] do_bend final result: %{variant: :leaf}
11:56:06.218 [debug] Executing bend with initial: 10
11:56:06.218 [debug] Executing fun with value: 10
11:56:06.218 [debug] Evaluating bend block with value: 10
11:56:06.218 [debug] Block returned: %{variant: :leaf}
11:56:06.218 [debug] Fun returned result: %{variant: :leaf}
11:56:06.218 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.218 [debug] do_bend final result: %{variant: :leaf}
11:56:06.218 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.218 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.218 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.218 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.218 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.219 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 4
11:56:06.219 [debug] Executing fun with value: 4
11:56:06.219 [debug] Evaluating bend block with value: 4
11:56:06.219 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.219 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.219 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 5
11:56:06.219 [debug] Executing fun with value: 5
11:56:06.219 [debug] Evaluating bend block with value: 5
11:56:06.219 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.219 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.219 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 6
11:56:06.219 [debug] Executing fun with value: 6
11:56:06.219 [debug] Evaluating bend block with value: 6
11:56:06.219 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.219 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.219 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 7
11:56:06.219 [debug] Executing fun with value: 7
11:56:06.219 [debug] Evaluating bend block with value: 7
11:56:06.219 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.219 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.219 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 8
11:56:06.219 [debug] Executing fun with value: 8
11:56:06.219 [debug] Evaluating bend block with value: 8
11:56:06.219 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.219 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.219 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 9
11:56:06.219 [debug] Executing fun with value: 9
11:56:06.219 [debug] Evaluating bend block with value: 9
11:56:06.219 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.219 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.219 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 10
11:56:06.219 [debug] Executing fun with value: 10
11:56:06.219 [debug] Evaluating bend block with value: 10
11:56:06.219 [debug] Block returned: %{variant: :leaf}
11:56:06.219 [debug] Fun returned result: %{variant: :leaf}
11:56:06.219 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.219 [debug] do_bend final result: %{variant: :leaf}
11:56:06.219 [debug] Executing bend with initial: 10
11:56:06.219 [debug] Executing fun with value: 10
11:56:06.219 [debug] Evaluating bend block with value: 10
11:56:06.219 [debug] Block returned: %{variant: :leaf}
11:56:06.219 [debug] Fun returned result: %{variant: :leaf}
11:56:06.219 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.219 [debug] do_bend final result: %{variant: :leaf}
11:56:06.219 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 9
11:56:06.219 [debug] Executing fun with value: 9
11:56:06.219 [debug] Evaluating bend block with value: 9
11:56:06.219 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.219 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.219 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 10
11:56:06.219 [debug] Executing fun with value: 10
11:56:06.219 [debug] Evaluating bend block with value: 10
11:56:06.219 [debug] Block returned: %{variant: :leaf}
11:56:06.219 [debug] Fun returned result: %{variant: :leaf}
11:56:06.219 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.219 [debug] do_bend final result: %{variant: :leaf}
11:56:06.219 [debug] Executing bend with initial: 10
11:56:06.219 [debug] Executing fun with value: 10
11:56:06.219 [debug] Evaluating bend block with value: 10
11:56:06.219 [debug] Block returned: %{variant: :leaf}
11:56:06.219 [debug] Fun returned result: %{variant: :leaf}
11:56:06.219 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.219 [debug] do_bend final result: %{variant: :leaf}
11:56:06.219 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.219 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 8
11:56:06.219 [debug] Executing fun with value: 8
11:56:06.219 [debug] Evaluating bend block with value: 8
11:56:06.219 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.219 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.219 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 9
11:56:06.219 [debug] Executing fun with value: 9
11:56:06.219 [debug] Evaluating bend block with value: 9
11:56:06.219 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.219 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.219 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 10
11:56:06.219 [debug] Executing fun with value: 10
11:56:06.219 [debug] Evaluating bend block with value: 10
11:56:06.219 [debug] Block returned: %{variant: :leaf}
11:56:06.219 [debug] Fun returned result: %{variant: :leaf}
11:56:06.219 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.219 [debug] do_bend final result: %{variant: :leaf}
11:56:06.219 [debug] Executing bend with initial: 10
11:56:06.219 [debug] Executing fun with value: 10
11:56:06.219 [debug] Evaluating bend block with value: 10
11:56:06.219 [debug] Block returned: %{variant: :leaf}
11:56:06.219 [debug] Fun returned result: %{variant: :leaf}
11:56:06.219 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.219 [debug] do_bend final result: %{variant: :leaf}
11:56:06.219 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 9
11:56:06.219 [debug] Executing fun with value: 9
11:56:06.219 [debug] Evaluating bend block with value: 9
11:56:06.219 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.219 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.219 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.219 [debug] Executing bend with initial: 10
11:56:06.219 [debug] Executing fun with value: 10
11:56:06.219 [debug] Evaluating bend block with value: 10
11:56:06.219 [debug] Block returned: %{variant: :leaf}
11:56:06.219 [debug] Fun returned result: %{variant: :leaf}
11:56:06.219 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.220 [debug] do_bend final result: %{variant: :leaf}
11:56:06.220 [debug] Executing bend with initial: 10
11:56:06.220 [debug] Executing fun with value: 10
11:56:06.220 [debug] Evaluating bend block with value: 10
11:56:06.220 [debug] Block returned: %{variant: :leaf}
11:56:06.220 [debug] Fun returned result: %{variant: :leaf}
11:56:06.220 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.220 [debug] do_bend final result: %{variant: :leaf}
11:56:06.220 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.220 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.220 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.220 [debug] Executing bend with initial: 7
11:56:06.220 [debug] Executing fun with value: 7
11:56:06.220 [debug] Evaluating bend block with value: 7
11:56:06.220 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.220 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.220 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.220 [debug] Executing bend with initial: 8
11:56:06.220 [debug] Executing fun with value: 8
11:56:06.220 [debug] Evaluating bend block with value: 8
11:56:06.220 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.220 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.220 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.220 [debug] Executing bend with initial: 9
11:56:06.220 [debug] Executing fun with value: 9
11:56:06.220 [debug] Evaluating bend block with value: 9
11:56:06.220 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.220 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.220 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.220 [debug] Executing bend with initial: 10
11:56:06.220 [debug] Executing fun with value: 10
11:56:06.220 [debug] Evaluating bend block with value: 10
11:56:06.220 [debug] Block returned: %{variant: :leaf}
11:56:06.220 [debug] Fun returned result: %{variant: :leaf}
11:56:06.220 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.220 [debug] do_bend final result: %{variant: :leaf}
11:56:06.220 [debug] Executing bend with initial: 10
11:56:06.220 [debug] Executing fun with value: 10
11:56:06.220 [debug] Evaluating bend block with value: 10
11:56:06.220 [debug] Block returned: %{variant: :leaf}
11:56:06.220 [debug] Fun returned result: %{variant: :leaf}
11:56:06.220 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.220 [debug] do_bend final result: %{variant: :leaf}
11:56:06.220 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.220 [debug] Executing bend with initial: 9
11:56:06.220 [debug] Executing fun with value: 9
11:56:06.220 [debug] Evaluating bend block with value: 9
11:56:06.220 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.220 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.220 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.220 [debug] Executing bend with initial: 10
11:56:06.220 [debug] Executing fun with value: 10
11:56:06.220 [debug] Evaluating bend block with value: 10
11:56:06.220 [debug] Block returned: %{variant: :leaf}
11:56:06.220 [debug] Fun returned result: %{variant: :leaf}
11:56:06.220 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.220 [debug] do_bend final result: %{variant: :leaf}
11:56:06.220 [debug] Executing bend with initial: 10
11:56:06.220 [debug] Executing fun with value: 10
11:56:06.220 [debug] Evaluating bend block with value: 10
11:56:06.220 [debug] Block returned: %{variant: :leaf}
11:56:06.220 [debug] Fun returned result: %{variant: :leaf}
11:56:06.220 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.220 [debug] do_bend final result: %{variant: :leaf}
11:56:06.220 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.220 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.220 [debug] Executing bend with initial: 8
11:56:06.220 [debug] Executing fun with value: 8
11:56:06.220 [debug] Evaluating bend block with value: 8
11:56:06.220 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.220 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.220 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.220 [debug] Executing bend with initial: 9
11:56:06.220 [debug] Executing fun with value: 9
11:56:06.220 [debug] Evaluating bend block with value: 9
11:56:06.220 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.220 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.220 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.220 [debug] Executing bend with initial: 10
11:56:06.220 [debug] Executing fun with value: 10
11:56:06.220 [debug] Evaluating bend block with value: 10
11:56:06.220 [debug] Block returned: %{variant: :leaf}
11:56:06.220 [debug] Fun returned result: %{variant: :leaf}
11:56:06.220 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.220 [debug] do_bend final result: %{variant: :leaf}
11:56:06.220 [debug] Executing bend with initial: 10
11:56:06.220 [debug] Executing fun with value: 10
11:56:06.220 [debug] Evaluating bend block with value: 10
11:56:06.220 [debug] Block returned: %{variant: :leaf}
11:56:06.220 [debug] Fun returned result: %{variant: :leaf}
11:56:06.220 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.220 [debug] do_bend final result: %{variant: :leaf}
11:56:06.220 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.220 [debug] Executing bend with initial: 9
11:56:06.220 [debug] Executing fun with value: 9
11:56:06.220 [debug] Evaluating bend block with value: 9
11:56:06.220 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.220 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.220 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.220 [debug] Executing bend with initial: 10
11:56:06.220 [debug] Executing fun with value: 10
11:56:06.220 [debug] Evaluating bend block with value: 10
11:56:06.220 [debug] Block returned: %{variant: :leaf}
11:56:06.220 [debug] Fun returned result: %{variant: :leaf}
11:56:06.220 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.220 [debug] do_bend final result: %{variant: :leaf}
11:56:06.220 [debug] Executing bend with initial: 10
11:56:06.220 [debug] Executing fun with value: 10
11:56:06.220 [debug] Evaluating bend block with value: 10
11:56:06.220 [debug] Block returned: %{variant: :leaf}
11:56:06.220 [debug] Fun returned result: %{variant: :leaf}
11:56:06.221 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.221 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.221 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.221 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.221 [debug] Executing bend with initial: 6
11:56:06.221 [debug] Executing fun with value: 6
11:56:06.221 [debug] Evaluating bend block with value: 6
11:56:06.221 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.221 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.221 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.221 [debug] Executing bend with initial: 7
11:56:06.221 [debug] Executing fun with value: 7
11:56:06.221 [debug] Evaluating bend block with value: 7
11:56:06.221 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.221 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.221 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.221 [debug] Executing bend with initial: 8
11:56:06.221 [debug] Executing fun with value: 8
11:56:06.221 [debug] Evaluating bend block with value: 8
11:56:06.221 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.221 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.221 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.221 [debug] Executing bend with initial: 9
11:56:06.221 [debug] Executing fun with value: 9
11:56:06.221 [debug] Evaluating bend block with value: 9
11:56:06.221 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.221 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.221 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.221 [debug] Executing bend with initial: 10
11:56:06.221 [debug] Executing fun with value: 10
11:56:06.221 [debug] Evaluating bend block with value: 10
11:56:06.221 [debug] Block returned: %{variant: :leaf}
11:56:06.221 [debug] Fun returned result: %{variant: :leaf}
11:56:06.221 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{variant: :leaf}
11:56:06.221 [debug] Executing bend with initial: 10
11:56:06.221 [debug] Executing fun with value: 10
11:56:06.221 [debug] Evaluating bend block with value: 10
11:56:06.221 [debug] Block returned: %{variant: :leaf}
11:56:06.221 [debug] Fun returned result: %{variant: :leaf}
11:56:06.221 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.221 [debug] Executing bend with initial: 9
11:56:06.221 [debug] Executing fun with value: 9
11:56:06.221 [debug] Evaluating bend block with value: 9
11:56:06.221 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.221 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.221 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.221 [debug] Executing bend with initial: 10
11:56:06.221 [debug] Executing fun with value: 10
11:56:06.221 [debug] Evaluating bend block with value: 10
11:56:06.221 [debug] Block returned: %{variant: :leaf}
11:56:06.221 [debug] Fun returned result: %{variant: :leaf}
11:56:06.221 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{variant: :leaf}
11:56:06.221 [debug] Executing bend with initial: 10
11:56:06.221 [debug] Executing fun with value: 10
11:56:06.221 [debug] Evaluating bend block with value: 10
11:56:06.221 [debug] Block returned: %{variant: :leaf}
11:56:06.221 [debug] Fun returned result: %{variant: :leaf}
11:56:06.221 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.221 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.221 [debug] Executing bend with initial: 8
11:56:06.221 [debug] Executing fun with value: 8
11:56:06.221 [debug] Evaluating bend block with value: 8
11:56:06.221 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.221 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.221 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.221 [debug] Executing bend with initial: 9
11:56:06.221 [debug] Executing fun with value: 9
11:56:06.221 [debug] Evaluating bend block with value: 9
11:56:06.221 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.221 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.221 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.221 [debug] Executing bend with initial: 10
11:56:06.221 [debug] Executing fun with value: 10
11:56:06.221 [debug] Evaluating bend block with value: 10
11:56:06.221 [debug] Block returned: %{variant: :leaf}
11:56:06.221 [debug] Fun returned result: %{variant: :leaf}
11:56:06.221 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{variant: :leaf}
11:56:06.221 [debug] Executing bend with initial: 10
11:56:06.221 [debug] Executing fun with value: 10
11:56:06.221 [debug] Evaluating bend block with value: 10
11:56:06.221 [debug] Block returned: %{variant: :leaf}
11:56:06.221 [debug] Fun returned result: %{variant: :leaf}
11:56:06.221 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.221 [debug] Executing bend with initial: 9
11:56:06.221 [debug] Executing fun with value: 9
11:56:06.221 [debug] Evaluating bend block with value: 9
11:56:06.221 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.221 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.221 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.221 [debug] Executing bend with initial: 10
11:56:06.221 [debug] Executing fun with value: 10
11:56:06.221 [debug] Evaluating bend block with value: 10
11:56:06.221 [debug] Block returned: %{variant: :leaf}
11:56:06.221 [debug] Fun returned result: %{variant: :leaf}
11:56:06.221 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{variant: :leaf}
11:56:06.221 [debug] Executing bend with initial: 10
11:56:06.221 [debug] Executing fun with value: 10
11:56:06.221 [debug] Evaluating bend block with value: 10
11:56:06.221 [debug] Block returned: %{variant: :leaf}
11:56:06.221 [debug] Fun returned result: %{variant: :leaf}
11:56:06.221 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{variant: :leaf}
11:56:06.221 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.221 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.221 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.221 [debug] Executing bend with initial: 7
11:56:06.222 [debug] Executing fun with value: 7
11:56:06.222 [debug] Evaluating bend block with value: 7
11:56:06.222 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.222 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.222 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.222 [debug] Executing bend with initial: 8
11:56:06.222 [debug] Executing fun with value: 8
11:56:06.222 [debug] Evaluating bend block with value: 8
11:56:06.222 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.222 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.222 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.222 [debug] Executing bend with initial: 9
11:56:06.222 [debug] Executing fun with value: 9
11:56:06.222 [debug] Evaluating bend block with value: 9
11:56:06.222 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.222 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.222 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.222 [debug] Executing bend with initial: 10
11:56:06.222 [debug] Executing fun with value: 10
11:56:06.222 [debug] Evaluating bend block with value: 10
11:56:06.222 [debug] Block returned: %{variant: :leaf}
11:56:06.222 [debug] Fun returned result: %{variant: :leaf}
11:56:06.222 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.222 [debug] do_bend final result: %{variant: :leaf}
11:56:06.222 [debug] Executing bend with initial: 10
11:56:06.222 [debug] Executing fun with value: 10
11:56:06.222 [debug] Evaluating bend block with value: 10
11:56:06.222 [debug] Block returned: %{variant: :leaf}
11:56:06.222 [debug] Fun returned result: %{variant: :leaf}
11:56:06.222 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.222 [debug] do_bend final result: %{variant: :leaf}
11:56:06.222 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.222 [debug] Executing bend with initial: 9
11:56:06.222 [debug] Executing fun with value: 9
11:56:06.222 [debug] Evaluating bend block with value: 9
11:56:06.222 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.222 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.222 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.222 [debug] Executing bend with initial: 10
11:56:06.222 [debug] Executing fun with value: 10
11:56:06.222 [debug] Evaluating bend block with value: 10
11:56:06.222 [debug] Block returned: %{variant: :leaf}
11:56:06.222 [debug] Fun returned result: %{variant: :leaf}
11:56:06.222 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.222 [debug] do_bend final result: %{variant: :leaf}
11:56:06.222 [debug] Executing bend with initial: 10
11:56:06.222 [debug] Executing fun with value: 10
11:56:06.222 [debug] Evaluating bend block with value: 10
11:56:06.222 [debug] Block returned: %{variant: :leaf}
11:56:06.222 [debug] Fun returned result: %{variant: :leaf}
11:56:06.222 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.222 [debug] do_bend final result: %{variant: :leaf}
11:56:06.222 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.222 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.222 [debug] Executing bend with initial: 8
11:56:06.222 [debug] Executing fun with value: 8
11:56:06.222 [debug] Evaluating bend block with value: 8
11:56:06.222 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.222 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.222 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.222 [debug] Executing bend with initial: 9
11:56:06.222 [debug] Executing fun with value: 9
11:56:06.222 [debug] Evaluating bend block with value: 9
11:56:06.222 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.222 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.222 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.222 [debug] Executing bend with initial: 10
11:56:06.222 [debug] Executing fun with value: 10
11:56:06.222 [debug] Evaluating bend block with value: 10
11:56:06.222 [debug] Block returned: %{variant: :leaf}
11:56:06.222 [debug] Fun returned result: %{variant: :leaf}
11:56:06.222 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.222 [debug] do_bend final result: %{variant: :leaf}
11:56:06.222 [debug] Executing bend with initial: 10
11:56:06.222 [debug] Executing fun with value: 10
11:56:06.222 [debug] Evaluating bend block with value: 10
11:56:06.222 [debug] Block returned: %{variant: :leaf}
11:56:06.222 [debug] Fun returned result: %{variant: :leaf}
11:56:06.222 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.222 [debug] do_bend final result: %{variant: :leaf}
11:56:06.222 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.222 [debug] Executing bend with initial: 9
11:56:06.222 [debug] Executing fun with value: 9
11:56:06.222 [debug] Evaluating bend block with value: 9
11:56:06.222 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.222 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.222 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.222 [debug] Executing bend with initial: 10
11:56:06.222 [debug] Executing fun with value: 10
11:56:06.222 [debug] Evaluating bend block with value: 10
11:56:06.222 [debug] Block returned: %{variant: :leaf}
11:56:06.222 [debug] Fun returned result: %{variant: :leaf}
11:56:06.222 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.222 [debug] do_bend final result: %{variant: :leaf}
11:56:06.222 [debug] Executing bend with initial: 10
11:56:06.222 [debug] Executing fun with value: 10
11:56:06.222 [debug] Evaluating bend block with value: 10
11:56:06.222 [debug] Block returned: %{variant: :leaf}
11:56:06.222 [debug] Fun returned result: %{variant: :leaf}
11:56:06.222 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.222 [debug] do_bend final result: %{variant: :leaf}
11:56:06.222 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.222 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.222 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.222 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.222 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.222 [debug] Executing bend with initial: 5
11:56:06.222 [debug] Executing fun with value: 5
11:56:06.222 [debug] Evaluating bend block with value: 5
11:56:06.222 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.222 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.222 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.222 [debug] Executing bend with initial: 6
11:56:06.222 [debug] Executing fun with value: 6
11:56:06.222 [debug] Evaluating bend block with value: 6
11:56:06.222 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.222 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.223 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.223 [debug] Executing bend with initial: 7
11:56:06.223 [debug] Executing fun with value: 7
11:56:06.223 [debug] Evaluating bend block with value: 7
11:56:06.223 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.223 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.223 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.223 [debug] Executing bend with initial: 8
11:56:06.223 [debug] Executing fun with value: 8
11:56:06.223 [debug] Evaluating bend block with value: 8
11:56:06.223 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.223 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.223 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.223 [debug] Executing bend with initial: 9
11:56:06.223 [debug] Executing fun with value: 9
11:56:06.223 [debug] Evaluating bend block with value: 9
11:56:06.223 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.223 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.223 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.223 [debug] Executing bend with initial: 10
11:56:06.223 [debug] Executing fun with value: 10
11:56:06.223 [debug] Evaluating bend block with value: 10
11:56:06.223 [debug] Block returned: %{variant: :leaf}
11:56:06.223 [debug] Fun returned result: %{variant: :leaf}
11:56:06.223 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.223 [debug] do_bend final result: %{variant: :leaf}
11:56:06.223 [debug] Executing bend with initial: 10
11:56:06.223 [debug] Executing fun with value: 10
11:56:06.223 [debug] Evaluating bend block with value: 10
11:56:06.223 [debug] Block returned: %{variant: :leaf}
11:56:06.223 [debug] Fun returned result: %{variant: :leaf}
11:56:06.223 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.223 [debug] do_bend final result: %{variant: :leaf}
11:56:06.223 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.223 [debug] Executing bend with initial: 9
11:56:06.223 [debug] Executing fun with value: 9
11:56:06.223 [debug] Evaluating bend block with value: 9
11:56:06.223 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.223 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.223 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.223 [debug] Executing bend with initial: 10
11:56:06.223 [debug] Executing fun with value: 10
11:56:06.223 [debug] Evaluating bend block with value: 10
11:56:06.223 [debug] Block returned: %{variant: :leaf}
11:56:06.223 [debug] Fun returned result: %{variant: :leaf}
11:56:06.223 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.223 [debug] do_bend final result: %{variant: :leaf}
11:56:06.223 [debug] Executing bend with initial: 10
11:56:06.223 [debug] Executing fun with value: 10
11:56:06.223 [debug] Evaluating bend block with value: 10
11:56:06.223 [debug] Block returned: %{variant: :leaf}
11:56:06.223 [debug] Fun returned result: %{variant: :leaf}
11:56:06.223 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.223 [debug] do_bend final result: %{variant: :leaf}
11:56:06.223 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.223 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.223 [debug] Executing bend with initial: 8
11:56:06.223 [debug] Executing fun with value: 8
11:56:06.223 [debug] Evaluating bend block with value: 8
11:56:06.223 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.223 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.223 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.223 [debug] Executing bend with initial: 9
11:56:06.223 [debug] Executing fun with value: 9
11:56:06.223 [debug] Evaluating bend block with value: 9
11:56:06.223 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.223 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.223 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.223 [debug] Executing bend with initial: 10
11:56:06.223 [debug] Executing fun with value: 10
11:56:06.223 [debug] Evaluating bend block with value: 10
11:56:06.223 [debug] Block returned: %{variant: :leaf}
11:56:06.223 [debug] Fun returned result: %{variant: :leaf}
11:56:06.223 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.223 [debug] do_bend final result: %{variant: :leaf}
11:56:06.223 [debug] Executing bend with initial: 10
11:56:06.223 [debug] Executing fun with value: 10
11:56:06.223 [debug] Evaluating bend block with value: 10
11:56:06.223 [debug] Block returned: %{variant: :leaf}
11:56:06.223 [debug] Fun returned result: %{variant: :leaf}
11:56:06.223 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.223 [debug] do_bend final result: %{variant: :leaf}
11:56:06.223 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.223 [debug] Executing bend with initial: 9
11:56:06.223 [debug] Executing fun with value: 9
11:56:06.223 [debug] Evaluating bend block with value: 9
11:56:06.223 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.223 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.223 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.223 [debug] Executing bend with initial: 10
11:56:06.223 [debug] Executing fun with value: 10
11:56:06.223 [debug] Evaluating bend block with value: 10
11:56:06.223 [debug] Block returned: %{variant: :leaf}
11:56:06.223 [debug] Fun returned result: %{variant: :leaf}
11:56:06.223 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.223 [debug] do_bend final result: %{variant: :leaf}
11:56:06.223 [debug] Executing bend with initial: 10
11:56:06.223 [debug] Executing fun with value: 10
11:56:06.223 [debug] Evaluating bend block with value: 10
11:56:06.223 [debug] Block returned: %{variant: :leaf}
11:56:06.223 [debug] Fun returned result: %{variant: :leaf}
11:56:06.223 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.223 [debug] do_bend final result: %{variant: :leaf}
11:56:06.223 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.223 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.223 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.223 [debug] Executing bend with initial: 7
11:56:06.223 [debug] Executing fun with value: 7
11:56:06.223 [debug] Evaluating bend block with value: 7
11:56:06.223 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.223 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.223 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.223 [debug] Executing bend with initial: 8
11:56:06.223 [debug] Executing fun with value: 8
11:56:06.223 [debug] Evaluating bend block with value: 8
11:56:06.223 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.223 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.223 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.224 [debug] Executing bend with initial: 9
11:56:06.224 [debug] Executing fun with value: 9
11:56:06.224 [debug] Evaluating bend block with value: 9
11:56:06.224 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.224 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.224 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.224 [debug] Executing bend with initial: 10
11:56:06.224 [debug] Executing fun with value: 10
11:56:06.224 [debug] Evaluating bend block with value: 10
11:56:06.224 [debug] Block returned: %{variant: :leaf}
11:56:06.224 [debug] Fun returned result: %{variant: :leaf}
11:56:06.224 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.224 [debug] do_bend final result: %{variant: :leaf}
11:56:06.224 [debug] Executing bend with initial: 10
11:56:06.224 [debug] Executing fun with value: 10
11:56:06.224 [debug] Evaluating bend block with value: 10
11:56:06.224 [debug] Block returned: %{variant: :leaf}
11:56:06.224 [debug] Fun returned result: %{variant: :leaf}
11:56:06.224 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.224 [debug] do_bend final result: %{variant: :leaf}
11:56:06.224 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.224 [debug] Executing bend with initial: 9
11:56:06.224 [debug] Executing fun with value: 9
11:56:06.224 [debug] Evaluating bend block with value: 9
11:56:06.224 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.224 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.224 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.224 [debug] Executing bend with initial: 10
11:56:06.224 [debug] Executing fun with value: 10
11:56:06.224 [debug] Evaluating bend block with value: 10
11:56:06.224 [debug] Block returned: %{variant: :leaf}
11:56:06.224 [debug] Fun returned result: %{variant: :leaf}
11:56:06.224 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.224 [debug] do_bend final result: %{variant: :leaf}
11:56:06.224 [debug] Executing bend with initial: 10
11:56:06.224 [debug] Executing fun with value: 10
11:56:06.224 [debug] Evaluating bend block with value: 10
11:56:06.224 [debug] Block returned: %{variant: :leaf}
11:56:06.224 [debug] Fun returned result: %{variant: :leaf}
11:56:06.224 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.224 [debug] do_bend final result: %{variant: :leaf}
11:56:06.224 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.224 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.224 [debug] Executing bend with initial: 8
11:56:06.224 [debug] Executing fun with value: 8
11:56:06.224 [debug] Evaluating bend block with value: 8
11:56:06.224 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.224 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.224 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.224 [debug] Executing bend with initial: 9
11:56:06.224 [debug] Executing fun with value: 9
11:56:06.224 [debug] Evaluating bend block with value: 9
11:56:06.224 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.224 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.224 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.224 [debug] Executing bend with initial: 10
11:56:06.224 [debug] Executing fun with value: 10
11:56:06.224 [debug] Evaluating bend block with value: 10
11:56:06.224 [debug] Block returned: %{variant: :leaf}
11:56:06.224 [debug] Fun returned result: %{variant: :leaf}
11:56:06.224 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.224 [debug] do_bend final result: %{variant: :leaf}
11:56:06.224 [debug] Executing bend with initial: 10
11:56:06.224 [debug] Executing fun with value: 10
11:56:06.224 [debug] Evaluating bend block with value: 10
11:56:06.224 [debug] Block returned: %{variant: :leaf}
11:56:06.224 [debug] Fun returned result: %{variant: :leaf}
11:56:06.224 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.224 [debug] do_bend final result: %{variant: :leaf}
11:56:06.224 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.224 [debug] Executing bend with initial: 9
11:56:06.224 [debug] Executing fun with value: 9
11:56:06.224 [debug] Evaluating bend block with value: 9
11:56:06.224 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.224 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.224 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.224 [debug] Executing bend with initial: 10
11:56:06.224 [debug] Executing fun with value: 10
11:56:06.224 [debug] Evaluating bend block with value: 10
11:56:06.224 [debug] Block returned: %{variant: :leaf}
11:56:06.224 [debug] Fun returned result: %{variant: :leaf}
11:56:06.224 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.224 [debug] do_bend final result: %{variant: :leaf}
11:56:06.224 [debug] Executing bend with initial: 10
11:56:06.224 [debug] Executing fun with value: 10
11:56:06.224 [debug] Evaluating bend block with value: 10
11:56:06.224 [debug] Block returned: %{variant: :leaf}
11:56:06.224 [debug] Fun returned result: %{variant: :leaf}
11:56:06.224 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.224 [debug] do_bend final result: %{variant: :leaf}
11:56:06.224 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.224 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.224 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.225 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.225 [debug] Executing bend with initial: 6
11:56:06.225 [debug] Executing fun with value: 6
11:56:06.225 [debug] Evaluating bend block with value: 6
11:56:06.225 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.225 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.225 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.225 [debug] Executing bend with initial: 7
11:56:06.225 [debug] Executing fun with value: 7
11:56:06.225 [debug] Evaluating bend block with value: 7
11:56:06.225 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.225 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.225 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.225 [debug] Executing bend with initial: 8
11:56:06.225 [debug] Executing fun with value: 8
11:56:06.225 [debug] Evaluating bend block with value: 8
11:56:06.225 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.225 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.225 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.225 [debug] Executing bend with initial: 9
11:56:06.225 [debug] Executing fun with value: 9
11:56:06.225 [debug] Evaluating bend block with value: 9
11:56:06.225 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.225 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.225 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.225 [debug] Executing bend with initial: 10
11:56:06.225 [debug] Executing fun with value: 10
11:56:06.225 [debug] Evaluating bend block with value: 10
11:56:06.225 [debug] Block returned: %{variant: :leaf}
11:56:06.225 [debug] Fun returned result: %{variant: :leaf}
11:56:06.225 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.225 [debug] do_bend final result: %{variant: :leaf}
11:56:06.225 [debug] Executing bend with initial: 10
11:56:06.225 [debug] Executing fun with value: 10
11:56:06.225 [debug] Evaluating bend block with value: 10
11:56:06.225 [debug] Block returned: %{variant: :leaf}
11:56:06.225 [debug] Fun returned result: %{variant: :leaf}
11:56:06.225 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.225 [debug] do_bend final result: %{variant: :leaf}
11:56:06.225 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.225 [debug] Executing bend with initial: 9
11:56:06.225 [debug] Executing fun with value: 9
11:56:06.225 [debug] Evaluating bend block with value: 9
11:56:06.225 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.225 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.225 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.225 [debug] Executing bend with initial: 10
11:56:06.225 [debug] Executing fun with value: 10
11:56:06.225 [debug] Evaluating bend block with value: 10
11:56:06.225 [debug] Block returned: %{variant: :leaf}
11:56:06.225 [debug] Fun returned result: %{variant: :leaf}
11:56:06.225 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.225 [debug] do_bend final result: %{variant: :leaf}
11:56:06.225 [debug] Executing bend with initial: 10
11:56:06.225 [debug] Executing fun with value: 10
11:56:06.225 [debug] Evaluating bend block with value: 10
11:56:06.225 [debug] Block returned: %{variant: :leaf}
11:56:06.225 [debug] Fun returned result: %{variant: :leaf}
11:56:06.225 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.225 [debug] do_bend final result: %{variant: :leaf}
11:56:06.225 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.225 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.225 [debug] Executing bend with initial: 8
11:56:06.225 [debug] Executing fun with value: 8
11:56:06.225 [debug] Evaluating bend block with value: 8
11:56:06.225 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.225 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.225 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.225 [debug] Executing bend with initial: 9
11:56:06.225 [debug] Executing fun with value: 9
11:56:06.225 [debug] Evaluating bend block with value: 9
11:56:06.225 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.225 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.225 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.225 [debug] Executing bend with initial: 10
11:56:06.225 [debug] Executing fun with value: 10
11:56:06.225 [debug] Evaluating bend block with value: 10
11:56:06.225 [debug] Block returned: %{variant: :leaf}
11:56:06.225 [debug] Fun returned result: %{variant: :leaf}
11:56:06.225 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.225 [debug] do_bend final result: %{variant: :leaf}
11:56:06.225 [debug] Executing bend with initial: 10
11:56:06.225 [debug] Executing fun with value: 10
11:56:06.225 [debug] Evaluating bend block with value: 10
11:56:06.225 [debug] Block returned: %{variant: :leaf}
11:56:06.225 [debug] Fun returned result: %{variant: :leaf}
11:56:06.225 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.225 [debug] do_bend final result: %{variant: :leaf}
11:56:06.225 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.225 [debug] Executing bend with initial: 9
11:56:06.225 [debug] Executing fun with value: 9
11:56:06.225 [debug] Evaluating bend block with value: 9
11:56:06.225 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.225 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.225 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.225 [debug] Executing bend with initial: 10
11:56:06.225 [debug] Executing fun with value: 10
11:56:06.225 [debug] Evaluating bend block with value: 10
11:56:06.225 [debug] Block returned: %{variant: :leaf}
11:56:06.225 [debug] Fun returned result: %{variant: :leaf}
11:56:06.225 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.225 [debug] do_bend final result: %{variant: :leaf}
11:56:06.225 [debug] Executing bend with initial: 10
11:56:06.225 [debug] Executing fun with value: 10
11:56:06.225 [debug] Evaluating bend block with value: 10
11:56:06.225 [debug] Block returned: %{variant: :leaf}
11:56:06.225 [debug] Fun returned result: %{variant: :leaf}
11:56:06.225 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.225 [debug] do_bend final result: %{variant: :leaf}
11:56:06.225 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.226 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.226 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.226 [debug] Executing bend with initial: 7
11:56:06.226 [debug] Executing fun with value: 7
11:56:06.226 [debug] Evaluating bend block with value: 7
11:56:06.226 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.226 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.226 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.226 [debug] Executing bend with initial: 8
11:56:06.226 [debug] Executing fun with value: 8
11:56:06.226 [debug] Evaluating bend block with value: 8
11:56:06.226 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.226 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.226 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.226 [debug] Executing bend with initial: 9
11:56:06.226 [debug] Executing fun with value: 9
11:56:06.226 [debug] Evaluating bend block with value: 9
11:56:06.226 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.226 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.226 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.226 [debug] Executing bend with initial: 10
11:56:06.226 [debug] Executing fun with value: 10
11:56:06.226 [debug] Evaluating bend block with value: 10
11:56:06.226 [debug] Block returned: %{variant: :leaf}
11:56:06.226 [debug] Fun returned result: %{variant: :leaf}
11:56:06.226 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.226 [debug] do_bend final result: %{variant: :leaf}
11:56:06.226 [debug] Executing bend with initial: 10
11:56:06.226 [debug] Executing fun with value: 10
11:56:06.226 [debug] Evaluating bend block with value: 10
11:56:06.226 [debug] Block returned: %{variant: :leaf}
11:56:06.226 [debug] Fun returned result: %{variant: :leaf}
11:56:06.226 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.226 [debug] do_bend final result: %{variant: :leaf}
11:56:06.226 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.226 [debug] Executing bend with initial: 9
11:56:06.226 [debug] Executing fun with value: 9
11:56:06.226 [debug] Evaluating bend block with value: 9
11:56:06.226 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.226 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.226 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.226 [debug] Executing bend with initial: 10
11:56:06.226 [debug] Executing fun with value: 10
11:56:06.226 [debug] Evaluating bend block with value: 10
11:56:06.226 [debug] Block returned: %{variant: :leaf}
11:56:06.226 [debug] Fun returned result: %{variant: :leaf}
11:56:06.226 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.226 [debug] do_bend final result: %{variant: :leaf}
11:56:06.226 [debug] Executing bend with initial: 10
11:56:06.226 [debug] Executing fun with value: 10
11:56:06.226 [debug] Evaluating bend block with value: 10
11:56:06.226 [debug] Block returned: %{variant: :leaf}
11:56:06.226 [debug] Fun returned result: %{variant: :leaf}
11:56:06.226 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.226 [debug] do_bend final result: %{variant: :leaf}
11:56:06.226 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.226 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.226 [debug] Executing bend with initial: 8
11:56:06.226 [debug] Executing fun with value: 8
11:56:06.226 [debug] Evaluating bend block with value: 8
11:56:06.226 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.226 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.226 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.226 [debug] Executing bend with initial: 9
11:56:06.226 [debug] Executing fun with value: 9
11:56:06.226 [debug] Evaluating bend block with value: 9
11:56:06.226 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.226 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.226 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.226 [debug] Executing bend with initial: 10
11:56:06.226 [debug] Executing fun with value: 10
11:56:06.226 [debug] Evaluating bend block with value: 10
11:56:06.226 [debug] Block returned: %{variant: :leaf}
11:56:06.226 [debug] Fun returned result: %{variant: :leaf}
11:56:06.226 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.226 [debug] do_bend final result: %{variant: :leaf}
11:56:06.226 [debug] Executing bend with initial: 10
11:56:06.226 [debug] Executing fun with value: 10
11:56:06.226 [debug] Evaluating bend block with value: 10
11:56:06.226 [debug] Block returned: %{variant: :leaf}
11:56:06.226 [debug] Fun returned result: %{variant: :leaf}
11:56:06.226 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.226 [debug] do_bend final result: %{variant: :leaf}
11:56:06.226 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.226 [debug] Executing bend with initial: 9
11:56:06.226 [debug] Executing fun with value: 9
11:56:06.226 [debug] Evaluating bend block with value: 9
11:56:06.226 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.226 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.226 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.226 [debug] Executing bend with initial: 10
11:56:06.226 [debug] Executing fun with value: 10
11:56:06.226 [debug] Evaluating bend block with value: 10
11:56:06.226 [debug] Block returned: %{variant: :leaf}
11:56:06.226 [debug] Fun returned result: %{variant: :leaf}
11:56:06.226 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.226 [debug] do_bend final result: %{variant: :leaf}
11:56:06.226 [debug] Executing bend with initial: 10
11:56:06.226 [debug] Executing fun with value: 10
11:56:06.226 [debug] Evaluating bend block with value: 10
11:56:06.226 [debug] Block returned: %{variant: :leaf}
11:56:06.226 [debug] Fun returned result: %{variant: :leaf}
11:56:06.226 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.226 [debug] do_bend final result: %{variant: :leaf}
11:56:06.226 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.226 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.226 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.227 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.227 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.227 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.228 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.231 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, (truncated)
11:56:06.231 [debug] Executing bend with initial: 2
11:56:06.231 [debug] Executing fun with value: 2
11:56:06.231 [debug] Evaluating bend block with value: 2
11:56:06.231 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:06.231 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:06.231 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}
11:56:06.231 [debug] Executing bend with initial: 3
11:56:06.231 [debug] Executing fun with value: 3
11:56:06.231 [debug] Evaluating bend block with value: 3
11:56:06.231 [debug] Block returned: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.231 [debug] Fun returned result: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.231 [debug] Processing constructed value: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.231 [debug] Executing bend with initial: 4
11:56:06.231 [debug] Executing fun with value: 4
11:56:06.231 [debug] Evaluating bend block with value: 4
11:56:06.231 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.231 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.231 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.231 [debug] Executing bend with initial: 5
11:56:06.231 [debug] Executing fun with value: 5
11:56:06.231 [debug] Evaluating bend block with value: 5
11:56:06.231 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.231 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.231 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.231 [debug] Executing bend with initial: 6
11:56:06.231 [debug] Executing fun with value: 6
11:56:06.232 [debug] Evaluating bend block with value: 6
11:56:06.232 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.232 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.232 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.232 [debug] Executing bend with initial: 7
11:56:06.232 [debug] Executing fun with value: 7
11:56:06.232 [debug] Evaluating bend block with value: 7
11:56:06.232 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.232 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.232 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.232 [debug] Executing bend with initial: 8
11:56:06.232 [debug] Executing fun with value: 8
11:56:06.232 [debug] Evaluating bend block with value: 8
11:56:06.232 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.232 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.232 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.232 [debug] Executing bend with initial: 9
11:56:06.232 [debug] Executing fun with value: 9
11:56:06.232 [debug] Evaluating bend block with value: 9
11:56:06.232 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.232 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.232 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.232 [debug] Executing bend with initial: 10
11:56:06.232 [debug] Executing fun with value: 10
11:56:06.232 [debug] Evaluating bend block with value: 10
11:56:06.232 [debug] Block returned: %{variant: :leaf}
11:56:06.232 [debug] Fun returned result: %{variant: :leaf}
11:56:06.232 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.232 [debug] do_bend final result: %{variant: :leaf}
11:56:06.232 [debug] Executing bend with initial: 10
11:56:06.232 [debug] Executing fun with value: 10
11:56:06.232 [debug] Evaluating bend block with value: 10
11:56:06.232 [debug] Block returned: %{variant: :leaf}
11:56:06.232 [debug] Fun returned result: %{variant: :leaf}
11:56:06.232 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.232 [debug] do_bend final result: %{variant: :leaf}
11:56:06.232 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.232 [debug] Executing bend with initial: 9
11:56:06.232 [debug] Executing fun with value: 9
11:56:06.232 [debug] Evaluating bend block with value: 9
11:56:06.232 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.232 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.232 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.232 [debug] Executing bend with initial: 10
11:56:06.232 [debug] Executing fun with value: 10
11:56:06.232 [debug] Evaluating bend block with value: 10
11:56:06.232 [debug] Block returned: %{variant: :leaf}
11:56:06.232 [debug] Fun returned result: %{variant: :leaf}
11:56:06.232 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.232 [debug] do_bend final result: %{variant: :leaf}
11:56:06.232 [debug] Executing bend with initial: 10
11:56:06.232 [debug] Executing fun with value: 10
11:56:06.232 [debug] Evaluating bend block with value: 10
11:56:06.232 [debug] Block returned: %{variant: :leaf}
11:56:06.232 [debug] Fun returned result: %{variant: :leaf}
11:56:06.232 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.232 [debug] do_bend final result: %{variant: :leaf}
11:56:06.232 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.232 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.232 [debug] Executing bend with initial: 8
11:56:06.232 [debug] Executing fun with value: 8
11:56:06.232 [debug] Evaluating bend block with value: 8
11:56:06.232 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.232 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.232 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.232 [debug] Executing bend with initial: 9
11:56:06.232 [debug] Executing fun with value: 9
11:56:06.232 [debug] Evaluating bend block with value: 9
11:56:06.232 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.232 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.232 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.232 [debug] Executing bend with initial: 10
11:56:06.232 [debug] Executing fun with value: 10
11:56:06.232 [debug] Evaluating bend block with value: 10
11:56:06.232 [debug] Block returned: %{variant: :leaf}
11:56:06.232 [debug] Fun returned result: %{variant: :leaf}
11:56:06.232 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.232 [debug] do_bend final result: %{variant: :leaf}
11:56:06.232 [debug] Executing bend with initial: 10
11:56:06.232 [debug] Executing fun with value: 10
11:56:06.232 [debug] Evaluating bend block with value: 10
11:56:06.232 [debug] Block returned: %{variant: :leaf}
11:56:06.232 [debug] Fun returned result: %{variant: :leaf}
11:56:06.232 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.232 [debug] do_bend final result: %{variant: :leaf}
11:56:06.232 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.232 [debug] Executing bend with initial: 9
11:56:06.232 [debug] Executing fun with value: 9
11:56:06.232 [debug] Evaluating bend block with value: 9
11:56:06.232 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.232 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.232 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.233 [debug] Executing bend with initial: 10
11:56:06.233 [debug] Executing fun with value: 10
11:56:06.233 [debug] Evaluating bend block with value: 10
11:56:06.233 [debug] Block returned: %{variant: :leaf}
11:56:06.233 [debug] Fun returned result: %{variant: :leaf}
11:56:06.233 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{variant: :leaf}
11:56:06.233 [debug] Executing bend with initial: 10
11:56:06.233 [debug] Executing fun with value: 10
11:56:06.233 [debug] Evaluating bend block with value: 10
11:56:06.233 [debug] Block returned: %{variant: :leaf}
11:56:06.233 [debug] Fun returned result: %{variant: :leaf}
11:56:06.233 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.233 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.233 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.233 [debug] Executing bend with initial: 7
11:56:06.233 [debug] Executing fun with value: 7
11:56:06.233 [debug] Evaluating bend block with value: 7
11:56:06.233 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.233 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.233 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.233 [debug] Executing bend with initial: 8
11:56:06.233 [debug] Executing fun with value: 8
11:56:06.233 [debug] Evaluating bend block with value: 8
11:56:06.233 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.233 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.233 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.233 [debug] Executing bend with initial: 9
11:56:06.233 [debug] Executing fun with value: 9
11:56:06.233 [debug] Evaluating bend block with value: 9
11:56:06.233 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.233 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.233 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.233 [debug] Executing bend with initial: 10
11:56:06.233 [debug] Executing fun with value: 10
11:56:06.233 [debug] Evaluating bend block with value: 10
11:56:06.233 [debug] Block returned: %{variant: :leaf}
11:56:06.233 [debug] Fun returned result: %{variant: :leaf}
11:56:06.233 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{variant: :leaf}
11:56:06.233 [debug] Executing bend with initial: 10
11:56:06.233 [debug] Executing fun with value: 10
11:56:06.233 [debug] Evaluating bend block with value: 10
11:56:06.233 [debug] Block returned: %{variant: :leaf}
11:56:06.233 [debug] Fun returned result: %{variant: :leaf}
11:56:06.233 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.233 [debug] Executing bend with initial: 9
11:56:06.233 [debug] Executing fun with value: 9
11:56:06.233 [debug] Evaluating bend block with value: 9
11:56:06.233 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.233 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.233 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.233 [debug] Executing bend with initial: 10
11:56:06.233 [debug] Executing fun with value: 10
11:56:06.233 [debug] Evaluating bend block with value: 10
11:56:06.233 [debug] Block returned: %{variant: :leaf}
11:56:06.233 [debug] Fun returned result: %{variant: :leaf}
11:56:06.233 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{variant: :leaf}
11:56:06.233 [debug] Executing bend with initial: 10
11:56:06.233 [debug] Executing fun with value: 10
11:56:06.233 [debug] Evaluating bend block with value: 10
11:56:06.233 [debug] Block returned: %{variant: :leaf}
11:56:06.233 [debug] Fun returned result: %{variant: :leaf}
11:56:06.233 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.233 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.233 [debug] Executing bend with initial: 8
11:56:06.233 [debug] Executing fun with value: 8
11:56:06.233 [debug] Evaluating bend block with value: 8
11:56:06.233 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.233 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.233 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.233 [debug] Executing bend with initial: 9
11:56:06.233 [debug] Executing fun with value: 9
11:56:06.233 [debug] Evaluating bend block with value: 9
11:56:06.233 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.233 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.233 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.233 [debug] Executing bend with initial: 10
11:56:06.233 [debug] Executing fun with value: 10
11:56:06.233 [debug] Evaluating bend block with value: 10
11:56:06.233 [debug] Block returned: %{variant: :leaf}
11:56:06.233 [debug] Fun returned result: %{variant: :leaf}
11:56:06.233 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{variant: :leaf}
11:56:06.233 [debug] Executing bend with initial: 10
11:56:06.233 [debug] Executing fun with value: 10
11:56:06.233 [debug] Evaluating bend block with value: 10
11:56:06.233 [debug] Block returned: %{variant: :leaf}
11:56:06.233 [debug] Fun returned result: %{variant: :leaf}
11:56:06.233 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.233 [debug] Executing bend with initial: 9
11:56:06.233 [debug] Executing fun with value: 9
11:56:06.233 [debug] Evaluating bend block with value: 9
11:56:06.233 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.233 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.233 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.233 [debug] Executing bend with initial: 10
11:56:06.233 [debug] Executing fun with value: 10
11:56:06.233 [debug] Evaluating bend block with value: 10
11:56:06.233 [debug] Block returned: %{variant: :leaf}
11:56:06.233 [debug] Fun returned result: %{variant: :leaf}
11:56:06.233 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{variant: :leaf}
11:56:06.233 [debug] Executing bend with initial: 10
11:56:06.233 [debug] Executing fun with value: 10
11:56:06.233 [debug] Evaluating bend block with value: 10
11:56:06.233 [debug] Block returned: %{variant: :leaf}
11:56:06.233 [debug] Fun returned result: %{variant: :leaf}
11:56:06.233 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{variant: :leaf}
11:56:06.233 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.233 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.233 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.234 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.234 [debug] Executing bend with initial: 6
11:56:06.234 [debug] Executing fun with value: 6
11:56:06.234 [debug] Evaluating bend block with value: 6
11:56:06.234 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.234 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.234 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.234 [debug] Executing bend with initial: 7
11:56:06.234 [debug] Executing fun with value: 7
11:56:06.234 [debug] Evaluating bend block with value: 7
11:56:06.234 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.234 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.234 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.234 [debug] Executing bend with initial: 8
11:56:06.234 [debug] Executing fun with value: 8
11:56:06.234 [debug] Evaluating bend block with value: 8
11:56:06.234 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.234 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.234 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.234 [debug] Executing bend with initial: 9
11:56:06.234 [debug] Executing fun with value: 9
11:56:06.234 [debug] Evaluating bend block with value: 9
11:56:06.234 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.234 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.234 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.234 [debug] Executing bend with initial: 10
11:56:06.234 [debug] Executing fun with value: 10
11:56:06.234 [debug] Evaluating bend block with value: 10
11:56:06.234 [debug] Block returned: %{variant: :leaf}
11:56:06.234 [debug] Fun returned result: %{variant: :leaf}
11:56:06.234 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.234 [debug] do_bend final result: %{variant: :leaf}
11:56:06.234 [debug] Executing bend with initial: 10
11:56:06.234 [debug] Executing fun with value: 10
11:56:06.234 [debug] Evaluating bend block with value: 10
11:56:06.234 [debug] Block returned: %{variant: :leaf}
11:56:06.234 [debug] Fun returned result: %{variant: :leaf}
11:56:06.234 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.234 [debug] do_bend final result: %{variant: :leaf}
11:56:06.234 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.234 [debug] Executing bend with initial: 9
11:56:06.234 [debug] Executing fun with value: 9
11:56:06.234 [debug] Evaluating bend block with value: 9
11:56:06.234 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.234 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.234 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.234 [debug] Executing bend with initial: 10
11:56:06.234 [debug] Executing fun with value: 10
11:56:06.234 [debug] Evaluating bend block with value: 10
11:56:06.234 [debug] Block returned: %{variant: :leaf}
11:56:06.234 [debug] Fun returned result: %{variant: :leaf}
11:56:06.234 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.234 [debug] do_bend final result: %{variant: :leaf}
11:56:06.234 [debug] Executing bend with initial: 10
11:56:06.234 [debug] Executing fun with value: 10
11:56:06.234 [debug] Evaluating bend block with value: 10
11:56:06.234 [debug] Block returned: %{variant: :leaf}
11:56:06.234 [debug] Fun returned result: %{variant: :leaf}
11:56:06.234 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.234 [debug] do_bend final result: %{variant: :leaf}
11:56:06.234 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.234 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.234 [debug] Executing bend with initial: 8
11:56:06.234 [debug] Executing fun with value: 8
11:56:06.234 [debug] Evaluating bend block with value: 8
11:56:06.234 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.234 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.234 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.234 [debug] Executing bend with initial: 9
11:56:06.234 [debug] Executing fun with value: 9
11:56:06.234 [debug] Evaluating bend block with value: 9
11:56:06.234 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.234 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.234 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.234 [debug] Executing bend with initial: 10
11:56:06.234 [debug] Executing fun with value: 10
11:56:06.234 [debug] Evaluating bend block with value: 10
11:56:06.234 [debug] Block returned: %{variant: :leaf}
11:56:06.234 [debug] Fun returned result: %{variant: :leaf}
11:56:06.234 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.234 [debug] do_bend final result: %{variant: :leaf}
11:56:06.234 [debug] Executing bend with initial: 10
11:56:06.234 [debug] Executing fun with value: 10
11:56:06.234 [debug] Evaluating bend block with value: 10
11:56:06.234 [debug] Block returned: %{variant: :leaf}
11:56:06.234 [debug] Fun returned result: %{variant: :leaf}
11:56:06.234 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.234 [debug] do_bend final result: %{variant: :leaf}
11:56:06.234 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.234 [debug] Executing bend with initial: 9
11:56:06.234 [debug] Executing fun with value: 9
11:56:06.234 [debug] Evaluating bend block with value: 9
11:56:06.234 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.234 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.234 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.234 [debug] Executing bend with initial: 10
11:56:06.234 [debug] Executing fun with value: 10
11:56:06.234 [debug] Evaluating bend block with value: 10
11:56:06.234 [debug] Block returned: %{variant: :leaf}
11:56:06.234 [debug] Fun returned result: %{variant: :leaf}
11:56:06.234 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.234 [debug] do_bend final result: %{variant: :leaf}
11:56:06.234 [debug] Executing bend with initial: 10
11:56:06.234 [debug] Executing fun with value: 10
11:56:06.234 [debug] Evaluating bend block with value: 10
11:56:06.234 [debug] Block returned: %{variant: :leaf}
11:56:06.234 [debug] Fun returned result: %{variant: :leaf}
11:56:06.234 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.234 [debug] do_bend final result: %{variant: :leaf}
11:56:06.234 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.234 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.234 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.234 [debug] Executing bend with initial: 7
11:56:06.234 [debug] Executing fun with value: 7
11:56:06.234 [debug] Evaluating bend block with value: 7
11:56:06.234 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.234 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.234 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.235 [debug] Executing bend with initial: 8
11:56:06.235 [debug] Executing fun with value: 8
11:56:06.235 [debug] Evaluating bend block with value: 8
11:56:06.235 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.235 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.235 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.235 [debug] Executing bend with initial: 9
11:56:06.235 [debug] Executing fun with value: 9
11:56:06.235 [debug] Evaluating bend block with value: 9
11:56:06.235 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.235 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.235 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.235 [debug] Executing bend with initial: 10
11:56:06.235 [debug] Executing fun with value: 10
11:56:06.235 [debug] Evaluating bend block with value: 10
11:56:06.235 [debug] Block returned: %{variant: :leaf}
11:56:06.235 [debug] Fun returned result: %{variant: :leaf}
11:56:06.235 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.235 [debug] do_bend final result: %{variant: :leaf}
11:56:06.235 [debug] Executing bend with initial: 10
11:56:06.235 [debug] Executing fun with value: 10
11:56:06.235 [debug] Evaluating bend block with value: 10
11:56:06.235 [debug] Block returned: %{variant: :leaf}
11:56:06.235 [debug] Fun returned result: %{variant: :leaf}
11:56:06.235 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.235 [debug] do_bend final result: %{variant: :leaf}
11:56:06.235 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.235 [debug] Executing bend with initial: 9
11:56:06.235 [debug] Executing fun with value: 9
11:56:06.235 [debug] Evaluating bend block with value: 9
11:56:06.235 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.235 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.235 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.235 [debug] Executing bend with initial: 10
11:56:06.235 [debug] Executing fun with value: 10
11:56:06.235 [debug] Evaluating bend block with value: 10
11:56:06.235 [debug] Block returned: %{variant: :leaf}
11:56:06.235 [debug] Fun returned result: %{variant: :leaf}
11:56:06.235 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.235 [debug] do_bend final result: %{variant: :leaf}
11:56:06.235 [debug] Executing bend with initial: 10
11:56:06.235 [debug] Executing fun with value: 10
11:56:06.235 [debug] Evaluating bend block with value: 10
11:56:06.235 [debug] Block returned: %{variant: :leaf}
11:56:06.235 [debug] Fun returned result: %{variant: :leaf}
11:56:06.235 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.235 [debug] do_bend final result: %{variant: :leaf}
11:56:06.235 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.235 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.235 [debug] Executing bend with initial: 8
11:56:06.235 [debug] Executing fun with value: 8
11:56:06.235 [debug] Evaluating bend block with value: 8
11:56:06.235 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.235 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.235 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.235 [debug] Executing bend with initial: 9
11:56:06.235 [debug] Executing fun with value: 9
11:56:06.235 [debug] Evaluating bend block with value: 9
11:56:06.235 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.235 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.235 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.235 [debug] Executing bend with initial: 10
11:56:06.235 [debug] Executing fun with value: 10
11:56:06.235 [debug] Evaluating bend block with value: 10
11:56:06.235 [debug] Block returned: %{variant: :leaf}
11:56:06.235 [debug] Fun returned result: %{variant: :leaf}
11:56:06.235 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.235 [debug] do_bend final result: %{variant: :leaf}
11:56:06.235 [debug] Executing bend with initial: 10
11:56:06.235 [debug] Executing fun with value: 10
11:56:06.235 [debug] Evaluating bend block with value: 10
11:56:06.235 [debug] Block returned: %{variant: :leaf}
11:56:06.235 [debug] Fun returned result: %{variant: :leaf}
11:56:06.235 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.235 [debug] do_bend final result: %{variant: :leaf}
11:56:06.235 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.235 [debug] Executing bend with initial: 9
11:56:06.235 [debug] Executing fun with value: 9
11:56:06.235 [debug] Evaluating bend block with value: 9
11:56:06.235 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.235 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.235 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.235 [debug] Executing bend with initial: 10
11:56:06.235 [debug] Executing fun with value: 10
11:56:06.235 [debug] Evaluating bend block with value: 10
11:56:06.235 [debug] Block returned: %{variant: :leaf}
11:56:06.235 [debug] Fun returned result: %{variant: :leaf}
11:56:06.235 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.235 [debug] do_bend final result: %{variant: :leaf}
11:56:06.235 [debug] Executing bend with initial: 10
11:56:06.235 [debug] Executing fun with value: 10
11:56:06.235 [debug] Evaluating bend block with value: 10
11:56:06.235 [debug] Block returned: %{variant: :leaf}
11:56:06.235 [debug] Fun returned result: %{variant: :leaf}
11:56:06.235 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.235 [debug] do_bend final result: %{variant: :leaf}
11:56:06.235 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.235 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.235 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.235 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.236 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.236 [debug] Executing bend with initial: 5
11:56:06.236 [debug] Executing fun with value: 5
11:56:06.236 [debug] Evaluating bend block with value: 5
11:56:06.236 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.236 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.236 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.236 [debug] Executing bend with initial: 6
11:56:06.236 [debug] Executing fun with value: 6
11:56:06.236 [debug] Evaluating bend block with value: 6
11:56:06.236 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.236 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.236 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.236 [debug] Executing bend with initial: 7
11:56:06.236 [debug] Executing fun with value: 7
11:56:06.236 [debug] Evaluating bend block with value: 7
11:56:06.236 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.236 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.236 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.236 [debug] Executing bend with initial: 8
11:56:06.236 [debug] Executing fun with value: 8
11:56:06.236 [debug] Evaluating bend block with value: 8
11:56:06.236 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.236 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.236 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.236 [debug] Executing bend with initial: 9
11:56:06.236 [debug] Executing fun with value: 9
11:56:06.236 [debug] Evaluating bend block with value: 9
11:56:06.236 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.236 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.236 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.236 [debug] Executing bend with initial: 10
11:56:06.236 [debug] Executing fun with value: 10
11:56:06.236 [debug] Evaluating bend block with value: 10
11:56:06.236 [debug] Block returned: %{variant: :leaf}
11:56:06.236 [debug] Fun returned result: %{variant: :leaf}
11:56:06.236 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.236 [debug] do_bend final result: %{variant: :leaf}
11:56:06.236 [debug] Executing bend with initial: 10
11:56:06.236 [debug] Executing fun with value: 10
11:56:06.236 [debug] Evaluating bend block with value: 10
11:56:06.236 [debug] Block returned: %{variant: :leaf}
11:56:06.236 [debug] Fun returned result: %{variant: :leaf}
11:56:06.236 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.236 [debug] do_bend final result: %{variant: :leaf}
11:56:06.236 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.236 [debug] Executing bend with initial: 9
11:56:06.236 [debug] Executing fun with value: 9
11:56:06.236 [debug] Evaluating bend block with value: 9
11:56:06.236 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.236 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.236 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.236 [debug] Executing bend with initial: 10
11:56:06.236 [debug] Executing fun with value: 10
11:56:06.236 [debug] Evaluating bend block with value: 10
11:56:06.236 [debug] Block returned: %{variant: :leaf}
11:56:06.236 [debug] Fun returned result: %{variant: :leaf}
11:56:06.236 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.236 [debug] do_bend final result: %{variant: :leaf}
11:56:06.236 [debug] Executing bend with initial: 10
11:56:06.236 [debug] Executing fun with value: 10
11:56:06.236 [debug] Evaluating bend block with value: 10
11:56:06.236 [debug] Block returned: %{variant: :leaf}
11:56:06.236 [debug] Fun returned result: %{variant: :leaf}
11:56:06.236 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.236 [debug] do_bend final result: %{variant: :leaf}
11:56:06.236 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.236 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.236 [debug] Executing bend with initial: 8
11:56:06.236 [debug] Executing fun with value: 8
11:56:06.236 [debug] Evaluating bend block with value: 8
11:56:06.236 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.236 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.236 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.236 [debug] Executing bend with initial: 9
11:56:06.236 [debug] Executing fun with value: 9
11:56:06.236 [debug] Evaluating bend block with value: 9
11:56:06.236 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.236 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.236 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.236 [debug] Executing bend with initial: 10
11:56:06.236 [debug] Executing fun with value: 10
11:56:06.236 [debug] Evaluating bend block with value: 10
11:56:06.236 [debug] Block returned: %{variant: :leaf}
11:56:06.236 [debug] Fun returned result: %{variant: :leaf}
11:56:06.236 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.236 [debug] do_bend final result: %{variant: :leaf}
11:56:06.236 [debug] Executing bend with initial: 10
11:56:06.236 [debug] Executing fun with value: 10
11:56:06.236 [debug] Evaluating bend block with value: 10
11:56:06.236 [debug] Block returned: %{variant: :leaf}
11:56:06.236 [debug] Fun returned result: %{variant: :leaf}
11:56:06.236 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.236 [debug] do_bend final result: %{variant: :leaf}
11:56:06.236 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.236 [debug] Executing bend with initial: 9
11:56:06.236 [debug] Executing fun with value: 9
11:56:06.236 [debug] Evaluating bend block with value: 9
11:56:06.236 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.236 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.236 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.236 [debug] Executing bend with initial: 10
11:56:06.236 [debug] Executing fun with value: 10
11:56:06.236 [debug] Evaluating bend block with value: 10
11:56:06.236 [debug] Block returned: %{variant: :leaf}
11:56:06.236 [debug] Fun returned result: %{variant: :leaf}
11:56:06.236 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.236 [debug] do_bend final result: %{variant: :leaf}
11:56:06.236 [debug] Executing bend with initial: 10
11:56:06.236 [debug] Executing fun with value: 10
11:56:06.236 [debug] Evaluating bend block with value: 10
11:56:06.236 [debug] Block returned: %{variant: :leaf}
11:56:06.236 [debug] Fun returned result: %{variant: :leaf}
11:56:06.236 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.236 [debug] do_bend final result: %{variant: :leaf}
11:56:06.236 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.236 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.236 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.237 [debug] Executing bend with initial: 7
11:56:06.237 [debug] Executing fun with value: 7
11:56:06.237 [debug] Evaluating bend block with value: 7
11:56:06.237 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.237 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.237 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.237 [debug] Executing bend with initial: 8
11:56:06.237 [debug] Executing fun with value: 8
11:56:06.237 [debug] Evaluating bend block with value: 8
11:56:06.237 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.237 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.237 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.237 [debug] Executing bend with initial: 9
11:56:06.237 [debug] Executing fun with value: 9
11:56:06.237 [debug] Evaluating bend block with value: 9
11:56:06.237 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.237 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.237 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.237 [debug] Executing bend with initial: 10
11:56:06.237 [debug] Executing fun with value: 10
11:56:06.237 [debug] Evaluating bend block with value: 10
11:56:06.237 [debug] Block returned: %{variant: :leaf}
11:56:06.237 [debug] Fun returned result: %{variant: :leaf}
11:56:06.237 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.237 [debug] do_bend final result: %{variant: :leaf}
11:56:06.237 [debug] Executing bend with initial: 10
11:56:06.237 [debug] Executing fun with value: 10
11:56:06.237 [debug] Evaluating bend block with value: 10
11:56:06.237 [debug] Block returned: %{variant: :leaf}
11:56:06.237 [debug] Fun returned result: %{variant: :leaf}
11:56:06.237 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.237 [debug] do_bend final result: %{variant: :leaf}
11:56:06.237 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.237 [debug] Executing bend with initial: 9
11:56:06.237 [debug] Executing fun with value: 9
11:56:06.237 [debug] Evaluating bend block with value: 9
11:56:06.237 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.237 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.237 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.237 [debug] Executing bend with initial: 10
11:56:06.237 [debug] Executing fun with value: 10
11:56:06.237 [debug] Evaluating bend block with value: 10
11:56:06.237 [debug] Block returned: %{variant: :leaf}
11:56:06.237 [debug] Fun returned result: %{variant: :leaf}
11:56:06.237 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.237 [debug] do_bend final result: %{variant: :leaf}
11:56:06.237 [debug] Executing bend with initial: 10
11:56:06.237 [debug] Executing fun with value: 10
11:56:06.237 [debug] Evaluating bend block with value: 10
11:56:06.237 [debug] Block returned: %{variant: :leaf}
11:56:06.237 [debug] Fun returned result: %{variant: :leaf}
11:56:06.237 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.237 [debug] do_bend final result: %{variant: :leaf}
11:56:06.237 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.237 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.237 [debug] Executing bend with initial: 8
11:56:06.237 [debug] Executing fun with value: 8
11:56:06.237 [debug] Evaluating bend block with value: 8
11:56:06.237 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.237 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.237 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.237 [debug] Executing bend with initial: 9
11:56:06.237 [debug] Executing fun with value: 9
11:56:06.237 [debug] Evaluating bend block with value: 9
11:56:06.237 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.237 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.237 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.237 [debug] Executing bend with initial: 10
11:56:06.237 [debug] Executing fun with value: 10
11:56:06.237 [debug] Evaluating bend block with value: 10
11:56:06.237 [debug] Block returned: %{variant: :leaf}
11:56:06.237 [debug] Fun returned result: %{variant: :leaf}
11:56:06.237 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.237 [debug] do_bend final result: %{variant: :leaf}
11:56:06.237 [debug] Executing bend with initial: 10
11:56:06.237 [debug] Executing fun with value: 10
11:56:06.237 [debug] Evaluating bend block with value: 10
11:56:06.237 [debug] Block returned: %{variant: :leaf}
11:56:06.237 [debug] Fun returned result: %{variant: :leaf}
11:56:06.237 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.237 [debug] do_bend final result: %{variant: :leaf}
11:56:06.237 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.237 [debug] Executing bend with initial: 9
11:56:06.237 [debug] Executing fun with value: 9
11:56:06.237 [debug] Evaluating bend block with value: 9
11:56:06.237 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.237 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.237 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.237 [debug] Executing bend with initial: 10
11:56:06.237 [debug] Executing fun with value: 10
11:56:06.237 [debug] Evaluating bend block with value: 10
11:56:06.237 [debug] Block returned: %{variant: :leaf}
11:56:06.237 [debug] Fun returned result: %{variant: :leaf}
11:56:06.237 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.237 [debug] do_bend final result: %{variant: :leaf}
11:56:06.237 [debug] Executing bend with initial: 10
11:56:06.237 [debug] Executing fun with value: 10
11:56:06.237 [debug] Evaluating bend block with value: 10
11:56:06.237 [debug] Block returned: %{variant: :leaf}
11:56:06.237 [debug] Fun returned result: %{variant: :leaf}
11:56:06.237 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.237 [debug] do_bend final result: %{variant: :leaf}
11:56:06.237 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.237 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.237 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.237 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.237 [debug] Executing bend with initial: 6
11:56:06.237 [debug] Executing fun with value: 6
11:56:06.237 [debug] Evaluating bend block with value: 6
11:56:06.237 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.238 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.238 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 7
11:56:06.238 [debug] Executing fun with value: 7
11:56:06.238 [debug] Evaluating bend block with value: 7
11:56:06.238 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.238 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.238 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 8
11:56:06.238 [debug] Executing fun with value: 8
11:56:06.238 [debug] Evaluating bend block with value: 8
11:56:06.238 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.238 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.238 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 9
11:56:06.238 [debug] Executing fun with value: 9
11:56:06.238 [debug] Evaluating bend block with value: 9
11:56:06.238 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.238 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.238 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 10
11:56:06.238 [debug] Executing fun with value: 10
11:56:06.238 [debug] Evaluating bend block with value: 10
11:56:06.238 [debug] Block returned: %{variant: :leaf}
11:56:06.238 [debug] Fun returned result: %{variant: :leaf}
11:56:06.238 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.238 [debug] do_bend final result: %{variant: :leaf}
11:56:06.238 [debug] Executing bend with initial: 10
11:56:06.238 [debug] Executing fun with value: 10
11:56:06.238 [debug] Evaluating bend block with value: 10
11:56:06.238 [debug] Block returned: %{variant: :leaf}
11:56:06.238 [debug] Fun returned result: %{variant: :leaf}
11:56:06.238 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.238 [debug] do_bend final result: %{variant: :leaf}
11:56:06.238 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 9
11:56:06.238 [debug] Executing fun with value: 9
11:56:06.238 [debug] Evaluating bend block with value: 9
11:56:06.238 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.238 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.238 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 10
11:56:06.238 [debug] Executing fun with value: 10
11:56:06.238 [debug] Evaluating bend block with value: 10
11:56:06.238 [debug] Block returned: %{variant: :leaf}
11:56:06.238 [debug] Fun returned result: %{variant: :leaf}
11:56:06.238 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.238 [debug] do_bend final result: %{variant: :leaf}
11:56:06.238 [debug] Executing bend with initial: 10
11:56:06.238 [debug] Executing fun with value: 10
11:56:06.238 [debug] Evaluating bend block with value: 10
11:56:06.238 [debug] Block returned: %{variant: :leaf}
11:56:06.238 [debug] Fun returned result: %{variant: :leaf}
11:56:06.238 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.238 [debug] do_bend final result: %{variant: :leaf}
11:56:06.238 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.238 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 8
11:56:06.238 [debug] Executing fun with value: 8
11:56:06.238 [debug] Evaluating bend block with value: 8
11:56:06.238 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.238 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.238 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 9
11:56:06.238 [debug] Executing fun with value: 9
11:56:06.238 [debug] Evaluating bend block with value: 9
11:56:06.238 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.238 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.238 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 10
11:56:06.238 [debug] Executing fun with value: 10
11:56:06.238 [debug] Evaluating bend block with value: 10
11:56:06.238 [debug] Block returned: %{variant: :leaf}
11:56:06.238 [debug] Fun returned result: %{variant: :leaf}
11:56:06.238 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.238 [debug] do_bend final result: %{variant: :leaf}
11:56:06.238 [debug] Executing bend with initial: 10
11:56:06.238 [debug] Executing fun with value: 10
11:56:06.238 [debug] Evaluating bend block with value: 10
11:56:06.238 [debug] Block returned: %{variant: :leaf}
11:56:06.238 [debug] Fun returned result: %{variant: :leaf}
11:56:06.238 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.238 [debug] do_bend final result: %{variant: :leaf}
11:56:06.238 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 9
11:56:06.238 [debug] Executing fun with value: 9
11:56:06.238 [debug] Evaluating bend block with value: 9
11:56:06.238 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.238 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.238 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 10
11:56:06.238 [debug] Executing fun with value: 10
11:56:06.238 [debug] Evaluating bend block with value: 10
11:56:06.238 [debug] Block returned: %{variant: :leaf}
11:56:06.238 [debug] Fun returned result: %{variant: :leaf}
11:56:06.238 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.238 [debug] do_bend final result: %{variant: :leaf}
11:56:06.238 [debug] Executing bend with initial: 10
11:56:06.238 [debug] Executing fun with value: 10
11:56:06.238 [debug] Evaluating bend block with value: 10
11:56:06.238 [debug] Block returned: %{variant: :leaf}
11:56:06.238 [debug] Fun returned result: %{variant: :leaf}
11:56:06.238 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.238 [debug] do_bend final result: %{variant: :leaf}
11:56:06.238 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.238 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.238 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 7
11:56:06.238 [debug] Executing fun with value: 7
11:56:06.238 [debug] Evaluating bend block with value: 7
11:56:06.238 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.238 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.238 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 8
11:56:06.238 [debug] Executing fun with value: 8
11:56:06.238 [debug] Evaluating bend block with value: 8
11:56:06.238 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.238 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.238 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.238 [debug] Executing bend with initial: 9
11:56:06.238 [debug] Executing fun with value: 9
11:56:06.238 [debug] Evaluating bend block with value: 9
11:56:06.238 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.239 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.239 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.239 [debug] Executing bend with initial: 10
11:56:06.239 [debug] Executing fun with value: 10
11:56:06.239 [debug] Evaluating bend block with value: 10
11:56:06.239 [debug] Block returned: %{variant: :leaf}
11:56:06.239 [debug] Fun returned result: %{variant: :leaf}
11:56:06.239 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.239 [debug] do_bend final result: %{variant: :leaf}
11:56:06.239 [debug] Executing bend with initial: 10
11:56:06.239 [debug] Executing fun with value: 10
11:56:06.239 [debug] Evaluating bend block with value: 10
11:56:06.239 [debug] Block returned: %{variant: :leaf}
11:56:06.239 [debug] Fun returned result: %{variant: :leaf}
11:56:06.239 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.239 [debug] do_bend final result: %{variant: :leaf}
11:56:06.239 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.239 [debug] Executing bend with initial: 9
11:56:06.239 [debug] Executing fun with value: 9
11:56:06.239 [debug] Evaluating bend block with value: 9
11:56:06.239 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.239 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.239 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.239 [debug] Executing bend with initial: 10
11:56:06.239 [debug] Executing fun with value: 10
11:56:06.239 [debug] Evaluating bend block with value: 10
11:56:06.239 [debug] Block returned: %{variant: :leaf}
11:56:06.239 [debug] Fun returned result: %{variant: :leaf}
11:56:06.239 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.239 [debug] do_bend final result: %{variant: :leaf}
11:56:06.239 [debug] Executing bend with initial: 10
11:56:06.239 [debug] Executing fun with value: 10
11:56:06.239 [debug] Evaluating bend block with value: 10
11:56:06.239 [debug] Block returned: %{variant: :leaf}
11:56:06.239 [debug] Fun returned result: %{variant: :leaf}
11:56:06.239 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.239 [debug] do_bend final result: %{variant: :leaf}
11:56:06.239 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.239 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.239 [debug] Executing bend with initial: 8
11:56:06.239 [debug] Executing fun with value: 8
11:56:06.239 [debug] Evaluating bend block with value: 8
11:56:06.239 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.239 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.239 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.239 [debug] Executing bend with initial: 9
11:56:06.239 [debug] Executing fun with value: 9
11:56:06.239 [debug] Evaluating bend block with value: 9
11:56:06.239 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.239 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.239 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.239 [debug] Executing bend with initial: 10
11:56:06.239 [debug] Executing fun with value: 10
11:56:06.239 [debug] Evaluating bend block with value: 10
11:56:06.239 [debug] Block returned: %{variant: :leaf}
11:56:06.239 [debug] Fun returned result: %{variant: :leaf}
11:56:06.239 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.239 [debug] do_bend final result: %{variant: :leaf}
11:56:06.239 [debug] Executing bend with initial: 10
11:56:06.239 [debug] Executing fun with value: 10
11:56:06.239 [debug] Evaluating bend block with value: 10
11:56:06.239 [debug] Block returned: %{variant: :leaf}
11:56:06.239 [debug] Fun returned result: %{variant: :leaf}
11:56:06.239 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.239 [debug] do_bend final result: %{variant: :leaf}
11:56:06.239 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.239 [debug] Executing bend with initial: 9
11:56:06.239 [debug] Executing fun with value: 9
11:56:06.239 [debug] Evaluating bend block with value: 9
11:56:06.239 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.239 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.239 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.239 [debug] Executing bend with initial: 10
11:56:06.239 [debug] Executing fun with value: 10
11:56:06.239 [debug] Evaluating bend block with value: 10
11:56:06.239 [debug] Block returned: %{variant: :leaf}
11:56:06.239 [debug] Fun returned result: %{variant: :leaf}
11:56:06.239 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.239 [debug] do_bend final result: %{variant: :leaf}
11:56:06.239 [debug] Executing bend with initial: 10
11:56:06.239 [debug] Executing fun with value: 10
11:56:06.239 [debug] Evaluating bend block with value: 10
11:56:06.239 [debug] Block returned: %{variant: :leaf}
11:56:06.239 [debug] Fun returned result: %{variant: :leaf}
11:56:06.239 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.239 [debug] do_bend final result: %{variant: :leaf}
11:56:06.239 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.239 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.239 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.239 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.240 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.240 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.240 [debug] Executing bend with initial: 4
11:56:06.240 [debug] Executing fun with value: 4
11:56:06.240 [debug] Evaluating bend block with value: 4
11:56:06.240 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.240 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.240 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.240 [debug] Executing bend with initial: 5
11:56:06.240 [debug] Executing fun with value: 5
11:56:06.240 [debug] Evaluating bend block with value: 5
11:56:06.240 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.240 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.240 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.240 [debug] Executing bend with initial: 6
11:56:06.240 [debug] Executing fun with value: 6
11:56:06.240 [debug] Evaluating bend block with value: 6
11:56:06.240 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.240 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.240 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.240 [debug] Executing bend with initial: 7
11:56:06.240 [debug] Executing fun with value: 7
11:56:06.240 [debug] Evaluating bend block with value: 7
11:56:06.240 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.240 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.240 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.240 [debug] Executing bend with initial: 8
11:56:06.240 [debug] Executing fun with value: 8
11:56:06.240 [debug] Evaluating bend block with value: 8
11:56:06.240 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.241 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.241 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.241 [debug] Executing bend with initial: 9
11:56:06.241 [debug] Executing fun with value: 9
11:56:06.241 [debug] Evaluating bend block with value: 9
11:56:06.241 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Executing bend with initial: 10
11:56:06.241 [debug] Executing fun with value: 10
11:56:06.241 [debug] Evaluating bend block with value: 10
11:56:06.241 [debug] Block returned: %{variant: :leaf}
11:56:06.241 [debug] Fun returned result: %{variant: :leaf}
11:56:06.241 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.241 [debug] do_bend final result: %{variant: :leaf}
11:56:06.241 [debug] Executing bend with initial: 10
11:56:06.241 [debug] Executing fun with value: 10
11:56:06.241 [debug] Evaluating bend block with value: 10
11:56:06.241 [debug] Block returned: %{variant: :leaf}
11:56:06.241 [debug] Fun returned result: %{variant: :leaf}
11:56:06.241 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.241 [debug] do_bend final result: %{variant: :leaf}
11:56:06.241 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.241 [debug] Executing bend with initial: 9
11:56:06.241 [debug] Executing fun with value: 9
11:56:06.241 [debug] Evaluating bend block with value: 9
11:56:06.241 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Executing bend with initial: 10
11:56:06.241 [debug] Executing fun with value: 10
11:56:06.241 [debug] Evaluating bend block with value: 10
11:56:06.241 [debug] Block returned: %{variant: :leaf}
11:56:06.241 [debug] Fun returned result: %{variant: :leaf}
11:56:06.241 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.241 [debug] do_bend final result: %{variant: :leaf}
11:56:06.241 [debug] Executing bend with initial: 10
11:56:06.241 [debug] Executing fun with value: 10
11:56:06.241 [debug] Evaluating bend block with value: 10
11:56:06.241 [debug] Block returned: %{variant: :leaf}
11:56:06.241 [debug] Fun returned result: %{variant: :leaf}
11:56:06.241 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.241 [debug] do_bend final result: %{variant: :leaf}
11:56:06.241 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.241 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.241 [debug] Executing bend with initial: 8
11:56:06.241 [debug] Executing fun with value: 8
11:56:06.241 [debug] Evaluating bend block with value: 8
11:56:06.241 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.241 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.241 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.241 [debug] Executing bend with initial: 9
11:56:06.241 [debug] Executing fun with value: 9
11:56:06.241 [debug] Evaluating bend block with value: 9
11:56:06.241 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Executing bend with initial: 10
11:56:06.241 [debug] Executing fun with value: 10
11:56:06.241 [debug] Evaluating bend block with value: 10
11:56:06.241 [debug] Block returned: %{variant: :leaf}
11:56:06.241 [debug] Fun returned result: %{variant: :leaf}
11:56:06.241 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.241 [debug] do_bend final result: %{variant: :leaf}
11:56:06.241 [debug] Executing bend with initial: 10
11:56:06.241 [debug] Executing fun with value: 10
11:56:06.241 [debug] Evaluating bend block with value: 10
11:56:06.241 [debug] Block returned: %{variant: :leaf}
11:56:06.241 [debug] Fun returned result: %{variant: :leaf}
11:56:06.241 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.241 [debug] do_bend final result: %{variant: :leaf}
11:56:06.241 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.241 [debug] Executing bend with initial: 9
11:56:06.241 [debug] Executing fun with value: 9
11:56:06.241 [debug] Evaluating bend block with value: 9
11:56:06.241 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Executing bend with initial: 10
11:56:06.241 [debug] Executing fun with value: 10
11:56:06.241 [debug] Evaluating bend block with value: 10
11:56:06.241 [debug] Block returned: %{variant: :leaf}
11:56:06.241 [debug] Fun returned result: %{variant: :leaf}
11:56:06.241 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.241 [debug] do_bend final result: %{variant: :leaf}
11:56:06.241 [debug] Executing bend with initial: 10
11:56:06.241 [debug] Executing fun with value: 10
11:56:06.241 [debug] Evaluating bend block with value: 10
11:56:06.241 [debug] Block returned: %{variant: :leaf}
11:56:06.241 [debug] Fun returned result: %{variant: :leaf}
11:56:06.241 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.241 [debug] do_bend final result: %{variant: :leaf}
11:56:06.241 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.241 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.241 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.241 [debug] Executing bend with initial: 7
11:56:06.241 [debug] Executing fun with value: 7
11:56:06.241 [debug] Evaluating bend block with value: 7
11:56:06.241 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.241 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.241 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.241 [debug] Executing bend with initial: 8
11:56:06.241 [debug] Executing fun with value: 8
11:56:06.241 [debug] Evaluating bend block with value: 8
11:56:06.241 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.241 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.241 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.241 [debug] Executing bend with initial: 9
11:56:06.241 [debug] Executing fun with value: 9
11:56:06.241 [debug] Evaluating bend block with value: 9
11:56:06.241 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.241 [debug] Executing bend with initial: 10
11:56:06.241 [debug] Executing fun with value: 10
11:56:06.241 [debug] Evaluating bend block with value: 10
11:56:06.241 [debug] Block returned: %{variant: :leaf}
11:56:06.241 [debug] Fun returned result: %{variant: :leaf}
11:56:06.241 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.241 [debug] do_bend final result: %{variant: :leaf}
11:56:06.241 [debug] Executing bend with initial: 10
11:56:06.241 [debug] Executing fun with value: 10
11:56:06.241 [debug] Evaluating bend block with value: 10
11:56:06.242 [debug] Block returned: %{variant: :leaf}
11:56:06.242 [debug] Fun returned result: %{variant: :leaf}
11:56:06.242 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.242 [debug] do_bend final result: %{variant: :leaf}
11:56:06.242 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.242 [debug] Executing bend with initial: 9
11:56:06.242 [debug] Executing fun with value: 9
11:56:06.242 [debug] Evaluating bend block with value: 9
11:56:06.242 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.242 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.242 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.242 [debug] Executing bend with initial: 10
11:56:06.242 [debug] Executing fun with value: 10
11:56:06.242 [debug] Evaluating bend block with value: 10
11:56:06.242 [debug] Block returned: %{variant: :leaf}
11:56:06.242 [debug] Fun returned result: %{variant: :leaf}
11:56:06.242 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.242 [debug] do_bend final result: %{variant: :leaf}
11:56:06.242 [debug] Executing bend with initial: 10
11:56:06.242 [debug] Executing fun with value: 10
11:56:06.242 [debug] Evaluating bend block with value: 10
11:56:06.242 [debug] Block returned: %{variant: :leaf}
11:56:06.242 [debug] Fun returned result: %{variant: :leaf}
11:56:06.242 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.242 [debug] do_bend final result: %{variant: :leaf}
11:56:06.242 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.242 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.242 [debug] Executing bend with initial: 8
11:56:06.242 [debug] Executing fun with value: 8
11:56:06.242 [debug] Evaluating bend block with value: 8
11:56:06.242 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.242 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.242 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.242 [debug] Executing bend with initial: 9
11:56:06.242 [debug] Executing fun with value: 9
11:56:06.242 [debug] Evaluating bend block with value: 9
11:56:06.242 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.242 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.242 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.242 [debug] Executing bend with initial: 10
11:56:06.242 [debug] Executing fun with value: 10
11:56:06.242 [debug] Evaluating bend block with value: 10
11:56:06.242 [debug] Block returned: %{variant: :leaf}
11:56:06.242 [debug] Fun returned result: %{variant: :leaf}
11:56:06.242 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.242 [debug] do_bend final result: %{variant: :leaf}
11:56:06.242 [debug] Executing bend with initial: 10
11:56:06.242 [debug] Executing fun with value: 10
11:56:06.242 [debug] Evaluating bend block with value: 10
11:56:06.242 [debug] Block returned: %{variant: :leaf}
11:56:06.242 [debug] Fun returned result: %{variant: :leaf}
11:56:06.242 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.242 [debug] do_bend final result: %{variant: :leaf}
11:56:06.242 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.242 [debug] Executing bend with initial: 9
11:56:06.242 [debug] Executing fun with value: 9
11:56:06.242 [debug] Evaluating bend block with value: 9
11:56:06.242 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.242 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.242 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.242 [debug] Executing bend with initial: 10
11:56:06.242 [debug] Executing fun with value: 10
11:56:06.242 [debug] Evaluating bend block with value: 10
11:56:06.242 [debug] Block returned: %{variant: :leaf}
11:56:06.242 [debug] Fun returned result: %{variant: :leaf}
11:56:06.242 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.242 [debug] do_bend final result: %{variant: :leaf}
11:56:06.242 [debug] Executing bend with initial: 10
11:56:06.242 [debug] Executing fun with value: 10
11:56:06.242 [debug] Evaluating bend block with value: 10
11:56:06.242 [debug] Block returned: %{variant: :leaf}
11:56:06.242 [debug] Fun returned result: %{variant: :leaf}
11:56:06.242 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.242 [debug] do_bend final result: %{variant: :leaf}
11:56:06.242 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.242 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.242 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.242 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.242 [debug] Executing bend with initial: 6
11:56:06.242 [debug] Executing fun with value: 6
11:56:06.242 [debug] Evaluating bend block with value: 6
11:56:06.242 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.242 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.242 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.242 [debug] Executing bend with initial: 7
11:56:06.242 [debug] Executing fun with value: 7
11:56:06.242 [debug] Evaluating bend block with value: 7
11:56:06.242 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.242 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.242 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.242 [debug] Executing bend with initial: 8
11:56:06.242 [debug] Executing fun with value: 8
11:56:06.242 [debug] Evaluating bend block with value: 8
11:56:06.242 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.242 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.242 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.242 [debug] Executing bend with initial: 9
11:56:06.242 [debug] Executing fun with value: 9
11:56:06.242 [debug] Evaluating bend block with value: 9
11:56:06.242 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.242 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.242 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.242 [debug] Executing bend with initial: 10
11:56:06.242 [debug] Executing fun with value: 10
11:56:06.242 [debug] Evaluating bend block with value: 10
11:56:06.242 [debug] Block returned: %{variant: :leaf}
11:56:06.242 [debug] Fun returned result: %{variant: :leaf}
11:56:06.242 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.242 [debug] do_bend final result: %{variant: :leaf}
11:56:06.242 [debug] Executing bend with initial: 10
11:56:06.242 [debug] Executing fun with value: 10
11:56:06.242 [debug] Evaluating bend block with value: 10
11:56:06.242 [debug] Block returned: %{variant: :leaf}
11:56:06.242 [debug] Fun returned result: %{variant: :leaf}
11:56:06.242 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.242 [debug] do_bend final result: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.243 [debug] Executing bend with initial: 9
11:56:06.243 [debug] Executing fun with value: 9
11:56:06.243 [debug] Evaluating bend block with value: 9
11:56:06.243 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Executing bend with initial: 10
11:56:06.243 [debug] Executing fun with value: 10
11:56:06.243 [debug] Evaluating bend block with value: 10
11:56:06.243 [debug] Block returned: %{variant: :leaf}
11:56:06.243 [debug] Fun returned result: %{variant: :leaf}
11:56:06.243 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{variant: :leaf}
11:56:06.243 [debug] Executing bend with initial: 10
11:56:06.243 [debug] Executing fun with value: 10
11:56:06.243 [debug] Evaluating bend block with value: 10
11:56:06.243 [debug] Block returned: %{variant: :leaf}
11:56:06.243 [debug] Fun returned result: %{variant: :leaf}
11:56:06.243 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.243 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.243 [debug] Executing bend with initial: 8
11:56:06.243 [debug] Executing fun with value: 8
11:56:06.243 [debug] Evaluating bend block with value: 8
11:56:06.243 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.243 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.243 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.243 [debug] Executing bend with initial: 9
11:56:06.243 [debug] Executing fun with value: 9
11:56:06.243 [debug] Evaluating bend block with value: 9
11:56:06.243 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Executing bend with initial: 10
11:56:06.243 [debug] Executing fun with value: 10
11:56:06.243 [debug] Evaluating bend block with value: 10
11:56:06.243 [debug] Block returned: %{variant: :leaf}
11:56:06.243 [debug] Fun returned result: %{variant: :leaf}
11:56:06.243 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{variant: :leaf}
11:56:06.243 [debug] Executing bend with initial: 10
11:56:06.243 [debug] Executing fun with value: 10
11:56:06.243 [debug] Evaluating bend block with value: 10
11:56:06.243 [debug] Block returned: %{variant: :leaf}
11:56:06.243 [debug] Fun returned result: %{variant: :leaf}
11:56:06.243 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.243 [debug] Executing bend with initial: 9
11:56:06.243 [debug] Executing fun with value: 9
11:56:06.243 [debug] Evaluating bend block with value: 9
11:56:06.243 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Executing bend with initial: 10
11:56:06.243 [debug] Executing fun with value: 10
11:56:06.243 [debug] Evaluating bend block with value: 10
11:56:06.243 [debug] Block returned: %{variant: :leaf}
11:56:06.243 [debug] Fun returned result: %{variant: :leaf}
11:56:06.243 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{variant: :leaf}
11:56:06.243 [debug] Executing bend with initial: 10
11:56:06.243 [debug] Executing fun with value: 10
11:56:06.243 [debug] Evaluating bend block with value: 10
11:56:06.243 [debug] Block returned: %{variant: :leaf}
11:56:06.243 [debug] Fun returned result: %{variant: :leaf}
11:56:06.243 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.243 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.243 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.243 [debug] Executing bend with initial: 7
11:56:06.243 [debug] Executing fun with value: 7
11:56:06.243 [debug] Evaluating bend block with value: 7
11:56:06.243 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.243 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.243 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.243 [debug] Executing bend with initial: 8
11:56:06.243 [debug] Executing fun with value: 8
11:56:06.243 [debug] Evaluating bend block with value: 8
11:56:06.243 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.243 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.243 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.243 [debug] Executing bend with initial: 9
11:56:06.243 [debug] Executing fun with value: 9
11:56:06.243 [debug] Evaluating bend block with value: 9
11:56:06.243 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Executing bend with initial: 10
11:56:06.243 [debug] Executing fun with value: 10
11:56:06.243 [debug] Evaluating bend block with value: 10
11:56:06.243 [debug] Block returned: %{variant: :leaf}
11:56:06.243 [debug] Fun returned result: %{variant: :leaf}
11:56:06.243 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{variant: :leaf}
11:56:06.243 [debug] Executing bend with initial: 10
11:56:06.243 [debug] Executing fun with value: 10
11:56:06.243 [debug] Evaluating bend block with value: 10
11:56:06.243 [debug] Block returned: %{variant: :leaf}
11:56:06.243 [debug] Fun returned result: %{variant: :leaf}
11:56:06.243 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.243 [debug] Executing bend with initial: 9
11:56:06.243 [debug] Executing fun with value: 9
11:56:06.243 [debug] Evaluating bend block with value: 9
11:56:06.243 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.243 [debug] Executing bend with initial: 10
11:56:06.243 [debug] Executing fun with value: 10
11:56:06.243 [debug] Evaluating bend block with value: 10
11:56:06.243 [debug] Block returned: %{variant: :leaf}
11:56:06.243 [debug] Fun returned result: %{variant: :leaf}
11:56:06.243 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.243 [debug] do_bend final result: %{variant: :leaf}
11:56:06.243 [debug] Executing bend with initial: 10
11:56:06.243 [debug] Executing fun with value: 10
11:56:06.243 [debug] Evaluating bend block with value: 10
11:56:06.243 [debug] Block returned: %{variant: :leaf}
11:56:06.243 [debug] Fun returned result: %{variant: :leaf}
11:56:06.244 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.244 [debug] do_bend final result: %{variant: :leaf}
11:56:06.244 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.244 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.244 [debug] Executing bend with initial: 8
11:56:06.244 [debug] Executing fun with value: 8
11:56:06.244 [debug] Evaluating bend block with value: 8
11:56:06.244 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.244 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.244 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.244 [debug] Executing bend with initial: 9
11:56:06.244 [debug] Executing fun with value: 9
11:56:06.244 [debug] Evaluating bend block with value: 9
11:56:06.244 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.244 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.244 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.244 [debug] Executing bend with initial: 10
11:56:06.244 [debug] Executing fun with value: 10
11:56:06.244 [debug] Evaluating bend block with value: 10
11:56:06.244 [debug] Block returned: %{variant: :leaf}
11:56:06.244 [debug] Fun returned result: %{variant: :leaf}
11:56:06.244 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.244 [debug] do_bend final result: %{variant: :leaf}
11:56:06.244 [debug] Executing bend with initial: 10
11:56:06.244 [debug] Executing fun with value: 10
11:56:06.244 [debug] Evaluating bend block with value: 10
11:56:06.244 [debug] Block returned: %{variant: :leaf}
11:56:06.244 [debug] Fun returned result: %{variant: :leaf}
11:56:06.244 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.244 [debug] do_bend final result: %{variant: :leaf}
11:56:06.244 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.244 [debug] Executing bend with initial: 9
11:56:06.244 [debug] Executing fun with value: 9
11:56:06.244 [debug] Evaluating bend block with value: 9
11:56:06.244 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.244 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.244 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.244 [debug] Executing bend with initial: 10
11:56:06.244 [debug] Executing fun with value: 10
11:56:06.244 [debug] Evaluating bend block with value: 10
11:56:06.244 [debug] Block returned: %{variant: :leaf}
11:56:06.244 [debug] Fun returned result: %{variant: :leaf}
11:56:06.244 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.244 [debug] do_bend final result: %{variant: :leaf}
11:56:06.244 [debug] Executing bend with initial: 10
11:56:06.244 [debug] Executing fun with value: 10
11:56:06.244 [debug] Evaluating bend block with value: 10
11:56:06.244 [debug] Block returned: %{variant: :leaf}
11:56:06.244 [debug] Fun returned result: %{variant: :leaf}
11:56:06.244 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.244 [debug] do_bend final result: %{variant: :leaf}
11:56:06.244 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.244 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.244 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.244 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.244 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.244 [debug] Executing bend with initial: 5
11:56:06.244 [debug] Executing fun with value: 5
11:56:06.244 [debug] Evaluating bend block with value: 5
11:56:06.244 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.244 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.244 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.244 [debug] Executing bend with initial: 6
11:56:06.244 [debug] Executing fun with value: 6
11:56:06.244 [debug] Evaluating bend block with value: 6
11:56:06.244 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.244 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.244 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.244 [debug] Executing bend with initial: 7
11:56:06.244 [debug] Executing fun with value: 7
11:56:06.244 [debug] Evaluating bend block with value: 7
11:56:06.244 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.244 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.244 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.244 [debug] Executing bend with initial: 8
11:56:06.244 [debug] Executing fun with value: 8
11:56:06.244 [debug] Evaluating bend block with value: 8
11:56:06.244 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.244 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.244 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.244 [debug] Executing bend with initial: 9
11:56:06.244 [debug] Executing fun with value: 9
11:56:06.244 [debug] Evaluating bend block with value: 9
11:56:06.244 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.244 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.244 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.244 [debug] Executing bend with initial: 10
11:56:06.244 [debug] Executing fun with value: 10
11:56:06.244 [debug] Evaluating bend block with value: 10
11:56:06.244 [debug] Block returned: %{variant: :leaf}
11:56:06.244 [debug] Fun returned result: %{variant: :leaf}
11:56:06.244 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.244 [debug] do_bend final result: %{variant: :leaf}
11:56:06.244 [debug] Executing bend with initial: 10
11:56:06.244 [debug] Executing fun with value: 10
11:56:06.244 [debug] Evaluating bend block with value: 10
11:56:06.244 [debug] Block returned: %{variant: :leaf}
11:56:06.244 [debug] Fun returned result: %{variant: :leaf}
11:56:06.245 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.245 [debug] Executing bend with initial: 9
11:56:06.245 [debug] Executing fun with value: 9
11:56:06.245 [debug] Evaluating bend block with value: 9
11:56:06.245 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Executing bend with initial: 10
11:56:06.245 [debug] Executing fun with value: 10
11:56:06.245 [debug] Evaluating bend block with value: 10
11:56:06.245 [debug] Block returned: %{variant: :leaf}
11:56:06.245 [debug] Fun returned result: %{variant: :leaf}
11:56:06.245 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{variant: :leaf}
11:56:06.245 [debug] Executing bend with initial: 10
11:56:06.245 [debug] Executing fun with value: 10
11:56:06.245 [debug] Evaluating bend block with value: 10
11:56:06.245 [debug] Block returned: %{variant: :leaf}
11:56:06.245 [debug] Fun returned result: %{variant: :leaf}
11:56:06.245 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.245 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.245 [debug] Executing bend with initial: 8
11:56:06.245 [debug] Executing fun with value: 8
11:56:06.245 [debug] Evaluating bend block with value: 8
11:56:06.245 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.245 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.245 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.245 [debug] Executing bend with initial: 9
11:56:06.245 [debug] Executing fun with value: 9
11:56:06.245 [debug] Evaluating bend block with value: 9
11:56:06.245 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Executing bend with initial: 10
11:56:06.245 [debug] Executing fun with value: 10
11:56:06.245 [debug] Evaluating bend block with value: 10
11:56:06.245 [debug] Block returned: %{variant: :leaf}
11:56:06.245 [debug] Fun returned result: %{variant: :leaf}
11:56:06.245 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{variant: :leaf}
11:56:06.245 [debug] Executing bend with initial: 10
11:56:06.245 [debug] Executing fun with value: 10
11:56:06.245 [debug] Evaluating bend block with value: 10
11:56:06.245 [debug] Block returned: %{variant: :leaf}
11:56:06.245 [debug] Fun returned result: %{variant: :leaf}
11:56:06.245 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.245 [debug] Executing bend with initial: 9
11:56:06.245 [debug] Executing fun with value: 9
11:56:06.245 [debug] Evaluating bend block with value: 9
11:56:06.245 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Executing bend with initial: 10
11:56:06.245 [debug] Executing fun with value: 10
11:56:06.245 [debug] Evaluating bend block with value: 10
11:56:06.245 [debug] Block returned: %{variant: :leaf}
11:56:06.245 [debug] Fun returned result: %{variant: :leaf}
11:56:06.245 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{variant: :leaf}
11:56:06.245 [debug] Executing bend with initial: 10
11:56:06.245 [debug] Executing fun with value: 10
11:56:06.245 [debug] Evaluating bend block with value: 10
11:56:06.245 [debug] Block returned: %{variant: :leaf}
11:56:06.245 [debug] Fun returned result: %{variant: :leaf}
11:56:06.245 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.245 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.245 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.245 [debug] Executing bend with initial: 7
11:56:06.245 [debug] Executing fun with value: 7
11:56:06.245 [debug] Evaluating bend block with value: 7
11:56:06.245 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.245 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.245 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.245 [debug] Executing bend with initial: 8
11:56:06.245 [debug] Executing fun with value: 8
11:56:06.245 [debug] Evaluating bend block with value: 8
11:56:06.245 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.245 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.245 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.245 [debug] Executing bend with initial: 9
11:56:06.245 [debug] Executing fun with value: 9
11:56:06.245 [debug] Evaluating bend block with value: 9
11:56:06.245 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Executing bend with initial: 10
11:56:06.245 [debug] Executing fun with value: 10
11:56:06.245 [debug] Evaluating bend block with value: 10
11:56:06.245 [debug] Block returned: %{variant: :leaf}
11:56:06.245 [debug] Fun returned result: %{variant: :leaf}
11:56:06.245 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{variant: :leaf}
11:56:06.245 [debug] Executing bend with initial: 10
11:56:06.245 [debug] Executing fun with value: 10
11:56:06.245 [debug] Evaluating bend block with value: 10
11:56:06.245 [debug] Block returned: %{variant: :leaf}
11:56:06.245 [debug] Fun returned result: %{variant: :leaf}
11:56:06.245 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.245 [debug] Executing bend with initial: 9
11:56:06.245 [debug] Executing fun with value: 9
11:56:06.245 [debug] Evaluating bend block with value: 9
11:56:06.245 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.245 [debug] Executing bend with initial: 10
11:56:06.245 [debug] Executing fun with value: 10
11:56:06.245 [debug] Evaluating bend block with value: 10
11:56:06.245 [debug] Block returned: %{variant: :leaf}
11:56:06.245 [debug] Fun returned result: %{variant: :leaf}
11:56:06.245 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.245 [debug] do_bend final result: %{variant: :leaf}
11:56:06.245 [debug] Executing bend with initial: 10
11:56:06.245 [debug] Executing fun with value: 10
11:56:06.245 [debug] Evaluating bend block with value: 10
11:56:06.245 [debug] Block returned: %{variant: :leaf}
11:56:06.246 [debug] Fun returned result: %{variant: :leaf}
11:56:06.246 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.246 [debug] do_bend final result: %{variant: :leaf}
11:56:06.246 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.246 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.246 [debug] Executing bend with initial: 8
11:56:06.246 [debug] Executing fun with value: 8
11:56:06.246 [debug] Evaluating bend block with value: 8
11:56:06.246 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.246 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.246 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.246 [debug] Executing bend with initial: 9
11:56:06.246 [debug] Executing fun with value: 9
11:56:06.246 [debug] Evaluating bend block with value: 9
11:56:06.246 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.246 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.246 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.246 [debug] Executing bend with initial: 10
11:56:06.246 [debug] Executing fun with value: 10
11:56:06.246 [debug] Evaluating bend block with value: 10
11:56:06.246 [debug] Block returned: %{variant: :leaf}
11:56:06.246 [debug] Fun returned result: %{variant: :leaf}
11:56:06.246 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.246 [debug] do_bend final result: %{variant: :leaf}
11:56:06.246 [debug] Executing bend with initial: 10
11:56:06.246 [debug] Executing fun with value: 10
11:56:06.246 [debug] Evaluating bend block with value: 10
11:56:06.246 [debug] Block returned: %{variant: :leaf}
11:56:06.246 [debug] Fun returned result: %{variant: :leaf}
11:56:06.246 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.246 [debug] do_bend final result: %{variant: :leaf}
11:56:06.246 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.246 [debug] Executing bend with initial: 9
11:56:06.246 [debug] Executing fun with value: 9
11:56:06.246 [debug] Evaluating bend block with value: 9
11:56:06.246 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.246 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.246 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.246 [debug] Executing bend with initial: 10
11:56:06.246 [debug] Executing fun with value: 10
11:56:06.246 [debug] Evaluating bend block with value: 10
11:56:06.246 [debug] Block returned: %{variant: :leaf}
11:56:06.246 [debug] Fun returned result: %{variant: :leaf}
11:56:06.246 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.246 [debug] do_bend final result: %{variant: :leaf}
11:56:06.246 [debug] Executing bend with initial: 10
11:56:06.246 [debug] Executing fun with value: 10
11:56:06.246 [debug] Evaluating bend block with value: 10
11:56:06.246 [debug] Block returned: %{variant: :leaf}
11:56:06.246 [debug] Fun returned result: %{variant: :leaf}
11:56:06.246 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.246 [debug] do_bend final result: %{variant: :leaf}
11:56:06.246 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.246 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.246 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.246 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.246 [debug] Executing bend with initial: 6
11:56:06.246 [debug] Executing fun with value: 6
11:56:06.246 [debug] Evaluating bend block with value: 6
11:56:06.246 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.246 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.246 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.246 [debug] Executing bend with initial: 7
11:56:06.246 [debug] Executing fun with value: 7
11:56:06.246 [debug] Evaluating bend block with value: 7
11:56:06.246 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.246 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.246 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.246 [debug] Executing bend with initial: 8
11:56:06.246 [debug] Executing fun with value: 8
11:56:06.246 [debug] Evaluating bend block with value: 8
11:56:06.246 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.246 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.246 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.246 [debug] Executing bend with initial: 9
11:56:06.246 [debug] Executing fun with value: 9
11:56:06.246 [debug] Evaluating bend block with value: 9
11:56:06.246 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.246 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.247 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.247 [debug] Executing bend with initial: 10
11:56:06.247 [debug] Executing fun with value: 10
11:56:06.247 [debug] Evaluating bend block with value: 10
11:56:06.247 [debug] Block returned: %{variant: :leaf}
11:56:06.247 [debug] Fun returned result: %{variant: :leaf}
11:56:06.247 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.247 [debug] do_bend final result: %{variant: :leaf}
11:56:06.247 [debug] Executing bend with initial: 10
11:56:06.247 [debug] Executing fun with value: 10
11:56:06.247 [debug] Evaluating bend block with value: 10
11:56:06.247 [debug] Block returned: %{variant: :leaf}
11:56:06.247 [debug] Fun returned result: %{variant: :leaf}
11:56:06.247 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.247 [debug] do_bend final result: %{variant: :leaf}
11:56:06.247 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.247 [debug] Executing bend with initial: 9
11:56:06.247 [debug] Executing fun with value: 9
11:56:06.247 [debug] Evaluating bend block with value: 9
11:56:06.247 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.247 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.247 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.247 [debug] Executing bend with initial: 10
11:56:06.247 [debug] Executing fun with value: 10
11:56:06.247 [debug] Evaluating bend block with value: 10
11:56:06.247 [debug] Block returned: %{variant: :leaf}
11:56:06.247 [debug] Fun returned result: %{variant: :leaf}
11:56:06.247 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.247 [debug] do_bend final result: %{variant: :leaf}
11:56:06.247 [debug] Executing bend with initial: 10
11:56:06.247 [debug] Executing fun with value: 10
11:56:06.247 [debug] Evaluating bend block with value: 10
11:56:06.247 [debug] Block returned: %{variant: :leaf}
11:56:06.247 [debug] Fun returned result: %{variant: :leaf}
11:56:06.247 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.247 [debug] do_bend final result: %{variant: :leaf}
11:56:06.247 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.247 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.247 [debug] Executing bend with initial: 8
11:56:06.247 [debug] Executing fun with value: 8
11:56:06.247 [debug] Evaluating bend block with value: 8
11:56:06.247 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.247 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.247 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.247 [debug] Executing bend with initial: 9
11:56:06.247 [debug] Executing fun with value: 9
11:56:06.247 [debug] Evaluating bend block with value: 9
11:56:06.247 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.247 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.247 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.247 [debug] Executing bend with initial: 10
11:56:06.247 [debug] Executing fun with value: 10
11:56:06.247 [debug] Evaluating bend block with value: 10
11:56:06.247 [debug] Block returned: %{variant: :leaf}
11:56:06.247 [debug] Fun returned result: %{variant: :leaf}
11:56:06.247 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.247 [debug] do_bend final result: %{variant: :leaf}
11:56:06.248 [debug] Executing bend with initial: 10
11:56:06.248 [debug] Executing fun with value: 10
11:56:06.248 [debug] Evaluating bend block with value: 10
11:56:06.248 [debug] Block returned: %{variant: :leaf}
11:56:06.248 [debug] Fun returned result: %{variant: :leaf}
11:56:06.248 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.248 [debug] do_bend final result: %{variant: :leaf}
11:56:06.248 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.248 [debug] Executing bend with initial: 9
11:56:06.248 [debug] Executing fun with value: 9
11:56:06.248 [debug] Evaluating bend block with value: 9
11:56:06.248 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.248 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.248 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.248 [debug] Executing bend with initial: 10
11:56:06.248 [debug] Executing fun with value: 10
11:56:06.248 [debug] Evaluating bend block with value: 10
11:56:06.248 [debug] Block returned: %{variant: :leaf}
11:56:06.248 [debug] Fun returned result: %{variant: :leaf}
11:56:06.248 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.248 [debug] do_bend final result: %{variant: :leaf}
11:56:06.248 [debug] Executing bend with initial: 10
11:56:06.248 [debug] Executing fun with value: 10
11:56:06.248 [debug] Evaluating bend block with value: 10
11:56:06.248 [debug] Block returned: %{variant: :leaf}
11:56:06.248 [debug] Fun returned result: %{variant: :leaf}
11:56:06.248 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.248 [debug] do_bend final result: %{variant: :leaf}
11:56:06.248 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.248 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.248 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.248 [debug] Executing bend with initial: 7
11:56:06.248 [debug] Executing fun with value: 7
11:56:06.248 [debug] Evaluating bend block with value: 7
11:56:06.248 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.248 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.248 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.248 [debug] Executing bend with initial: 8
11:56:06.248 [debug] Executing fun with value: 8
11:56:06.248 [debug] Evaluating bend block with value: 8
11:56:06.248 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.248 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.248 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.248 [debug] Executing bend with initial: 9
11:56:06.248 [debug] Executing fun with value: 9
11:56:06.248 [debug] Evaluating bend block with value: 9
11:56:06.248 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.248 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.248 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.248 [debug] Executing bend with initial: 10
11:56:06.248 [debug] Executing fun with value: 10
11:56:06.248 [debug] Evaluating bend block with value: 10
11:56:06.248 [debug] Block returned: %{variant: :leaf}
11:56:06.248 [debug] Fun returned result: %{variant: :leaf}
11:56:06.248 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.248 [debug] do_bend final result: %{variant: :leaf}
11:56:06.248 [debug] Executing bend with initial: 10
11:56:06.248 [debug] Executing fun with value: 10
11:56:06.248 [debug] Evaluating bend block with value: 10
11:56:06.248 [debug] Block returned: %{variant: :leaf}
11:56:06.248 [debug] Fun returned result: %{variant: :leaf}
11:56:06.248 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.248 [debug] do_bend final result: %{variant: :leaf}
11:56:06.248 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.248 [debug] Executing bend with initial: 9
11:56:06.248 [debug] Executing fun with value: 9
11:56:06.248 [debug] Evaluating bend block with value: 9
11:56:06.248 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.249 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.249 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.249 [debug] Executing bend with initial: 10
11:56:06.249 [debug] Executing fun with value: 10
11:56:06.249 [debug] Evaluating bend block with value: 10
11:56:06.249 [debug] Block returned: %{variant: :leaf}
11:56:06.249 [debug] Fun returned result: %{variant: :leaf}
11:56:06.249 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.249 [debug] do_bend final result: %{variant: :leaf}
11:56:06.249 [debug] Executing bend with initial: 10
11:56:06.249 [debug] Executing fun with value: 10
11:56:06.249 [debug] Evaluating bend block with value: 10
11:56:06.249 [debug] Block returned: %{variant: :leaf}
11:56:06.249 [debug] Fun returned result: %{variant: :leaf}
11:56:06.249 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.249 [debug] do_bend final result: %{variant: :leaf}
11:56:06.249 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.249 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.249 [debug] Executing bend with initial: 8
11:56:06.249 [debug] Executing fun with value: 8
11:56:06.249 [debug] Evaluating bend block with value: 8
11:56:06.249 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.249 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.249 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.249 [debug] Executing bend with initial: 9
11:56:06.249 [debug] Executing fun with value: 9
11:56:06.249 [debug] Evaluating bend block with value: 9
11:56:06.249 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.249 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.249 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.249 [debug] Executing bend with initial: 10
11:56:06.249 [debug] Executing fun with value: 10
11:56:06.249 [debug] Evaluating bend block with value: 10
11:56:06.249 [debug] Block returned: %{variant: :leaf}
11:56:06.249 [debug] Fun returned result: %{variant: :leaf}
11:56:06.249 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.249 [debug] do_bend final result: %{variant: :leaf}
11:56:06.249 [debug] Executing bend with initial: 10
11:56:06.249 [debug] Executing fun with value: 10
11:56:06.249 [debug] Evaluating bend block with value: 10
11:56:06.249 [debug] Block returned: %{variant: :leaf}
11:56:06.249 [debug] Fun returned result: %{variant: :leaf}
11:56:06.249 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.249 [debug] do_bend final result: %{variant: :leaf}
11:56:06.249 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.249 [debug] Executing bend with initial: 9
11:56:06.249 [debug] Executing fun with value: 9
11:56:06.249 [debug] Evaluating bend block with value: 9
11:56:06.249 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.249 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.249 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.249 [debug] Executing bend with initial: 10
11:56:06.249 [debug] Executing fun with value: 10
11:56:06.249 [debug] Evaluating bend block with value: 10
11:56:06.249 [debug] Block returned: %{variant: :leaf}
11:56:06.249 [debug] Fun returned result: %{variant: :leaf}
11:56:06.249 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.249 [debug] do_bend final result: %{variant: :leaf}
11:56:06.249 [debug] Executing bend with initial: 10
11:56:06.249 [debug] Executing fun with value: 10
11:56:06.249 [debug] Evaluating bend block with value: 10
11:56:06.249 [debug] Block returned: %{variant: :leaf}
11:56:06.249 [debug] Fun returned result: %{variant: :leaf}
11:56:06.249 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.249 [debug] do_bend final result: %{variant: :leaf}
11:56:06.249 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.249 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.250 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.250 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.250 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.250 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.251 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.251 [debug] Executing bend with initial: 3
11:56:06.251 [debug] Executing fun with value: 3
11:56:06.251 [debug] Evaluating bend block with value: 3
11:56:06.251 [debug] Block returned: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.251 [debug] Fun returned result: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.252 [debug] Processing constructed value: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}
11:56:06.252 [debug] Executing bend with initial: 4
11:56:06.252 [debug] Executing fun with value: 4
11:56:06.252 [debug] Evaluating bend block with value: 4
11:56:06.252 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.252 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.252 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.252 [debug] Executing bend with initial: 5
11:56:06.252 [debug] Executing fun with value: 5
11:56:06.252 [debug] Evaluating bend block with value: 5
11:56:06.252 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.252 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.252 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.252 [debug] Executing bend with initial: 6
11:56:06.252 [debug] Executing fun with value: 6
11:56:06.252 [debug] Evaluating bend block with value: 6
11:56:06.252 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.252 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.252 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.252 [debug] Executing bend with initial: 7
11:56:06.252 [debug] Executing fun with value: 7
11:56:06.252 [debug] Evaluating bend block with value: 7
11:56:06.252 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.252 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.252 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.252 [debug] Executing bend with initial: 8
11:56:06.252 [debug] Executing fun with value: 8
11:56:06.252 [debug] Evaluating bend block with value: 8
11:56:06.252 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.252 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.252 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.252 [debug] Executing bend with initial: 9
11:56:06.252 [debug] Executing fun with value: 9
11:56:06.252 [debug] Evaluating bend block with value: 9
11:56:06.252 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.252 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.252 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.252 [debug] Executing bend with initial: 10
11:56:06.252 [debug] Executing fun with value: 10
11:56:06.252 [debug] Evaluating bend block with value: 10
11:56:06.252 [debug] Block returned: %{variant: :leaf}
11:56:06.252 [debug] Fun returned result: %{variant: :leaf}
11:56:06.252 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.252 [debug] do_bend final result: %{variant: :leaf}
11:56:06.252 [debug] Executing bend with initial: 10
11:56:06.252 [debug] Executing fun with value: 10
11:56:06.252 [debug] Evaluating bend block with value: 10
11:56:06.252 [debug] Block returned: %{variant: :leaf}
11:56:06.252 [debug] Fun returned result: %{variant: :leaf}
11:56:06.252 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.252 [debug] do_bend final result: %{variant: :leaf}
11:56:06.252 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.252 [debug] Executing bend with initial: 9
11:56:06.252 [debug] Executing fun with value: 9
11:56:06.252 [debug] Evaluating bend block with value: 9
11:56:06.252 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.252 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.252 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.252 [debug] Executing bend with initial: 10
11:56:06.252 [debug] Executing fun with value: 10
11:56:06.252 [debug] Evaluating bend block with value: 10
11:56:06.252 [debug] Block returned: %{variant: :leaf}
11:56:06.252 [debug] Fun returned result: %{variant: :leaf}
11:56:06.252 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.252 [debug] do_bend final result: %{variant: :leaf}
11:56:06.252 [debug] Executing bend with initial: 10
11:56:06.252 [debug] Executing fun with value: 10
11:56:06.252 [debug] Evaluating bend block with value: 10
11:56:06.252 [debug] Block returned: %{variant: :leaf}
11:56:06.252 [debug] Fun returned result: %{variant: :leaf}
11:56:06.252 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.252 [debug] do_bend final result: %{variant: :leaf}
11:56:06.252 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.252 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.252 [debug] Executing bend with initial: 8
11:56:06.252 [debug] Executing fun with value: 8
11:56:06.252 [debug] Evaluating bend block with value: 8
11:56:06.252 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.252 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.252 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.252 [debug] Executing bend with initial: 9
11:56:06.252 [debug] Executing fun with value: 9
11:56:06.252 [debug] Evaluating bend block with value: 9
11:56:06.252 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.253 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.253 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.253 [debug] Executing bend with initial: 10
11:56:06.253 [debug] Executing fun with value: 10
11:56:06.253 [debug] Evaluating bend block with value: 10
11:56:06.253 [debug] Block returned: %{variant: :leaf}
11:56:06.253 [debug] Fun returned result: %{variant: :leaf}
11:56:06.253 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.253 [debug] do_bend final result: %{variant: :leaf}
11:56:06.253 [debug] Executing bend with initial: 10
11:56:06.253 [debug] Executing fun with value: 10
11:56:06.253 [debug] Evaluating bend block with value: 10
11:56:06.253 [debug] Block returned: %{variant: :leaf}
11:56:06.253 [debug] Fun returned result: %{variant: :leaf}
11:56:06.253 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.253 [debug] do_bend final result: %{variant: :leaf}
11:56:06.253 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.253 [debug] Executing bend with initial: 9
11:56:06.253 [debug] Executing fun with value: 9
11:56:06.253 [debug] Evaluating bend block with value: 9
11:56:06.253 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.253 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.253 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.253 [debug] Executing bend with initial: 10
11:56:06.253 [debug] Executing fun with value: 10
11:56:06.253 [debug] Evaluating bend block with value: 10
11:56:06.253 [debug] Block returned: %{variant: :leaf}
11:56:06.253 [debug] Fun returned result: %{variant: :leaf}
11:56:06.253 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.253 [debug] do_bend final result: %{variant: :leaf}
11:56:06.253 [debug] Executing bend with initial: 10
11:56:06.253 [debug] Executing fun with value: 10
11:56:06.253 [debug] Evaluating bend block with value: 10
11:56:06.253 [debug] Block returned: %{variant: :leaf}
11:56:06.253 [debug] Fun returned result: %{variant: :leaf}
11:56:06.253 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.253 [debug] do_bend final result: %{variant: :leaf}
11:56:06.253 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.253 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.253 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.253 [debug] Executing bend with initial: 7
11:56:06.253 [debug] Executing fun with value: 7
11:56:06.253 [debug] Evaluating bend block with value: 7
11:56:06.253 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.253 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.253 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.253 [debug] Executing bend with initial: 8
11:56:06.253 [debug] Executing fun with value: 8
11:56:06.253 [debug] Evaluating bend block with value: 8
11:56:06.253 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.253 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.253 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.253 [debug] Executing bend with initial: 9
11:56:06.253 [debug] Executing fun with value: 9
11:56:06.253 [debug] Evaluating bend block with value: 9
11:56:06.253 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.253 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.253 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.253 [debug] Executing bend with initial: 10
11:56:06.253 [debug] Executing fun with value: 10
11:56:06.253 [debug] Evaluating bend block with value: 10
11:56:06.253 [debug] Block returned: %{variant: :leaf}
11:56:06.253 [debug] Fun returned result: %{variant: :leaf}
11:56:06.253 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.253 [debug] do_bend final result: %{variant: :leaf}
11:56:06.253 [debug] Executing bend with initial: 10
11:56:06.253 [debug] Executing fun with value: 10
11:56:06.253 [debug] Evaluating bend block with value: 10
11:56:06.253 [debug] Block returned: %{variant: :leaf}
11:56:06.253 [debug] Fun returned result: %{variant: :leaf}
11:56:06.253 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.253 [debug] do_bend final result: %{variant: :leaf}
11:56:06.253 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.253 [debug] Executing bend with initial: 9
11:56:06.253 [debug] Executing fun with value: 9
11:56:06.253 [debug] Evaluating bend block with value: 9
11:56:06.253 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.253 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.253 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.253 [debug] Executing bend with initial: 10
11:56:06.253 [debug] Executing fun with value: 10
11:56:06.253 [debug] Evaluating bend block with value: 10
11:56:06.253 [debug] Block returned: %{variant: :leaf}
11:56:06.253 [debug] Fun returned result: %{variant: :leaf}
11:56:06.253 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.253 [debug] do_bend final result: %{variant: :leaf}
11:56:06.253 [debug] Executing bend with initial: 10
11:56:06.253 [debug] Executing fun with value: 10
11:56:06.253 [debug] Evaluating bend block with value: 10
11:56:06.253 [debug] Block returned: %{variant: :leaf}
11:56:06.253 [debug] Fun returned result: %{variant: :leaf}
11:56:06.253 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.253 [debug] do_bend final result: %{variant: :leaf}
11:56:06.253 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.253 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.253 [debug] Executing bend with initial: 8
11:56:06.253 [debug] Executing fun with value: 8
11:56:06.254 [debug] Evaluating bend block with value: 8
11:56:06.254 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.254 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.254 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.254 [debug] Executing bend with initial: 9
11:56:06.254 [debug] Executing fun with value: 9
11:56:06.254 [debug] Evaluating bend block with value: 9
11:56:06.254 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.254 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.254 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.254 [debug] Executing bend with initial: 10
11:56:06.254 [debug] Executing fun with value: 10
11:56:06.254 [debug] Evaluating bend block with value: 10
11:56:06.254 [debug] Block returned: %{variant: :leaf}
11:56:06.254 [debug] Fun returned result: %{variant: :leaf}
11:56:06.254 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.254 [debug] do_bend final result: %{variant: :leaf}
11:56:06.254 [debug] Executing bend with initial: 10
11:56:06.254 [debug] Executing fun with value: 10
11:56:06.254 [debug] Evaluating bend block with value: 10
11:56:06.254 [debug] Block returned: %{variant: :leaf}
11:56:06.254 [debug] Fun returned result: %{variant: :leaf}
11:56:06.254 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.254 [debug] do_bend final result: %{variant: :leaf}
11:56:06.254 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.254 [debug] Executing bend with initial: 9
11:56:06.254 [debug] Executing fun with value: 9
11:56:06.254 [debug] Evaluating bend block with value: 9
11:56:06.254 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.254 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.254 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.254 [debug] Executing bend with initial: 10
11:56:06.254 [debug] Executing fun with value: 10
11:56:06.254 [debug] Evaluating bend block with value: 10
11:56:06.254 [debug] Block returned: %{variant: :leaf}
11:56:06.254 [debug] Fun returned result: %{variant: :leaf}
11:56:06.254 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.254 [debug] do_bend final result: %{variant: :leaf}
11:56:06.254 [debug] Executing bend with initial: 10
11:56:06.254 [debug] Executing fun with value: 10
11:56:06.254 [debug] Evaluating bend block with value: 10
11:56:06.254 [debug] Block returned: %{variant: :leaf}
11:56:06.254 [debug] Fun returned result: %{variant: :leaf}
11:56:06.254 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.254 [debug] do_bend final result: %{variant: :leaf}
11:56:06.254 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.254 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.254 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.254 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.254 [debug] Executing bend with initial: 6
11:56:06.254 [debug] Executing fun with value: 6
11:56:06.254 [debug] Evaluating bend block with value: 6
11:56:06.254 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.254 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.254 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.254 [debug] Executing bend with initial: 7
11:56:06.254 [debug] Executing fun with value: 7
11:56:06.254 [debug] Evaluating bend block with value: 7
11:56:06.254 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.254 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.254 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.254 [debug] Executing bend with initial: 8
11:56:06.254 [debug] Executing fun with value: 8
11:56:06.254 [debug] Evaluating bend block with value: 8
11:56:06.254 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.254 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.254 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.254 [debug] Executing bend with initial: 9
11:56:06.254 [debug] Executing fun with value: 9
11:56:06.254 [debug] Evaluating bend block with value: 9
11:56:06.254 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.254 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.254 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.254 [debug] Executing bend with initial: 10
11:56:06.255 [debug] Executing fun with value: 10
11:56:06.255 [debug] Evaluating bend block with value: 10
11:56:06.255 [debug] Block returned: %{variant: :leaf}
11:56:06.255 [debug] Fun returned result: %{variant: :leaf}
11:56:06.255 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.255 [debug] do_bend final result: %{variant: :leaf}
11:56:06.255 [debug] Executing bend with initial: 10
11:56:06.255 [debug] Executing fun with value: 10
11:56:06.255 [debug] Evaluating bend block with value: 10
11:56:06.255 [debug] Block returned: %{variant: :leaf}
11:56:06.255 [debug] Fun returned result: %{variant: :leaf}
11:56:06.255 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.255 [debug] do_bend final result: %{variant: :leaf}
11:56:06.255 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.255 [debug] Executing bend with initial: 9
11:56:06.255 [debug] Executing fun with value: 9
11:56:06.255 [debug] Evaluating bend block with value: 9
11:56:06.255 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.255 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.255 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.255 [debug] Executing bend with initial: 10
11:56:06.255 [debug] Executing fun with value: 10
11:56:06.255 [debug] Evaluating bend block with value: 10
11:56:06.255 [debug] Block returned: %{variant: :leaf}
11:56:06.255 [debug] Fun returned result: %{variant: :leaf}
11:56:06.255 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.255 [debug] do_bend final result: %{variant: :leaf}
11:56:06.255 [debug] Executing bend with initial: 10
11:56:06.255 [debug] Executing fun with value: 10
11:56:06.255 [debug] Evaluating bend block with value: 10
11:56:06.255 [debug] Block returned: %{variant: :leaf}
11:56:06.255 [debug] Fun returned result: %{variant: :leaf}
11:56:06.255 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.255 [debug] do_bend final result: %{variant: :leaf}
11:56:06.255 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.255 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.255 [debug] Executing bend with initial: 8
11:56:06.255 [debug] Executing fun with value: 8
11:56:06.255 [debug] Evaluating bend block with value: 8
11:56:06.255 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.255 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.255 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.255 [debug] Executing bend with initial: 9
11:56:06.255 [debug] Executing fun with value: 9
11:56:06.255 [debug] Evaluating bend block with value: 9
11:56:06.255 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.255 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.255 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.255 [debug] Executing bend with initial: 10
11:56:06.255 [debug] Executing fun with value: 10
11:56:06.255 [debug] Evaluating bend block with value: 10
11:56:06.255 [debug] Block returned: %{variant: :leaf}
11:56:06.255 [debug] Fun returned result: %{variant: :leaf}
11:56:06.255 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.255 [debug] do_bend final result: %{variant: :leaf}
11:56:06.255 [debug] Executing bend with initial: 10
11:56:06.255 [debug] Executing fun with value: 10
11:56:06.255 [debug] Evaluating bend block with value: 10
11:56:06.255 [debug] Block returned: %{variant: :leaf}
11:56:06.255 [debug] Fun returned result: %{variant: :leaf}
11:56:06.255 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.255 [debug] do_bend final result: %{variant: :leaf}
11:56:06.255 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.255 [debug] Executing bend with initial: 9
11:56:06.255 [debug] Executing fun with value: 9
11:56:06.255 [debug] Evaluating bend block with value: 9
11:56:06.255 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.256 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.256 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.256 [debug] Executing bend with initial: 10
11:56:06.256 [debug] Executing fun with value: 10
11:56:06.256 [debug] Evaluating bend block with value: 10
11:56:06.256 [debug] Block returned: %{variant: :leaf}
11:56:06.256 [debug] Fun returned result: %{variant: :leaf}
11:56:06.256 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.256 [debug] do_bend final result: %{variant: :leaf}
11:56:06.256 [debug] Executing bend with initial: 10
11:56:06.256 [debug] Executing fun with value: 10
11:56:06.256 [debug] Evaluating bend block with value: 10
11:56:06.256 [debug] Block returned: %{variant: :leaf}
11:56:06.256 [debug] Fun returned result: %{variant: :leaf}
11:56:06.256 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.256 [debug] do_bend final result: %{variant: :leaf}
11:56:06.256 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.256 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.256 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.256 [debug] Executing bend with initial: 7
11:56:06.256 [debug] Executing fun with value: 7
11:56:06.256 [debug] Evaluating bend block with value: 7
11:56:06.256 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.256 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.256 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.256 [debug] Executing bend with initial: 8
11:56:06.256 [debug] Executing fun with value: 8
11:56:06.256 [debug] Evaluating bend block with value: 8
11:56:06.256 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.256 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.256 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.256 [debug] Executing bend with initial: 9
11:56:06.256 [debug] Executing fun with value: 9
11:56:06.256 [debug] Evaluating bend block with value: 9
11:56:06.256 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.256 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.256 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.256 [debug] Executing bend with initial: 10
11:56:06.256 [debug] Executing fun with value: 10
11:56:06.256 [debug] Evaluating bend block with value: 10
11:56:06.256 [debug] Block returned: %{variant: :leaf}
11:56:06.256 [debug] Fun returned result: %{variant: :leaf}
11:56:06.256 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.256 [debug] do_bend final result: %{variant: :leaf}
11:56:06.256 [debug] Executing bend with initial: 10
11:56:06.256 [debug] Executing fun with value: 10
11:56:06.256 [debug] Evaluating bend block with value: 10
11:56:06.256 [debug] Block returned: %{variant: :leaf}
11:56:06.256 [debug] Fun returned result: %{variant: :leaf}
11:56:06.256 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.256 [debug] do_bend final result: %{variant: :leaf}
11:56:06.256 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.256 [debug] Executing bend with initial: 9
11:56:06.256 [debug] Executing fun with value: 9
11:56:06.256 [debug] Evaluating bend block with value: 9
11:56:06.256 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.256 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.256 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.256 [debug] Executing bend with initial: 10
11:56:06.256 [debug] Executing fun with value: 10
11:56:06.256 [debug] Evaluating bend block with value: 10
11:56:06.256 [debug] Block returned: %{variant: :leaf}
11:56:06.256 [debug] Fun returned result: %{variant: :leaf}
11:56:06.256 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.256 [debug] do_bend final result: %{variant: :leaf}
11:56:06.256 [debug] Executing bend with initial: 10
11:56:06.256 [debug] Executing fun with value: 10
11:56:06.256 [debug] Evaluating bend block with value: 10
11:56:06.256 [debug] Block returned: %{variant: :leaf}
11:56:06.256 [debug] Fun returned result: %{variant: :leaf}
11:56:06.256 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.256 [debug] do_bend final result: %{variant: :leaf}
11:56:06.256 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.256 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.256 [debug] Executing bend with initial: 8
11:56:06.256 [debug] Executing fun with value: 8
11:56:06.256 [debug] Evaluating bend block with value: 8
11:56:06.256 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.256 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.256 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.256 [debug] Executing bend with initial: 9
11:56:06.256 [debug] Executing fun with value: 9
11:56:06.256 [debug] Evaluating bend block with value: 9
11:56:06.256 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.256 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.256 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.256 [debug] Executing bend with initial: 10
11:56:06.256 [debug] Executing fun with value: 10
11:56:06.256 [debug] Evaluating bend block with value: 10
11:56:06.256 [debug] Block returned: %{variant: :leaf}
11:56:06.256 [debug] Fun returned result: %{variant: :leaf}
11:56:06.256 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.257 [debug] do_bend final result: %{variant: :leaf}
11:56:06.257 [debug] Executing bend with initial: 10
11:56:06.257 [debug] Executing fun with value: 10
11:56:06.257 [debug] Evaluating bend block with value: 10
11:56:06.257 [debug] Block returned: %{variant: :leaf}
11:56:06.257 [debug] Fun returned result: %{variant: :leaf}
11:56:06.257 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.257 [debug] do_bend final result: %{variant: :leaf}
11:56:06.257 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.257 [debug] Executing bend with initial: 9
11:56:06.257 [debug] Executing fun with value: 9
11:56:06.257 [debug] Evaluating bend block with value: 9
11:56:06.257 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.257 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.257 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.257 [debug] Executing bend with initial: 10
11:56:06.257 [debug] Executing fun with value: 10
11:56:06.257 [debug] Evaluating bend block with value: 10
11:56:06.257 [debug] Block returned: %{variant: :leaf}
11:56:06.257 [debug] Fun returned result: %{variant: :leaf}
11:56:06.257 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.257 [debug] do_bend final result: %{variant: :leaf}
11:56:06.257 [debug] Executing bend with initial: 10
11:56:06.257 [debug] Executing fun with value: 10
11:56:06.257 [debug] Evaluating bend block with value: 10
11:56:06.257 [debug] Block returned: %{variant: :leaf}
11:56:06.257 [debug] Fun returned result: %{variant: :leaf}
11:56:06.257 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.257 [debug] do_bend final result: %{variant: :leaf}
11:56:06.257 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.257 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.257 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.257 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.257 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.257 [debug] Executing bend with initial: 5
11:56:06.257 [debug] Executing fun with value: 5
11:56:06.257 [debug] Evaluating bend block with value: 5
11:56:06.257 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.257 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.258 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.258 [debug] Executing bend with initial: 6
11:56:06.258 [debug] Executing fun with value: 6
11:56:06.258 [debug] Evaluating bend block with value: 6
11:56:06.258 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.258 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.258 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.258 [debug] Executing bend with initial: 7
11:56:06.258 [debug] Executing fun with value: 7
11:56:06.258 [debug] Evaluating bend block with value: 7
11:56:06.258 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.258 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.258 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.258 [debug] Executing bend with initial: 8
11:56:06.258 [debug] Executing fun with value: 8
11:56:06.258 [debug] Evaluating bend block with value: 8
11:56:06.258 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.258 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.258 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.258 [debug] Executing bend with initial: 9
11:56:06.258 [debug] Executing fun with value: 9
11:56:06.258 [debug] Evaluating bend block with value: 9
11:56:06.258 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.258 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.258 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.258 [debug] Executing bend with initial: 10
11:56:06.258 [debug] Executing fun with value: 10
11:56:06.258 [debug] Evaluating bend block with value: 10
11:56:06.258 [debug] Block returned: %{variant: :leaf}
11:56:06.258 [debug] Fun returned result: %{variant: :leaf}
11:56:06.258 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.258 [debug] do_bend final result: %{variant: :leaf}
11:56:06.258 [debug] Executing bend with initial: 10
11:56:06.258 [debug] Executing fun with value: 10
11:56:06.258 [debug] Evaluating bend block with value: 10
11:56:06.258 [debug] Block returned: %{variant: :leaf}
11:56:06.258 [debug] Fun returned result: %{variant: :leaf}
11:56:06.258 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.258 [debug] do_bend final result: %{variant: :leaf}
11:56:06.258 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.258 [debug] Executing bend with initial: 9
11:56:06.258 [debug] Executing fun with value: 9
11:56:06.258 [debug] Evaluating bend block with value: 9
11:56:06.258 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.258 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.258 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.258 [debug] Executing bend with initial: 10
11:56:06.258 [debug] Executing fun with value: 10
11:56:06.258 [debug] Evaluating bend block with value: 10
11:56:06.258 [debug] Block returned: %{variant: :leaf}
11:56:06.258 [debug] Fun returned result: %{variant: :leaf}
11:56:06.258 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.258 [debug] do_bend final result: %{variant: :leaf}
11:56:06.258 [debug] Executing bend with initial: 10
11:56:06.258 [debug] Executing fun with value: 10
11:56:06.258 [debug] Evaluating bend block with value: 10
11:56:06.258 [debug] Block returned: %{variant: :leaf}
11:56:06.259 [debug] Fun returned result: %{variant: :leaf}
11:56:06.259 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.259 [debug] do_bend final result: %{variant: :leaf}
11:56:06.259 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.259 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.259 [debug] Executing bend with initial: 8
11:56:06.259 [debug] Executing fun with value: 8
11:56:06.259 [debug] Evaluating bend block with value: 8
11:56:06.259 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.259 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.259 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.259 [debug] Executing bend with initial: 9
11:56:06.259 [debug] Executing fun with value: 9
11:56:06.259 [debug] Evaluating bend block with value: 9
11:56:06.259 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.259 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.259 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.259 [debug] Executing bend with initial: 10
11:56:06.259 [debug] Executing fun with value: 10
11:56:06.259 [debug] Evaluating bend block with value: 10
11:56:06.259 [debug] Block returned: %{variant: :leaf}
11:56:06.259 [debug] Fun returned result: %{variant: :leaf}
11:56:06.259 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.259 [debug] do_bend final result: %{variant: :leaf}
11:56:06.259 [debug] Executing bend with initial: 10
11:56:06.259 [debug] Executing fun with value: 10
11:56:06.259 [debug] Evaluating bend block with value: 10
11:56:06.259 [debug] Block returned: %{variant: :leaf}
11:56:06.259 [debug] Fun returned result: %{variant: :leaf}
11:56:06.259 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.259 [debug] do_bend final result: %{variant: :leaf}
11:56:06.259 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.259 [debug] Executing bend with initial: 9
11:56:06.259 [debug] Executing fun with value: 9
11:56:06.259 [debug] Evaluating bend block with value: 9
11:56:06.259 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.259 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.259 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.259 [debug] Executing bend with initial: 10
11:56:06.259 [debug] Executing fun with value: 10
11:56:06.259 [debug] Evaluating bend block with value: 10
11:56:06.259 [debug] Block returned: %{variant: :leaf}
11:56:06.259 [debug] Fun returned result: %{variant: :leaf}
11:56:06.259 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.259 [debug] do_bend final result: %{variant: :leaf}
11:56:06.259 [debug] Executing bend with initial: 10
11:56:06.259 [debug] Executing fun with value: 10
11:56:06.259 [debug] Evaluating bend block with value: 10
11:56:06.259 [debug] Block returned: %{variant: :leaf}
11:56:06.259 [debug] Fun returned result: %{variant: :leaf}
11:56:06.259 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.259 [debug] do_bend final result: %{variant: :leaf}
11:56:06.259 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.259 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.259 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.259 [debug] Executing bend with initial: 7
11:56:06.259 [debug] Executing fun with value: 7
11:56:06.259 [debug] Evaluating bend block with value: 7
11:56:06.259 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.259 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.259 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.259 [debug] Executing bend with initial: 8
11:56:06.259 [debug] Executing fun with value: 8
11:56:06.259 [debug] Evaluating bend block with value: 8
11:56:06.259 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.259 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.259 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.259 [debug] Executing bend with initial: 9
11:56:06.259 [debug] Executing fun with value: 9
11:56:06.260 [debug] Evaluating bend block with value: 9
11:56:06.260 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.260 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.260 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.260 [debug] Executing bend with initial: 10
11:56:06.260 [debug] Executing fun with value: 10
11:56:06.260 [debug] Evaluating bend block with value: 10
11:56:06.260 [debug] Block returned: %{variant: :leaf}
11:56:06.260 [debug] Fun returned result: %{variant: :leaf}
11:56:06.260 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.260 [debug] do_bend final result: %{variant: :leaf}
11:56:06.260 [debug] Executing bend with initial: 10
11:56:06.260 [debug] Executing fun with value: 10
11:56:06.260 [debug] Evaluating bend block with value: 10
11:56:06.260 [debug] Block returned: %{variant: :leaf}
11:56:06.260 [debug] Fun returned result: %{variant: :leaf}
11:56:06.260 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.260 [debug] do_bend final result: %{variant: :leaf}
11:56:06.260 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.260 [debug] Executing bend with initial: 9
11:56:06.260 [debug] Executing fun with value: 9
11:56:06.260 [debug] Evaluating bend block with value: 9
11:56:06.260 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.260 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.260 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.260 [debug] Executing bend with initial: 10
11:56:06.260 [debug] Executing fun with value: 10
11:56:06.260 [debug] Evaluating bend block with value: 10
11:56:06.260 [debug] Block returned: %{variant: :leaf}
11:56:06.260 [debug] Fun returned result: %{variant: :leaf}
11:56:06.260 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.260 [debug] do_bend final result: %{variant: :leaf}
11:56:06.260 [debug] Executing bend with initial: 10
11:56:06.260 [debug] Executing fun with value: 10
11:56:06.260 [debug] Evaluating bend block with value: 10
11:56:06.260 [debug] Block returned: %{variant: :leaf}
11:56:06.260 [debug] Fun returned result: %{variant: :leaf}
11:56:06.260 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.260 [debug] do_bend final result: %{variant: :leaf}
11:56:06.260 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.260 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.260 [debug] Executing bend with initial: 8
11:56:06.260 [debug] Executing fun with value: 8
11:56:06.260 [debug] Evaluating bend block with value: 8
11:56:06.260 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.260 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.260 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.260 [debug] Executing bend with initial: 9
11:56:06.260 [debug] Executing fun with value: 9
11:56:06.260 [debug] Evaluating bend block with value: 9
11:56:06.260 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.260 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.260 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.260 [debug] Executing bend with initial: 10
11:56:06.260 [debug] Executing fun with value: 10
11:56:06.260 [debug] Evaluating bend block with value: 10
11:56:06.260 [debug] Block returned: %{variant: :leaf}
11:56:06.260 [debug] Fun returned result: %{variant: :leaf}
11:56:06.260 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.260 [debug] do_bend final result: %{variant: :leaf}
11:56:06.260 [debug] Executing bend with initial: 10
11:56:06.260 [debug] Executing fun with value: 10
11:56:06.260 [debug] Evaluating bend block with value: 10
11:56:06.260 [debug] Block returned: %{variant: :leaf}
11:56:06.260 [debug] Fun returned result: %{variant: :leaf}
11:56:06.260 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.260 [debug] do_bend final result: %{variant: :leaf}
11:56:06.260 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.260 [debug] Executing bend with initial: 9
11:56:06.260 [debug] Executing fun with value: 9
11:56:06.260 [debug] Evaluating bend block with value: 9
11:56:06.260 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.260 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.260 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.260 [debug] Executing bend with initial: 10
11:56:06.260 [debug] Executing fun with value: 10
11:56:06.260 [debug] Evaluating bend block with value: 10
11:56:06.260 [debug] Block returned: %{variant: :leaf}
11:56:06.260 [debug] Fun returned result: %{variant: :leaf}
11:56:06.260 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.260 [debug] do_bend final result: %{variant: :leaf}
11:56:06.260 [debug] Executing bend with initial: 10
11:56:06.260 [debug] Executing fun with value: 10
11:56:06.260 [debug] Evaluating bend block with value: 10
11:56:06.260 [debug] Block returned: %{variant: :leaf}
11:56:06.260 [debug] Fun returned result: %{variant: :leaf}
11:56:06.260 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.260 [debug] do_bend final result: %{variant: :leaf}
11:56:06.260 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.260 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.260 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.261 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.261 [debug] Executing bend with initial: 6
11:56:06.261 [debug] Executing fun with value: 6
11:56:06.261 [debug] Evaluating bend block with value: 6
11:56:06.261 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.261 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.261 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.261 [debug] Executing bend with initial: 7
11:56:06.261 [debug] Executing fun with value: 7
11:56:06.261 [debug] Evaluating bend block with value: 7
11:56:06.261 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.261 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.261 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.261 [debug] Executing bend with initial: 8
11:56:06.261 [debug] Executing fun with value: 8
11:56:06.261 [debug] Evaluating bend block with value: 8
11:56:06.261 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.261 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.261 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.261 [debug] Executing bend with initial: 9
11:56:06.261 [debug] Executing fun with value: 9
11:56:06.261 [debug] Evaluating bend block with value: 9
11:56:06.261 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.261 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.261 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.261 [debug] Executing bend with initial: 10
11:56:06.261 [debug] Executing fun with value: 10
11:56:06.261 [debug] Evaluating bend block with value: 10
11:56:06.261 [debug] Block returned: %{variant: :leaf}
11:56:06.261 [debug] Fun returned result: %{variant: :leaf}
11:56:06.261 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.261 [debug] do_bend final result: %{variant: :leaf}
11:56:06.261 [debug] Executing bend with initial: 10
11:56:06.261 [debug] Executing fun with value: 10
11:56:06.261 [debug] Evaluating bend block with value: 10
11:56:06.261 [debug] Block returned: %{variant: :leaf}
11:56:06.261 [debug] Fun returned result: %{variant: :leaf}
11:56:06.261 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.261 [debug] do_bend final result: %{variant: :leaf}
11:56:06.261 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.261 [debug] Executing bend with initial: 9
11:56:06.261 [debug] Executing fun with value: 9
11:56:06.261 [debug] Evaluating bend block with value: 9
11:56:06.261 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.261 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.261 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.261 [debug] Executing bend with initial: 10
11:56:06.261 [debug] Executing fun with value: 10
11:56:06.261 [debug] Evaluating bend block with value: 10
11:56:06.261 [debug] Block returned: %{variant: :leaf}
11:56:06.261 [debug] Fun returned result: %{variant: :leaf}
11:56:06.261 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.261 [debug] do_bend final result: %{variant: :leaf}
11:56:06.261 [debug] Executing bend with initial: 10
11:56:06.261 [debug] Executing fun with value: 10
11:56:06.261 [debug] Evaluating bend block with value: 10
11:56:06.261 [debug] Block returned: %{variant: :leaf}
11:56:06.261 [debug] Fun returned result: %{variant: :leaf}
11:56:06.261 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.261 [debug] do_bend final result: %{variant: :leaf}
11:56:06.261 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.261 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.261 [debug] Executing bend with initial: 8
11:56:06.261 [debug] Executing fun with value: 8
11:56:06.261 [debug] Evaluating bend block with value: 8
11:56:06.261 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.261 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.261 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.261 [debug] Executing bend with initial: 9
11:56:06.261 [debug] Executing fun with value: 9
11:56:06.261 [debug] Evaluating bend block with value: 9
11:56:06.262 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.262 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.262 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.262 [debug] Executing bend with initial: 10
11:56:06.262 [debug] Executing fun with value: 10
11:56:06.262 [debug] Evaluating bend block with value: 10
11:56:06.262 [debug] Block returned: %{variant: :leaf}
11:56:06.262 [debug] Fun returned result: %{variant: :leaf}
11:56:06.262 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.262 [debug] do_bend final result: %{variant: :leaf}
11:56:06.262 [debug] Executing bend with initial: 10
11:56:06.262 [debug] Executing fun with value: 10
11:56:06.262 [debug] Evaluating bend block with value: 10
11:56:06.262 [debug] Block returned: %{variant: :leaf}
11:56:06.262 [debug] Fun returned result: %{variant: :leaf}
11:56:06.262 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.262 [debug] do_bend final result: %{variant: :leaf}
11:56:06.262 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.262 [debug] Executing bend with initial: 9
11:56:06.262 [debug] Executing fun with value: 9
11:56:06.262 [debug] Evaluating bend block with value: 9
11:56:06.262 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.262 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.262 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.262 [debug] Executing bend with initial: 10
11:56:06.262 [debug] Executing fun with value: 10
11:56:06.262 [debug] Evaluating bend block with value: 10
11:56:06.262 [debug] Block returned: %{variant: :leaf}
11:56:06.262 [debug] Fun returned result: %{variant: :leaf}
11:56:06.262 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.262 [debug] do_bend final result: %{variant: :leaf}
11:56:06.262 [debug] Executing bend with initial: 10
11:56:06.262 [debug] Executing fun with value: 10
11:56:06.262 [debug] Evaluating bend block with value: 10
11:56:06.262 [debug] Block returned: %{variant: :leaf}
11:56:06.262 [debug] Fun returned result: %{variant: :leaf}
11:56:06.262 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.262 [debug] do_bend final result: %{variant: :leaf}
11:56:06.262 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.262 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.262 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.262 [debug] Executing bend with initial: 7
11:56:06.262 [debug] Executing fun with value: 7
11:56:06.262 [debug] Evaluating bend block with value: 7
11:56:06.262 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.262 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.262 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.262 [debug] Executing bend with initial: 8
11:56:06.262 [debug] Executing fun with value: 8
11:56:06.262 [debug] Evaluating bend block with value: 8
11:56:06.262 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.262 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.262 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.262 [debug] Executing bend with initial: 9
11:56:06.262 [debug] Executing fun with value: 9
11:56:06.262 [debug] Evaluating bend block with value: 9
11:56:06.262 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.262 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.262 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.262 [debug] Executing bend with initial: 10
11:56:06.262 [debug] Executing fun with value: 10
11:56:06.262 [debug] Evaluating bend block with value: 10
11:56:06.263 [debug] Block returned: %{variant: :leaf}
11:56:06.263 [debug] Fun returned result: %{variant: :leaf}
11:56:06.263 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.263 [debug] do_bend final result: %{variant: :leaf}
11:56:06.263 [debug] Executing bend with initial: 10
11:56:06.263 [debug] Executing fun with value: 10
11:56:06.263 [debug] Evaluating bend block with value: 10
11:56:06.263 [debug] Block returned: %{variant: :leaf}
11:56:06.263 [debug] Fun returned result: %{variant: :leaf}
11:56:06.263 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.263 [debug] do_bend final result: %{variant: :leaf}
11:56:06.263 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.263 [debug] Executing bend with initial: 9
11:56:06.263 [debug] Executing fun with value: 9
11:56:06.263 [debug] Evaluating bend block with value: 9
11:56:06.263 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.263 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.263 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.263 [debug] Executing bend with initial: 10
11:56:06.263 [debug] Executing fun with value: 10
11:56:06.263 [debug] Evaluating bend block with value: 10
11:56:06.263 [debug] Block returned: %{variant: :leaf}
11:56:06.263 [debug] Fun returned result: %{variant: :leaf}
11:56:06.263 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.263 [debug] do_bend final result: %{variant: :leaf}
11:56:06.263 [debug] Executing bend with initial: 10
11:56:06.263 [debug] Executing fun with value: 10
11:56:06.263 [debug] Evaluating bend block with value: 10
11:56:06.263 [debug] Block returned: %{variant: :leaf}
11:56:06.263 [debug] Fun returned result: %{variant: :leaf}
11:56:06.263 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.263 [debug] do_bend final result: %{variant: :leaf}
11:56:06.263 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.263 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.263 [debug] Executing bend with initial: 8
11:56:06.263 [debug] Executing fun with value: 8
11:56:06.263 [debug] Evaluating bend block with value: 8
11:56:06.263 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.263 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.263 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.263 [debug] Executing bend with initial: 9
11:56:06.263 [debug] Executing fun with value: 9
11:56:06.263 [debug] Evaluating bend block with value: 9
11:56:06.263 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.263 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.263 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.263 [debug] Executing bend with initial: 10
11:56:06.263 [debug] Executing fun with value: 10
11:56:06.263 [debug] Evaluating bend block with value: 10
11:56:06.263 [debug] Block returned: %{variant: :leaf}
11:56:06.263 [debug] Fun returned result: %{variant: :leaf}
11:56:06.263 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.263 [debug] do_bend final result: %{variant: :leaf}
11:56:06.263 [debug] Executing bend with initial: 10
11:56:06.263 [debug] Executing fun with value: 10
11:56:06.263 [debug] Evaluating bend block with value: 10
11:56:06.263 [debug] Block returned: %{variant: :leaf}
11:56:06.263 [debug] Fun returned result: %{variant: :leaf}
11:56:06.263 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.263 [debug] do_bend final result: %{variant: :leaf}
11:56:06.263 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.263 [debug] Executing bend with initial: 9
11:56:06.263 [debug] Executing fun with value: 9
11:56:06.263 [debug] Evaluating bend block with value: 9
11:56:06.263 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.263 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.263 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.263 [debug] Executing bend with initial: 10
11:56:06.263 [debug] Executing fun with value: 10
11:56:06.263 [debug] Evaluating bend block with value: 10
11:56:06.263 [debug] Block returned: %{variant: :leaf}
11:56:06.263 [debug] Fun returned result: %{variant: :leaf}
11:56:06.263 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.263 [debug] do_bend final result: %{variant: :leaf}
11:56:06.263 [debug] Executing bend with initial: 10
11:56:06.263 [debug] Executing fun with value: 10
11:56:06.264 [debug] Evaluating bend block with value: 10
11:56:06.264 [debug] Block returned: %{variant: :leaf}
11:56:06.264 [debug] Fun returned result: %{variant: :leaf}
11:56:06.264 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.264 [debug] do_bend final result: %{variant: :leaf}
11:56:06.264 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.264 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.264 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.264 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.264 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.264 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.264 [debug] Executing bend with initial: 4
11:56:06.264 [debug] Executing fun with value: 4
11:56:06.264 [debug] Evaluating bend block with value: 4
11:56:06.264 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.264 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.264 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}
11:56:06.264 [debug] Executing bend with initial: 5
11:56:06.264 [debug] Executing fun with value: 5
11:56:06.264 [debug] Evaluating bend block with value: 5
11:56:06.265 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.265 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.265 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.265 [debug] Executing bend with initial: 6
11:56:06.265 [debug] Executing fun with value: 6
11:56:06.265 [debug] Evaluating bend block with value: 6
11:56:06.265 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.265 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.265 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.265 [debug] Executing bend with initial: 7
11:56:06.265 [debug] Executing fun with value: 7
11:56:06.265 [debug] Evaluating bend block with value: 7
11:56:06.265 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.265 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.265 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.265 [debug] Executing bend with initial: 8
11:56:06.265 [debug] Executing fun with value: 8
11:56:06.265 [debug] Evaluating bend block with value: 8
11:56:06.265 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.265 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.265 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.265 [debug] Executing bend with initial: 9
11:56:06.265 [debug] Executing fun with value: 9
11:56:06.265 [debug] Evaluating bend block with value: 9
11:56:06.265 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.265 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.265 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.265 [debug] Executing bend with initial: 10
11:56:06.265 [debug] Executing fun with value: 10
11:56:06.265 [debug] Evaluating bend block with value: 10
11:56:06.265 [debug] Block returned: %{variant: :leaf}
11:56:06.265 [debug] Fun returned result: %{variant: :leaf}
11:56:06.265 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.265 [debug] do_bend final result: %{variant: :leaf}
11:56:06.265 [debug] Executing bend with initial: 10
11:56:06.265 [debug] Executing fun with value: 10
11:56:06.265 [debug] Evaluating bend block with value: 10
11:56:06.265 [debug] Block returned: %{variant: :leaf}
11:56:06.265 [debug] Fun returned result: %{variant: :leaf}
11:56:06.265 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.265 [debug] do_bend final result: %{variant: :leaf}
11:56:06.265 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.265 [debug] Executing bend with initial: 9
11:56:06.265 [debug] Executing fun with value: 9
11:56:06.265 [debug] Evaluating bend block with value: 9
11:56:06.265 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.265 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.265 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.265 [debug] Executing bend with initial: 10
11:56:06.265 [debug] Executing fun with value: 10
11:56:06.265 [debug] Evaluating bend block with value: 10
11:56:06.265 [debug] Block returned: %{variant: :leaf}
11:56:06.265 [debug] Fun returned result: %{variant: :leaf}
11:56:06.265 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.265 [debug] do_bend final result: %{variant: :leaf}
11:56:06.265 [debug] Executing bend with initial: 10
11:56:06.265 [debug] Executing fun with value: 10
11:56:06.265 [debug] Evaluating bend block with value: 10
11:56:06.265 [debug] Block returned: %{variant: :leaf}
11:56:06.265 [debug] Fun returned result: %{variant: :leaf}
11:56:06.265 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.265 [debug] do_bend final result: %{variant: :leaf}
11:56:06.265 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.265 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.265 [debug] Executing bend with initial: 8
11:56:06.265 [debug] Executing fun with value: 8
11:56:06.265 [debug] Evaluating bend block with value: 8
11:56:06.265 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.265 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.265 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.265 [debug] Executing bend with initial: 9
11:56:06.265 [debug] Executing fun with value: 9
11:56:06.265 [debug] Evaluating bend block with value: 9
11:56:06.265 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.265 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.265 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.265 [debug] Executing bend with initial: 10
11:56:06.265 [debug] Executing fun with value: 10
11:56:06.265 [debug] Evaluating bend block with value: 10
11:56:06.265 [debug] Block returned: %{variant: :leaf}
11:56:06.265 [debug] Fun returned result: %{variant: :leaf}
11:56:06.265 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.265 [debug] do_bend final result: %{variant: :leaf}
11:56:06.265 [debug] Executing bend with initial: 10
11:56:06.266 [debug] Executing fun with value: 10
11:56:06.266 [debug] Evaluating bend block with value: 10
11:56:06.266 [debug] Block returned: %{variant: :leaf}
11:56:06.266 [debug] Fun returned result: %{variant: :leaf}
11:56:06.266 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.266 [debug] do_bend final result: %{variant: :leaf}
11:56:06.266 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.266 [debug] Executing bend with initial: 9
11:56:06.266 [debug] Executing fun with value: 9
11:56:06.266 [debug] Evaluating bend block with value: 9
11:56:06.266 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.266 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.266 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.266 [debug] Executing bend with initial: 10
11:56:06.266 [debug] Executing fun with value: 10
11:56:06.266 [debug] Evaluating bend block with value: 10
11:56:06.266 [debug] Block returned: %{variant: :leaf}
11:56:06.266 [debug] Fun returned result: %{variant: :leaf}
11:56:06.266 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.266 [debug] do_bend final result: %{variant: :leaf}
11:56:06.266 [debug] Executing bend with initial: 10
11:56:06.266 [debug] Executing fun with value: 10
11:56:06.266 [debug] Evaluating bend block with value: 10
11:56:06.266 [debug] Block returned: %{variant: :leaf}
11:56:06.266 [debug] Fun returned result: %{variant: :leaf}
11:56:06.266 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.266 [debug] do_bend final result: %{variant: :leaf}
11:56:06.266 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.266 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.266 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.266 [debug] Executing bend with initial: 7
11:56:06.266 [debug] Executing fun with value: 7
11:56:06.266 [debug] Evaluating bend block with value: 7
11:56:06.266 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.266 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.266 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.266 [debug] Executing bend with initial: 8
11:56:06.266 [debug] Executing fun with value: 8
11:56:06.266 [debug] Evaluating bend block with value: 8
11:56:06.266 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.266 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.266 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.266 [debug] Executing bend with initial: 9
11:56:06.266 [debug] Executing fun with value: 9
11:56:06.266 [debug] Evaluating bend block with value: 9
11:56:06.266 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.266 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.266 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.266 [debug] Executing bend with initial: 10
11:56:06.266 [debug] Executing fun with value: 10
11:56:06.266 [debug] Evaluating bend block with value: 10
11:56:06.266 [debug] Block returned: %{variant: :leaf}
11:56:06.266 [debug] Fun returned result: %{variant: :leaf}
11:56:06.266 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.266 [debug] do_bend final result: %{variant: :leaf}
11:56:06.266 [debug] Executing bend with initial: 10
11:56:06.266 [debug] Executing fun with value: 10
11:56:06.266 [debug] Evaluating bend block with value: 10
11:56:06.266 [debug] Block returned: %{variant: :leaf}
11:56:06.266 [debug] Fun returned result: %{variant: :leaf}
11:56:06.266 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.266 [debug] do_bend final result: %{variant: :leaf}
11:56:06.266 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.266 [debug] Executing bend with initial: 9
11:56:06.266 [debug] Executing fun with value: 9
11:56:06.266 [debug] Evaluating bend block with value: 9
11:56:06.266 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.266 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.266 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.266 [debug] Executing bend with initial: 10
11:56:06.266 [debug] Executing fun with value: 10
11:56:06.266 [debug] Evaluating bend block with value: 10
11:56:06.266 [debug] Block returned: %{variant: :leaf}
11:56:06.266 [debug] Fun returned result: %{variant: :leaf}
11:56:06.266 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.266 [debug] do_bend final result: %{variant: :leaf}
11:56:06.266 [debug] Executing bend with initial: 10
11:56:06.266 [debug] Executing fun with value: 10
11:56:06.266 [debug] Evaluating bend block with value: 10
11:56:06.266 [debug] Block returned: %{variant: :leaf}
11:56:06.266 [debug] Fun returned result: %{variant: :leaf}
11:56:06.266 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.266 [debug] do_bend final result: %{variant: :leaf}
11:56:06.267 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.267 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.267 [debug] Executing bend with initial: 8
11:56:06.267 [debug] Executing fun with value: 8
11:56:06.267 [debug] Evaluating bend block with value: 8
11:56:06.267 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.267 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.267 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.267 [debug] Executing bend with initial: 9
11:56:06.267 [debug] Executing fun with value: 9
11:56:06.267 [debug] Evaluating bend block with value: 9
11:56:06.267 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.267 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.267 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.267 [debug] Executing bend with initial: 10
11:56:06.267 [debug] Executing fun with value: 10
11:56:06.267 [debug] Evaluating bend block with value: 10
11:56:06.267 [debug] Block returned: %{variant: :leaf}
11:56:06.267 [debug] Fun returned result: %{variant: :leaf}
11:56:06.267 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.267 [debug] do_bend final result: %{variant: :leaf}
11:56:06.267 [debug] Executing bend with initial: 10
11:56:06.267 [debug] Executing fun with value: 10
11:56:06.267 [debug] Evaluating bend block with value: 10
11:56:06.267 [debug] Block returned: %{variant: :leaf}
11:56:06.267 [debug] Fun returned result: %{variant: :leaf}
11:56:06.267 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.267 [debug] do_bend final result: %{variant: :leaf}
11:56:06.267 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.267 [debug] Executing bend with initial: 9
11:56:06.267 [debug] Executing fun with value: 9
11:56:06.267 [debug] Evaluating bend block with value: 9
11:56:06.267 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.267 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.267 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.267 [debug] Executing bend with initial: 10
11:56:06.267 [debug] Executing fun with value: 10
11:56:06.267 [debug] Evaluating bend block with value: 10
11:56:06.267 [debug] Block returned: %{variant: :leaf}
11:56:06.267 [debug] Fun returned result: %{variant: :leaf}
11:56:06.267 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.267 [debug] do_bend final result: %{variant: :leaf}
11:56:06.267 [debug] Executing bend with initial: 10
11:56:06.267 [debug] Executing fun with value: 10
11:56:06.267 [debug] Evaluating bend block with value: 10
11:56:06.267 [debug] Block returned: %{variant: :leaf}
11:56:06.267 [debug] Fun returned result: %{variant: :leaf}
11:56:06.267 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.267 [debug] do_bend final result: %{variant: :leaf}
11:56:06.267 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.267 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.267 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.268 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.268 [debug] Executing bend with initial: 6
11:56:06.268 [debug] Executing fun with value: 6
11:56:06.268 [debug] Evaluating bend block with value: 6
11:56:06.268 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.268 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.268 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.268 [debug] Executing bend with initial: 7
11:56:06.268 [debug] Executing fun with value: 7
11:56:06.268 [debug] Evaluating bend block with value: 7
11:56:06.268 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.268 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.268 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.268 [debug] Executing bend with initial: 8
11:56:06.268 [debug] Executing fun with value: 8
11:56:06.268 [debug] Evaluating bend block with value: 8
11:56:06.268 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.268 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.268 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.268 [debug] Executing bend with initial: 9
11:56:06.268 [debug] Executing fun with value: 9
11:56:06.268 [debug] Evaluating bend block with value: 9
11:56:06.268 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.268 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.268 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.268 [debug] Executing bend with initial: 10
11:56:06.268 [debug] Executing fun with value: 10
11:56:06.268 [debug] Evaluating bend block with value: 10
11:56:06.268 [debug] Block returned: %{variant: :leaf}
11:56:06.268 [debug] Fun returned result: %{variant: :leaf}
11:56:06.268 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.268 [debug] do_bend final result: %{variant: :leaf}
11:56:06.268 [debug] Executing bend with initial: 10
11:56:06.268 [debug] Executing fun with value: 10
11:56:06.268 [debug] Evaluating bend block with value: 10
11:56:06.268 [debug] Block returned: %{variant: :leaf}
11:56:06.268 [debug] Fun returned result: %{variant: :leaf}
11:56:06.268 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.268 [debug] do_bend final result: %{variant: :leaf}
11:56:06.268 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.268 [debug] Executing bend with initial: 9
11:56:06.268 [debug] Executing fun with value: 9
11:56:06.268 [debug] Evaluating bend block with value: 9
11:56:06.268 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.268 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.268 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.268 [debug] Executing bend with initial: 10
11:56:06.268 [debug] Executing fun with value: 10
11:56:06.268 [debug] Evaluating bend block with value: 10
11:56:06.268 [debug] Block returned: %{variant: :leaf}
11:56:06.268 [debug] Fun returned result: %{variant: :leaf}
11:56:06.268 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.268 [debug] do_bend final result: %{variant: :leaf}
11:56:06.268 [debug] Executing bend with initial: 10
11:56:06.268 [debug] Executing fun with value: 10
11:56:06.268 [debug] Evaluating bend block with value: 10
11:56:06.268 [debug] Block returned: %{variant: :leaf}
11:56:06.268 [debug] Fun returned result: %{variant: :leaf}
11:56:06.268 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.268 [debug] do_bend final result: %{variant: :leaf}
11:56:06.268 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.268 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.268 [debug] Executing bend with initial: 8
11:56:06.268 [debug] Executing fun with value: 8
11:56:06.268 [debug] Evaluating bend block with value: 8
11:56:06.269 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.269 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.269 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.269 [debug] Executing bend with initial: 9
11:56:06.269 [debug] Executing fun with value: 9
11:56:06.269 [debug] Evaluating bend block with value: 9
11:56:06.269 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.269 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.269 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.269 [debug] Executing bend with initial: 10
11:56:06.269 [debug] Executing fun with value: 10
11:56:06.269 [debug] Evaluating bend block with value: 10
11:56:06.269 [debug] Block returned: %{variant: :leaf}
11:56:06.269 [debug] Fun returned result: %{variant: :leaf}
11:56:06.269 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.269 [debug] do_bend final result: %{variant: :leaf}
11:56:06.269 [debug] Executing bend with initial: 10
11:56:06.269 [debug] Executing fun with value: 10
11:56:06.269 [debug] Evaluating bend block with value: 10
11:56:06.269 [debug] Block returned: %{variant: :leaf}
11:56:06.269 [debug] Fun returned result: %{variant: :leaf}
11:56:06.269 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.269 [debug] do_bend final result: %{variant: :leaf}
11:56:06.269 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.269 [debug] Executing bend with initial: 9
11:56:06.269 [debug] Executing fun with value: 9
11:56:06.269 [debug] Evaluating bend block with value: 9
11:56:06.269 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.269 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.269 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.269 [debug] Executing bend with initial: 10
11:56:06.269 [debug] Executing fun with value: 10
11:56:06.269 [debug] Evaluating bend block with value: 10
11:56:06.269 [debug] Block returned: %{variant: :leaf}
11:56:06.269 [debug] Fun returned result: %{variant: :leaf}
11:56:06.269 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.269 [debug] do_bend final result: %{variant: :leaf}
11:56:06.269 [debug] Executing bend with initial: 10
11:56:06.269 [debug] Executing fun with value: 10
11:56:06.269 [debug] Evaluating bend block with value: 10
11:56:06.269 [debug] Block returned: %{variant: :leaf}
11:56:06.269 [debug] Fun returned result: %{variant: :leaf}
11:56:06.269 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.269 [debug] do_bend final result: %{variant: :leaf}
11:56:06.269 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.269 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.269 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.269 [debug] Executing bend with initial: 7
11:56:06.269 [debug] Executing fun with value: 7
11:56:06.269 [debug] Evaluating bend block with value: 7
11:56:06.269 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.269 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.269 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.269 [debug] Executing bend with initial: 8
11:56:06.269 [debug] Executing fun with value: 8
11:56:06.269 [debug] Evaluating bend block with value: 8
11:56:06.269 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.269 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.269 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.269 [debug] Executing bend with initial: 9
11:56:06.269 [debug] Executing fun with value: 9
11:56:06.269 [debug] Evaluating bend block with value: 9
11:56:06.269 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.269 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.269 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.269 [debug] Executing bend with initial: 10
11:56:06.269 [debug] Executing fun with value: 10
11:56:06.269 [debug] Evaluating bend block with value: 10
11:56:06.269 [debug] Block returned: %{variant: :leaf}
11:56:06.269 [debug] Fun returned result: %{variant: :leaf}
11:56:06.269 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.269 [debug] do_bend final result: %{variant: :leaf}
11:56:06.269 [debug] Executing bend with initial: 10
11:56:06.269 [debug] Executing fun with value: 10
11:56:06.269 [debug] Evaluating bend block with value: 10
11:56:06.269 [debug] Block returned: %{variant: :leaf}
11:56:06.269 [debug] Fun returned result: %{variant: :leaf}
11:56:06.269 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.269 [debug] do_bend final result: %{variant: :leaf}
11:56:06.270 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.270 [debug] Executing bend with initial: 9
11:56:06.270 [debug] Executing fun with value: 9
11:56:06.270 [debug] Evaluating bend block with value: 9
11:56:06.270 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.270 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.270 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.270 [debug] Executing bend with initial: 10
11:56:06.270 [debug] Executing fun with value: 10
11:56:06.270 [debug] Evaluating bend block with value: 10
11:56:06.270 [debug] Block returned: %{variant: :leaf}
11:56:06.270 [debug] Fun returned result: %{variant: :leaf}
11:56:06.270 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.270 [debug] do_bend final result: %{variant: :leaf}
11:56:06.270 [debug] Executing bend with initial: 10
11:56:06.270 [debug] Executing fun with value: 10
11:56:06.270 [debug] Evaluating bend block with value: 10
11:56:06.270 [debug] Block returned: %{variant: :leaf}
11:56:06.270 [debug] Fun returned result: %{variant: :leaf}
11:56:06.270 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.270 [debug] do_bend final result: %{variant: :leaf}
11:56:06.270 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.270 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.270 [debug] Executing bend with initial: 8
11:56:06.270 [debug] Executing fun with value: 8
11:56:06.270 [debug] Evaluating bend block with value: 8
11:56:06.270 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.270 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.270 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.270 [debug] Executing bend with initial: 9
11:56:06.270 [debug] Executing fun with value: 9
11:56:06.270 [debug] Evaluating bend block with value: 9
11:56:06.270 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.270 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.270 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.270 [debug] Executing bend with initial: 10
11:56:06.270 [debug] Executing fun with value: 10
11:56:06.270 [debug] Evaluating bend block with value: 10
11:56:06.270 [debug] Block returned: %{variant: :leaf}
11:56:06.270 [debug] Fun returned result: %{variant: :leaf}
11:56:06.270 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.270 [debug] do_bend final result: %{variant: :leaf}
11:56:06.270 [debug] Executing bend with initial: 10
11:56:06.270 [debug] Executing fun with value: 10
11:56:06.270 [debug] Evaluating bend block with value: 10
11:56:06.270 [debug] Block returned: %{variant: :leaf}
11:56:06.270 [debug] Fun returned result: %{variant: :leaf}
11:56:06.270 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.270 [debug] do_bend final result: %{variant: :leaf}
11:56:06.270 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.270 [debug] Executing bend with initial: 9
11:56:06.270 [debug] Executing fun with value: 9
11:56:06.270 [debug] Evaluating bend block with value: 9
11:56:06.270 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.270 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.270 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.270 [debug] Executing bend with initial: 10
11:56:06.270 [debug] Executing fun with value: 10
11:56:06.270 [debug] Evaluating bend block with value: 10
11:56:06.270 [debug] Block returned: %{variant: :leaf}
11:56:06.270 [debug] Fun returned result: %{variant: :leaf}
11:56:06.270 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.270 [debug] do_bend final result: %{variant: :leaf}
11:56:06.270 [debug] Executing bend with initial: 10
11:56:06.270 [debug] Executing fun with value: 10
11:56:06.271 [debug] Evaluating bend block with value: 10
11:56:06.271 [debug] Block returned: %{variant: :leaf}
11:56:06.271 [debug] Fun returned result: %{variant: :leaf}
11:56:06.271 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.271 [debug] do_bend final result: %{variant: :leaf}
11:56:06.271 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.271 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.271 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.271 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.271 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.271 [debug] Executing bend with initial: 5
11:56:06.271 [debug] Executing fun with value: 5
11:56:06.271 [debug] Evaluating bend block with value: 5
11:56:06.271 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.271 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.271 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}
11:56:06.271 [debug] Executing bend with initial: 6
11:56:06.271 [debug] Executing fun with value: 6
11:56:06.271 [debug] Evaluating bend block with value: 6
11:56:06.271 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.271 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.271 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.271 [debug] Executing bend with initial: 7
11:56:06.271 [debug] Executing fun with value: 7
11:56:06.271 [debug] Evaluating bend block with value: 7
11:56:06.271 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.271 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.271 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.271 [debug] Executing bend with initial: 8
11:56:06.271 [debug] Executing fun with value: 8
11:56:06.271 [debug] Evaluating bend block with value: 8
11:56:06.271 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.271 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.271 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.271 [debug] Executing bend with initial: 9
11:56:06.271 [debug] Executing fun with value: 9
11:56:06.271 [debug] Evaluating bend block with value: 9
11:56:06.271 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.271 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.271 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.271 [debug] Executing bend with initial: 10
11:56:06.271 [debug] Executing fun with value: 10
11:56:06.271 [debug] Evaluating bend block with value: 10
11:56:06.271 [debug] Block returned: %{variant: :leaf}
11:56:06.271 [debug] Fun returned result: %{variant: :leaf}
11:56:06.271 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.271 [debug] do_bend final result: %{variant: :leaf}
11:56:06.271 [debug] Executing bend with initial: 10
11:56:06.271 [debug] Executing fun with value: 10
11:56:06.271 [debug] Evaluating bend block with value: 10
11:56:06.271 [debug] Block returned: %{variant: :leaf}
11:56:06.271 [debug] Fun returned result: %{variant: :leaf}
11:56:06.271 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.271 [debug] do_bend final result: %{variant: :leaf}
11:56:06.271 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.271 [debug] Executing bend with initial: 9
11:56:06.272 [debug] Executing fun with value: 9
11:56:06.272 [debug] Evaluating bend block with value: 9
11:56:06.272 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.272 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.272 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.272 [debug] Executing bend with initial: 10
11:56:06.272 [debug] Executing fun with value: 10
11:56:06.272 [debug] Evaluating bend block with value: 10
11:56:06.272 [debug] Block returned: %{variant: :leaf}
11:56:06.272 [debug] Fun returned result: %{variant: :leaf}
11:56:06.272 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.272 [debug] do_bend final result: %{variant: :leaf}
11:56:06.272 [debug] Executing bend with initial: 10
11:56:06.272 [debug] Executing fun with value: 10
11:56:06.272 [debug] Evaluating bend block with value: 10
11:56:06.272 [debug] Block returned: %{variant: :leaf}
11:56:06.272 [debug] Fun returned result: %{variant: :leaf}
11:56:06.272 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.272 [debug] do_bend final result: %{variant: :leaf}
11:56:06.272 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.272 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.272 [debug] Executing bend with initial: 8
11:56:06.272 [debug] Executing fun with value: 8
11:56:06.272 [debug] Evaluating bend block with value: 8
11:56:06.272 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.272 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.272 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.272 [debug] Executing bend with initial: 9
11:56:06.272 [debug] Executing fun with value: 9
11:56:06.272 [debug] Evaluating bend block with value: 9
11:56:06.272 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.272 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.272 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.272 [debug] Executing bend with initial: 10
11:56:06.272 [debug] Executing fun with value: 10
11:56:06.272 [debug] Evaluating bend block with value: 10
11:56:06.272 [debug] Block returned: %{variant: :leaf}
11:56:06.272 [debug] Fun returned result: %{variant: :leaf}
11:56:06.272 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.272 [debug] do_bend final result: %{variant: :leaf}
11:56:06.272 [debug] Executing bend with initial: 10
11:56:06.272 [debug] Executing fun with value: 10
11:56:06.272 [debug] Evaluating bend block with value: 10
11:56:06.272 [debug] Block returned: %{variant: :leaf}
11:56:06.272 [debug] Fun returned result: %{variant: :leaf}
11:56:06.272 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.272 [debug] do_bend final result: %{variant: :leaf}
11:56:06.272 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.272 [debug] Executing bend with initial: 9
11:56:06.272 [debug] Executing fun with value: 9
11:56:06.272 [debug] Evaluating bend block with value: 9
11:56:06.272 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.272 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.272 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.272 [debug] Executing bend with initial: 10
11:56:06.272 [debug] Executing fun with value: 10
11:56:06.272 [debug] Evaluating bend block with value: 10
11:56:06.272 [debug] Block returned: %{variant: :leaf}
11:56:06.272 [debug] Fun returned result: %{variant: :leaf}
11:56:06.272 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.272 [debug] do_bend final result: %{variant: :leaf}
11:56:06.272 [debug] Executing bend with initial: 10
11:56:06.272 [debug] Executing fun with value: 10
11:56:06.272 [debug] Evaluating bend block with value: 10
11:56:06.272 [debug] Block returned: %{variant: :leaf}
11:56:06.272 [debug] Fun returned result: %{variant: :leaf}
11:56:06.272 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.272 [debug] do_bend final result: %{variant: :leaf}
11:56:06.272 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.272 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.272 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.272 [debug] Executing bend with initial: 7
11:56:06.272 [debug] Executing fun with value: 7
11:56:06.272 [debug] Evaluating bend block with value: 7
11:56:06.272 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.273 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.273 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.273 [debug] Executing bend with initial: 8
11:56:06.273 [debug] Executing fun with value: 8
11:56:06.273 [debug] Evaluating bend block with value: 8
11:56:06.273 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.273 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.273 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.273 [debug] Executing bend with initial: 9
11:56:06.273 [debug] Executing fun with value: 9
11:56:06.273 [debug] Evaluating bend block with value: 9
11:56:06.273 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.273 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.273 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.273 [debug] Executing bend with initial: 10
11:56:06.273 [debug] Executing fun with value: 10
11:56:06.273 [debug] Evaluating bend block with value: 10
11:56:06.273 [debug] Block returned: %{variant: :leaf}
11:56:06.273 [debug] Fun returned result: %{variant: :leaf}
11:56:06.273 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.273 [debug] do_bend final result: %{variant: :leaf}
11:56:06.273 [debug] Executing bend with initial: 10
11:56:06.273 [debug] Executing fun with value: 10
11:56:06.273 [debug] Evaluating bend block with value: 10
11:56:06.273 [debug] Block returned: %{variant: :leaf}
11:56:06.273 [debug] Fun returned result: %{variant: :leaf}
11:56:06.273 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.273 [debug] do_bend final result: %{variant: :leaf}
11:56:06.273 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.273 [debug] Executing bend with initial: 9
11:56:06.273 [debug] Executing fun with value: 9
11:56:06.273 [debug] Evaluating bend block with value: 9
11:56:06.273 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.273 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.273 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.273 [debug] Executing bend with initial: 10
11:56:06.273 [debug] Executing fun with value: 10
11:56:06.273 [debug] Evaluating bend block with value: 10
11:56:06.273 [debug] Block returned: %{variant: :leaf}
11:56:06.273 [debug] Fun returned result: %{variant: :leaf}
11:56:06.273 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.273 [debug] do_bend final result: %{variant: :leaf}
11:56:06.273 [debug] Executing bend with initial: 10
11:56:06.273 [debug] Executing fun with value: 10
11:56:06.273 [debug] Evaluating bend block with value: 10
11:56:06.273 [debug] Block returned: %{variant: :leaf}
11:56:06.273 [debug] Fun returned result: %{variant: :leaf}
11:56:06.273 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.273 [debug] do_bend final result: %{variant: :leaf}
11:56:06.273 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.273 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.273 [debug] Executing bend with initial: 8
11:56:06.273 [debug] Executing fun with value: 8
11:56:06.273 [debug] Evaluating bend block with value: 8
11:56:06.273 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.273 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.273 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.273 [debug] Executing bend with initial: 9
11:56:06.273 [debug] Executing fun with value: 9
11:56:06.273 [debug] Evaluating bend block with value: 9
11:56:06.273 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.273 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.273 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.273 [debug] Executing bend with initial: 10
11:56:06.273 [debug] Executing fun with value: 10
11:56:06.273 [debug] Evaluating bend block with value: 10
11:56:06.273 [debug] Block returned: %{variant: :leaf}
11:56:06.273 [debug] Fun returned result: %{variant: :leaf}
11:56:06.273 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.273 [debug] do_bend final result: %{variant: :leaf}
11:56:06.273 [debug] Executing bend with initial: 10
11:56:06.273 [debug] Executing fun with value: 10
11:56:06.273 [debug] Evaluating bend block with value: 10
11:56:06.273 [debug] Block returned: %{variant: :leaf}
11:56:06.273 [debug] Fun returned result: %{variant: :leaf}
11:56:06.273 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.273 [debug] do_bend final result: %{variant: :leaf}
11:56:06.273 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.273 [debug] Executing bend with initial: 9
11:56:06.273 [debug] Executing fun with value: 9
11:56:06.273 [debug] Evaluating bend block with value: 9
11:56:06.273 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.274 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.274 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.274 [debug] Executing bend with initial: 10
11:56:06.274 [debug] Executing fun with value: 10
11:56:06.274 [debug] Evaluating bend block with value: 10
11:56:06.274 [debug] Block returned: %{variant: :leaf}
11:56:06.274 [debug] Fun returned result: %{variant: :leaf}
11:56:06.274 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.274 [debug] do_bend final result: %{variant: :leaf}
11:56:06.274 [debug] Executing bend with initial: 10
11:56:06.274 [debug] Executing fun with value: 10
11:56:06.274 [debug] Evaluating bend block with value: 10
11:56:06.274 [debug] Block returned: %{variant: :leaf}
11:56:06.274 [debug] Fun returned result: %{variant: :leaf}
11:56:06.274 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.274 [debug] do_bend final result: %{variant: :leaf}
11:56:06.274 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.274 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.274 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.274 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.274 [debug] Executing bend with initial: 6
11:56:06.274 [debug] Executing fun with value: 6
11:56:06.274 [debug] Evaluating bend block with value: 6
11:56:06.274 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.274 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.274 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}
11:56:06.274 [debug] Executing bend with initial: 7
11:56:06.274 [debug] Executing fun with value: 7
11:56:06.274 [debug] Evaluating bend block with value: 7
11:56:06.274 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.274 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.274 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.274 [debug] Executing bend with initial: 8
11:56:06.274 [debug] Executing fun with value: 8
11:56:06.274 [debug] Evaluating bend block with value: 8
11:56:06.274 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.274 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.274 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.274 [debug] Executing bend with initial: 9
11:56:06.274 [debug] Executing fun with value: 9
11:56:06.274 [debug] Evaluating bend block with value: 9
11:56:06.274 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.274 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.274 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.274 [debug] Executing bend with initial: 10
11:56:06.274 [debug] Executing fun with value: 10
11:56:06.274 [debug] Evaluating bend block with value: 10
11:56:06.274 [debug] Block returned: %{variant: :leaf}
11:56:06.274 [debug] Fun returned result: %{variant: :leaf}
11:56:06.274 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.274 [debug] do_bend final result: %{variant: :leaf}
11:56:06.274 [debug] Executing bend with initial: 10
11:56:06.274 [debug] Executing fun with value: 10
11:56:06.274 [debug] Evaluating bend block with value: 10
11:56:06.274 [debug] Block returned: %{variant: :leaf}
11:56:06.275 [debug] Fun returned result: %{variant: :leaf}
11:56:06.275 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.275 [debug] do_bend final result: %{variant: :leaf}
11:56:06.275 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.275 [debug] Executing bend with initial: 9
11:56:06.275 [debug] Executing fun with value: 9
11:56:06.275 [debug] Evaluating bend block with value: 9
11:56:06.275 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.275 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.275 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.275 [debug] Executing bend with initial: 10
11:56:06.275 [debug] Executing fun with value: 10
11:56:06.275 [debug] Evaluating bend block with value: 10
11:56:06.275 [debug] Block returned: %{variant: :leaf}
11:56:06.275 [debug] Fun returned result: %{variant: :leaf}
11:56:06.275 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.275 [debug] do_bend final result: %{variant: :leaf}
11:56:06.275 [debug] Executing bend with initial: 10
11:56:06.275 [debug] Executing fun with value: 10
11:56:06.275 [debug] Evaluating bend block with value: 10
11:56:06.275 [debug] Block returned: %{variant: :leaf}
11:56:06.275 [debug] Fun returned result: %{variant: :leaf}
11:56:06.275 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.275 [debug] do_bend final result: %{variant: :leaf}
11:56:06.275 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.275 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.275 [debug] Executing bend with initial: 8
11:56:06.275 [debug] Executing fun with value: 8
11:56:06.275 [debug] Evaluating bend block with value: 8
11:56:06.275 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.275 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.275 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.275 [debug] Executing bend with initial: 9
11:56:06.275 [debug] Executing fun with value: 9
11:56:06.275 [debug] Evaluating bend block with value: 9
11:56:06.275 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.275 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.275 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.275 [debug] Executing bend with initial: 10
11:56:06.275 [debug] Executing fun with value: 10
11:56:06.275 [debug] Evaluating bend block with value: 10
11:56:06.275 [debug] Block returned: %{variant: :leaf}
11:56:06.275 [debug] Fun returned result: %{variant: :leaf}
11:56:06.275 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.275 [debug] do_bend final result: %{variant: :leaf}
11:56:06.275 [debug] Executing bend with initial: 10
11:56:06.275 [debug] Executing fun with value: 10
11:56:06.275 [debug] Evaluating bend block with value: 10
11:56:06.275 [debug] Block returned: %{variant: :leaf}
11:56:06.275 [debug] Fun returned result: %{variant: :leaf}
11:56:06.275 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.275 [debug] do_bend final result: %{variant: :leaf}
11:56:06.275 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.275 [debug] Executing bend with initial: 9
11:56:06.275 [debug] Executing fun with value: 9
11:56:06.275 [debug] Evaluating bend block with value: 9
11:56:06.275 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.275 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.275 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.275 [debug] Executing bend with initial: 10
11:56:06.275 [debug] Executing fun with value: 10
11:56:06.275 [debug] Evaluating bend block with value: 10
11:56:06.275 [debug] Block returned: %{variant: :leaf}
11:56:06.275 [debug] Fun returned result: %{variant: :leaf}
11:56:06.275 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.275 [debug] do_bend final result: %{variant: :leaf}
11:56:06.275 [debug] Executing bend with initial: 10
11:56:06.275 [debug] Executing fun with value: 10
11:56:06.275 [debug] Evaluating bend block with value: 10
11:56:06.275 [debug] Block returned: %{variant: :leaf}
11:56:06.275 [debug] Fun returned result: %{variant: :leaf}
11:56:06.275 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.275 [debug] do_bend final result: %{variant: :leaf}
11:56:06.275 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.275 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.275 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.275 [debug] Executing bend with initial: 7
11:56:06.275 [debug] Executing fun with value: 7
11:56:06.275 [debug] Evaluating bend block with value: 7
11:56:06.275 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.275 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.275 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}
11:56:06.275 [debug] Executing bend with initial: 8
11:56:06.275 [debug] Executing fun with value: 8
11:56:06.275 [debug] Evaluating bend block with value: 8
11:56:06.275 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.276 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.276 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.276 [debug] Executing bend with initial: 9
11:56:06.276 [debug] Executing fun with value: 9
11:56:06.276 [debug] Evaluating bend block with value: 9
11:56:06.276 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.276 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.276 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.276 [debug] Executing bend with initial: 10
11:56:06.276 [debug] Executing fun with value: 10
11:56:06.276 [debug] Evaluating bend block with value: 10
11:56:06.276 [debug] Block returned: %{variant: :leaf}
11:56:06.276 [debug] Fun returned result: %{variant: :leaf}
11:56:06.276 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.276 [debug] do_bend final result: %{variant: :leaf}
11:56:06.276 [debug] Executing bend with initial: 10
11:56:06.276 [debug] Executing fun with value: 10
11:56:06.276 [debug] Evaluating bend block with value: 10
11:56:06.276 [debug] Block returned: %{variant: :leaf}
11:56:06.276 [debug] Fun returned result: %{variant: :leaf}
11:56:06.276 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.276 [debug] do_bend final result: %{variant: :leaf}
11:56:06.276 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.276 [debug] Executing bend with initial: 9
11:56:06.276 [debug] Executing fun with value: 9
11:56:06.276 [debug] Evaluating bend block with value: 9
11:56:06.276 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.276 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.276 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.276 [debug] Executing bend with initial: 10
11:56:06.276 [debug] Executing fun with value: 10
11:56:06.276 [debug] Evaluating bend block with value: 10
11:56:06.276 [debug] Block returned: %{variant: :leaf}
11:56:06.276 [debug] Fun returned result: %{variant: :leaf}
11:56:06.276 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.276 [debug] do_bend final result: %{variant: :leaf}
11:56:06.276 [debug] Executing bend with initial: 10
11:56:06.276 [debug] Executing fun with value: 10
11:56:06.276 [debug] Evaluating bend block with value: 10
11:56:06.276 [debug] Block returned: %{variant: :leaf}
11:56:06.276 [debug] Fun returned result: %{variant: :leaf}
11:56:06.276 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.276 [debug] do_bend final result: %{variant: :leaf}
11:56:06.276 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.276 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.276 [debug] Executing bend with initial: 8
11:56:06.276 [debug] Executing fun with value: 8
11:56:06.276 [debug] Evaluating bend block with value: 8
11:56:06.276 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.276 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.276 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}
11:56:06.276 [debug] Executing bend with initial: 9
11:56:06.276 [debug] Executing fun with value: 9
11:56:06.276 [debug] Evaluating bend block with value: 9
11:56:06.276 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.276 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.276 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.276 [debug] Executing bend with initial: 10
11:56:06.276 [debug] Executing fun with value: 10
11:56:06.276 [debug] Evaluating bend block with value: 10
11:56:06.276 [debug] Block returned: %{variant: :leaf}
11:56:06.276 [debug] Fun returned result: %{variant: :leaf}
11:56:06.276 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.276 [debug] do_bend final result: %{variant: :leaf}
11:56:06.276 [debug] Executing bend with initial: 10
11:56:06.276 [debug] Executing fun with value: 10
11:56:06.276 [debug] Evaluating bend block with value: 10
11:56:06.276 [debug] Block returned: %{variant: :leaf}
11:56:06.276 [debug] Fun returned result: %{variant: :leaf}
11:56:06.277 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.277 [debug] do_bend final result: %{variant: :leaf}
11:56:06.277 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.277 [debug] Executing bend with initial: 9
11:56:06.277 [debug] Executing fun with value: 9
11:56:06.277 [debug] Evaluating bend block with value: 9
11:56:06.277 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.277 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.277 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}
11:56:06.277 [debug] Executing bend with initial: 10
11:56:06.277 [debug] Executing fun with value: 10
11:56:06.277 [debug] Evaluating bend block with value: 10
11:56:06.277 [debug] Block returned: %{variant: :leaf}
11:56:06.277 [debug] Fun returned result: %{variant: :leaf}
11:56:06.277 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.277 [debug] do_bend final result: %{variant: :leaf}
11:56:06.277 [debug] Executing bend with initial: 10
11:56:06.277 [debug] Executing fun with value: 10
11:56:06.277 [debug] Evaluating bend block with value: 10
11:56:06.277 [debug] Block returned: %{variant: :leaf}
11:56:06.277 [debug] Fun returned result: %{variant: :leaf}
11:56:06.277 [debug] Processing constructed value: %{variant: :leaf}
11:56:06.277 [debug] do_bend final result: %{variant: :leaf}
11:56:06.277 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.277 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.277 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.277 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.277 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.277 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.278 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.280 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, (truncated)
11:56:06.282 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, (truncated)
11:56:06.292 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: (truncated)
11:56:06.300 [debug] Final bend result: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :l (truncated)
11:56:06.305 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{vari (truncated)
11:56:06.310 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right:  (truncated)
11:56:06.313 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :le (truncated)
11:56:06.315 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{varian (truncated)
11:56:06.317 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val (truncated)
11:56:06.318 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf (truncated)
11:56:06.318 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, variant_type: :node, state: nil
11:56:06.318 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.319 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.319 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.319 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.319 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.319 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.319 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.319 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.319 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.319 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.319 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.319 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.319 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.319 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.319 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.319 [debug] Recursive field result for left: 0
11:56:06.319 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.319 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.319 [debug] Recursive field result for right: 0
11:56:06.319 [debug] do_fold called with non-variant data: 0
11:56:06.319 [debug] do_fold called with non-variant data: 0
11:56:06.319 [debug] Recursive field result for left: 9
11:56:06.319 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for left: 0
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for right: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] Recursive field result for right: 9
11:56:06.320 [debug] do_fold called with non-variant data: 9
11:56:06.320 [debug] do_fold called with non-variant data: 9
11:56:06.320 [debug] Recursive field result for left: 26
11:56:06.320 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.320 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for left: 0
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for right: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] Recursive field result for left: 9
11:56:06.320 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for left: 0
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for right: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] Recursive field result for right: 9
11:56:06.320 [debug] do_fold called with non-variant data: 9
11:56:06.320 [debug] do_fold called with non-variant data: 9
11:56:06.320 [debug] Recursive field result for right: 26
11:56:06.320 [debug] do_fold called with non-variant data: 26
11:56:06.320 [debug] do_fold called with non-variant data: 26
11:56:06.320 [debug] Recursive field result for left: 59
11:56:06.320 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.320 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.320 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for left: 0
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for right: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] Recursive field result for left: 9
11:56:06.320 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for left: 0
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for right: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] Recursive field result for right: 9
11:56:06.320 [debug] do_fold called with non-variant data: 9
11:56:06.320 [debug] do_fold called with non-variant data: 9
11:56:06.320 [debug] Recursive field result for left: 26
11:56:06.320 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.320 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for left: 0
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for right: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] Recursive field result for left: 9
11:56:06.320 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for left: 0
11:56:06.320 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.320 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.320 [debug] Recursive field result for right: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] do_fold called with non-variant data: 0
11:56:06.320 [debug] Recursive field result for right: 9
11:56:06.320 [debug] do_fold called with non-variant data: 9
11:56:06.320 [debug] do_fold called with non-variant data: 9
11:56:06.320 [debug] Recursive field result for right: 26
11:56:06.320 [debug] do_fold called with non-variant data: 26
11:56:06.320 [debug] do_fold called with non-variant data: 26
11:56:06.320 [debug] Recursive field result for right: 59
11:56:06.320 [debug] do_fold called with non-variant data: 59
11:56:06.320 [debug] do_fold called with non-variant data: 59
11:56:06.320 [debug] Recursive field result for left: 124
11:56:06.320 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.321 [debug] Recursive field result for left: 0
11:56:06.321 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.321 [debug] Recursive field result for right: 0
11:56:06.321 [debug] do_fold called with non-variant data: 0
11:56:06.321 [debug] do_fold called with non-variant data: 0
11:56:06.321 [debug] Recursive field result for left: 9
11:56:06.321 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.321 [debug] Recursive field result for left: 0
11:56:06.321 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.321 [debug] Recursive field result for right: 0
11:56:06.321 [debug] do_fold called with non-variant data: 0
11:56:06.321 [debug] do_fold called with non-variant data: 0
11:56:06.321 [debug] Recursive field result for right: 9
11:56:06.321 [debug] do_fold called with non-variant data: 9
11:56:06.321 [debug] do_fold called with non-variant data: 9
11:56:06.321 [debug] Recursive field result for left: 26
11:56:06.321 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.321 [debug] Recursive field result for left: 0
11:56:06.321 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.321 [debug] Recursive field result for right: 0
11:56:06.321 [debug] do_fold called with non-variant data: 0
11:56:06.321 [debug] do_fold called with non-variant data: 0
11:56:06.321 [debug] Recursive field result for left: 9
11:56:06.321 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.321 [debug] Recursive field result for left: 0
11:56:06.321 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.321 [debug] Recursive field result for right: 0
11:56:06.321 [debug] do_fold called with non-variant data: 0
11:56:06.321 [debug] do_fold called with non-variant data: 0
11:56:06.321 [debug] Recursive field result for right: 9
11:56:06.321 [debug] do_fold called with non-variant data: 9
11:56:06.321 [debug] do_fold called with non-variant data: 9
11:56:06.321 [debug] Recursive field result for right: 26
11:56:06.321 [debug] do_fold called with non-variant data: 26
11:56:06.321 [debug] do_fold called with non-variant data: 26
11:56:06.321 [debug] Recursive field result for left: 59
11:56:06.321 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.321 [debug] Recursive field result for left: 0
11:56:06.321 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.321 [debug] Recursive field result for right: 0
11:56:06.321 [debug] do_fold called with non-variant data: 0
11:56:06.321 [debug] do_fold called with non-variant data: 0
11:56:06.321 [debug] Recursive field result for left: 9
11:56:06.321 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.321 [debug] Recursive field result for left: 0
11:56:06.321 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.321 [debug] Recursive field result for right: 0
11:56:06.321 [debug] do_fold called with non-variant data: 0
11:56:06.321 [debug] do_fold called with non-variant data: 0
11:56:06.321 [debug] Recursive field result for right: 9
11:56:06.321 [debug] do_fold called with non-variant data: 9
11:56:06.321 [debug] do_fold called with non-variant data: 9
11:56:06.321 [debug] Recursive field result for left: 26
11:56:06.321 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.321 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.321 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.322 [debug] Recursive field result for left: 0
11:56:06.322 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.322 [debug] Recursive field result for right: 0
11:56:06.322 [debug] do_fold called with non-variant data: 0
11:56:06.322 [debug] do_fold called with non-variant data: 0
11:56:06.322 [debug] Recursive field result for left: 9
11:56:06.322 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.322 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.322 [debug] Recursive field result for left: 0
11:56:06.322 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.322 [debug] Recursive field result for right: 0
11:56:06.322 [debug] do_fold called with non-variant data: 0
11:56:06.322 [debug] do_fold called with non-variant data: 0
11:56:06.322 [debug] Recursive field result for right: 9
11:56:06.322 [debug] do_fold called with non-variant data: 9
11:56:06.322 [debug] do_fold called with non-variant data: 9
11:56:06.322 [debug] Recursive field result for right: 26
11:56:06.322 [debug] do_fold called with non-variant data: 26
11:56:06.322 [debug] do_fold called with non-variant data: 26
11:56:06.322 [debug] Recursive field result for right: 59
11:56:06.322 [debug] do_fold called with non-variant data: 59
11:56:06.322 [debug] do_fold called with non-variant data: 59
11:56:06.322 [debug] Recursive field result for right: 124
11:56:06.322 [debug] do_fold called with non-variant data: 124
11:56:06.322 [debug] do_fold called with non-variant data: 124
11:56:06.322 [debug] Recursive field result for left: 253
11:56:06.322 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.322 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.322 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.322 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.322 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.322 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.322 [debug] Recursive field result for left: 0
11:56:06.322 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.322 [debug] Recursive field result for right: 0
11:56:06.322 [debug] do_fold called with non-variant data: 0
11:56:06.322 [debug] do_fold called with non-variant data: 0
11:56:06.322 [debug] Recursive field result for left: 9
11:56:06.322 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.322 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.322 [debug] Recursive field result for left: 0
11:56:06.322 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.322 [debug] Recursive field result for right: 0
11:56:06.322 [debug] do_fold called with non-variant data: 0
11:56:06.322 [debug] do_fold called with non-variant data: 0
11:56:06.322 [debug] Recursive field result for right: 9
11:56:06.322 [debug] do_fold called with non-variant data: 9
11:56:06.322 [debug] do_fold called with non-variant data: 9
11:56:06.322 [debug] Recursive field result for left: 26
11:56:06.322 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.322 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.322 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.322 [debug] Recursive field result for left: 0
11:56:06.322 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.322 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.322 [debug] Recursive field result for right: 0
11:56:06.323 [debug] do_fold called with non-variant data: 0
11:56:06.323 [debug] do_fold called with non-variant data: 0
11:56:06.323 [debug] Recursive field result for left: 9
11:56:06.323 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.323 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.323 [debug] Recursive field result for left: 0
11:56:06.323 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.323 [debug] Recursive field result for right: 0
11:56:06.323 [debug] do_fold called with non-variant data: 0
11:56:06.323 [debug] do_fold called with non-variant data: 0
11:56:06.323 [debug] Recursive field result for right: 9
11:56:06.323 [debug] do_fold called with non-variant data: 9
11:56:06.323 [debug] do_fold called with non-variant data: 9
11:56:06.323 [debug] Recursive field result for right: 26
11:56:06.323 [debug] do_fold called with non-variant data: 26
11:56:06.323 [debug] do_fold called with non-variant data: 26
11:56:06.323 [debug] Recursive field result for left: 59
11:56:06.323 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.323 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.323 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.323 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.323 [debug] Recursive field result for left: 0
11:56:06.323 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.323 [debug] Recursive field result for right: 0
11:56:06.323 [debug] do_fold called with non-variant data: 0
11:56:06.323 [debug] do_fold called with non-variant data: 0
11:56:06.323 [debug] Recursive field result for left: 9
11:56:06.323 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.323 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.323 [debug] Recursive field result for left: 0
11:56:06.323 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.323 [debug] Recursive field result for right: 0
11:56:06.323 [debug] do_fold called with non-variant data: 0
11:56:06.323 [debug] do_fold called with non-variant data: 0
11:56:06.323 [debug] Recursive field result for right: 9
11:56:06.323 [debug] do_fold called with non-variant data: 9
11:56:06.323 [debug] do_fold called with non-variant data: 9
11:56:06.323 [debug] Recursive field result for left: 26
11:56:06.323 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.323 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.323 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.323 [debug] Recursive field result for left: 0
11:56:06.323 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.323 [debug] Recursive field result for right: 0
11:56:06.323 [debug] do_fold called with non-variant data: 0
11:56:06.323 [debug] do_fold called with non-variant data: 0
11:56:06.323 [debug] Recursive field result for left: 9
11:56:06.323 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.323 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.323 [debug] Recursive field result for left: 0
11:56:06.323 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.323 [debug] Recursive field result for right: 0
11:56:06.323 [debug] do_fold called with non-variant data: 0
11:56:06.323 [debug] do_fold called with non-variant data: 0
11:56:06.323 [debug] Recursive field result for right: 9
11:56:06.323 [debug] do_fold called with non-variant data: 9
11:56:06.323 [debug] do_fold called with non-variant data: 9
11:56:06.323 [debug] Recursive field result for right: 26
11:56:06.323 [debug] do_fold called with non-variant data: 26
11:56:06.323 [debug] do_fold called with non-variant data: 26
11:56:06.323 [debug] Recursive field result for right: 59
11:56:06.323 [debug] do_fold called with non-variant data: 59
11:56:06.323 [debug] do_fold called with non-variant data: 59
11:56:06.323 [debug] Recursive field result for left: 124
11:56:06.323 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.323 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.323 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.323 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.323 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.323 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.323 [debug] Recursive field result for left: 0
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for right: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] Recursive field result for left: 9
11:56:06.324 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for left: 0
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for right: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] Recursive field result for right: 9
11:56:06.324 [debug] do_fold called with non-variant data: 9
11:56:06.324 [debug] do_fold called with non-variant data: 9
11:56:06.324 [debug] Recursive field result for left: 26
11:56:06.324 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.324 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for left: 0
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for right: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] Recursive field result for left: 9
11:56:06.324 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for left: 0
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for right: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] Recursive field result for right: 9
11:56:06.324 [debug] do_fold called with non-variant data: 9
11:56:06.324 [debug] do_fold called with non-variant data: 9
11:56:06.324 [debug] Recursive field result for right: 26
11:56:06.324 [debug] do_fold called with non-variant data: 26
11:56:06.324 [debug] do_fold called with non-variant data: 26
11:56:06.324 [debug] Recursive field result for left: 59
11:56:06.324 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.324 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.324 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for left: 0
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for right: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] Recursive field result for left: 9
11:56:06.324 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for left: 0
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for right: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] Recursive field result for right: 9
11:56:06.324 [debug] do_fold called with non-variant data: 9
11:56:06.324 [debug] do_fold called with non-variant data: 9
11:56:06.324 [debug] Recursive field result for left: 26
11:56:06.324 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.324 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for left: 0
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for right: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] Recursive field result for left: 9
11:56:06.324 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for left: 0
11:56:06.324 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.324 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.324 [debug] Recursive field result for right: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] do_fold called with non-variant data: 0
11:56:06.324 [debug] Recursive field result for right: 9
11:56:06.324 [debug] do_fold called with non-variant data: 9
11:56:06.324 [debug] do_fold called with non-variant data: 9
11:56:06.324 [debug] Recursive field result for right: 26
11:56:06.324 [debug] do_fold called with non-variant data: 26
11:56:06.324 [debug] do_fold called with non-variant data: 26
11:56:06.324 [debug] Recursive field result for right: 59
11:56:06.324 [debug] do_fold called with non-variant data: 59
11:56:06.324 [debug] do_fold called with non-variant data: 59
11:56:06.324 [debug] Recursive field result for right: 124
11:56:06.324 [debug] do_fold called with non-variant data: 124
11:56:06.324 [debug] do_fold called with non-variant data: 124
11:56:06.325 [debug] Recursive field result for right: 253
11:56:06.325 [debug] do_fold called with non-variant data: 253
11:56:06.325 [debug] do_fold called with non-variant data: 253
11:56:06.325 [debug] Recursive field result for left: 510
11:56:06.325 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.326 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.326 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.327 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.327 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.327 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.327 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.327 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.327 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.327 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.327 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.327 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.327 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.327 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.327 [debug] Recursive field result for left: 0
11:56:06.327 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.327 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.327 [debug] Recursive field result for right: 0
11:56:06.327 [debug] do_fold called with non-variant data: 0
11:56:06.327 [debug] do_fold called with non-variant data: 0
11:56:06.327 [debug] Recursive field result for left: 9
11:56:06.328 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.328 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.328 [debug] Recursive field result for left: 0
11:56:06.328 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.328 [debug] Recursive field result for right: 0
11:56:06.328 [debug] do_fold called with non-variant data: 0
11:56:06.328 [debug] do_fold called with non-variant data: 0
11:56:06.328 [debug] Recursive field result for right: 9
11:56:06.328 [debug] do_fold called with non-variant data: 9
11:56:06.328 [debug] do_fold called with non-variant data: 9
11:56:06.328 [debug] Recursive field result for left: 26
11:56:06.328 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.328 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.328 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.328 [debug] Recursive field result for left: 0
11:56:06.328 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.328 [debug] Recursive field result for right: 0
11:56:06.328 [debug] do_fold called with non-variant data: 0
11:56:06.328 [debug] do_fold called with non-variant data: 0
11:56:06.328 [debug] Recursive field result for left: 9
11:56:06.328 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.328 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.328 [debug] Recursive field result for left: 0
11:56:06.328 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.328 [debug] Recursive field result for right: 0
11:56:06.328 [debug] do_fold called with non-variant data: 0
11:56:06.328 [debug] do_fold called with non-variant data: 0
11:56:06.328 [debug] Recursive field result for right: 9
11:56:06.328 [debug] do_fold called with non-variant data: 9
11:56:06.328 [debug] do_fold called with non-variant data: 9
11:56:06.328 [debug] Recursive field result for right: 26
11:56:06.328 [debug] do_fold called with non-variant data: 26
11:56:06.328 [debug] do_fold called with non-variant data: 26
11:56:06.328 [debug] Recursive field result for left: 59
11:56:06.328 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.328 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.328 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.328 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.328 [debug] Recursive field result for left: 0
11:56:06.328 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.328 [debug] Recursive field result for right: 0
11:56:06.328 [debug] do_fold called with non-variant data: 0
11:56:06.328 [debug] do_fold called with non-variant data: 0
11:56:06.328 [debug] Recursive field result for left: 9
11:56:06.328 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.328 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.328 [debug] Recursive field result for left: 0
11:56:06.328 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.328 [debug] Recursive field result for right: 0
11:56:06.328 [debug] do_fold called with non-variant data: 0
11:56:06.328 [debug] do_fold called with non-variant data: 0
11:56:06.328 [debug] Recursive field result for right: 9
11:56:06.328 [debug] do_fold called with non-variant data: 9
11:56:06.328 [debug] do_fold called with non-variant data: 9
11:56:06.328 [debug] Recursive field result for left: 26
11:56:06.328 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.328 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.328 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.329 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.329 [debug] Recursive field result for left: 0
11:56:06.329 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.329 [debug] Recursive field result for right: 0
11:56:06.329 [debug] do_fold called with non-variant data: 0
11:56:06.329 [debug] do_fold called with non-variant data: 0
11:56:06.329 [debug] Recursive field result for left: 9
11:56:06.329 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.329 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.329 [debug] Recursive field result for left: 0
11:56:06.329 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.329 [debug] Recursive field result for right: 0
11:56:06.329 [debug] do_fold called with non-variant data: 0
11:56:06.329 [debug] do_fold called with non-variant data: 0
11:56:06.329 [debug] Recursive field result for right: 9
11:56:06.329 [debug] do_fold called with non-variant data: 9
11:56:06.329 [debug] do_fold called with non-variant data: 9
11:56:06.329 [debug] Recursive field result for right: 26
11:56:06.329 [debug] do_fold called with non-variant data: 26
11:56:06.329 [debug] do_fold called with non-variant data: 26
11:56:06.329 [debug] Recursive field result for right: 59
11:56:06.329 [debug] do_fold called with non-variant data: 59
11:56:06.329 [debug] do_fold called with non-variant data: 59
11:56:06.329 [debug] Recursive field result for left: 124
11:56:06.329 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.329 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.329 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.329 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.329 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.329 [debug] Recursive field result for left: 0
11:56:06.329 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.329 [debug] Recursive field result for right: 0
11:56:06.329 [debug] do_fold called with non-variant data: 0
11:56:06.329 [debug] do_fold called with non-variant data: 0
11:56:06.329 [debug] Recursive field result for left: 9
11:56:06.329 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.329 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.329 [debug] Recursive field result for left: 0
11:56:06.329 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.329 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.329 [debug] Recursive field result for right: 0
11:56:06.329 [debug] do_fold called with non-variant data: 0
11:56:06.329 [debug] do_fold called with non-variant data: 0
11:56:06.329 [debug] Recursive field result for right: 9
11:56:06.329 [debug] do_fold called with non-variant data: 9
11:56:06.329 [debug] do_fold called with non-variant data: 9
11:56:06.329 [debug] Recursive field result for left: 26
11:56:06.329 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.330 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.330 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.330 [debug] Recursive field result for left: 0
11:56:06.330 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.330 [debug] Recursive field result for right: 0
11:56:06.330 [debug] do_fold called with non-variant data: 0
11:56:06.330 [debug] do_fold called with non-variant data: 0
11:56:06.330 [debug] Recursive field result for left: 9
11:56:06.330 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.330 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.330 [debug] Recursive field result for left: 0
11:56:06.330 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.330 [debug] Recursive field result for right: 0
11:56:06.330 [debug] do_fold called with non-variant data: 0
11:56:06.330 [debug] do_fold called with non-variant data: 0
11:56:06.330 [debug] Recursive field result for right: 9
11:56:06.330 [debug] do_fold called with non-variant data: 9
11:56:06.330 [debug] do_fold called with non-variant data: 9
11:56:06.330 [debug] Recursive field result for right: 26
11:56:06.330 [debug] do_fold called with non-variant data: 26
11:56:06.330 [debug] do_fold called with non-variant data: 26
11:56:06.330 [debug] Recursive field result for left: 59
11:56:06.330 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.330 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.330 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.330 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.330 [debug] Recursive field result for left: 0
11:56:06.330 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.330 [debug] Recursive field result for right: 0
11:56:06.330 [debug] do_fold called with non-variant data: 0
11:56:06.330 [debug] do_fold called with non-variant data: 0
11:56:06.330 [debug] Recursive field result for left: 9
11:56:06.330 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.330 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.330 [debug] Recursive field result for left: 0
11:56:06.330 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.330 [debug] Recursive field result for right: 0
11:56:06.330 [debug] do_fold called with non-variant data: 0
11:56:06.330 [debug] do_fold called with non-variant data: 0
11:56:06.330 [debug] Recursive field result for right: 9
11:56:06.330 [debug] do_fold called with non-variant data: 9
11:56:06.330 [debug] do_fold called with non-variant data: 9
11:56:06.330 [debug] Recursive field result for left: 26
11:56:06.330 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.330 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.330 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.330 [debug] Recursive field result for left: 0
11:56:06.330 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.330 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.331 [debug] Recursive field result for right: 0
11:56:06.331 [debug] do_fold called with non-variant data: 0
11:56:06.331 [debug] do_fold called with non-variant data: 0
11:56:06.331 [debug] Recursive field result for left: 9
11:56:06.331 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.331 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.331 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.331 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.331 [debug] Recursive field result for left: 0
11:56:06.331 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.331 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.331 [debug] Recursive field result for right: 0
11:56:06.331 [debug] do_fold called with non-variant data: 0
11:56:06.331 [debug] do_fold called with non-variant data: 0
11:56:06.331 [debug] Recursive field result for right: 9
11:56:06.331 [debug] do_fold called with non-variant data: 9
11:56:06.331 [debug] do_fold called with non-variant data: 9
11:56:06.331 [debug] Recursive field result for right: 26
11:56:06.331 [debug] do_fold called with non-variant data: 26
11:56:06.331 [debug] do_fold called with non-variant data: 26
11:56:06.331 [debug] Recursive field result for right: 59
11:56:06.331 [debug] do_fold called with non-variant data: 59
11:56:06.331 [debug] do_fold called with non-variant data: 59
11:56:06.331 [debug] Recursive field result for right: 124
11:56:06.331 [debug] do_fold called with non-variant data: 124
11:56:06.331 [debug] do_fold called with non-variant data: 124
11:56:06.331 [debug] Recursive field result for left: 253
11:56:06.331 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.331 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.332 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.332 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.332 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.332 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.332 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.332 [debug] Recursive field result for left: 0
11:56:06.332 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.332 [debug] Recursive field result for right: 0
11:56:06.332 [debug] do_fold called with non-variant data: 0
11:56:06.332 [debug] do_fold called with non-variant data: 0
11:56:06.332 [debug] Recursive field result for left: 9
11:56:06.332 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.332 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.332 [debug] Recursive field result for left: 0
11:56:06.332 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.332 [debug] Recursive field result for right: 0
11:56:06.332 [debug] do_fold called with non-variant data: 0
11:56:06.332 [debug] do_fold called with non-variant data: 0
11:56:06.332 [debug] Recursive field result for right: 9
11:56:06.332 [debug] do_fold called with non-variant data: 9
11:56:06.332 [debug] do_fold called with non-variant data: 9
11:56:06.332 [debug] Recursive field result for left: 26
11:56:06.332 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.332 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.332 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.332 [debug] Recursive field result for left: 0
11:56:06.332 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.332 [debug] Recursive field result for right: 0
11:56:06.332 [debug] do_fold called with non-variant data: 0
11:56:06.332 [debug] do_fold called with non-variant data: 0
11:56:06.332 [debug] Recursive field result for left: 9
11:56:06.332 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.332 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.332 [debug] Recursive field result for left: 0
11:56:06.332 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.332 [debug] Recursive field result for right: 0
11:56:06.332 [debug] do_fold called with non-variant data: 0
11:56:06.332 [debug] do_fold called with non-variant data: 0
11:56:06.332 [debug] Recursive field result for right: 9
11:56:06.332 [debug] do_fold called with non-variant data: 9
11:56:06.332 [debug] do_fold called with non-variant data: 9
11:56:06.332 [debug] Recursive field result for right: 26
11:56:06.332 [debug] do_fold called with non-variant data: 26
11:56:06.332 [debug] do_fold called with non-variant data: 26
11:56:06.332 [debug] Recursive field result for left: 59
11:56:06.332 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.332 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.332 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.332 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.332 [debug] Recursive field result for left: 0
11:56:06.332 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.332 [debug] Recursive field result for right: 0
11:56:06.332 [debug] do_fold called with non-variant data: 0
11:56:06.332 [debug] do_fold called with non-variant data: 0
11:56:06.332 [debug] Recursive field result for left: 9
11:56:06.332 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.332 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.332 [debug] Recursive field result for left: 0
11:56:06.332 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.332 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.333 [debug] Recursive field result for right: 0
11:56:06.333 [debug] do_fold called with non-variant data: 0
11:56:06.333 [debug] do_fold called with non-variant data: 0
11:56:06.333 [debug] Recursive field result for right: 9
11:56:06.333 [debug] do_fold called with non-variant data: 9
11:56:06.333 [debug] do_fold called with non-variant data: 9
11:56:06.333 [debug] Recursive field result for left: 26
11:56:06.333 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.333 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.333 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.333 [debug] Recursive field result for left: 0
11:56:06.333 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.333 [debug] Recursive field result for right: 0
11:56:06.333 [debug] do_fold called with non-variant data: 0
11:56:06.333 [debug] do_fold called with non-variant data: 0
11:56:06.333 [debug] Recursive field result for left: 9
11:56:06.333 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.333 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.333 [debug] Recursive field result for left: 0
11:56:06.333 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.333 [debug] Recursive field result for right: 0
11:56:06.333 [debug] do_fold called with non-variant data: 0
11:56:06.333 [debug] do_fold called with non-variant data: 0
11:56:06.333 [debug] Recursive field result for right: 9
11:56:06.333 [debug] do_fold called with non-variant data: 9
11:56:06.333 [debug] do_fold called with non-variant data: 9
11:56:06.333 [debug] Recursive field result for right: 26
11:56:06.333 [debug] do_fold called with non-variant data: 26
11:56:06.333 [debug] do_fold called with non-variant data: 26
11:56:06.333 [debug] Recursive field result for right: 59
11:56:06.333 [debug] do_fold called with non-variant data: 59
11:56:06.333 [debug] do_fold called with non-variant data: 59
11:56:06.333 [debug] Recursive field result for left: 124
11:56:06.333 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.333 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.333 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.333 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.333 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.333 [debug] Recursive field result for left: 0
11:56:06.333 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.333 [debug] Recursive field result for right: 0
11:56:06.333 [debug] do_fold called with non-variant data: 0
11:56:06.333 [debug] do_fold called with non-variant data: 0
11:56:06.333 [debug] Recursive field result for left: 9
11:56:06.333 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.333 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.333 [debug] Recursive field result for left: 0
11:56:06.333 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.333 [debug] Recursive field result for right: 0
11:56:06.333 [debug] do_fold called with non-variant data: 0
11:56:06.333 [debug] do_fold called with non-variant data: 0
11:56:06.333 [debug] Recursive field result for right: 9
11:56:06.333 [debug] do_fold called with non-variant data: 9
11:56:06.333 [debug] do_fold called with non-variant data: 9
11:56:06.333 [debug] Recursive field result for left: 26
11:56:06.333 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.333 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.333 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.333 [debug] Recursive field result for left: 0
11:56:06.333 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.333 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.333 [debug] Recursive field result for right: 0
11:56:06.333 [debug] do_fold called with non-variant data: 0
11:56:06.333 [debug] do_fold called with non-variant data: 0
11:56:06.334 [debug] Recursive field result for left: 9
11:56:06.334 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.334 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.334 [debug] Recursive field result for left: 0
11:56:06.334 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.334 [debug] Recursive field result for right: 0
11:56:06.334 [debug] do_fold called with non-variant data: 0
11:56:06.334 [debug] do_fold called with non-variant data: 0
11:56:06.334 [debug] Recursive field result for right: 9
11:56:06.334 [debug] do_fold called with non-variant data: 9
11:56:06.334 [debug] do_fold called with non-variant data: 9
11:56:06.334 [debug] Recursive field result for right: 26
11:56:06.334 [debug] do_fold called with non-variant data: 26
11:56:06.334 [debug] do_fold called with non-variant data: 26
11:56:06.334 [debug] Recursive field result for left: 59
11:56:06.334 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.334 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.334 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.334 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.334 [debug] Recursive field result for left: 0
11:56:06.334 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.334 [debug] Recursive field result for right: 0
11:56:06.334 [debug] do_fold called with non-variant data: 0
11:56:06.334 [debug] do_fold called with non-variant data: 0
11:56:06.334 [debug] Recursive field result for left: 9
11:56:06.334 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.334 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.334 [debug] Recursive field result for left: 0
11:56:06.334 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.334 [debug] Recursive field result for right: 0
11:56:06.334 [debug] do_fold called with non-variant data: 0
11:56:06.334 [debug] do_fold called with non-variant data: 0
11:56:06.334 [debug] Recursive field result for right: 9
11:56:06.334 [debug] do_fold called with non-variant data: 9
11:56:06.334 [debug] do_fold called with non-variant data: 9
11:56:06.334 [debug] Recursive field result for left: 26
11:56:06.334 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.334 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.334 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.334 [debug] Recursive field result for left: 0
11:56:06.334 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.334 [debug] Recursive field result for right: 0
11:56:06.334 [debug] do_fold called with non-variant data: 0
11:56:06.334 [debug] do_fold called with non-variant data: 0
11:56:06.334 [debug] Recursive field result for left: 9
11:56:06.334 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.334 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.334 [debug] Recursive field result for left: 0
11:56:06.334 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.334 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.334 [debug] Recursive field result for right: 0
11:56:06.334 [debug] do_fold called with non-variant data: 0
11:56:06.334 [debug] do_fold called with non-variant data: 0
11:56:06.334 [debug] Recursive field result for right: 9
11:56:06.334 [debug] do_fold called with non-variant data: 9
11:56:06.334 [debug] do_fold called with non-variant data: 9
11:56:06.334 [debug] Recursive field result for right: 26
11:56:06.334 [debug] do_fold called with non-variant data: 26
11:56:06.334 [debug] do_fold called with non-variant data: 26
11:56:06.335 [debug] Recursive field result for right: 59
11:56:06.335 [debug] do_fold called with non-variant data: 59
11:56:06.335 [debug] do_fold called with non-variant data: 59
11:56:06.335 [debug] Recursive field result for right: 124
11:56:06.335 [debug] do_fold called with non-variant data: 124
11:56:06.335 [debug] do_fold called with non-variant data: 124
11:56:06.335 [debug] Recursive field result for right: 253
11:56:06.335 [debug] do_fold called with non-variant data: 253
11:56:06.335 [debug] do_fold called with non-variant data: 253
11:56:06.335 [debug] Recursive field result for right: 510
11:56:06.335 [debug] do_fold called with non-variant data: 510
11:56:06.335 [debug] do_fold called with non-variant data: 510
11:56:06.335 [debug] Recursive field result for left: 1023
11:56:06.336 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, variant_type: :node, state: nil
11:56:06.337 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.337 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.338 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.338 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.338 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.338 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.338 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.338 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.338 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.338 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.338 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.338 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.338 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.338 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.338 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.338 [debug] Recursive field result for left: 0
11:56:06.338 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.338 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.338 [debug] Recursive field result for right: 0
11:56:06.338 [debug] do_fold called with non-variant data: 0
11:56:06.338 [debug] do_fold called with non-variant data: 0
11:56:06.338 [debug] Recursive field result for left: 9
11:56:06.338 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.339 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.339 [debug] Recursive field result for left: 0
11:56:06.339 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.339 [debug] Recursive field result for right: 0
11:56:06.339 [debug] do_fold called with non-variant data: 0
11:56:06.339 [debug] do_fold called with non-variant data: 0
11:56:06.339 [debug] Recursive field result for right: 9
11:56:06.339 [debug] do_fold called with non-variant data: 9
11:56:06.339 [debug] do_fold called with non-variant data: 9
11:56:06.339 [debug] Recursive field result for left: 26
11:56:06.339 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.339 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.339 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.339 [debug] Recursive field result for left: 0
11:56:06.339 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.339 [debug] Recursive field result for right: 0
11:56:06.339 [debug] do_fold called with non-variant data: 0
11:56:06.339 [debug] do_fold called with non-variant data: 0
11:56:06.339 [debug] Recursive field result for left: 9
11:56:06.339 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.339 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.339 [debug] Recursive field result for left: 0
11:56:06.339 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.339 [debug] Recursive field result for right: 0
11:56:06.339 [debug] do_fold called with non-variant data: 0
11:56:06.339 [debug] do_fold called with non-variant data: 0
11:56:06.339 [debug] Recursive field result for right: 9
11:56:06.339 [debug] do_fold called with non-variant data: 9
11:56:06.339 [debug] do_fold called with non-variant data: 9
11:56:06.339 [debug] Recursive field result for right: 26
11:56:06.339 [debug] do_fold called with non-variant data: 26
11:56:06.339 [debug] do_fold called with non-variant data: 26
11:56:06.339 [debug] Recursive field result for left: 59
11:56:06.339 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.339 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.339 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.339 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.339 [debug] Recursive field result for left: 0
11:56:06.339 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.339 [debug] Recursive field result for right: 0
11:56:06.339 [debug] do_fold called with non-variant data: 0
11:56:06.339 [debug] do_fold called with non-variant data: 0
11:56:06.339 [debug] Recursive field result for left: 9
11:56:06.339 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.339 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.339 [debug] Recursive field result for left: 0
11:56:06.339 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.339 [debug] Recursive field result for right: 0
11:56:06.339 [debug] do_fold called with non-variant data: 0
11:56:06.339 [debug] do_fold called with non-variant data: 0
11:56:06.339 [debug] Recursive field result for right: 9
11:56:06.339 [debug] do_fold called with non-variant data: 9
11:56:06.339 [debug] do_fold called with non-variant data: 9
11:56:06.339 [debug] Recursive field result for left: 26
11:56:06.339 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.339 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.339 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.339 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.340 [debug] Recursive field result for left: 0
11:56:06.340 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.340 [debug] Recursive field result for right: 0
11:56:06.340 [debug] do_fold called with non-variant data: 0
11:56:06.340 [debug] do_fold called with non-variant data: 0
11:56:06.340 [debug] Recursive field result for left: 9
11:56:06.340 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.340 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.340 [debug] Recursive field result for left: 0
11:56:06.340 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.340 [debug] Recursive field result for right: 0
11:56:06.340 [debug] do_fold called with non-variant data: 0
11:56:06.340 [debug] do_fold called with non-variant data: 0
11:56:06.340 [debug] Recursive field result for right: 9
11:56:06.340 [debug] do_fold called with non-variant data: 9
11:56:06.340 [debug] do_fold called with non-variant data: 9
11:56:06.340 [debug] Recursive field result for right: 26
11:56:06.340 [debug] do_fold called with non-variant data: 26
11:56:06.340 [debug] do_fold called with non-variant data: 26
11:56:06.340 [debug] Recursive field result for right: 59
11:56:06.340 [debug] do_fold called with non-variant data: 59
11:56:06.340 [debug] do_fold called with non-variant data: 59
11:56:06.340 [debug] Recursive field result for left: 124
11:56:06.340 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.340 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.340 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.340 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.340 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.340 [debug] Recursive field result for left: 0
11:56:06.340 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.340 [debug] Recursive field result for right: 0
11:56:06.340 [debug] do_fold called with non-variant data: 0
11:56:06.340 [debug] do_fold called with non-variant data: 0
11:56:06.340 [debug] Recursive field result for left: 9
11:56:06.340 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.340 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.340 [debug] Recursive field result for left: 0
11:56:06.340 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.340 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.340 [debug] Recursive field result for right: 0
11:56:06.340 [debug] do_fold called with non-variant data: 0
11:56:06.340 [debug] do_fold called with non-variant data: 0
11:56:06.340 [debug] Recursive field result for right: 9
11:56:06.340 [debug] do_fold called with non-variant data: 9
11:56:06.340 [debug] do_fold called with non-variant data: 9
11:56:06.340 [debug] Recursive field result for left: 26
11:56:06.341 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.341 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.341 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.341 [debug] Recursive field result for left: 0
11:56:06.341 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.341 [debug] Recursive field result for right: 0
11:56:06.341 [debug] do_fold called with non-variant data: 0
11:56:06.341 [debug] do_fold called with non-variant data: 0
11:56:06.341 [debug] Recursive field result for left: 9
11:56:06.341 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.341 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.341 [debug] Recursive field result for left: 0
11:56:06.341 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.341 [debug] Recursive field result for right: 0
11:56:06.341 [debug] do_fold called with non-variant data: 0
11:56:06.341 [debug] do_fold called with non-variant data: 0
11:56:06.341 [debug] Recursive field result for right: 9
11:56:06.341 [debug] do_fold called with non-variant data: 9
11:56:06.341 [debug] do_fold called with non-variant data: 9
11:56:06.341 [debug] Recursive field result for right: 26
11:56:06.341 [debug] do_fold called with non-variant data: 26
11:56:06.341 [debug] do_fold called with non-variant data: 26
11:56:06.341 [debug] Recursive field result for left: 59
11:56:06.341 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.341 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.341 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.341 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.341 [debug] Recursive field result for left: 0
11:56:06.341 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.341 [debug] Recursive field result for right: 0
11:56:06.341 [debug] do_fold called with non-variant data: 0
11:56:06.341 [debug] do_fold called with non-variant data: 0
11:56:06.341 [debug] Recursive field result for left: 9
11:56:06.341 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.341 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.341 [debug] Recursive field result for left: 0
11:56:06.341 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.341 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.341 [debug] Recursive field result for right: 0
11:56:06.341 [debug] do_fold called with non-variant data: 0
11:56:06.341 [debug] do_fold called with non-variant data: 0
11:56:06.341 [debug] Recursive field result for right: 9
11:56:06.341 [debug] do_fold called with non-variant data: 9
11:56:06.341 [debug] do_fold called with non-variant data: 9
11:56:06.341 [debug] Recursive field result for left: 26
11:56:06.342 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.342 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.342 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.342 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.342 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.342 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.342 [debug] Recursive field result for left: 0
11:56:06.342 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.342 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.342 [debug] Recursive field result for right: 0
11:56:06.342 [debug] do_fold called with non-variant data: 0
11:56:06.342 [debug] do_fold called with non-variant data: 0
11:56:06.342 [debug] Recursive field result for left: 9
11:56:06.342 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.342 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.342 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.342 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.342 [debug] Recursive field result for left: 0
11:56:06.342 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.342 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.342 [debug] Recursive field result for right: 0
11:56:06.342 [debug] do_fold called with non-variant data: 0
11:56:06.342 [debug] do_fold called with non-variant data: 0
11:56:06.342 [debug] Recursive field result for right: 9
11:56:06.342 [debug] do_fold called with non-variant data: 9
11:56:06.342 [debug] do_fold called with non-variant data: 9
11:56:06.342 [debug] Recursive field result for right: 26
11:56:06.342 [debug] do_fold called with non-variant data: 26
11:56:06.342 [debug] do_fold called with non-variant data: 26
11:56:06.342 [debug] Recursive field result for right: 59
11:56:06.342 [debug] do_fold called with non-variant data: 59
11:56:06.342 [debug] do_fold called with non-variant data: 59
11:56:06.342 [debug] Recursive field result for right: 124
11:56:06.342 [debug] do_fold called with non-variant data: 124
11:56:06.342 [debug] do_fold called with non-variant data: 124
11:56:06.342 [debug] Recursive field result for left: 253
11:56:06.342 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.342 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.342 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.343 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.343 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.343 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.343 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.343 [debug] Recursive field result for left: 0
11:56:06.343 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.343 [debug] Recursive field result for right: 0
11:56:06.343 [debug] do_fold called with non-variant data: 0
11:56:06.343 [debug] do_fold called with non-variant data: 0
11:56:06.343 [debug] Recursive field result for left: 9
11:56:06.343 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.343 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.343 [debug] Recursive field result for left: 0
11:56:06.343 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.343 [debug] Recursive field result for right: 0
11:56:06.343 [debug] do_fold called with non-variant data: 0
11:56:06.343 [debug] do_fold called with non-variant data: 0
11:56:06.343 [debug] Recursive field result for right: 9
11:56:06.343 [debug] do_fold called with non-variant data: 9
11:56:06.343 [debug] do_fold called with non-variant data: 9
11:56:06.343 [debug] Recursive field result for left: 26
11:56:06.343 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.343 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.343 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.343 [debug] Recursive field result for left: 0
11:56:06.343 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.343 [debug] Recursive field result for right: 0
11:56:06.343 [debug] do_fold called with non-variant data: 0
11:56:06.343 [debug] do_fold called with non-variant data: 0
11:56:06.343 [debug] Recursive field result for left: 9
11:56:06.343 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.343 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.343 [debug] Recursive field result for left: 0
11:56:06.343 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.343 [debug] Recursive field result for right: 0
11:56:06.343 [debug] do_fold called with non-variant data: 0
11:56:06.343 [debug] do_fold called with non-variant data: 0
11:56:06.343 [debug] Recursive field result for right: 9
11:56:06.343 [debug] do_fold called with non-variant data: 9
11:56:06.343 [debug] do_fold called with non-variant data: 9
11:56:06.343 [debug] Recursive field result for right: 26
11:56:06.343 [debug] do_fold called with non-variant data: 26
11:56:06.343 [debug] do_fold called with non-variant data: 26
11:56:06.343 [debug] Recursive field result for left: 59
11:56:06.343 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.343 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.343 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.343 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.343 [debug] Recursive field result for left: 0
11:56:06.343 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.343 [debug] Recursive field result for right: 0
11:56:06.343 [debug] do_fold called with non-variant data: 0
11:56:06.343 [debug] do_fold called with non-variant data: 0
11:56:06.343 [debug] Recursive field result for left: 9
11:56:06.343 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.343 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.343 [debug] Recursive field result for left: 0
11:56:06.343 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.343 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.343 [debug] Recursive field result for right: 0
11:56:06.343 [debug] do_fold called with non-variant data: 0
11:56:06.343 [debug] do_fold called with non-variant data: 0
11:56:06.343 [debug] Recursive field result for right: 9
11:56:06.343 [debug] do_fold called with non-variant data: 9
11:56:06.343 [debug] do_fold called with non-variant data: 9
11:56:06.343 [debug] Recursive field result for left: 26
11:56:06.343 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.344 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.344 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.344 [debug] Recursive field result for left: 0
11:56:06.344 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.344 [debug] Recursive field result for right: 0
11:56:06.344 [debug] do_fold called with non-variant data: 0
11:56:06.344 [debug] do_fold called with non-variant data: 0
11:56:06.344 [debug] Recursive field result for left: 9
11:56:06.344 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.344 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.344 [debug] Recursive field result for left: 0
11:56:06.344 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.344 [debug] Recursive field result for right: 0
11:56:06.344 [debug] do_fold called with non-variant data: 0
11:56:06.344 [debug] do_fold called with non-variant data: 0
11:56:06.344 [debug] Recursive field result for right: 9
11:56:06.344 [debug] do_fold called with non-variant data: 9
11:56:06.344 [debug] do_fold called with non-variant data: 9
11:56:06.344 [debug] Recursive field result for right: 26
11:56:06.344 [debug] do_fold called with non-variant data: 26
11:56:06.344 [debug] do_fold called with non-variant data: 26
11:56:06.344 [debug] Recursive field result for right: 59
11:56:06.344 [debug] do_fold called with non-variant data: 59
11:56:06.344 [debug] do_fold called with non-variant data: 59
11:56:06.344 [debug] Recursive field result for left: 124
11:56:06.344 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.344 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.344 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.344 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.344 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.344 [debug] Recursive field result for left: 0
11:56:06.344 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.344 [debug] Recursive field result for right: 0
11:56:06.344 [debug] do_fold called with non-variant data: 0
11:56:06.344 [debug] do_fold called with non-variant data: 0
11:56:06.344 [debug] Recursive field result for left: 9
11:56:06.344 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.344 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.344 [debug] Recursive field result for left: 0
11:56:06.344 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.344 [debug] Recursive field result for right: 0
11:56:06.344 [debug] do_fold called with non-variant data: 0
11:56:06.344 [debug] do_fold called with non-variant data: 0
11:56:06.344 [debug] Recursive field result for right: 9
11:56:06.344 [debug] do_fold called with non-variant data: 9
11:56:06.344 [debug] do_fold called with non-variant data: 9
11:56:06.344 [debug] Recursive field result for left: 26
11:56:06.344 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.344 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.344 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.344 [debug] Recursive field result for left: 0
11:56:06.344 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.344 [debug] Recursive field result for right: 0
11:56:06.344 [debug] do_fold called with non-variant data: 0
11:56:06.344 [debug] do_fold called with non-variant data: 0
11:56:06.344 [debug] Recursive field result for left: 9
11:56:06.344 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.344 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.344 [debug] Recursive field result for left: 0
11:56:06.344 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.344 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.344 [debug] Recursive field result for right: 0
11:56:06.344 [debug] do_fold called with non-variant data: 0
11:56:06.344 [debug] do_fold called with non-variant data: 0
11:56:06.344 [debug] Recursive field result for right: 9
11:56:06.344 [debug] do_fold called with non-variant data: 9
11:56:06.344 [debug] do_fold called with non-variant data: 9
11:56:06.344 [debug] Recursive field result for right: 26
11:56:06.344 [debug] do_fold called with non-variant data: 26
11:56:06.344 [debug] do_fold called with non-variant data: 26
11:56:06.344 [debug] Recursive field result for left: 59
11:56:06.345 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.345 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.345 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.345 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.345 [debug] Recursive field result for left: 0
11:56:06.345 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.345 [debug] Recursive field result for right: 0
11:56:06.345 [debug] do_fold called with non-variant data: 0
11:56:06.345 [debug] do_fold called with non-variant data: 0
11:56:06.345 [debug] Recursive field result for left: 9
11:56:06.345 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.345 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.345 [debug] Recursive field result for left: 0
11:56:06.345 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.345 [debug] Recursive field result for right: 0
11:56:06.345 [debug] do_fold called with non-variant data: 0
11:56:06.345 [debug] do_fold called with non-variant data: 0
11:56:06.345 [debug] Recursive field result for right: 9
11:56:06.345 [debug] do_fold called with non-variant data: 9
11:56:06.345 [debug] do_fold called with non-variant data: 9
11:56:06.345 [debug] Recursive field result for left: 26
11:56:06.345 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.345 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.345 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.345 [debug] Recursive field result for left: 0
11:56:06.345 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.345 [debug] Recursive field result for right: 0
11:56:06.345 [debug] do_fold called with non-variant data: 0
11:56:06.345 [debug] do_fold called with non-variant data: 0
11:56:06.345 [debug] Recursive field result for left: 9
11:56:06.345 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.345 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.345 [debug] Recursive field result for left: 0
11:56:06.345 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.345 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.345 [debug] Recursive field result for right: 0
11:56:06.345 [debug] do_fold called with non-variant data: 0
11:56:06.345 [debug] do_fold called with non-variant data: 0
11:56:06.345 [debug] Recursive field result for right: 9
11:56:06.345 [debug] do_fold called with non-variant data: 9
11:56:06.345 [debug] do_fold called with non-variant data: 9
11:56:06.345 [debug] Recursive field result for right: 26
11:56:06.345 [debug] do_fold called with non-variant data: 26
11:56:06.345 [debug] do_fold called with non-variant data: 26
11:56:06.345 [debug] Recursive field result for right: 59
11:56:06.345 [debug] do_fold called with non-variant data: 59
11:56:06.345 [debug] do_fold called with non-variant data: 59
11:56:06.345 [debug] Recursive field result for right: 124
11:56:06.345 [debug] do_fold called with non-variant data: 124
11:56:06.345 [debug] do_fold called with non-variant data: 124
11:56:06.345 [debug] Recursive field result for right: 253
11:56:06.345 [debug] do_fold called with non-variant data: 253
11:56:06.345 [debug] do_fold called with non-variant data: 253
11:56:06.345 [debug] Recursive field result for left: 510
11:56:06.345 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.346 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.346 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.346 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.346 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.346 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.346 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.346 [debug] Recursive field result for left: 0
11:56:06.346 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.346 [debug] Recursive field result for right: 0
11:56:06.346 [debug] do_fold called with non-variant data: 0
11:56:06.346 [debug] do_fold called with non-variant data: 0
11:56:06.346 [debug] Recursive field result for left: 9
11:56:06.346 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.346 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.346 [debug] Recursive field result for left: 0
11:56:06.346 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.346 [debug] Recursive field result for right: 0
11:56:06.346 [debug] do_fold called with non-variant data: 0
11:56:06.346 [debug] do_fold called with non-variant data: 0
11:56:06.346 [debug] Recursive field result for right: 9
11:56:06.346 [debug] do_fold called with non-variant data: 9
11:56:06.346 [debug] do_fold called with non-variant data: 9
11:56:06.346 [debug] Recursive field result for left: 26
11:56:06.346 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.346 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.346 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.346 [debug] Recursive field result for left: 0
11:56:06.346 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.346 [debug] Recursive field result for right: 0
11:56:06.346 [debug] do_fold called with non-variant data: 0
11:56:06.346 [debug] do_fold called with non-variant data: 0
11:56:06.346 [debug] Recursive field result for left: 9
11:56:06.346 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.346 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.346 [debug] Recursive field result for left: 0
11:56:06.346 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.346 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.346 [debug] Recursive field result for right: 0
11:56:06.346 [debug] do_fold called with non-variant data: 0
11:56:06.346 [debug] do_fold called with non-variant data: 0
11:56:06.346 [debug] Recursive field result for right: 9
11:56:06.346 [debug] do_fold called with non-variant data: 9
11:56:06.346 [debug] do_fold called with non-variant data: 9
11:56:06.346 [debug] Recursive field result for right: 26
11:56:06.346 [debug] do_fold called with non-variant data: 26
11:56:06.346 [debug] do_fold called with non-variant data: 26
11:56:06.346 [debug] Recursive field result for left: 59
11:56:06.346 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.347 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.347 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.347 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.347 [debug] Recursive field result for left: 0
11:56:06.347 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.347 [debug] Recursive field result for right: 0
11:56:06.347 [debug] do_fold called with non-variant data: 0
11:56:06.347 [debug] do_fold called with non-variant data: 0
11:56:06.347 [debug] Recursive field result for left: 9
11:56:06.347 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.347 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.347 [debug] Recursive field result for left: 0
11:56:06.347 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.347 [debug] Recursive field result for right: 0
11:56:06.347 [debug] do_fold called with non-variant data: 0
11:56:06.347 [debug] do_fold called with non-variant data: 0
11:56:06.347 [debug] Recursive field result for right: 9
11:56:06.347 [debug] do_fold called with non-variant data: 9
11:56:06.347 [debug] do_fold called with non-variant data: 9
11:56:06.347 [debug] Recursive field result for left: 26
11:56:06.347 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.347 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.347 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.347 [debug] Recursive field result for left: 0
11:56:06.347 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.347 [debug] Recursive field result for right: 0
11:56:06.347 [debug] do_fold called with non-variant data: 0
11:56:06.347 [debug] do_fold called with non-variant data: 0
11:56:06.347 [debug] Recursive field result for left: 9
11:56:06.347 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.347 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.347 [debug] Recursive field result for left: 0
11:56:06.347 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.347 [debug] Recursive field result for right: 0
11:56:06.347 [debug] do_fold called with non-variant data: 0
11:56:06.347 [debug] do_fold called with non-variant data: 0
11:56:06.347 [debug] Recursive field result for right: 9
11:56:06.347 [debug] do_fold called with non-variant data: 9
11:56:06.347 [debug] do_fold called with non-variant data: 9
11:56:06.347 [debug] Recursive field result for right: 26
11:56:06.347 [debug] do_fold called with non-variant data: 26
11:56:06.347 [debug] do_fold called with non-variant data: 26
11:56:06.347 [debug] Recursive field result for right: 59
11:56:06.347 [debug] do_fold called with non-variant data: 59
11:56:06.347 [debug] do_fold called with non-variant data: 59
11:56:06.347 [debug] Recursive field result for left: 124
11:56:06.347 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.347 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.347 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.347 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.347 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.347 [debug] Recursive field result for left: 0
11:56:06.347 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.347 [debug] Recursive field result for right: 0
11:56:06.347 [debug] do_fold called with non-variant data: 0
11:56:06.347 [debug] do_fold called with non-variant data: 0
11:56:06.347 [debug] Recursive field result for left: 9
11:56:06.347 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.347 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.347 [debug] Recursive field result for left: 0
11:56:06.347 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.347 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.348 [debug] Recursive field result for right: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] Recursive field result for right: 9
11:56:06.348 [debug] do_fold called with non-variant data: 9
11:56:06.348 [debug] do_fold called with non-variant data: 9
11:56:06.348 [debug] Recursive field result for left: 26
11:56:06.348 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.348 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.348 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.348 [debug] Recursive field result for left: 0
11:56:06.348 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.348 [debug] Recursive field result for right: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] Recursive field result for left: 9
11:56:06.348 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.348 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.348 [debug] Recursive field result for left: 0
11:56:06.348 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.348 [debug] Recursive field result for right: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] Recursive field result for right: 9
11:56:06.348 [debug] do_fold called with non-variant data: 9
11:56:06.348 [debug] do_fold called with non-variant data: 9
11:56:06.348 [debug] Recursive field result for right: 26
11:56:06.348 [debug] do_fold called with non-variant data: 26
11:56:06.348 [debug] do_fold called with non-variant data: 26
11:56:06.348 [debug] Recursive field result for left: 59
11:56:06.348 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.348 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.348 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.348 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.348 [debug] Recursive field result for left: 0
11:56:06.348 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.348 [debug] Recursive field result for right: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] Recursive field result for left: 9
11:56:06.348 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.348 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.348 [debug] Recursive field result for left: 0
11:56:06.348 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.348 [debug] Recursive field result for right: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] Recursive field result for right: 9
11:56:06.348 [debug] do_fold called with non-variant data: 9
11:56:06.348 [debug] do_fold called with non-variant data: 9
11:56:06.348 [debug] Recursive field result for left: 26
11:56:06.348 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.348 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.348 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.348 [debug] Recursive field result for left: 0
11:56:06.348 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.348 [debug] Recursive field result for right: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] Recursive field result for left: 9
11:56:06.348 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.348 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.348 [debug] Recursive field result for left: 0
11:56:06.348 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.348 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.348 [debug] Recursive field result for right: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] do_fold called with non-variant data: 0
11:56:06.348 [debug] Recursive field result for right: 9
11:56:06.348 [debug] do_fold called with non-variant data: 9
11:56:06.348 [debug] do_fold called with non-variant data: 9
11:56:06.348 [debug] Recursive field result for right: 26
11:56:06.348 [debug] do_fold called with non-variant data: 26
11:56:06.348 [debug] do_fold called with non-variant data: 26
11:56:06.348 [debug] Recursive field result for right: 59
11:56:06.348 [debug] do_fold called with non-variant data: 59
11:56:06.348 [debug] do_fold called with non-variant data: 59
11:56:06.348 [debug] Recursive field result for right: 124
11:56:06.348 [debug] do_fold called with non-variant data: 124
11:56:06.348 [debug] do_fold called with non-variant data: 124
11:56:06.348 [debug] Recursive field result for left: 253
11:56:06.348 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.349 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.349 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.349 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.349 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.349 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.349 [debug] Recursive field result for left: 0
11:56:06.349 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.349 [debug] Recursive field result for right: 0
11:56:06.349 [debug] do_fold called with non-variant data: 0
11:56:06.349 [debug] do_fold called with non-variant data: 0
11:56:06.349 [debug] Recursive field result for left: 9
11:56:06.349 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.349 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.349 [debug] Recursive field result for left: 0
11:56:06.349 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.349 [debug] Recursive field result for right: 0
11:56:06.349 [debug] do_fold called with non-variant data: 0
11:56:06.349 [debug] do_fold called with non-variant data: 0
11:56:06.349 [debug] Recursive field result for right: 9
11:56:06.349 [debug] do_fold called with non-variant data: 9
11:56:06.349 [debug] do_fold called with non-variant data: 9
11:56:06.349 [debug] Recursive field result for left: 26
11:56:06.349 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.349 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.349 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.349 [debug] Recursive field result for left: 0
11:56:06.349 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.349 [debug] Recursive field result for right: 0
11:56:06.349 [debug] do_fold called with non-variant data: 0
11:56:06.349 [debug] do_fold called with non-variant data: 0
11:56:06.349 [debug] Recursive field result for left: 9
11:56:06.349 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.349 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.349 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.349 [debug] Recursive field result for left: 0
11:56:06.350 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.350 [debug] Recursive field result for right: 0
11:56:06.350 [debug] do_fold called with non-variant data: 0
11:56:06.350 [debug] do_fold called with non-variant data: 0
11:56:06.350 [debug] Recursive field result for right: 9
11:56:06.350 [debug] do_fold called with non-variant data: 9
11:56:06.350 [debug] do_fold called with non-variant data: 9
11:56:06.350 [debug] Recursive field result for right: 26
11:56:06.350 [debug] do_fold called with non-variant data: 26
11:56:06.350 [debug] do_fold called with non-variant data: 26
11:56:06.350 [debug] Recursive field result for left: 59
11:56:06.350 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.350 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.350 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.350 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.350 [debug] Recursive field result for left: 0
11:56:06.350 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.350 [debug] Recursive field result for right: 0
11:56:06.350 [debug] do_fold called with non-variant data: 0
11:56:06.350 [debug] do_fold called with non-variant data: 0
11:56:06.350 [debug] Recursive field result for left: 9
11:56:06.350 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.350 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.350 [debug] Recursive field result for left: 0
11:56:06.350 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.350 [debug] Recursive field result for right: 0
11:56:06.350 [debug] do_fold called with non-variant data: 0
11:56:06.350 [debug] do_fold called with non-variant data: 0
11:56:06.350 [debug] Recursive field result for right: 9
11:56:06.350 [debug] do_fold called with non-variant data: 9
11:56:06.350 [debug] do_fold called with non-variant data: 9
11:56:06.350 [debug] Recursive field result for left: 26
11:56:06.350 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.350 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.350 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.350 [debug] Recursive field result for left: 0
11:56:06.350 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.350 [debug] Recursive field result for right: 0
11:56:06.350 [debug] do_fold called with non-variant data: 0
11:56:06.350 [debug] do_fold called with non-variant data: 0
11:56:06.350 [debug] Recursive field result for left: 9
11:56:06.350 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.350 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.350 [debug] Recursive field result for left: 0
11:56:06.350 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.350 [debug] Recursive field result for right: 0
11:56:06.350 [debug] do_fold called with non-variant data: 0
11:56:06.350 [debug] do_fold called with non-variant data: 0
11:56:06.350 [debug] Recursive field result for right: 9
11:56:06.350 [debug] do_fold called with non-variant data: 9
11:56:06.350 [debug] do_fold called with non-variant data: 9
11:56:06.350 [debug] Recursive field result for right: 26
11:56:06.350 [debug] do_fold called with non-variant data: 26
11:56:06.350 [debug] do_fold called with non-variant data: 26
11:56:06.350 [debug] Recursive field result for right: 59
11:56:06.350 [debug] do_fold called with non-variant data: 59
11:56:06.350 [debug] do_fold called with non-variant data: 59
11:56:06.350 [debug] Recursive field result for left: 124
11:56:06.350 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.350 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.350 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.350 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.350 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.350 [debug] Recursive field result for left: 0
11:56:06.350 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.350 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.350 [debug] Recursive field result for right: 0
11:56:06.350 [debug] do_fold called with non-variant data: 0
11:56:06.350 [debug] do_fold called with non-variant data: 0
11:56:06.350 [debug] Recursive field result for left: 9
11:56:06.351 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for left: 0
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for right: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] Recursive field result for right: 9
11:56:06.351 [debug] do_fold called with non-variant data: 9
11:56:06.351 [debug] do_fold called with non-variant data: 9
11:56:06.351 [debug] Recursive field result for left: 26
11:56:06.351 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.351 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for left: 0
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for right: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] Recursive field result for left: 9
11:56:06.351 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for left: 0
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for right: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] Recursive field result for right: 9
11:56:06.351 [debug] do_fold called with non-variant data: 9
11:56:06.351 [debug] do_fold called with non-variant data: 9
11:56:06.351 [debug] Recursive field result for right: 26
11:56:06.351 [debug] do_fold called with non-variant data: 26
11:56:06.351 [debug] do_fold called with non-variant data: 26
11:56:06.351 [debug] Recursive field result for left: 59
11:56:06.351 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.351 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.351 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for left: 0
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for right: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] Recursive field result for left: 9
11:56:06.351 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for left: 0
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for right: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] Recursive field result for right: 9
11:56:06.351 [debug] do_fold called with non-variant data: 9
11:56:06.351 [debug] do_fold called with non-variant data: 9
11:56:06.351 [debug] Recursive field result for left: 26
11:56:06.351 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.351 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for left: 0
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for right: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] Recursive field result for left: 9
11:56:06.351 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for left: 0
11:56:06.351 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.351 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.351 [debug] Recursive field result for right: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] do_fold called with non-variant data: 0
11:56:06.351 [debug] Recursive field result for right: 9
11:56:06.351 [debug] do_fold called with non-variant data: 9
11:56:06.351 [debug] do_fold called with non-variant data: 9
11:56:06.351 [debug] Recursive field result for right: 26
11:56:06.351 [debug] do_fold called with non-variant data: 26
11:56:06.351 [debug] do_fold called with non-variant data: 26
11:56:06.351 [debug] Recursive field result for right: 59
11:56:06.351 [debug] do_fold called with non-variant data: 59
11:56:06.351 [debug] do_fold called with non-variant data: 59
11:56:06.351 [debug] Recursive field result for right: 124
11:56:06.351 [debug] do_fold called with non-variant data: 124
11:56:06.351 [debug] do_fold called with non-variant data: 124
11:56:06.351 [debug] Recursive field result for right: 253
11:56:06.351 [debug] do_fold called with non-variant data: 253
11:56:06.351 [debug] do_fold called with non-variant data: 253
11:56:06.351 [debug] Recursive field result for right: 510
11:56:06.351 [debug] do_fold called with non-variant data: 510
11:56:06.351 [debug] do_fold called with non-variant data: 510
11:56:06.351 [debug] Recursive field result for right: 1023
11:56:06.351 [debug] do_fold called with non-variant data: 1023
11:56:06.351 [debug] do_fold called with non-variant data: 1023
11:56:06.351 [debug] Recursive field result for left: 2048
11:56:06.353 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val (truncated)
11:56:06.354 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf (truncated)
11:56:06.354 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, variant_type: :node, state: nil
11:56:06.355 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.355 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.355 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.355 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.355 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.355 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.355 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.355 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.355 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.355 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.355 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.355 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.355 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.355 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.355 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.355 [debug] Recursive field result for left: 0
11:56:06.355 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for right: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] Recursive field result for left: 9
11:56:06.356 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for left: 0
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for right: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] Recursive field result for right: 9
11:56:06.356 [debug] do_fold called with non-variant data: 9
11:56:06.356 [debug] do_fold called with non-variant data: 9
11:56:06.356 [debug] Recursive field result for left: 26
11:56:06.356 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.356 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for left: 0
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for right: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] Recursive field result for left: 9
11:56:06.356 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for left: 0
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for right: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] Recursive field result for right: 9
11:56:06.356 [debug] do_fold called with non-variant data: 9
11:56:06.356 [debug] do_fold called with non-variant data: 9
11:56:06.356 [debug] Recursive field result for right: 26
11:56:06.356 [debug] do_fold called with non-variant data: 26
11:56:06.356 [debug] do_fold called with non-variant data: 26
11:56:06.356 [debug] Recursive field result for left: 59
11:56:06.356 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.356 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.356 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for left: 0
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for right: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] Recursive field result for left: 9
11:56:06.356 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for left: 0
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for right: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] Recursive field result for right: 9
11:56:06.356 [debug] do_fold called with non-variant data: 9
11:56:06.356 [debug] do_fold called with non-variant data: 9
11:56:06.356 [debug] Recursive field result for left: 26
11:56:06.356 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.356 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for left: 0
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for right: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] Recursive field result for left: 9
11:56:06.356 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for left: 0
11:56:06.356 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.356 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.356 [debug] Recursive field result for right: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] do_fold called with non-variant data: 0
11:56:06.356 [debug] Recursive field result for right: 9
11:56:06.356 [debug] do_fold called with non-variant data: 9
11:56:06.356 [debug] do_fold called with non-variant data: 9
11:56:06.356 [debug] Recursive field result for right: 26
11:56:06.356 [debug] do_fold called with non-variant data: 26
11:56:06.356 [debug] do_fold called with non-variant data: 26
11:56:06.356 [debug] Recursive field result for right: 59
11:56:06.356 [debug] do_fold called with non-variant data: 59
11:56:06.356 [debug] do_fold called with non-variant data: 59
11:56:06.356 [debug] Recursive field result for left: 124
11:56:06.356 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.357 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.357 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.357 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.357 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.357 [debug] Recursive field result for left: 0
11:56:06.357 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.357 [debug] Recursive field result for right: 0
11:56:06.357 [debug] do_fold called with non-variant data: 0
11:56:06.357 [debug] do_fold called with non-variant data: 0
11:56:06.357 [debug] Recursive field result for left: 9
11:56:06.357 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.357 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.357 [debug] Recursive field result for left: 0
11:56:06.357 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.357 [debug] Recursive field result for right: 0
11:56:06.357 [debug] do_fold called with non-variant data: 0
11:56:06.357 [debug] do_fold called with non-variant data: 0
11:56:06.357 [debug] Recursive field result for right: 9
11:56:06.357 [debug] do_fold called with non-variant data: 9
11:56:06.357 [debug] do_fold called with non-variant data: 9
11:56:06.357 [debug] Recursive field result for left: 26
11:56:06.357 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.357 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.357 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.357 [debug] Recursive field result for left: 0
11:56:06.357 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.357 [debug] Recursive field result for right: 0
11:56:06.357 [debug] do_fold called with non-variant data: 0
11:56:06.357 [debug] do_fold called with non-variant data: 0
11:56:06.357 [debug] Recursive field result for left: 9
11:56:06.357 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.357 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.357 [debug] Recursive field result for left: 0
11:56:06.357 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.357 [debug] Recursive field result for right: 0
11:56:06.357 [debug] do_fold called with non-variant data: 0
11:56:06.357 [debug] do_fold called with non-variant data: 0
11:56:06.357 [debug] Recursive field result for right: 9
11:56:06.357 [debug] do_fold called with non-variant data: 9
11:56:06.357 [debug] do_fold called with non-variant data: 9
11:56:06.357 [debug] Recursive field result for right: 26
11:56:06.357 [debug] do_fold called with non-variant data: 26
11:56:06.357 [debug] do_fold called with non-variant data: 26
11:56:06.357 [debug] Recursive field result for left: 59
11:56:06.357 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.357 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.357 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.357 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.357 [debug] Recursive field result for left: 0
11:56:06.357 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.357 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.357 [debug] Recursive field result for right: 0
11:56:06.357 [debug] do_fold called with non-variant data: 0
11:56:06.357 [debug] do_fold called with non-variant data: 0
11:56:06.357 [debug] Recursive field result for left: 9
11:56:06.357 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.358 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.358 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.358 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.358 [debug] Recursive field result for left: 0
11:56:06.358 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.358 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.358 [debug] Recursive field result for right: 0
11:56:06.358 [debug] do_fold called with non-variant data: 0
11:56:06.358 [debug] do_fold called with non-variant data: 0
11:56:06.358 [debug] Recursive field result for right: 9
11:56:06.358 [debug] do_fold called with non-variant data: 9
11:56:06.358 [debug] do_fold called with non-variant data: 9
11:56:06.358 [debug] Recursive field result for left: 26
11:56:06.358 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.358 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.358 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.358 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.358 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.358 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.358 [debug] Recursive field result for left: 0
11:56:06.358 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.358 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.358 [debug] Recursive field result for right: 0
11:56:06.358 [debug] do_fold called with non-variant data: 0
11:56:06.358 [debug] do_fold called with non-variant data: 0
11:56:06.358 [debug] Recursive field result for left: 9
11:56:06.358 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.358 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.358 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.358 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.358 [debug] Recursive field result for left: 0
11:56:06.358 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.358 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.358 [debug] Recursive field result for right: 0
11:56:06.358 [debug] do_fold called with non-variant data: 0
11:56:06.358 [debug] do_fold called with non-variant data: 0
11:56:06.358 [debug] Recursive field result for right: 9
11:56:06.358 [debug] do_fold called with non-variant data: 9
11:56:06.358 [debug] do_fold called with non-variant data: 9
11:56:06.358 [debug] Recursive field result for right: 26
11:56:06.358 [debug] do_fold called with non-variant data: 26
11:56:06.358 [debug] do_fold called with non-variant data: 26
11:56:06.358 [debug] Recursive field result for right: 59
11:56:06.358 [debug] do_fold called with non-variant data: 59
11:56:06.358 [debug] do_fold called with non-variant data: 59
11:56:06.358 [debug] Recursive field result for right: 124
11:56:06.358 [debug] do_fold called with non-variant data: 124
11:56:06.358 [debug] do_fold called with non-variant data: 124
11:56:06.358 [debug] Recursive field result for left: 253
11:56:06.359 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.359 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.359 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.360 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.360 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.360 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.360 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.360 [debug] Recursive field result for left: 0
11:56:06.360 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.360 [debug] Recursive field result for right: 0
11:56:06.360 [debug] do_fold called with non-variant data: 0
11:56:06.360 [debug] do_fold called with non-variant data: 0
11:56:06.360 [debug] Recursive field result for left: 9
11:56:06.360 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.360 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.360 [debug] Recursive field result for left: 0
11:56:06.360 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.360 [debug] Recursive field result for right: 0
11:56:06.360 [debug] do_fold called with non-variant data: 0
11:56:06.360 [debug] do_fold called with non-variant data: 0
11:56:06.360 [debug] Recursive field result for right: 9
11:56:06.360 [debug] do_fold called with non-variant data: 9
11:56:06.360 [debug] do_fold called with non-variant data: 9
11:56:06.360 [debug] Recursive field result for left: 26
11:56:06.360 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.360 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.360 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.360 [debug] Recursive field result for left: 0
11:56:06.360 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.360 [debug] Recursive field result for right: 0
11:56:06.360 [debug] do_fold called with non-variant data: 0
11:56:06.360 [debug] do_fold called with non-variant data: 0
11:56:06.360 [debug] Recursive field result for left: 9
11:56:06.360 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.360 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.360 [debug] Recursive field result for left: 0
11:56:06.360 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.360 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.360 [debug] Recursive field result for right: 0
11:56:06.360 [debug] do_fold called with non-variant data: 0
11:56:06.360 [debug] do_fold called with non-variant data: 0
11:56:06.360 [debug] Recursive field result for right: 9
11:56:06.360 [debug] do_fold called with non-variant data: 9
11:56:06.360 [debug] do_fold called with non-variant data: 9
11:56:06.360 [debug] Recursive field result for right: 26
11:56:06.360 [debug] do_fold called with non-variant data: 26
11:56:06.360 [debug] do_fold called with non-variant data: 26
11:56:06.360 [debug] Recursive field result for left: 59
11:56:06.361 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.361 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.361 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.361 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.361 [debug] Recursive field result for left: 0
11:56:06.361 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.361 [debug] Recursive field result for right: 0
11:56:06.361 [debug] do_fold called with non-variant data: 0
11:56:06.361 [debug] do_fold called with non-variant data: 0
11:56:06.361 [debug] Recursive field result for left: 9
11:56:06.361 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.361 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.361 [debug] Recursive field result for left: 0
11:56:06.361 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.361 [debug] Recursive field result for right: 0
11:56:06.361 [debug] do_fold called with non-variant data: 0
11:56:06.361 [debug] do_fold called with non-variant data: 0
11:56:06.361 [debug] Recursive field result for right: 9
11:56:06.361 [debug] do_fold called with non-variant data: 9
11:56:06.361 [debug] do_fold called with non-variant data: 9
11:56:06.361 [debug] Recursive field result for left: 26
11:56:06.361 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.361 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.361 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.361 [debug] Recursive field result for left: 0
11:56:06.361 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.361 [debug] Recursive field result for right: 0
11:56:06.361 [debug] do_fold called with non-variant data: 0
11:56:06.361 [debug] do_fold called with non-variant data: 0
11:56:06.361 [debug] Recursive field result for left: 9
11:56:06.361 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.361 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.361 [debug] Recursive field result for left: 0
11:56:06.361 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.361 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.361 [debug] Recursive field result for right: 0
11:56:06.361 [debug] do_fold called with non-variant data: 0
11:56:06.361 [debug] do_fold called with non-variant data: 0
11:56:06.361 [debug] Recursive field result for right: 9
11:56:06.361 [debug] do_fold called with non-variant data: 9
11:56:06.361 [debug] do_fold called with non-variant data: 9
11:56:06.361 [debug] Recursive field result for right: 26
11:56:06.361 [debug] do_fold called with non-variant data: 26
11:56:06.361 [debug] do_fold called with non-variant data: 26
11:56:06.361 [debug] Recursive field result for right: 59
11:56:06.361 [debug] do_fold called with non-variant data: 59
11:56:06.361 [debug] do_fold called with non-variant data: 59
11:56:06.361 [debug] Recursive field result for left: 124
11:56:06.362 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.362 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.362 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.362 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.362 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.362 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.362 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.362 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.362 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.362 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.362 [debug] Recursive field result for left: 0
11:56:06.362 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.362 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.362 [debug] Recursive field result for right: 0
11:56:06.362 [debug] do_fold called with non-variant data: 0
11:56:06.362 [debug] do_fold called with non-variant data: 0
11:56:06.362 [debug] Recursive field result for left: 9
11:56:06.362 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.362 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.362 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.362 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.362 [debug] Recursive field result for left: 0
11:56:06.362 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.362 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.362 [debug] Recursive field result for right: 0
11:56:06.362 [debug] do_fold called with non-variant data: 0
11:56:06.362 [debug] do_fold called with non-variant data: 0
11:56:06.362 [debug] Recursive field result for right: 9
11:56:06.362 [debug] do_fold called with non-variant data: 9
11:56:06.362 [debug] do_fold called with non-variant data: 9
11:56:06.362 [debug] Recursive field result for left: 26
11:56:06.362 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.363 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.363 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.363 [debug] Recursive field result for left: 0
11:56:06.363 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.363 [debug] Recursive field result for right: 0
11:56:06.363 [debug] do_fold called with non-variant data: 0
11:56:06.363 [debug] do_fold called with non-variant data: 0
11:56:06.363 [debug] Recursive field result for left: 9
11:56:06.363 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.363 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.363 [debug] Recursive field result for left: 0
11:56:06.363 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.363 [debug] Recursive field result for right: 0
11:56:06.363 [debug] do_fold called with non-variant data: 0
11:56:06.363 [debug] do_fold called with non-variant data: 0
11:56:06.363 [debug] Recursive field result for right: 9
11:56:06.363 [debug] do_fold called with non-variant data: 9
11:56:06.363 [debug] do_fold called with non-variant data: 9
11:56:06.363 [debug] Recursive field result for right: 26
11:56:06.363 [debug] do_fold called with non-variant data: 26
11:56:06.363 [debug] do_fold called with non-variant data: 26
11:56:06.363 [debug] Recursive field result for left: 59
11:56:06.363 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.363 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.363 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.363 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.363 [debug] Recursive field result for left: 0
11:56:06.363 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.363 [debug] Recursive field result for right: 0
11:56:06.363 [debug] do_fold called with non-variant data: 0
11:56:06.363 [debug] do_fold called with non-variant data: 0
11:56:06.363 [debug] Recursive field result for left: 9
11:56:06.363 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.363 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.363 [debug] Recursive field result for left: 0
11:56:06.363 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.363 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.363 [debug] Recursive field result for right: 0
11:56:06.364 [debug] do_fold called with non-variant data: 0
11:56:06.364 [debug] do_fold called with non-variant data: 0
11:56:06.364 [debug] Recursive field result for right: 9
11:56:06.364 [debug] do_fold called with non-variant data: 9
11:56:06.364 [debug] do_fold called with non-variant data: 9
11:56:06.364 [debug] Recursive field result for left: 26
11:56:06.364 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.364 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.364 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.364 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.364 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.364 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.364 [debug] Recursive field result for left: 0
11:56:06.364 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.364 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.364 [debug] Recursive field result for right: 0
11:56:06.364 [debug] do_fold called with non-variant data: 0
11:56:06.364 [debug] do_fold called with non-variant data: 0
11:56:06.364 [debug] Recursive field result for left: 9
11:56:06.364 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.364 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.364 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.364 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.364 [debug] Recursive field result for left: 0
11:56:06.364 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.364 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.364 [debug] Recursive field result for right: 0
11:56:06.364 [debug] do_fold called with non-variant data: 0
11:56:06.364 [debug] do_fold called with non-variant data: 0
11:56:06.364 [debug] Recursive field result for right: 9
11:56:06.364 [debug] do_fold called with non-variant data: 9
11:56:06.364 [debug] do_fold called with non-variant data: 9
11:56:06.364 [debug] Recursive field result for right: 26
11:56:06.364 [debug] do_fold called with non-variant data: 26
11:56:06.364 [debug] do_fold called with non-variant data: 26
11:56:06.364 [debug] Recursive field result for right: 59
11:56:06.364 [debug] do_fold called with non-variant data: 59
11:56:06.364 [debug] do_fold called with non-variant data: 59
11:56:06.364 [debug] Recursive field result for right: 124
11:56:06.364 [debug] do_fold called with non-variant data: 124
11:56:06.364 [debug] do_fold called with non-variant data: 124
11:56:06.364 [debug] Recursive field result for right: 253
11:56:06.364 [debug] do_fold called with non-variant data: 253
11:56:06.364 [debug] do_fold called with non-variant data: 253
11:56:06.364 [debug] Recursive field result for left: 510
11:56:06.364 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.365 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.365 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.365 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.365 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.365 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.365 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.366 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.366 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.366 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.366 [debug] Recursive field result for left: 0
11:56:06.366 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.366 [debug] Recursive field result for right: 0
11:56:06.366 [debug] do_fold called with non-variant data: 0
11:56:06.366 [debug] do_fold called with non-variant data: 0
11:56:06.366 [debug] Recursive field result for left: 9
11:56:06.366 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.366 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.366 [debug] Recursive field result for left: 0
11:56:06.366 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.366 [debug] Recursive field result for right: 0
11:56:06.366 [debug] do_fold called with non-variant data: 0
11:56:06.366 [debug] do_fold called with non-variant data: 0
11:56:06.366 [debug] Recursive field result for right: 9
11:56:06.366 [debug] do_fold called with non-variant data: 9
11:56:06.366 [debug] do_fold called with non-variant data: 9
11:56:06.366 [debug] Recursive field result for left: 26
11:56:06.366 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.366 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.366 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.366 [debug] Recursive field result for left: 0
11:56:06.366 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.366 [debug] Recursive field result for right: 0
11:56:06.366 [debug] do_fold called with non-variant data: 0
11:56:06.366 [debug] do_fold called with non-variant data: 0
11:56:06.366 [debug] Recursive field result for left: 9
11:56:06.366 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.366 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.366 [debug] Recursive field result for left: 0
11:56:06.366 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.366 [debug] Recursive field result for right: 0
11:56:06.366 [debug] do_fold called with non-variant data: 0
11:56:06.366 [debug] do_fold called with non-variant data: 0
11:56:06.366 [debug] Recursive field result for right: 9
11:56:06.366 [debug] do_fold called with non-variant data: 9
11:56:06.366 [debug] do_fold called with non-variant data: 9
11:56:06.366 [debug] Recursive field result for right: 26
11:56:06.366 [debug] do_fold called with non-variant data: 26
11:56:06.366 [debug] do_fold called with non-variant data: 26
11:56:06.366 [debug] Recursive field result for left: 59
11:56:06.366 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.366 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.366 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.366 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.366 [debug] Recursive field result for left: 0
11:56:06.366 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.366 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.366 [debug] Recursive field result for right: 0
11:56:06.366 [debug] do_fold called with non-variant data: 0
11:56:06.366 [debug] do_fold called with non-variant data: 0
11:56:06.366 [debug] Recursive field result for left: 9
11:56:06.367 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.367 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.367 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.367 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.367 [debug] Recursive field result for left: 0
11:56:06.367 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.367 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.367 [debug] Recursive field result for right: 0
11:56:06.367 [debug] do_fold called with non-variant data: 0
11:56:06.367 [debug] do_fold called with non-variant data: 0
11:56:06.367 [debug] Recursive field result for right: 9
11:56:06.367 [debug] do_fold called with non-variant data: 9
11:56:06.367 [debug] do_fold called with non-variant data: 9
11:56:06.367 [debug] Recursive field result for left: 26
11:56:06.367 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.367 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.367 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.367 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.367 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.367 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.367 [debug] Recursive field result for left: 0
11:56:06.367 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.367 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.367 [debug] Recursive field result for right: 0
11:56:06.367 [debug] do_fold called with non-variant data: 0
11:56:06.367 [debug] do_fold called with non-variant data: 0
11:56:06.367 [debug] Recursive field result for left: 9
11:56:06.367 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.367 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.367 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.367 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.367 [debug] Recursive field result for left: 0
11:56:06.367 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.367 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.367 [debug] Recursive field result for right: 0
11:56:06.367 [debug] do_fold called with non-variant data: 0
11:56:06.367 [debug] do_fold called with non-variant data: 0
11:56:06.367 [debug] Recursive field result for right: 9
11:56:06.367 [debug] do_fold called with non-variant data: 9
11:56:06.367 [debug] do_fold called with non-variant data: 9
11:56:06.367 [debug] Recursive field result for right: 26
11:56:06.367 [debug] do_fold called with non-variant data: 26
11:56:06.367 [debug] do_fold called with non-variant data: 26
11:56:06.367 [debug] Recursive field result for right: 59
11:56:06.367 [debug] do_fold called with non-variant data: 59
11:56:06.367 [debug] do_fold called with non-variant data: 59
11:56:06.367 [debug] Recursive field result for left: 124
11:56:06.367 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.368 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.368 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.368 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.368 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.368 [debug] Recursive field result for left: 0
11:56:06.368 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.368 [debug] Recursive field result for right: 0
11:56:06.368 [debug] do_fold called with non-variant data: 0
11:56:06.368 [debug] do_fold called with non-variant data: 0
11:56:06.368 [debug] Recursive field result for left: 9
11:56:06.368 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.368 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.368 [debug] Recursive field result for left: 0
11:56:06.368 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.368 [debug] Recursive field result for right: 0
11:56:06.368 [debug] do_fold called with non-variant data: 0
11:56:06.368 [debug] do_fold called with non-variant data: 0
11:56:06.368 [debug] Recursive field result for right: 9
11:56:06.368 [debug] do_fold called with non-variant data: 9
11:56:06.368 [debug] do_fold called with non-variant data: 9
11:56:06.368 [debug] Recursive field result for left: 26
11:56:06.368 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.368 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.368 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.368 [debug] Recursive field result for left: 0
11:56:06.368 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.368 [debug] Recursive field result for right: 0
11:56:06.368 [debug] do_fold called with non-variant data: 0
11:56:06.368 [debug] do_fold called with non-variant data: 0
11:56:06.368 [debug] Recursive field result for left: 9
11:56:06.368 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.368 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.368 [debug] Recursive field result for left: 0
11:56:06.368 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.368 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.368 [debug] Recursive field result for right: 0
11:56:06.368 [debug] do_fold called with non-variant data: 0
11:56:06.368 [debug] do_fold called with non-variant data: 0
11:56:06.368 [debug] Recursive field result for right: 9
11:56:06.368 [debug] do_fold called with non-variant data: 9
11:56:06.368 [debug] do_fold called with non-variant data: 9
11:56:06.368 [debug] Recursive field result for right: 26
11:56:06.368 [debug] do_fold called with non-variant data: 26
11:56:06.368 [debug] do_fold called with non-variant data: 26
11:56:06.368 [debug] Recursive field result for left: 59
11:56:06.369 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.369 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.369 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.369 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.369 [debug] Recursive field result for left: 0
11:56:06.369 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.369 [debug] Recursive field result for right: 0
11:56:06.369 [debug] do_fold called with non-variant data: 0
11:56:06.369 [debug] do_fold called with non-variant data: 0
11:56:06.369 [debug] Recursive field result for left: 9
11:56:06.369 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.369 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.369 [debug] Recursive field result for left: 0
11:56:06.369 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.369 [debug] Recursive field result for right: 0
11:56:06.369 [debug] do_fold called with non-variant data: 0
11:56:06.369 [debug] do_fold called with non-variant data: 0
11:56:06.369 [debug] Recursive field result for right: 9
11:56:06.369 [debug] do_fold called with non-variant data: 9
11:56:06.369 [debug] do_fold called with non-variant data: 9
11:56:06.369 [debug] Recursive field result for left: 26
11:56:06.369 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.369 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.369 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.369 [debug] Recursive field result for left: 0
11:56:06.369 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.369 [debug] Recursive field result for right: 0
11:56:06.369 [debug] do_fold called with non-variant data: 0
11:56:06.369 [debug] do_fold called with non-variant data: 0
11:56:06.369 [debug] Recursive field result for left: 9
11:56:06.369 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.369 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.369 [debug] Recursive field result for left: 0
11:56:06.369 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.369 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.369 [debug] Recursive field result for right: 0
11:56:06.369 [debug] do_fold called with non-variant data: 0
11:56:06.369 [debug] do_fold called with non-variant data: 0
11:56:06.369 [debug] Recursive field result for right: 9
11:56:06.369 [debug] do_fold called with non-variant data: 9
11:56:06.369 [debug] do_fold called with non-variant data: 9
11:56:06.369 [debug] Recursive field result for right: 26
11:56:06.369 [debug] do_fold called with non-variant data: 26
11:56:06.369 [debug] do_fold called with non-variant data: 26
11:56:06.369 [debug] Recursive field result for right: 59
11:56:06.369 [debug] do_fold called with non-variant data: 59
11:56:06.369 [debug] do_fold called with non-variant data: 59
11:56:06.369 [debug] Recursive field result for right: 124
11:56:06.369 [debug] do_fold called with non-variant data: 124
11:56:06.369 [debug] do_fold called with non-variant data: 124
11:56:06.369 [debug] Recursive field result for left: 253
11:56:06.370 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.370 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.370 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.370 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.370 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.370 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.370 [debug] Recursive field result for left: 0
11:56:06.370 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.370 [debug] Recursive field result for right: 0
11:56:06.370 [debug] do_fold called with non-variant data: 0
11:56:06.370 [debug] do_fold called with non-variant data: 0
11:56:06.370 [debug] Recursive field result for left: 9
11:56:06.370 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.370 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.370 [debug] Recursive field result for left: 0
11:56:06.370 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.370 [debug] Recursive field result for right: 0
11:56:06.370 [debug] do_fold called with non-variant data: 0
11:56:06.370 [debug] do_fold called with non-variant data: 0
11:56:06.370 [debug] Recursive field result for right: 9
11:56:06.370 [debug] do_fold called with non-variant data: 9
11:56:06.370 [debug] do_fold called with non-variant data: 9
11:56:06.370 [debug] Recursive field result for left: 26
11:56:06.370 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.370 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.370 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.370 [debug] Recursive field result for left: 0
11:56:06.370 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.370 [debug] Recursive field result for right: 0
11:56:06.370 [debug] do_fold called with non-variant data: 0
11:56:06.370 [debug] do_fold called with non-variant data: 0
11:56:06.370 [debug] Recursive field result for left: 9
11:56:06.370 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.370 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.370 [debug] Recursive field result for left: 0
11:56:06.370 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.370 [debug] Recursive field result for right: 0
11:56:06.370 [debug] do_fold called with non-variant data: 0
11:56:06.370 [debug] do_fold called with non-variant data: 0
11:56:06.370 [debug] Recursive field result for right: 9
11:56:06.370 [debug] do_fold called with non-variant data: 9
11:56:06.370 [debug] do_fold called with non-variant data: 9
11:56:06.370 [debug] Recursive field result for right: 26
11:56:06.370 [debug] do_fold called with non-variant data: 26
11:56:06.370 [debug] do_fold called with non-variant data: 26
11:56:06.370 [debug] Recursive field result for left: 59
11:56:06.370 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.370 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.370 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for left: 0
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for right: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] Recursive field result for left: 9
11:56:06.371 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for left: 0
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for right: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] Recursive field result for right: 9
11:56:06.371 [debug] do_fold called with non-variant data: 9
11:56:06.371 [debug] do_fold called with non-variant data: 9
11:56:06.371 [debug] Recursive field result for left: 26
11:56:06.371 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for left: 0
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for right: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] Recursive field result for left: 9
11:56:06.371 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for left: 0
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for right: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] Recursive field result for right: 9
11:56:06.371 [debug] do_fold called with non-variant data: 9
11:56:06.371 [debug] do_fold called with non-variant data: 9
11:56:06.371 [debug] Recursive field result for right: 26
11:56:06.371 [debug] do_fold called with non-variant data: 26
11:56:06.371 [debug] do_fold called with non-variant data: 26
11:56:06.371 [debug] Recursive field result for right: 59
11:56:06.371 [debug] do_fold called with non-variant data: 59
11:56:06.371 [debug] do_fold called with non-variant data: 59
11:56:06.371 [debug] Recursive field result for left: 124
11:56:06.371 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for left: 0
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for right: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] Recursive field result for left: 9
11:56:06.371 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for left: 0
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for right: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] Recursive field result for right: 9
11:56:06.371 [debug] do_fold called with non-variant data: 9
11:56:06.371 [debug] do_fold called with non-variant data: 9
11:56:06.371 [debug] Recursive field result for left: 26
11:56:06.371 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for left: 0
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for right: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] Recursive field result for left: 9
11:56:06.371 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for left: 0
11:56:06.371 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.371 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.371 [debug] Recursive field result for right: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.371 [debug] do_fold called with non-variant data: 0
11:56:06.372 [debug] Recursive field result for right: 9
11:56:06.372 [debug] do_fold called with non-variant data: 9
11:56:06.372 [debug] do_fold called with non-variant data: 9
11:56:06.372 [debug] Recursive field result for right: 26
11:56:06.372 [debug] do_fold called with non-variant data: 26
11:56:06.372 [debug] do_fold called with non-variant data: 26
11:56:06.372 [debug] Recursive field result for left: 59
11:56:06.372 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.372 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.372 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.372 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.372 [debug] Recursive field result for left: 0
11:56:06.372 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.372 [debug] Recursive field result for right: 0
11:56:06.372 [debug] do_fold called with non-variant data: 0
11:56:06.372 [debug] do_fold called with non-variant data: 0
11:56:06.372 [debug] Recursive field result for left: 9
11:56:06.372 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.372 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.372 [debug] Recursive field result for left: 0
11:56:06.372 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.372 [debug] Recursive field result for right: 0
11:56:06.372 [debug] do_fold called with non-variant data: 0
11:56:06.372 [debug] do_fold called with non-variant data: 0
11:56:06.372 [debug] Recursive field result for right: 9
11:56:06.372 [debug] do_fold called with non-variant data: 9
11:56:06.372 [debug] do_fold called with non-variant data: 9
11:56:06.372 [debug] Recursive field result for left: 26
11:56:06.372 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.372 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.372 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.372 [debug] Recursive field result for left: 0
11:56:06.372 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.372 [debug] Recursive field result for right: 0
11:56:06.372 [debug] do_fold called with non-variant data: 0
11:56:06.372 [debug] do_fold called with non-variant data: 0
11:56:06.372 [debug] Recursive field result for left: 9
11:56:06.372 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.372 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.372 [debug] Recursive field result for left: 0
11:56:06.372 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.372 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.372 [debug] Recursive field result for right: 0
11:56:06.372 [debug] do_fold called with non-variant data: 0
11:56:06.372 [debug] do_fold called with non-variant data: 0
11:56:06.372 [debug] Recursive field result for right: 9
11:56:06.372 [debug] do_fold called with non-variant data: 9
11:56:06.372 [debug] do_fold called with non-variant data: 9
11:56:06.372 [debug] Recursive field result for right: 26
11:56:06.372 [debug] do_fold called with non-variant data: 26
11:56:06.372 [debug] do_fold called with non-variant data: 26
11:56:06.372 [debug] Recursive field result for right: 59
11:56:06.372 [debug] do_fold called with non-variant data: 59
11:56:06.372 [debug] do_fold called with non-variant data: 59
11:56:06.372 [debug] Recursive field result for right: 124
11:56:06.372 [debug] do_fold called with non-variant data: 124
11:56:06.372 [debug] do_fold called with non-variant data: 124
11:56:06.372 [debug] Recursive field result for right: 253
11:56:06.372 [debug] do_fold called with non-variant data: 253
11:56:06.372 [debug] do_fold called with non-variant data: 253
11:56:06.372 [debug] Recursive field result for right: 510
11:56:06.372 [debug] do_fold called with non-variant data: 510
11:56:06.372 [debug] do_fold called with non-variant data: 510
11:56:06.372 [debug] Recursive field result for left: 1023
11:56:06.373 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, variant_type: :node, state: nil
11:56:06.373 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.373 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.373 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.374 [debug] Recursive field result for left: 0
11:56:06.374 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.374 [debug] Recursive field result for right: 0
11:56:06.374 [debug] do_fold called with non-variant data: 0
11:56:06.374 [debug] do_fold called with non-variant data: 0
11:56:06.374 [debug] Recursive field result for left: 9
11:56:06.374 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.374 [debug] Recursive field result for left: 0
11:56:06.374 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.374 [debug] Recursive field result for right: 0
11:56:06.374 [debug] do_fold called with non-variant data: 0
11:56:06.374 [debug] do_fold called with non-variant data: 0
11:56:06.374 [debug] Recursive field result for right: 9
11:56:06.374 [debug] do_fold called with non-variant data: 9
11:56:06.374 [debug] do_fold called with non-variant data: 9
11:56:06.374 [debug] Recursive field result for left: 26
11:56:06.374 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.374 [debug] Recursive field result for left: 0
11:56:06.374 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.374 [debug] Recursive field result for right: 0
11:56:06.374 [debug] do_fold called with non-variant data: 0
11:56:06.374 [debug] do_fold called with non-variant data: 0
11:56:06.374 [debug] Recursive field result for left: 9
11:56:06.374 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.374 [debug] Recursive field result for left: 0
11:56:06.374 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.374 [debug] Recursive field result for right: 0
11:56:06.374 [debug] do_fold called with non-variant data: 0
11:56:06.374 [debug] do_fold called with non-variant data: 0
11:56:06.374 [debug] Recursive field result for right: 9
11:56:06.374 [debug] do_fold called with non-variant data: 9
11:56:06.374 [debug] do_fold called with non-variant data: 9
11:56:06.374 [debug] Recursive field result for right: 26
11:56:06.374 [debug] do_fold called with non-variant data: 26
11:56:06.374 [debug] do_fold called with non-variant data: 26
11:56:06.374 [debug] Recursive field result for left: 59
11:56:06.374 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.374 [debug] Recursive field result for left: 0
11:56:06.374 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.374 [debug] Recursive field result for right: 0
11:56:06.374 [debug] do_fold called with non-variant data: 0
11:56:06.374 [debug] do_fold called with non-variant data: 0
11:56:06.374 [debug] Recursive field result for left: 9
11:56:06.374 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.374 [debug] Recursive field result for left: 0
11:56:06.374 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.374 [debug] Recursive field result for right: 0
11:56:06.374 [debug] do_fold called with non-variant data: 0
11:56:06.374 [debug] do_fold called with non-variant data: 0
11:56:06.374 [debug] Recursive field result for right: 9
11:56:06.374 [debug] do_fold called with non-variant data: 9
11:56:06.374 [debug] do_fold called with non-variant data: 9
11:56:06.374 [debug] Recursive field result for left: 26
11:56:06.374 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.374 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.374 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for left: 0
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for right: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] Recursive field result for left: 9
11:56:06.375 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for left: 0
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for right: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] Recursive field result for right: 9
11:56:06.375 [debug] do_fold called with non-variant data: 9
11:56:06.375 [debug] do_fold called with non-variant data: 9
11:56:06.375 [debug] Recursive field result for right: 26
11:56:06.375 [debug] do_fold called with non-variant data: 26
11:56:06.375 [debug] do_fold called with non-variant data: 26
11:56:06.375 [debug] Recursive field result for right: 59
11:56:06.375 [debug] do_fold called with non-variant data: 59
11:56:06.375 [debug] do_fold called with non-variant data: 59
11:56:06.375 [debug] Recursive field result for left: 124
11:56:06.375 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for left: 0
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for right: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] Recursive field result for left: 9
11:56:06.375 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for left: 0
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for right: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] Recursive field result for right: 9
11:56:06.375 [debug] do_fold called with non-variant data: 9
11:56:06.375 [debug] do_fold called with non-variant data: 9
11:56:06.375 [debug] Recursive field result for left: 26
11:56:06.375 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for left: 0
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for right: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] Recursive field result for left: 9
11:56:06.375 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for left: 0
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for right: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] Recursive field result for right: 9
11:56:06.375 [debug] do_fold called with non-variant data: 9
11:56:06.375 [debug] do_fold called with non-variant data: 9
11:56:06.375 [debug] Recursive field result for right: 26
11:56:06.375 [debug] do_fold called with non-variant data: 26
11:56:06.375 [debug] do_fold called with non-variant data: 26
11:56:06.375 [debug] Recursive field result for left: 59
11:56:06.375 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for left: 0
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for right: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] Recursive field result for left: 9
11:56:06.375 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for left: 0
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for right: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] do_fold called with non-variant data: 0
11:56:06.375 [debug] Recursive field result for right: 9
11:56:06.375 [debug] do_fold called with non-variant data: 9
11:56:06.375 [debug] do_fold called with non-variant data: 9
11:56:06.375 [debug] Recursive field result for left: 26
11:56:06.375 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for left: 0
11:56:06.375 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.375 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.375 [debug] Recursive field result for right: 0
11:56:06.376 [debug] do_fold called with non-variant data: 0
11:56:06.376 [debug] do_fold called with non-variant data: 0
11:56:06.376 [debug] Recursive field result for left: 9
11:56:06.376 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.376 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.376 [debug] Recursive field result for left: 0
11:56:06.376 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.376 [debug] Recursive field result for right: 0
11:56:06.376 [debug] do_fold called with non-variant data: 0
11:56:06.376 [debug] do_fold called with non-variant data: 0
11:56:06.376 [debug] Recursive field result for right: 9
11:56:06.376 [debug] do_fold called with non-variant data: 9
11:56:06.376 [debug] do_fold called with non-variant data: 9
11:56:06.376 [debug] Recursive field result for right: 26
11:56:06.376 [debug] do_fold called with non-variant data: 26
11:56:06.376 [debug] do_fold called with non-variant data: 26
11:56:06.376 [debug] Recursive field result for right: 59
11:56:06.376 [debug] do_fold called with non-variant data: 59
11:56:06.376 [debug] do_fold called with non-variant data: 59
11:56:06.376 [debug] Recursive field result for right: 124
11:56:06.376 [debug] do_fold called with non-variant data: 124
11:56:06.376 [debug] do_fold called with non-variant data: 124
11:56:06.376 [debug] Recursive field result for left: 253
11:56:06.376 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.376 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.376 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.376 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.376 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.376 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.376 [debug] Recursive field result for left: 0
11:56:06.376 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.376 [debug] Recursive field result for right: 0
11:56:06.376 [debug] do_fold called with non-variant data: 0
11:56:06.376 [debug] do_fold called with non-variant data: 0
11:56:06.376 [debug] Recursive field result for left: 9
11:56:06.376 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.376 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.376 [debug] Recursive field result for left: 0
11:56:06.376 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.376 [debug] Recursive field result for right: 0
11:56:06.376 [debug] do_fold called with non-variant data: 0
11:56:06.376 [debug] do_fold called with non-variant data: 0
11:56:06.376 [debug] Recursive field result for right: 9
11:56:06.376 [debug] do_fold called with non-variant data: 9
11:56:06.376 [debug] do_fold called with non-variant data: 9
11:56:06.376 [debug] Recursive field result for left: 26
11:56:06.376 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.376 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.376 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.376 [debug] Recursive field result for left: 0
11:56:06.376 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.376 [debug] Recursive field result for right: 0
11:56:06.376 [debug] do_fold called with non-variant data: 0
11:56:06.376 [debug] do_fold called with non-variant data: 0
11:56:06.376 [debug] Recursive field result for left: 9
11:56:06.376 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.376 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.376 [debug] Recursive field result for left: 0
11:56:06.376 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.376 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.377 [debug] Recursive field result for right: 0
11:56:06.377 [debug] do_fold called with non-variant data: 0
11:56:06.377 [debug] do_fold called with non-variant data: 0
11:56:06.377 [debug] Recursive field result for right: 9
11:56:06.377 [debug] do_fold called with non-variant data: 9
11:56:06.377 [debug] do_fold called with non-variant data: 9
11:56:06.377 [debug] Recursive field result for right: 26
11:56:06.377 [debug] do_fold called with non-variant data: 26
11:56:06.377 [debug] do_fold called with non-variant data: 26
11:56:06.377 [debug] Recursive field result for left: 59
11:56:06.377 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.377 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.377 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.377 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.377 [debug] Recursive field result for left: 0
11:56:06.377 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.377 [debug] Recursive field result for right: 0
11:56:06.377 [debug] do_fold called with non-variant data: 0
11:56:06.377 [debug] do_fold called with non-variant data: 0
11:56:06.377 [debug] Recursive field result for left: 9
11:56:06.377 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.377 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.377 [debug] Recursive field result for left: 0
11:56:06.377 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.377 [debug] Recursive field result for right: 0
11:56:06.377 [debug] do_fold called with non-variant data: 0
11:56:06.377 [debug] do_fold called with non-variant data: 0
11:56:06.377 [debug] Recursive field result for right: 9
11:56:06.377 [debug] do_fold called with non-variant data: 9
11:56:06.377 [debug] do_fold called with non-variant data: 9
11:56:06.377 [debug] Recursive field result for left: 26
11:56:06.377 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.377 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.377 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.377 [debug] Recursive field result for left: 0
11:56:06.377 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.377 [debug] Recursive field result for right: 0
11:56:06.377 [debug] do_fold called with non-variant data: 0
11:56:06.377 [debug] do_fold called with non-variant data: 0
11:56:06.377 [debug] Recursive field result for left: 9
11:56:06.377 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.377 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.377 [debug] Recursive field result for left: 0
11:56:06.377 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.377 [debug] Recursive field result for right: 0
11:56:06.377 [debug] do_fold called with non-variant data: 0
11:56:06.377 [debug] do_fold called with non-variant data: 0
11:56:06.377 [debug] Recursive field result for right: 9
11:56:06.377 [debug] do_fold called with non-variant data: 9
11:56:06.377 [debug] do_fold called with non-variant data: 9
11:56:06.377 [debug] Recursive field result for right: 26
11:56:06.377 [debug] do_fold called with non-variant data: 26
11:56:06.377 [debug] do_fold called with non-variant data: 26
11:56:06.377 [debug] Recursive field result for right: 59
11:56:06.377 [debug] do_fold called with non-variant data: 59
11:56:06.377 [debug] do_fold called with non-variant data: 59
11:56:06.377 [debug] Recursive field result for left: 124
11:56:06.377 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.377 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.378 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.378 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.378 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.378 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.378 [debug] Recursive field result for left: 0
11:56:06.378 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.378 [debug] Recursive field result for right: 0
11:56:06.378 [debug] do_fold called with non-variant data: 0
11:56:06.378 [debug] do_fold called with non-variant data: 0
11:56:06.378 [debug] Recursive field result for left: 9
11:56:06.378 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.378 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.378 [debug] Recursive field result for left: 0
11:56:06.378 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.378 [debug] Recursive field result for right: 0
11:56:06.378 [debug] do_fold called with non-variant data: 0
11:56:06.378 [debug] do_fold called with non-variant data: 0
11:56:06.378 [debug] Recursive field result for right: 9
11:56:06.378 [debug] do_fold called with non-variant data: 9
11:56:06.378 [debug] do_fold called with non-variant data: 9
11:56:06.378 [debug] Recursive field result for left: 26
11:56:06.378 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.378 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.378 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.378 [debug] Recursive field result for left: 0
11:56:06.378 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.378 [debug] Recursive field result for right: 0
11:56:06.378 [debug] do_fold called with non-variant data: 0
11:56:06.378 [debug] do_fold called with non-variant data: 0
11:56:06.378 [debug] Recursive field result for left: 9
11:56:06.378 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.378 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.378 [debug] Recursive field result for left: 0
11:56:06.378 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.378 [debug] Recursive field result for right: 0
11:56:06.378 [debug] do_fold called with non-variant data: 0
11:56:06.378 [debug] do_fold called with non-variant data: 0
11:56:06.378 [debug] Recursive field result for right: 9
11:56:06.378 [debug] do_fold called with non-variant data: 9
11:56:06.378 [debug] do_fold called with non-variant data: 9
11:56:06.378 [debug] Recursive field result for right: 26
11:56:06.378 [debug] do_fold called with non-variant data: 26
11:56:06.378 [debug] do_fold called with non-variant data: 26
11:56:06.378 [debug] Recursive field result for left: 59
11:56:06.378 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.378 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.378 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.378 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.378 [debug] Recursive field result for left: 0
11:56:06.378 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.378 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.378 [debug] Recursive field result for right: 0
11:56:06.378 [debug] do_fold called with non-variant data: 0
11:56:06.379 [debug] do_fold called with non-variant data: 0
11:56:06.379 [debug] Recursive field result for left: 9
11:56:06.379 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.379 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.379 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.379 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.379 [debug] Recursive field result for left: 0
11:56:06.379 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.379 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.379 [debug] Recursive field result for right: 0
11:56:06.379 [debug] do_fold called with non-variant data: 0
11:56:06.379 [debug] do_fold called with non-variant data: 0
11:56:06.379 [debug] Recursive field result for right: 9
11:56:06.379 [debug] do_fold called with non-variant data: 9
11:56:06.379 [debug] do_fold called with non-variant data: 9
11:56:06.379 [debug] Recursive field result for left: 26
11:56:06.379 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.379 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.379 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.379 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.379 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.379 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.379 [debug] Recursive field result for left: 0
11:56:06.379 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.379 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.379 [debug] Recursive field result for right: 0
11:56:06.379 [debug] do_fold called with non-variant data: 0
11:56:06.379 [debug] do_fold called with non-variant data: 0
11:56:06.379 [debug] Recursive field result for left: 9
11:56:06.379 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.379 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.379 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.379 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.379 [debug] Recursive field result for left: 0
11:56:06.379 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.379 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.379 [debug] Recursive field result for right: 0
11:56:06.379 [debug] do_fold called with non-variant data: 0
11:56:06.379 [debug] do_fold called with non-variant data: 0
11:56:06.379 [debug] Recursive field result for right: 9
11:56:06.379 [debug] do_fold called with non-variant data: 9
11:56:06.379 [debug] do_fold called with non-variant data: 9
11:56:06.379 [debug] Recursive field result for right: 26
11:56:06.379 [debug] do_fold called with non-variant data: 26
11:56:06.379 [debug] do_fold called with non-variant data: 26
11:56:06.379 [debug] Recursive field result for right: 59
11:56:06.379 [debug] do_fold called with non-variant data: 59
11:56:06.379 [debug] do_fold called with non-variant data: 59
11:56:06.379 [debug] Recursive field result for right: 124
11:56:06.379 [debug] do_fold called with non-variant data: 124
11:56:06.379 [debug] do_fold called with non-variant data: 124
11:56:06.379 [debug] Recursive field result for right: 253
11:56:06.379 [debug] do_fold called with non-variant data: 253
11:56:06.379 [debug] do_fold called with non-variant data: 253
11:56:06.379 [debug] Recursive field result for left: 510
11:56:06.379 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.379 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.380 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.380 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.380 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.380 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.380 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.380 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.380 [debug] Recursive field result for left: 0
11:56:06.380 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.380 [debug] Recursive field result for right: 0
11:56:06.380 [debug] do_fold called with non-variant data: 0
11:56:06.380 [debug] do_fold called with non-variant data: 0
11:56:06.380 [debug] Recursive field result for left: 9
11:56:06.380 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.380 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.380 [debug] Recursive field result for left: 0
11:56:06.380 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.380 [debug] Recursive field result for right: 0
11:56:06.380 [debug] do_fold called with non-variant data: 0
11:56:06.380 [debug] do_fold called with non-variant data: 0
11:56:06.380 [debug] Recursive field result for right: 9
11:56:06.380 [debug] do_fold called with non-variant data: 9
11:56:06.380 [debug] do_fold called with non-variant data: 9
11:56:06.380 [debug] Recursive field result for left: 26
11:56:06.380 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.380 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.380 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.380 [debug] Recursive field result for left: 0
11:56:06.380 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.380 [debug] Recursive field result for right: 0
11:56:06.380 [debug] do_fold called with non-variant data: 0
11:56:06.380 [debug] do_fold called with non-variant data: 0
11:56:06.380 [debug] Recursive field result for left: 9
11:56:06.380 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.380 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.380 [debug] Recursive field result for left: 0
11:56:06.380 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.380 [debug] Recursive field result for right: 0
11:56:06.380 [debug] do_fold called with non-variant data: 0
11:56:06.380 [debug] do_fold called with non-variant data: 0
11:56:06.380 [debug] Recursive field result for right: 9
11:56:06.380 [debug] do_fold called with non-variant data: 9
11:56:06.380 [debug] do_fold called with non-variant data: 9
11:56:06.380 [debug] Recursive field result for right: 26
11:56:06.380 [debug] do_fold called with non-variant data: 26
11:56:06.380 [debug] do_fold called with non-variant data: 26
11:56:06.380 [debug] Recursive field result for left: 59
11:56:06.380 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.380 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.380 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.380 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.381 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.381 [debug] Recursive field result for left: 0
11:56:06.381 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.381 [debug] Recursive field result for right: 0
11:56:06.381 [debug] do_fold called with non-variant data: 0
11:56:06.381 [debug] do_fold called with non-variant data: 0
11:56:06.381 [debug] Recursive field result for left: 9
11:56:06.381 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.381 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.381 [debug] Recursive field result for left: 0
11:56:06.381 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.381 [debug] Recursive field result for right: 0
11:56:06.381 [debug] do_fold called with non-variant data: 0
11:56:06.381 [debug] do_fold called with non-variant data: 0
11:56:06.381 [debug] Recursive field result for right: 9
11:56:06.381 [debug] do_fold called with non-variant data: 9
11:56:06.381 [debug] do_fold called with non-variant data: 9
11:56:06.381 [debug] Recursive field result for left: 26
11:56:06.381 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.381 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.381 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.381 [debug] Recursive field result for left: 0
11:56:06.381 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.381 [debug] Recursive field result for right: 0
11:56:06.381 [debug] do_fold called with non-variant data: 0
11:56:06.381 [debug] do_fold called with non-variant data: 0
11:56:06.381 [debug] Recursive field result for left: 9
11:56:06.381 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.381 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.381 [debug] Recursive field result for left: 0
11:56:06.381 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.381 [debug] Recursive field result for right: 0
11:56:06.381 [debug] do_fold called with non-variant data: 0
11:56:06.381 [debug] do_fold called with non-variant data: 0
11:56:06.381 [debug] Recursive field result for right: 9
11:56:06.381 [debug] do_fold called with non-variant data: 9
11:56:06.381 [debug] do_fold called with non-variant data: 9
11:56:06.381 [debug] Recursive field result for right: 26
11:56:06.381 [debug] do_fold called with non-variant data: 26
11:56:06.381 [debug] do_fold called with non-variant data: 26
11:56:06.381 [debug] Recursive field result for right: 59
11:56:06.381 [debug] do_fold called with non-variant data: 59
11:56:06.381 [debug] do_fold called with non-variant data: 59
11:56:06.381 [debug] Recursive field result for left: 124
11:56:06.381 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.381 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.381 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.381 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.382 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.382 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.382 [debug] Recursive field result for left: 0
11:56:06.382 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.382 [debug] Recursive field result for right: 0
11:56:06.382 [debug] do_fold called with non-variant data: 0
11:56:06.382 [debug] do_fold called with non-variant data: 0
11:56:06.382 [debug] Recursive field result for left: 9
11:56:06.382 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.382 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.382 [debug] Recursive field result for left: 0
11:56:06.382 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.382 [debug] Recursive field result for right: 0
11:56:06.382 [debug] do_fold called with non-variant data: 0
11:56:06.382 [debug] do_fold called with non-variant data: 0
11:56:06.382 [debug] Recursive field result for right: 9
11:56:06.382 [debug] do_fold called with non-variant data: 9
11:56:06.382 [debug] do_fold called with non-variant data: 9
11:56:06.382 [debug] Recursive field result for left: 26
11:56:06.382 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.382 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.382 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.382 [debug] Recursive field result for left: 0
11:56:06.382 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.382 [debug] Recursive field result for right: 0
11:56:06.382 [debug] do_fold called with non-variant data: 0
11:56:06.382 [debug] do_fold called with non-variant data: 0
11:56:06.382 [debug] Recursive field result for left: 9
11:56:06.382 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.382 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.382 [debug] Recursive field result for left: 0
11:56:06.382 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.382 [debug] Recursive field result for right: 0
11:56:06.382 [debug] do_fold called with non-variant data: 0
11:56:06.382 [debug] do_fold called with non-variant data: 0
11:56:06.382 [debug] Recursive field result for right: 9
11:56:06.382 [debug] do_fold called with non-variant data: 9
11:56:06.382 [debug] do_fold called with non-variant data: 9
11:56:06.382 [debug] Recursive field result for right: 26
11:56:06.382 [debug] do_fold called with non-variant data: 26
11:56:06.382 [debug] do_fold called with non-variant data: 26
11:56:06.382 [debug] Recursive field result for left: 59
11:56:06.382 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.382 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.383 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.383 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.383 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.383 [debug] Recursive field result for left: 0
11:56:06.383 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.383 [debug] Recursive field result for right: 0
11:56:06.383 [debug] do_fold called with non-variant data: 0
11:56:06.383 [debug] do_fold called with non-variant data: 0
11:56:06.383 [debug] Recursive field result for left: 9
11:56:06.383 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.383 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.383 [debug] Recursive field result for left: 0
11:56:06.383 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.383 [debug] Recursive field result for right: 0
11:56:06.383 [debug] do_fold called with non-variant data: 0
11:56:06.383 [debug] do_fold called with non-variant data: 0
11:56:06.383 [debug] Recursive field result for right: 9
11:56:06.383 [debug] do_fold called with non-variant data: 9
11:56:06.383 [debug] do_fold called with non-variant data: 9
11:56:06.383 [debug] Recursive field result for left: 26
11:56:06.383 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.383 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.383 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.383 [debug] Recursive field result for left: 0
11:56:06.383 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.383 [debug] Recursive field result for right: 0
11:56:06.383 [debug] do_fold called with non-variant data: 0
11:56:06.383 [debug] do_fold called with non-variant data: 0
11:56:06.383 [debug] Recursive field result for left: 9
11:56:06.383 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.383 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.383 [debug] Recursive field result for left: 0
11:56:06.383 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.383 [debug] Recursive field result for right: 0
11:56:06.383 [debug] do_fold called with non-variant data: 0
11:56:06.383 [debug] do_fold called with non-variant data: 0
11:56:06.383 [debug] Recursive field result for right: 9
11:56:06.383 [debug] do_fold called with non-variant data: 9
11:56:06.383 [debug] do_fold called with non-variant data: 9
11:56:06.383 [debug] Recursive field result for right: 26
11:56:06.383 [debug] do_fold called with non-variant data: 26
11:56:06.383 [debug] do_fold called with non-variant data: 26
11:56:06.383 [debug] Recursive field result for right: 59
11:56:06.383 [debug] do_fold called with non-variant data: 59
11:56:06.383 [debug] do_fold called with non-variant data: 59
11:56:06.383 [debug] Recursive field result for right: 124
11:56:06.383 [debug] do_fold called with non-variant data: 124
11:56:06.383 [debug] do_fold called with non-variant data: 124
11:56:06.383 [debug] Recursive field result for left: 253
11:56:06.383 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.383 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.383 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.384 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.384 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.384 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.384 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.384 [debug] Recursive field result for left: 0
11:56:06.384 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.384 [debug] Recursive field result for right: 0
11:56:06.384 [debug] do_fold called with non-variant data: 0
11:56:06.384 [debug] do_fold called with non-variant data: 0
11:56:06.384 [debug] Recursive field result for left: 9
11:56:06.384 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.384 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.384 [debug] Recursive field result for left: 0
11:56:06.384 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.384 [debug] Recursive field result for right: 0
11:56:06.384 [debug] do_fold called with non-variant data: 0
11:56:06.384 [debug] do_fold called with non-variant data: 0
11:56:06.384 [debug] Recursive field result for right: 9
11:56:06.384 [debug] do_fold called with non-variant data: 9
11:56:06.384 [debug] do_fold called with non-variant data: 9
11:56:06.384 [debug] Recursive field result for left: 26
11:56:06.384 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.384 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.384 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.384 [debug] Recursive field result for left: 0
11:56:06.384 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.384 [debug] Recursive field result for right: 0
11:56:06.384 [debug] do_fold called with non-variant data: 0
11:56:06.384 [debug] do_fold called with non-variant data: 0
11:56:06.384 [debug] Recursive field result for left: 9
11:56:06.384 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.384 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.384 [debug] Recursive field result for left: 0
11:56:06.384 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.384 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.384 [debug] Recursive field result for right: 0
11:56:06.384 [debug] do_fold called with non-variant data: 0
11:56:06.384 [debug] do_fold called with non-variant data: 0
11:56:06.384 [debug] Recursive field result for right: 9
11:56:06.384 [debug] do_fold called with non-variant data: 9
11:56:06.384 [debug] do_fold called with non-variant data: 9
11:56:06.384 [debug] Recursive field result for right: 26
11:56:06.384 [debug] do_fold called with non-variant data: 26
11:56:06.384 [debug] do_fold called with non-variant data: 26
11:56:06.384 [debug] Recursive field result for left: 59
11:56:06.384 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.385 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.385 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.385 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.385 [debug] Recursive field result for left: 0
11:56:06.385 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.385 [debug] Recursive field result for right: 0
11:56:06.385 [debug] do_fold called with non-variant data: 0
11:56:06.385 [debug] do_fold called with non-variant data: 0
11:56:06.385 [debug] Recursive field result for left: 9
11:56:06.385 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.385 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.385 [debug] Recursive field result for left: 0
11:56:06.385 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.385 [debug] Recursive field result for right: 0
11:56:06.385 [debug] do_fold called with non-variant data: 0
11:56:06.385 [debug] do_fold called with non-variant data: 0
11:56:06.385 [debug] Recursive field result for right: 9
11:56:06.385 [debug] do_fold called with non-variant data: 9
11:56:06.385 [debug] do_fold called with non-variant data: 9
11:56:06.385 [debug] Recursive field result for left: 26
11:56:06.385 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.385 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.385 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.385 [debug] Recursive field result for left: 0
11:56:06.385 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.385 [debug] Recursive field result for right: 0
11:56:06.385 [debug] do_fold called with non-variant data: 0
11:56:06.385 [debug] do_fold called with non-variant data: 0
11:56:06.385 [debug] Recursive field result for left: 9
11:56:06.385 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.385 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.385 [debug] Recursive field result for left: 0
11:56:06.385 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.385 [debug] Recursive field result for right: 0
11:56:06.385 [debug] do_fold called with non-variant data: 0
11:56:06.385 [debug] do_fold called with non-variant data: 0
11:56:06.385 [debug] Recursive field result for right: 9
11:56:06.385 [debug] do_fold called with non-variant data: 9
11:56:06.385 [debug] do_fold called with non-variant data: 9
11:56:06.385 [debug] Recursive field result for right: 26
11:56:06.385 [debug] do_fold called with non-variant data: 26
11:56:06.385 [debug] do_fold called with non-variant data: 26
11:56:06.385 [debug] Recursive field result for right: 59
11:56:06.385 [debug] do_fold called with non-variant data: 59
11:56:06.385 [debug] do_fold called with non-variant data: 59
11:56:06.385 [debug] Recursive field result for left: 124
11:56:06.385 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.385 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.385 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.385 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.385 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.385 [debug] Recursive field result for left: 0
11:56:06.385 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.385 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.385 [debug] Recursive field result for right: 0
11:56:06.385 [debug] do_fold called with non-variant data: 0
11:56:06.385 [debug] do_fold called with non-variant data: 0
11:56:06.385 [debug] Recursive field result for left: 9
11:56:06.385 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for left: 0
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for right: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] Recursive field result for right: 9
11:56:06.386 [debug] do_fold called with non-variant data: 9
11:56:06.386 [debug] do_fold called with non-variant data: 9
11:56:06.386 [debug] Recursive field result for left: 26
11:56:06.386 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.386 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for left: 0
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for right: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] Recursive field result for left: 9
11:56:06.386 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for left: 0
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for right: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] Recursive field result for right: 9
11:56:06.386 [debug] do_fold called with non-variant data: 9
11:56:06.386 [debug] do_fold called with non-variant data: 9
11:56:06.386 [debug] Recursive field result for right: 26
11:56:06.386 [debug] do_fold called with non-variant data: 26
11:56:06.386 [debug] do_fold called with non-variant data: 26
11:56:06.386 [debug] Recursive field result for left: 59
11:56:06.386 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.386 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.386 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for left: 0
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for right: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] Recursive field result for left: 9
11:56:06.386 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for left: 0
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for right: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] Recursive field result for right: 9
11:56:06.386 [debug] do_fold called with non-variant data: 9
11:56:06.386 [debug] do_fold called with non-variant data: 9
11:56:06.386 [debug] Recursive field result for left: 26
11:56:06.386 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.386 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for left: 0
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for right: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] Recursive field result for left: 9
11:56:06.386 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for left: 0
11:56:06.386 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.386 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.386 [debug] Recursive field result for right: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] do_fold called with non-variant data: 0
11:56:06.386 [debug] Recursive field result for right: 9
11:56:06.386 [debug] do_fold called with non-variant data: 9
11:56:06.386 [debug] do_fold called with non-variant data: 9
11:56:06.386 [debug] Recursive field result for right: 26
11:56:06.386 [debug] do_fold called with non-variant data: 26
11:56:06.386 [debug] do_fold called with non-variant data: 26
11:56:06.386 [debug] Recursive field result for right: 59
11:56:06.386 [debug] do_fold called with non-variant data: 59
11:56:06.386 [debug] do_fold called with non-variant data: 59
11:56:06.386 [debug] Recursive field result for right: 124
11:56:06.386 [debug] do_fold called with non-variant data: 124
11:56:06.386 [debug] do_fold called with non-variant data: 124
11:56:06.386 [debug] Recursive field result for right: 253
11:56:06.386 [debug] do_fold called with non-variant data: 253
11:56:06.386 [debug] do_fold called with non-variant data: 253
11:56:06.386 [debug] Recursive field result for right: 510
11:56:06.386 [debug] do_fold called with non-variant data: 510
11:56:06.386 [debug] do_fold called with non-variant data: 510
11:56:06.386 [debug] Recursive field result for right: 1023
11:56:06.386 [debug] do_fold called with non-variant data: 1023
11:56:06.386 [debug] do_fold called with non-variant data: 1023
11:56:06.386 [debug] Recursive field result for right: 2048
11:56:06.386 [debug] do_fold called with non-variant data: 2048
11:56:06.386 [debug] do_fold called with non-variant data: 2048
11:56:06.386 [debug] Recursive field result for left: 4097
11:56:06.390 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :le (truncated)
11:56:06.392 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{varian (truncated)
11:56:06.393 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val (truncated)
11:56:06.394 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf (truncated)
11:56:06.395 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, variant_type: :node, state: nil
11:56:06.395 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.395 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.396 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.396 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.396 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.396 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.396 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.396 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.396 [debug] Recursive field result for left: 0
11:56:06.396 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.396 [debug] Recursive field result for right: 0
11:56:06.396 [debug] do_fold called with non-variant data: 0
11:56:06.396 [debug] do_fold called with non-variant data: 0
11:56:06.396 [debug] Recursive field result for left: 9
11:56:06.396 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.396 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.396 [debug] Recursive field result for left: 0
11:56:06.396 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.396 [debug] Recursive field result for right: 0
11:56:06.396 [debug] do_fold called with non-variant data: 0
11:56:06.396 [debug] do_fold called with non-variant data: 0
11:56:06.396 [debug] Recursive field result for right: 9
11:56:06.396 [debug] do_fold called with non-variant data: 9
11:56:06.396 [debug] do_fold called with non-variant data: 9
11:56:06.396 [debug] Recursive field result for left: 26
11:56:06.396 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.396 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.396 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.396 [debug] Recursive field result for left: 0
11:56:06.396 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.396 [debug] Recursive field result for right: 0
11:56:06.396 [debug] do_fold called with non-variant data: 0
11:56:06.396 [debug] do_fold called with non-variant data: 0
11:56:06.396 [debug] Recursive field result for left: 9
11:56:06.396 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.396 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.396 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.396 [debug] Recursive field result for left: 0
11:56:06.397 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.397 [debug] Recursive field result for right: 0
11:56:06.397 [debug] do_fold called with non-variant data: 0
11:56:06.397 [debug] do_fold called with non-variant data: 0
11:56:06.397 [debug] Recursive field result for right: 9
11:56:06.397 [debug] do_fold called with non-variant data: 9
11:56:06.397 [debug] do_fold called with non-variant data: 9
11:56:06.397 [debug] Recursive field result for right: 26
11:56:06.397 [debug] do_fold called with non-variant data: 26
11:56:06.397 [debug] do_fold called with non-variant data: 26
11:56:06.397 [debug] Recursive field result for left: 59
11:56:06.397 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.397 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.397 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.397 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.397 [debug] Recursive field result for left: 0
11:56:06.397 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.397 [debug] Recursive field result for right: 0
11:56:06.397 [debug] do_fold called with non-variant data: 0
11:56:06.397 [debug] do_fold called with non-variant data: 0
11:56:06.397 [debug] Recursive field result for left: 9
11:56:06.397 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.397 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.397 [debug] Recursive field result for left: 0
11:56:06.397 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.397 [debug] Recursive field result for right: 0
11:56:06.397 [debug] do_fold called with non-variant data: 0
11:56:06.397 [debug] do_fold called with non-variant data: 0
11:56:06.397 [debug] Recursive field result for right: 9
11:56:06.397 [debug] do_fold called with non-variant data: 9
11:56:06.397 [debug] do_fold called with non-variant data: 9
11:56:06.397 [debug] Recursive field result for left: 26
11:56:06.397 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.397 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.397 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.397 [debug] Recursive field result for left: 0
11:56:06.397 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.397 [debug] Recursive field result for right: 0
11:56:06.397 [debug] do_fold called with non-variant data: 0
11:56:06.397 [debug] do_fold called with non-variant data: 0
11:56:06.397 [debug] Recursive field result for left: 9
11:56:06.397 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.397 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.397 [debug] Recursive field result for left: 0
11:56:06.397 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.397 [debug] Recursive field result for right: 0
11:56:06.397 [debug] do_fold called with non-variant data: 0
11:56:06.397 [debug] do_fold called with non-variant data: 0
11:56:06.397 [debug] Recursive field result for right: 9
11:56:06.397 [debug] do_fold called with non-variant data: 9
11:56:06.397 [debug] do_fold called with non-variant data: 9
11:56:06.397 [debug] Recursive field result for right: 26
11:56:06.397 [debug] do_fold called with non-variant data: 26
11:56:06.397 [debug] do_fold called with non-variant data: 26
11:56:06.397 [debug] Recursive field result for right: 59
11:56:06.397 [debug] do_fold called with non-variant data: 59
11:56:06.397 [debug] do_fold called with non-variant data: 59
11:56:06.397 [debug] Recursive field result for left: 124
11:56:06.397 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.397 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.397 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.398 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.398 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.398 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.398 [debug] Recursive field result for left: 0
11:56:06.398 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.398 [debug] Recursive field result for right: 0
11:56:06.398 [debug] do_fold called with non-variant data: 0
11:56:06.398 [debug] do_fold called with non-variant data: 0
11:56:06.398 [debug] Recursive field result for left: 9
11:56:06.398 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.398 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.398 [debug] Recursive field result for left: 0
11:56:06.398 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.398 [debug] Recursive field result for right: 0
11:56:06.398 [debug] do_fold called with non-variant data: 0
11:56:06.398 [debug] do_fold called with non-variant data: 0
11:56:06.398 [debug] Recursive field result for right: 9
11:56:06.398 [debug] do_fold called with non-variant data: 9
11:56:06.398 [debug] do_fold called with non-variant data: 9
11:56:06.398 [debug] Recursive field result for left: 26
11:56:06.398 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.398 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.398 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.398 [debug] Recursive field result for left: 0
11:56:06.398 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.398 [debug] Recursive field result for right: 0
11:56:06.398 [debug] do_fold called with non-variant data: 0
11:56:06.398 [debug] do_fold called with non-variant data: 0
11:56:06.398 [debug] Recursive field result for left: 9
11:56:06.398 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.398 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.398 [debug] Recursive field result for left: 0
11:56:06.398 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.398 [debug] Recursive field result for right: 0
11:56:06.398 [debug] do_fold called with non-variant data: 0
11:56:06.398 [debug] do_fold called with non-variant data: 0
11:56:06.398 [debug] Recursive field result for right: 9
11:56:06.398 [debug] do_fold called with non-variant data: 9
11:56:06.398 [debug] do_fold called with non-variant data: 9
11:56:06.398 [debug] Recursive field result for right: 26
11:56:06.398 [debug] do_fold called with non-variant data: 26
11:56:06.398 [debug] do_fold called with non-variant data: 26
11:56:06.398 [debug] Recursive field result for left: 59
11:56:06.398 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.398 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.398 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.399 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.399 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.399 [debug] Recursive field result for left: 0
11:56:06.399 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.399 [debug] Recursive field result for right: 0
11:56:06.399 [debug] do_fold called with non-variant data: 0
11:56:06.399 [debug] do_fold called with non-variant data: 0
11:56:06.399 [debug] Recursive field result for left: 9
11:56:06.399 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.399 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.399 [debug] Recursive field result for left: 0
11:56:06.399 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.399 [debug] Recursive field result for right: 0
11:56:06.399 [debug] do_fold called with non-variant data: 0
11:56:06.399 [debug] do_fold called with non-variant data: 0
11:56:06.399 [debug] Recursive field result for right: 9
11:56:06.399 [debug] do_fold called with non-variant data: 9
11:56:06.399 [debug] do_fold called with non-variant data: 9
11:56:06.399 [debug] Recursive field result for left: 26
11:56:06.399 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.399 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.399 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.399 [debug] Recursive field result for left: 0
11:56:06.399 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.399 [debug] Recursive field result for right: 0
11:56:06.399 [debug] do_fold called with non-variant data: 0
11:56:06.399 [debug] do_fold called with non-variant data: 0
11:56:06.399 [debug] Recursive field result for left: 9
11:56:06.399 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.399 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.399 [debug] Recursive field result for left: 0
11:56:06.399 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.399 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.399 [debug] Recursive field result for right: 0
11:56:06.399 [debug] do_fold called with non-variant data: 0
11:56:06.399 [debug] do_fold called with non-variant data: 0
11:56:06.399 [debug] Recursive field result for right: 9
11:56:06.399 [debug] do_fold called with non-variant data: 9
11:56:06.399 [debug] do_fold called with non-variant data: 9
11:56:06.399 [debug] Recursive field result for right: 26
11:56:06.399 [debug] do_fold called with non-variant data: 26
11:56:06.399 [debug] do_fold called with non-variant data: 26
11:56:06.399 [debug] Recursive field result for right: 59
11:56:06.399 [debug] do_fold called with non-variant data: 59
11:56:06.399 [debug] do_fold called with non-variant data: 59
11:56:06.399 [debug] Recursive field result for right: 124
11:56:06.399 [debug] do_fold called with non-variant data: 124
11:56:06.399 [debug] do_fold called with non-variant data: 124
11:56:06.399 [debug] Recursive field result for left: 253
11:56:06.400 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.400 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.400 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.400 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.400 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.400 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.400 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.400 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.400 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.400 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.400 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.400 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.400 [debug] Recursive field result for left: 0
11:56:06.400 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.400 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.400 [debug] Recursive field result for right: 0
11:56:06.400 [debug] do_fold called with non-variant data: 0
11:56:06.400 [debug] do_fold called with non-variant data: 0
11:56:06.400 [debug] Recursive field result for left: 9
11:56:06.400 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.401 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.401 [debug] Recursive field result for left: 0
11:56:06.401 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.401 [debug] Recursive field result for right: 0
11:56:06.401 [debug] do_fold called with non-variant data: 0
11:56:06.401 [debug] do_fold called with non-variant data: 0
11:56:06.401 [debug] Recursive field result for right: 9
11:56:06.401 [debug] do_fold called with non-variant data: 9
11:56:06.401 [debug] do_fold called with non-variant data: 9
11:56:06.401 [debug] Recursive field result for left: 26
11:56:06.401 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.401 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.401 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.401 [debug] Recursive field result for left: 0
11:56:06.401 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.401 [debug] Recursive field result for right: 0
11:56:06.401 [debug] do_fold called with non-variant data: 0
11:56:06.401 [debug] do_fold called with non-variant data: 0
11:56:06.401 [debug] Recursive field result for left: 9
11:56:06.401 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.401 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.401 [debug] Recursive field result for left: 0
11:56:06.401 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.401 [debug] Recursive field result for right: 0
11:56:06.401 [debug] do_fold called with non-variant data: 0
11:56:06.401 [debug] do_fold called with non-variant data: 0
11:56:06.401 [debug] Recursive field result for right: 9
11:56:06.401 [debug] do_fold called with non-variant data: 9
11:56:06.401 [debug] do_fold called with non-variant data: 9
11:56:06.401 [debug] Recursive field result for right: 26
11:56:06.401 [debug] do_fold called with non-variant data: 26
11:56:06.401 [debug] do_fold called with non-variant data: 26
11:56:06.401 [debug] Recursive field result for left: 59
11:56:06.401 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.401 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.401 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.401 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.401 [debug] Recursive field result for left: 0
11:56:06.401 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.401 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.401 [debug] Recursive field result for right: 0
11:56:06.401 [debug] do_fold called with non-variant data: 0
11:56:06.401 [debug] do_fold called with non-variant data: 0
11:56:06.401 [debug] Recursive field result for left: 9
11:56:06.402 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.402 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.402 [debug] Recursive field result for left: 0
11:56:06.402 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.402 [debug] Recursive field result for right: 0
11:56:06.402 [debug] do_fold called with non-variant data: 0
11:56:06.402 [debug] do_fold called with non-variant data: 0
11:56:06.402 [debug] Recursive field result for right: 9
11:56:06.402 [debug] do_fold called with non-variant data: 9
11:56:06.402 [debug] do_fold called with non-variant data: 9
11:56:06.402 [debug] Recursive field result for left: 26
11:56:06.402 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.402 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.402 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.402 [debug] Recursive field result for left: 0
11:56:06.402 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.402 [debug] Recursive field result for right: 0
11:56:06.402 [debug] do_fold called with non-variant data: 0
11:56:06.402 [debug] do_fold called with non-variant data: 0
11:56:06.402 [debug] Recursive field result for left: 9
11:56:06.402 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.402 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.402 [debug] Recursive field result for left: 0
11:56:06.402 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.402 [debug] Recursive field result for right: 0
11:56:06.402 [debug] do_fold called with non-variant data: 0
11:56:06.402 [debug] do_fold called with non-variant data: 0
11:56:06.402 [debug] Recursive field result for right: 9
11:56:06.402 [debug] do_fold called with non-variant data: 9
11:56:06.402 [debug] do_fold called with non-variant data: 9
11:56:06.402 [debug] Recursive field result for right: 26
11:56:06.402 [debug] do_fold called with non-variant data: 26
11:56:06.402 [debug] do_fold called with non-variant data: 26
11:56:06.402 [debug] Recursive field result for right: 59
11:56:06.402 [debug] do_fold called with non-variant data: 59
11:56:06.402 [debug] do_fold called with non-variant data: 59
11:56:06.402 [debug] Recursive field result for left: 124
11:56:06.402 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.402 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.402 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.402 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.402 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.402 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.403 [debug] Recursive field result for left: 0
11:56:06.403 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.403 [debug] Recursive field result for right: 0
11:56:06.403 [debug] do_fold called with non-variant data: 0
11:56:06.403 [debug] do_fold called with non-variant data: 0
11:56:06.403 [debug] Recursive field result for left: 9
11:56:06.403 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.403 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.403 [debug] Recursive field result for left: 0
11:56:06.403 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.403 [debug] Recursive field result for right: 0
11:56:06.403 [debug] do_fold called with non-variant data: 0
11:56:06.403 [debug] do_fold called with non-variant data: 0
11:56:06.403 [debug] Recursive field result for right: 9
11:56:06.403 [debug] do_fold called with non-variant data: 9
11:56:06.403 [debug] do_fold called with non-variant data: 9
11:56:06.403 [debug] Recursive field result for left: 26
11:56:06.403 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.403 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.403 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.403 [debug] Recursive field result for left: 0
11:56:06.403 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.403 [debug] Recursive field result for right: 0
11:56:06.403 [debug] do_fold called with non-variant data: 0
11:56:06.403 [debug] do_fold called with non-variant data: 0
11:56:06.403 [debug] Recursive field result for left: 9
11:56:06.403 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.403 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.403 [debug] Recursive field result for left: 0
11:56:06.403 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.403 [debug] Recursive field result for right: 0
11:56:06.403 [debug] do_fold called with non-variant data: 0
11:56:06.403 [debug] do_fold called with non-variant data: 0
11:56:06.403 [debug] Recursive field result for right: 9
11:56:06.403 [debug] do_fold called with non-variant data: 9
11:56:06.403 [debug] do_fold called with non-variant data: 9
11:56:06.403 [debug] Recursive field result for right: 26
11:56:06.403 [debug] do_fold called with non-variant data: 26
11:56:06.403 [debug] do_fold called with non-variant data: 26
11:56:06.403 [debug] Recursive field result for left: 59
11:56:06.403 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.403 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.403 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.403 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.403 [debug] Recursive field result for left: 0
11:56:06.403 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.403 [debug] Recursive field result for right: 0
11:56:06.403 [debug] do_fold called with non-variant data: 0
11:56:06.403 [debug] do_fold called with non-variant data: 0
11:56:06.403 [debug] Recursive field result for left: 9
11:56:06.403 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.403 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.403 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.403 [debug] Recursive field result for left: 0
11:56:06.403 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.404 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.404 [debug] Recursive field result for right: 0
11:56:06.404 [debug] do_fold called with non-variant data: 0
11:56:06.404 [debug] do_fold called with non-variant data: 0
11:56:06.404 [debug] Recursive field result for right: 9
11:56:06.404 [debug] do_fold called with non-variant data: 9
11:56:06.404 [debug] do_fold called with non-variant data: 9
11:56:06.404 [debug] Recursive field result for left: 26
11:56:06.404 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.404 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.404 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.404 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.404 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.404 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.404 [debug] Recursive field result for left: 0
11:56:06.404 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.404 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.404 [debug] Recursive field result for right: 0
11:56:06.404 [debug] do_fold called with non-variant data: 0
11:56:06.404 [debug] do_fold called with non-variant data: 0
11:56:06.404 [debug] Recursive field result for left: 9
11:56:06.404 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.404 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.404 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.404 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.404 [debug] Recursive field result for left: 0
11:56:06.404 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.404 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.404 [debug] Recursive field result for right: 0
11:56:06.404 [debug] do_fold called with non-variant data: 0
11:56:06.404 [debug] do_fold called with non-variant data: 0
11:56:06.404 [debug] Recursive field result for right: 9
11:56:06.404 [debug] do_fold called with non-variant data: 9
11:56:06.404 [debug] do_fold called with non-variant data: 9
11:56:06.404 [debug] Recursive field result for right: 26
11:56:06.404 [debug] do_fold called with non-variant data: 26
11:56:06.404 [debug] do_fold called with non-variant data: 26
11:56:06.404 [debug] Recursive field result for right: 59
11:56:06.404 [debug] do_fold called with non-variant data: 59
11:56:06.404 [debug] do_fold called with non-variant data: 59
11:56:06.404 [debug] Recursive field result for right: 124
11:56:06.404 [debug] do_fold called with non-variant data: 124
11:56:06.404 [debug] do_fold called with non-variant data: 124
11:56:06.404 [debug] Recursive field result for right: 253
11:56:06.404 [debug] do_fold called with non-variant data: 253
11:56:06.404 [debug] do_fold called with non-variant data: 253
11:56:06.404 [debug] Recursive field result for left: 510
11:56:06.404 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.405 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.405 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.405 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.405 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.405 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.405 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.405 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.405 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.405 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.405 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.406 [debug] Recursive field result for left: 0
11:56:06.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.406 [debug] Recursive field result for right: 0
11:56:06.406 [debug] do_fold called with non-variant data: 0
11:56:06.406 [debug] do_fold called with non-variant data: 0
11:56:06.406 [debug] Recursive field result for left: 9
11:56:06.406 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.406 [debug] Recursive field result for left: 0
11:56:06.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.406 [debug] Recursive field result for right: 0
11:56:06.406 [debug] do_fold called with non-variant data: 0
11:56:06.406 [debug] do_fold called with non-variant data: 0
11:56:06.406 [debug] Recursive field result for right: 9
11:56:06.406 [debug] do_fold called with non-variant data: 9
11:56:06.406 [debug] do_fold called with non-variant data: 9
11:56:06.406 [debug] Recursive field result for left: 26
11:56:06.406 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.406 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.406 [debug] Recursive field result for left: 0
11:56:06.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.406 [debug] Recursive field result for right: 0
11:56:06.406 [debug] do_fold called with non-variant data: 0
11:56:06.406 [debug] do_fold called with non-variant data: 0
11:56:06.406 [debug] Recursive field result for left: 9
11:56:06.406 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.406 [debug] Recursive field result for left: 0
11:56:06.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.406 [debug] Recursive field result for right: 0
11:56:06.406 [debug] do_fold called with non-variant data: 0
11:56:06.406 [debug] do_fold called with non-variant data: 0
11:56:06.406 [debug] Recursive field result for right: 9
11:56:06.406 [debug] do_fold called with non-variant data: 9
11:56:06.406 [debug] do_fold called with non-variant data: 9
11:56:06.406 [debug] Recursive field result for right: 26
11:56:06.406 [debug] do_fold called with non-variant data: 26
11:56:06.406 [debug] do_fold called with non-variant data: 26
11:56:06.406 [debug] Recursive field result for left: 59
11:56:06.406 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.406 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.406 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.406 [debug] Recursive field result for left: 0
11:56:06.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.406 [debug] Recursive field result for right: 0
11:56:06.406 [debug] do_fold called with non-variant data: 0
11:56:06.406 [debug] do_fold called with non-variant data: 0
11:56:06.406 [debug] Recursive field result for left: 9
11:56:06.406 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.406 [debug] Recursive field result for left: 0
11:56:06.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.406 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.407 [debug] Recursive field result for right: 0
11:56:06.407 [debug] do_fold called with non-variant data: 0
11:56:06.407 [debug] do_fold called with non-variant data: 0
11:56:06.407 [debug] Recursive field result for right: 9
11:56:06.407 [debug] do_fold called with non-variant data: 9
11:56:06.407 [debug] do_fold called with non-variant data: 9
11:56:06.407 [debug] Recursive field result for left: 26
11:56:06.407 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.407 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.407 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.407 [debug] Recursive field result for left: 0
11:56:06.407 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.407 [debug] Recursive field result for right: 0
11:56:06.407 [debug] do_fold called with non-variant data: 0
11:56:06.407 [debug] do_fold called with non-variant data: 0
11:56:06.407 [debug] Recursive field result for left: 9
11:56:06.407 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.407 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.407 [debug] Recursive field result for left: 0
11:56:06.407 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.407 [debug] Recursive field result for right: 0
11:56:06.407 [debug] do_fold called with non-variant data: 0
11:56:06.407 [debug] do_fold called with non-variant data: 0
11:56:06.407 [debug] Recursive field result for right: 9
11:56:06.407 [debug] do_fold called with non-variant data: 9
11:56:06.407 [debug] do_fold called with non-variant data: 9
11:56:06.407 [debug] Recursive field result for right: 26
11:56:06.407 [debug] do_fold called with non-variant data: 26
11:56:06.407 [debug] do_fold called with non-variant data: 26
11:56:06.407 [debug] Recursive field result for right: 59
11:56:06.407 [debug] do_fold called with non-variant data: 59
11:56:06.407 [debug] do_fold called with non-variant data: 59
11:56:06.407 [debug] Recursive field result for left: 124
11:56:06.407 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.407 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.407 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.407 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.407 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.407 [debug] Recursive field result for left: 0
11:56:06.407 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.407 [debug] Recursive field result for right: 0
11:56:06.407 [debug] do_fold called with non-variant data: 0
11:56:06.407 [debug] do_fold called with non-variant data: 0
11:56:06.407 [debug] Recursive field result for left: 9
11:56:06.407 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.407 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.407 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.408 [debug] Recursive field result for left: 0
11:56:06.408 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.408 [debug] Recursive field result for right: 0
11:56:06.408 [debug] do_fold called with non-variant data: 0
11:56:06.408 [debug] do_fold called with non-variant data: 0
11:56:06.408 [debug] Recursive field result for right: 9
11:56:06.408 [debug] do_fold called with non-variant data: 9
11:56:06.408 [debug] do_fold called with non-variant data: 9
11:56:06.408 [debug] Recursive field result for left: 26
11:56:06.408 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.408 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.408 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.408 [debug] Recursive field result for left: 0
11:56:06.408 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.408 [debug] Recursive field result for right: 0
11:56:06.408 [debug] do_fold called with non-variant data: 0
11:56:06.408 [debug] do_fold called with non-variant data: 0
11:56:06.408 [debug] Recursive field result for left: 9
11:56:06.408 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.408 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.408 [debug] Recursive field result for left: 0
11:56:06.408 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.408 [debug] Recursive field result for right: 0
11:56:06.408 [debug] do_fold called with non-variant data: 0
11:56:06.408 [debug] do_fold called with non-variant data: 0
11:56:06.408 [debug] Recursive field result for right: 9
11:56:06.408 [debug] do_fold called with non-variant data: 9
11:56:06.408 [debug] do_fold called with non-variant data: 9
11:56:06.408 [debug] Recursive field result for right: 26
11:56:06.408 [debug] do_fold called with non-variant data: 26
11:56:06.408 [debug] do_fold called with non-variant data: 26
11:56:06.408 [debug] Recursive field result for left: 59
11:56:06.408 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.408 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.408 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.408 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.408 [debug] Recursive field result for left: 0
11:56:06.408 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.408 [debug] Recursive field result for right: 0
11:56:06.408 [debug] do_fold called with non-variant data: 0
11:56:06.408 [debug] do_fold called with non-variant data: 0
11:56:06.408 [debug] Recursive field result for left: 9
11:56:06.408 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.408 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.408 [debug] Recursive field result for left: 0
11:56:06.408 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.408 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.408 [debug] Recursive field result for right: 0
11:56:06.408 [debug] do_fold called with non-variant data: 0
11:56:06.408 [debug] do_fold called with non-variant data: 0
11:56:06.408 [debug] Recursive field result for right: 9
11:56:06.408 [debug] do_fold called with non-variant data: 9
11:56:06.408 [debug] do_fold called with non-variant data: 9
11:56:06.408 [debug] Recursive field result for left: 26
11:56:06.408 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.409 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.409 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.409 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.409 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.409 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.409 [debug] Recursive field result for left: 0
11:56:06.409 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.409 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.409 [debug] Recursive field result for right: 0
11:56:06.409 [debug] do_fold called with non-variant data: 0
11:56:06.409 [debug] do_fold called with non-variant data: 0
11:56:06.409 [debug] Recursive field result for left: 9
11:56:06.409 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.409 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.409 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.409 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.409 [debug] Recursive field result for left: 0
11:56:06.409 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.409 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.409 [debug] Recursive field result for right: 0
11:56:06.409 [debug] do_fold called with non-variant data: 0
11:56:06.409 [debug] do_fold called with non-variant data: 0
11:56:06.409 [debug] Recursive field result for right: 9
11:56:06.409 [debug] do_fold called with non-variant data: 9
11:56:06.409 [debug] do_fold called with non-variant data: 9
11:56:06.409 [debug] Recursive field result for right: 26
11:56:06.409 [debug] do_fold called with non-variant data: 26
11:56:06.409 [debug] do_fold called with non-variant data: 26
11:56:06.409 [debug] Recursive field result for right: 59
11:56:06.409 [debug] do_fold called with non-variant data: 59
11:56:06.409 [debug] do_fold called with non-variant data: 59
11:56:06.409 [debug] Recursive field result for right: 124
11:56:06.409 [debug] do_fold called with non-variant data: 124
11:56:06.409 [debug] do_fold called with non-variant data: 124
11:56:06.409 [debug] Recursive field result for left: 253
11:56:06.409 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.409 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.409 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.409 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.410 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.410 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.410 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.410 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.410 [debug] Recursive field result for left: 0
11:56:06.410 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.410 [debug] Recursive field result for right: 0
11:56:06.410 [debug] do_fold called with non-variant data: 0
11:56:06.410 [debug] do_fold called with non-variant data: 0
11:56:06.410 [debug] Recursive field result for left: 9
11:56:06.410 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.410 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.410 [debug] Recursive field result for left: 0
11:56:06.410 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.410 [debug] Recursive field result for right: 0
11:56:06.410 [debug] do_fold called with non-variant data: 0
11:56:06.410 [debug] do_fold called with non-variant data: 0
11:56:06.410 [debug] Recursive field result for right: 9
11:56:06.410 [debug] do_fold called with non-variant data: 9
11:56:06.410 [debug] do_fold called with non-variant data: 9
11:56:06.410 [debug] Recursive field result for left: 26
11:56:06.410 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.410 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.410 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.410 [debug] Recursive field result for left: 0
11:56:06.410 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.410 [debug] Recursive field result for right: 0
11:56:06.410 [debug] do_fold called with non-variant data: 0
11:56:06.410 [debug] do_fold called with non-variant data: 0
11:56:06.410 [debug] Recursive field result for left: 9
11:56:06.410 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.410 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.410 [debug] Recursive field result for left: 0
11:56:06.410 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.410 [debug] Recursive field result for right: 0
11:56:06.410 [debug] do_fold called with non-variant data: 0
11:56:06.410 [debug] do_fold called with non-variant data: 0
11:56:06.410 [debug] Recursive field result for right: 9
11:56:06.410 [debug] do_fold called with non-variant data: 9
11:56:06.410 [debug] do_fold called with non-variant data: 9
11:56:06.410 [debug] Recursive field result for right: 26
11:56:06.410 [debug] do_fold called with non-variant data: 26
11:56:06.410 [debug] do_fold called with non-variant data: 26
11:56:06.410 [debug] Recursive field result for left: 59
11:56:06.410 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.410 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.410 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.410 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.410 [debug] Recursive field result for left: 0
11:56:06.410 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.410 [debug] Recursive field result for right: 0
11:56:06.410 [debug] do_fold called with non-variant data: 0
11:56:06.410 [debug] do_fold called with non-variant data: 0
11:56:06.410 [debug] Recursive field result for left: 9
11:56:06.410 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.410 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.410 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.410 [debug] Recursive field result for left: 0
11:56:06.411 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.411 [debug] Recursive field result for right: 0
11:56:06.411 [debug] do_fold called with non-variant data: 0
11:56:06.411 [debug] do_fold called with non-variant data: 0
11:56:06.411 [debug] Recursive field result for right: 9
11:56:06.411 [debug] do_fold called with non-variant data: 9
11:56:06.411 [debug] do_fold called with non-variant data: 9
11:56:06.411 [debug] Recursive field result for left: 26
11:56:06.411 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.411 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.411 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.411 [debug] Recursive field result for left: 0
11:56:06.411 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.411 [debug] Recursive field result for right: 0
11:56:06.411 [debug] do_fold called with non-variant data: 0
11:56:06.411 [debug] do_fold called with non-variant data: 0
11:56:06.411 [debug] Recursive field result for left: 9
11:56:06.411 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.411 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.411 [debug] Recursive field result for left: 0
11:56:06.411 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.411 [debug] Recursive field result for right: 0
11:56:06.411 [debug] do_fold called with non-variant data: 0
11:56:06.411 [debug] do_fold called with non-variant data: 0
11:56:06.411 [debug] Recursive field result for right: 9
11:56:06.411 [debug] do_fold called with non-variant data: 9
11:56:06.411 [debug] do_fold called with non-variant data: 9
11:56:06.411 [debug] Recursive field result for right: 26
11:56:06.411 [debug] do_fold called with non-variant data: 26
11:56:06.411 [debug] do_fold called with non-variant data: 26
11:56:06.411 [debug] Recursive field result for right: 59
11:56:06.411 [debug] do_fold called with non-variant data: 59
11:56:06.411 [debug] do_fold called with non-variant data: 59
11:56:06.411 [debug] Recursive field result for left: 124
11:56:06.411 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.411 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.411 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.411 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.411 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.411 [debug] Recursive field result for left: 0
11:56:06.411 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.411 [debug] Recursive field result for right: 0
11:56:06.411 [debug] do_fold called with non-variant data: 0
11:56:06.411 [debug] do_fold called with non-variant data: 0
11:56:06.411 [debug] Recursive field result for left: 9
11:56:06.411 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.411 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.411 [debug] Recursive field result for left: 0
11:56:06.411 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.411 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.411 [debug] Recursive field result for right: 0
11:56:06.411 [debug] do_fold called with non-variant data: 0
11:56:06.411 [debug] do_fold called with non-variant data: 0
11:56:06.411 [debug] Recursive field result for right: 9
11:56:06.411 [debug] do_fold called with non-variant data: 9
11:56:06.411 [debug] do_fold called with non-variant data: 9
11:56:06.411 [debug] Recursive field result for left: 26
11:56:06.412 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.412 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.412 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.412 [debug] Recursive field result for left: 0
11:56:06.412 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.412 [debug] Recursive field result for right: 0
11:56:06.412 [debug] do_fold called with non-variant data: 0
11:56:06.412 [debug] do_fold called with non-variant data: 0
11:56:06.412 [debug] Recursive field result for left: 9
11:56:06.412 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.412 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.412 [debug] Recursive field result for left: 0
11:56:06.412 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.412 [debug] Recursive field result for right: 0
11:56:06.412 [debug] do_fold called with non-variant data: 0
11:56:06.412 [debug] do_fold called with non-variant data: 0
11:56:06.412 [debug] Recursive field result for right: 9
11:56:06.412 [debug] do_fold called with non-variant data: 9
11:56:06.412 [debug] do_fold called with non-variant data: 9
11:56:06.412 [debug] Recursive field result for right: 26
11:56:06.412 [debug] do_fold called with non-variant data: 26
11:56:06.412 [debug] do_fold called with non-variant data: 26
11:56:06.412 [debug] Recursive field result for left: 59
11:56:06.412 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.412 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.412 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.412 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.412 [debug] Recursive field result for left: 0
11:56:06.412 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.412 [debug] Recursive field result for right: 0
11:56:06.412 [debug] do_fold called with non-variant data: 0
11:56:06.412 [debug] do_fold called with non-variant data: 0
11:56:06.412 [debug] Recursive field result for left: 9
11:56:06.412 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.412 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.412 [debug] Recursive field result for left: 0
11:56:06.412 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.412 [debug] Recursive field result for right: 0
11:56:06.412 [debug] do_fold called with non-variant data: 0
11:56:06.412 [debug] do_fold called with non-variant data: 0
11:56:06.412 [debug] Recursive field result for right: 9
11:56:06.412 [debug] do_fold called with non-variant data: 9
11:56:06.412 [debug] do_fold called with non-variant data: 9
11:56:06.412 [debug] Recursive field result for left: 26
11:56:06.412 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.412 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.412 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.412 [debug] Recursive field result for left: 0
11:56:06.412 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.412 [debug] Recursive field result for right: 0
11:56:06.412 [debug] do_fold called with non-variant data: 0
11:56:06.412 [debug] do_fold called with non-variant data: 0
11:56:06.412 [debug] Recursive field result for left: 9
11:56:06.412 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.412 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.412 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.412 [debug] Recursive field result for left: 0
11:56:06.413 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.413 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.413 [debug] Recursive field result for right: 0
11:56:06.413 [debug] do_fold called with non-variant data: 0
11:56:06.413 [debug] do_fold called with non-variant data: 0
11:56:06.413 [debug] Recursive field result for right: 9
11:56:06.413 [debug] do_fold called with non-variant data: 9
11:56:06.413 [debug] do_fold called with non-variant data: 9
11:56:06.413 [debug] Recursive field result for right: 26
11:56:06.413 [debug] do_fold called with non-variant data: 26
11:56:06.413 [debug] do_fold called with non-variant data: 26
11:56:06.413 [debug] Recursive field result for right: 59
11:56:06.413 [debug] do_fold called with non-variant data: 59
11:56:06.413 [debug] do_fold called with non-variant data: 59
11:56:06.413 [debug] Recursive field result for right: 124
11:56:06.413 [debug] do_fold called with non-variant data: 124
11:56:06.413 [debug] do_fold called with non-variant data: 124
11:56:06.413 [debug] Recursive field result for right: 253
11:56:06.413 [debug] do_fold called with non-variant data: 253
11:56:06.413 [debug] do_fold called with non-variant data: 253
11:56:06.413 [debug] Recursive field result for right: 510
11:56:06.413 [debug] do_fold called with non-variant data: 510
11:56:06.413 [debug] do_fold called with non-variant data: 510
11:56:06.413 [debug] Recursive field result for left: 1023
11:56:06.414 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, variant_type: :node, state: nil
11:56:06.415 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.415 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.416 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.416 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.416 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.416 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.416 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.416 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.416 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.417 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.417 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.417 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.417 [debug] Recursive field result for left: 0
11:56:06.417 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.417 [debug] Recursive field result for right: 0
11:56:06.417 [debug] do_fold called with non-variant data: 0
11:56:06.417 [debug] do_fold called with non-variant data: 0
11:56:06.417 [debug] Recursive field result for left: 9
11:56:06.417 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.417 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.417 [debug] Recursive field result for left: 0
11:56:06.417 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.417 [debug] Recursive field result for right: 0
11:56:06.417 [debug] do_fold called with non-variant data: 0
11:56:06.417 [debug] do_fold called with non-variant data: 0
11:56:06.417 [debug] Recursive field result for right: 9
11:56:06.417 [debug] do_fold called with non-variant data: 9
11:56:06.417 [debug] do_fold called with non-variant data: 9
11:56:06.417 [debug] Recursive field result for left: 26
11:56:06.417 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.417 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.417 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.417 [debug] Recursive field result for left: 0
11:56:06.417 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.417 [debug] Recursive field result for right: 0
11:56:06.417 [debug] do_fold called with non-variant data: 0
11:56:06.417 [debug] do_fold called with non-variant data: 0
11:56:06.417 [debug] Recursive field result for left: 9
11:56:06.417 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.417 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.417 [debug] Recursive field result for left: 0
11:56:06.417 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.417 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.417 [debug] Recursive field result for right: 0
11:56:06.417 [debug] do_fold called with non-variant data: 0
11:56:06.417 [debug] do_fold called with non-variant data: 0
11:56:06.417 [debug] Recursive field result for right: 9
11:56:06.417 [debug] do_fold called with non-variant data: 9
11:56:06.417 [debug] do_fold called with non-variant data: 9
11:56:06.417 [debug] Recursive field result for right: 26
11:56:06.417 [debug] do_fold called with non-variant data: 26
11:56:06.417 [debug] do_fold called with non-variant data: 26
11:56:06.417 [debug] Recursive field result for left: 59
11:56:06.417 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.418 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.418 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.418 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.418 [debug] Recursive field result for left: 0
11:56:06.418 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.418 [debug] Recursive field result for right: 0
11:56:06.418 [debug] do_fold called with non-variant data: 0
11:56:06.418 [debug] do_fold called with non-variant data: 0
11:56:06.418 [debug] Recursive field result for left: 9
11:56:06.418 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.418 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.418 [debug] Recursive field result for left: 0
11:56:06.418 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.418 [debug] Recursive field result for right: 0
11:56:06.418 [debug] do_fold called with non-variant data: 0
11:56:06.418 [debug] do_fold called with non-variant data: 0
11:56:06.418 [debug] Recursive field result for right: 9
11:56:06.418 [debug] do_fold called with non-variant data: 9
11:56:06.418 [debug] do_fold called with non-variant data: 9
11:56:06.418 [debug] Recursive field result for left: 26
11:56:06.418 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.418 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.418 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.418 [debug] Recursive field result for left: 0
11:56:06.418 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.418 [debug] Recursive field result for right: 0
11:56:06.418 [debug] do_fold called with non-variant data: 0
11:56:06.418 [debug] do_fold called with non-variant data: 0
11:56:06.418 [debug] Recursive field result for left: 9
11:56:06.418 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.418 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.418 [debug] Recursive field result for left: 0
11:56:06.418 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.418 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.418 [debug] Recursive field result for right: 0
11:56:06.418 [debug] do_fold called with non-variant data: 0
11:56:06.418 [debug] do_fold called with non-variant data: 0
11:56:06.418 [debug] Recursive field result for right: 9
11:56:06.418 [debug] do_fold called with non-variant data: 9
11:56:06.418 [debug] do_fold called with non-variant data: 9
11:56:06.418 [debug] Recursive field result for right: 26
11:56:06.418 [debug] do_fold called with non-variant data: 26
11:56:06.418 [debug] do_fold called with non-variant data: 26
11:56:06.418 [debug] Recursive field result for right: 59
11:56:06.418 [debug] do_fold called with non-variant data: 59
11:56:06.418 [debug] do_fold called with non-variant data: 59
11:56:06.418 [debug] Recursive field result for left: 124
11:56:06.418 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.419 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.419 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.419 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.419 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.419 [debug] Recursive field result for left: 0
11:56:06.419 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.419 [debug] Recursive field result for right: 0
11:56:06.419 [debug] do_fold called with non-variant data: 0
11:56:06.419 [debug] do_fold called with non-variant data: 0
11:56:06.419 [debug] Recursive field result for left: 9
11:56:06.419 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.419 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.419 [debug] Recursive field result for left: 0
11:56:06.419 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.419 [debug] Recursive field result for right: 0
11:56:06.419 [debug] do_fold called with non-variant data: 0
11:56:06.419 [debug] do_fold called with non-variant data: 0
11:56:06.419 [debug] Recursive field result for right: 9
11:56:06.419 [debug] do_fold called with non-variant data: 9
11:56:06.419 [debug] do_fold called with non-variant data: 9
11:56:06.419 [debug] Recursive field result for left: 26
11:56:06.419 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.419 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.419 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.419 [debug] Recursive field result for left: 0
11:56:06.419 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.419 [debug] Recursive field result for right: 0
11:56:06.419 [debug] do_fold called with non-variant data: 0
11:56:06.419 [debug] do_fold called with non-variant data: 0
11:56:06.419 [debug] Recursive field result for left: 9
11:56:06.419 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.419 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.419 [debug] Recursive field result for left: 0
11:56:06.419 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.419 [debug] Recursive field result for right: 0
11:56:06.419 [debug] do_fold called with non-variant data: 0
11:56:06.419 [debug] do_fold called with non-variant data: 0
11:56:06.419 [debug] Recursive field result for right: 9
11:56:06.419 [debug] do_fold called with non-variant data: 9
11:56:06.419 [debug] do_fold called with non-variant data: 9
11:56:06.419 [debug] Recursive field result for right: 26
11:56:06.419 [debug] do_fold called with non-variant data: 26
11:56:06.419 [debug] do_fold called with non-variant data: 26
11:56:06.419 [debug] Recursive field result for left: 59
11:56:06.419 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.419 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.419 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.420 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.420 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.420 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.420 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.420 [debug] Recursive field result for left: 0
11:56:06.420 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.420 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.420 [debug] Recursive field result for right: 0
11:56:06.420 [debug] do_fold called with non-variant data: 0
11:56:06.420 [debug] do_fold called with non-variant data: 0
11:56:06.420 [debug] Recursive field result for left: 9
11:56:06.420 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.420 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.420 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.420 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.420 [debug] Recursive field result for left: 0
11:56:06.420 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.420 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.420 [debug] Recursive field result for right: 0
11:56:06.420 [debug] do_fold called with non-variant data: 0
11:56:06.420 [debug] do_fold called with non-variant data: 0
11:56:06.420 [debug] Recursive field result for right: 9
11:56:06.420 [debug] do_fold called with non-variant data: 9
11:56:06.420 [debug] do_fold called with non-variant data: 9
11:56:06.420 [debug] Recursive field result for left: 26
11:56:06.420 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.420 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.420 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.420 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.420 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.420 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.420 [debug] Recursive field result for left: 0
11:56:06.420 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.420 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.420 [debug] Recursive field result for right: 0
11:56:06.420 [debug] do_fold called with non-variant data: 0
11:56:06.420 [debug] do_fold called with non-variant data: 0
11:56:06.420 [debug] Recursive field result for left: 9
11:56:06.420 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.420 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.420 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.420 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.420 [debug] Recursive field result for left: 0
11:56:06.420 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.420 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.420 [debug] Recursive field result for right: 0
11:56:06.420 [debug] do_fold called with non-variant data: 0
11:56:06.420 [debug] do_fold called with non-variant data: 0
11:56:06.420 [debug] Recursive field result for right: 9
11:56:06.420 [debug] do_fold called with non-variant data: 9
11:56:06.420 [debug] do_fold called with non-variant data: 9
11:56:06.420 [debug] Recursive field result for right: 26
11:56:06.420 [debug] do_fold called with non-variant data: 26
11:56:06.420 [debug] do_fold called with non-variant data: 26
11:56:06.420 [debug] Recursive field result for right: 59
11:56:06.420 [debug] do_fold called with non-variant data: 59
11:56:06.420 [debug] do_fold called with non-variant data: 59
11:56:06.420 [debug] Recursive field result for right: 124
11:56:06.420 [debug] do_fold called with non-variant data: 124
11:56:06.420 [debug] do_fold called with non-variant data: 124
11:56:06.420 [debug] Recursive field result for left: 253
11:56:06.420 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.421 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.421 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.421 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.421 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.421 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.421 [debug] Recursive field result for left: 0
11:56:06.421 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.421 [debug] Recursive field result for right: 0
11:56:06.421 [debug] do_fold called with non-variant data: 0
11:56:06.421 [debug] do_fold called with non-variant data: 0
11:56:06.421 [debug] Recursive field result for left: 9
11:56:06.421 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.421 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.421 [debug] Recursive field result for left: 0
11:56:06.421 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.421 [debug] Recursive field result for right: 0
11:56:06.421 [debug] do_fold called with non-variant data: 0
11:56:06.421 [debug] do_fold called with non-variant data: 0
11:56:06.421 [debug] Recursive field result for right: 9
11:56:06.421 [debug] do_fold called with non-variant data: 9
11:56:06.421 [debug] do_fold called with non-variant data: 9
11:56:06.421 [debug] Recursive field result for left: 26
11:56:06.421 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.421 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.421 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.421 [debug] Recursive field result for left: 0
11:56:06.421 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.421 [debug] Recursive field result for right: 0
11:56:06.421 [debug] do_fold called with non-variant data: 0
11:56:06.421 [debug] do_fold called with non-variant data: 0
11:56:06.421 [debug] Recursive field result for left: 9
11:56:06.421 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.421 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.421 [debug] Recursive field result for left: 0
11:56:06.421 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.421 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.421 [debug] Recursive field result for right: 0
11:56:06.421 [debug] do_fold called with non-variant data: 0
11:56:06.421 [debug] do_fold called with non-variant data: 0
11:56:06.421 [debug] Recursive field result for right: 9
11:56:06.421 [debug] do_fold called with non-variant data: 9
11:56:06.421 [debug] do_fold called with non-variant data: 9
11:56:06.421 [debug] Recursive field result for right: 26
11:56:06.421 [debug] do_fold called with non-variant data: 26
11:56:06.421 [debug] do_fold called with non-variant data: 26
11:56:06.421 [debug] Recursive field result for left: 59
11:56:06.422 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.422 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.422 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.422 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.422 [debug] Recursive field result for left: 0
11:56:06.422 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.422 [debug] Recursive field result for right: 0
11:56:06.422 [debug] do_fold called with non-variant data: 0
11:56:06.422 [debug] do_fold called with non-variant data: 0
11:56:06.422 [debug] Recursive field result for left: 9
11:56:06.422 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.422 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.422 [debug] Recursive field result for left: 0
11:56:06.422 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.422 [debug] Recursive field result for right: 0
11:56:06.422 [debug] do_fold called with non-variant data: 0
11:56:06.422 [debug] do_fold called with non-variant data: 0
11:56:06.422 [debug] Recursive field result for right: 9
11:56:06.422 [debug] do_fold called with non-variant data: 9
11:56:06.422 [debug] do_fold called with non-variant data: 9
11:56:06.422 [debug] Recursive field result for left: 26
11:56:06.422 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.422 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.422 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.422 [debug] Recursive field result for left: 0
11:56:06.422 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.422 [debug] Recursive field result for right: 0
11:56:06.422 [debug] do_fold called with non-variant data: 0
11:56:06.422 [debug] do_fold called with non-variant data: 0
11:56:06.422 [debug] Recursive field result for left: 9
11:56:06.422 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.422 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.422 [debug] Recursive field result for left: 0
11:56:06.422 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.422 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.422 [debug] Recursive field result for right: 0
11:56:06.422 [debug] do_fold called with non-variant data: 0
11:56:06.422 [debug] do_fold called with non-variant data: 0
11:56:06.422 [debug] Recursive field result for right: 9
11:56:06.422 [debug] do_fold called with non-variant data: 9
11:56:06.422 [debug] do_fold called with non-variant data: 9
11:56:06.422 [debug] Recursive field result for right: 26
11:56:06.422 [debug] do_fold called with non-variant data: 26
11:56:06.422 [debug] do_fold called with non-variant data: 26
11:56:06.422 [debug] Recursive field result for right: 59
11:56:06.422 [debug] do_fold called with non-variant data: 59
11:56:06.422 [debug] do_fold called with non-variant data: 59
11:56:06.422 [debug] Recursive field result for left: 124
11:56:06.422 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.423 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.423 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.423 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.423 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.423 [debug] Recursive field result for left: 0
11:56:06.423 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.423 [debug] Recursive field result for right: 0
11:56:06.423 [debug] do_fold called with non-variant data: 0
11:56:06.423 [debug] do_fold called with non-variant data: 0
11:56:06.423 [debug] Recursive field result for left: 9
11:56:06.423 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.423 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.423 [debug] Recursive field result for left: 0
11:56:06.423 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.423 [debug] Recursive field result for right: 0
11:56:06.423 [debug] do_fold called with non-variant data: 0
11:56:06.423 [debug] do_fold called with non-variant data: 0
11:56:06.423 [debug] Recursive field result for right: 9
11:56:06.423 [debug] do_fold called with non-variant data: 9
11:56:06.423 [debug] do_fold called with non-variant data: 9
11:56:06.423 [debug] Recursive field result for left: 26
11:56:06.423 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.423 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.423 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.423 [debug] Recursive field result for left: 0
11:56:06.423 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.423 [debug] Recursive field result for right: 0
11:56:06.423 [debug] do_fold called with non-variant data: 0
11:56:06.423 [debug] do_fold called with non-variant data: 0
11:56:06.423 [debug] Recursive field result for left: 9
11:56:06.423 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.423 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.423 [debug] Recursive field result for left: 0
11:56:06.423 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.423 [debug] Recursive field result for right: 0
11:56:06.423 [debug] do_fold called with non-variant data: 0
11:56:06.423 [debug] do_fold called with non-variant data: 0
11:56:06.423 [debug] Recursive field result for right: 9
11:56:06.423 [debug] do_fold called with non-variant data: 9
11:56:06.423 [debug] do_fold called with non-variant data: 9
11:56:06.423 [debug] Recursive field result for right: 26
11:56:06.423 [debug] do_fold called with non-variant data: 26
11:56:06.423 [debug] do_fold called with non-variant data: 26
11:56:06.423 [debug] Recursive field result for left: 59
11:56:06.423 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.423 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.423 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.424 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.424 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.424 [debug] Recursive field result for left: 0
11:56:06.424 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.424 [debug] Recursive field result for right: 0
11:56:06.424 [debug] do_fold called with non-variant data: 0
11:56:06.424 [debug] do_fold called with non-variant data: 0
11:56:06.424 [debug] Recursive field result for left: 9
11:56:06.424 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.424 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.424 [debug] Recursive field result for left: 0
11:56:06.424 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.424 [debug] Recursive field result for right: 0
11:56:06.424 [debug] do_fold called with non-variant data: 0
11:56:06.424 [debug] do_fold called with non-variant data: 0
11:56:06.424 [debug] Recursive field result for right: 9
11:56:06.424 [debug] do_fold called with non-variant data: 9
11:56:06.424 [debug] do_fold called with non-variant data: 9
11:56:06.424 [debug] Recursive field result for left: 26
11:56:06.424 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.424 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.424 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.424 [debug] Recursive field result for left: 0
11:56:06.424 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.424 [debug] Recursive field result for right: 0
11:56:06.424 [debug] do_fold called with non-variant data: 0
11:56:06.424 [debug] do_fold called with non-variant data: 0
11:56:06.424 [debug] Recursive field result for left: 9
11:56:06.424 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.424 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.424 [debug] Recursive field result for left: 0
11:56:06.424 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.424 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.424 [debug] Recursive field result for right: 0
11:56:06.424 [debug] do_fold called with non-variant data: 0
11:56:06.424 [debug] do_fold called with non-variant data: 0
11:56:06.424 [debug] Recursive field result for right: 9
11:56:06.424 [debug] do_fold called with non-variant data: 9
11:56:06.424 [debug] do_fold called with non-variant data: 9
11:56:06.424 [debug] Recursive field result for right: 26
11:56:06.424 [debug] do_fold called with non-variant data: 26
11:56:06.424 [debug] do_fold called with non-variant data: 26
11:56:06.424 [debug] Recursive field result for right: 59
11:56:06.424 [debug] do_fold called with non-variant data: 59
11:56:06.424 [debug] do_fold called with non-variant data: 59
11:56:06.424 [debug] Recursive field result for right: 124
11:56:06.424 [debug] do_fold called with non-variant data: 124
11:56:06.424 [debug] do_fold called with non-variant data: 124
11:56:06.424 [debug] Recursive field result for right: 253
11:56:06.424 [debug] do_fold called with non-variant data: 253
11:56:06.424 [debug] do_fold called with non-variant data: 253
11:56:06.424 [debug] Recursive field result for left: 510
11:56:06.425 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.425 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.425 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.425 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.426 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.426 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.426 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.426 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.426 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.426 [debug] Recursive field result for left: 0
11:56:06.426 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.426 [debug] Recursive field result for right: 0
11:56:06.426 [debug] do_fold called with non-variant data: 0
11:56:06.426 [debug] do_fold called with non-variant data: 0
11:56:06.426 [debug] Recursive field result for left: 9
11:56:06.426 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.426 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.426 [debug] Recursive field result for left: 0
11:56:06.426 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.426 [debug] Recursive field result for right: 0
11:56:06.426 [debug] do_fold called with non-variant data: 0
11:56:06.426 [debug] do_fold called with non-variant data: 0
11:56:06.426 [debug] Recursive field result for right: 9
11:56:06.426 [debug] do_fold called with non-variant data: 9
11:56:06.426 [debug] do_fold called with non-variant data: 9
11:56:06.426 [debug] Recursive field result for left: 26
11:56:06.426 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.426 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.426 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.426 [debug] Recursive field result for left: 0
11:56:06.426 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.426 [debug] Recursive field result for right: 0
11:56:06.426 [debug] do_fold called with non-variant data: 0
11:56:06.426 [debug] do_fold called with non-variant data: 0
11:56:06.426 [debug] Recursive field result for left: 9
11:56:06.426 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.426 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.426 [debug] Recursive field result for left: 0
11:56:06.426 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.426 [debug] Recursive field result for right: 0
11:56:06.426 [debug] do_fold called with non-variant data: 0
11:56:06.426 [debug] do_fold called with non-variant data: 0
11:56:06.426 [debug] Recursive field result for right: 9
11:56:06.426 [debug] do_fold called with non-variant data: 9
11:56:06.426 [debug] do_fold called with non-variant data: 9
11:56:06.426 [debug] Recursive field result for right: 26
11:56:06.426 [debug] do_fold called with non-variant data: 26
11:56:06.426 [debug] do_fold called with non-variant data: 26
11:56:06.426 [debug] Recursive field result for left: 59
11:56:06.426 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.426 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.426 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.426 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.426 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.427 [debug] Recursive field result for left: 0
11:56:06.427 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.427 [debug] Recursive field result for right: 0
11:56:06.427 [debug] do_fold called with non-variant data: 0
11:56:06.427 [debug] do_fold called with non-variant data: 0
11:56:06.427 [debug] Recursive field result for left: 9
11:56:06.427 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.427 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.427 [debug] Recursive field result for left: 0
11:56:06.427 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.427 [debug] Recursive field result for right: 0
11:56:06.427 [debug] do_fold called with non-variant data: 0
11:56:06.427 [debug] do_fold called with non-variant data: 0
11:56:06.427 [debug] Recursive field result for right: 9
11:56:06.427 [debug] do_fold called with non-variant data: 9
11:56:06.427 [debug] do_fold called with non-variant data: 9
11:56:06.427 [debug] Recursive field result for left: 26
11:56:06.427 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.427 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.427 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.427 [debug] Recursive field result for left: 0
11:56:06.427 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.427 [debug] Recursive field result for right: 0
11:56:06.427 [debug] do_fold called with non-variant data: 0
11:56:06.427 [debug] do_fold called with non-variant data: 0
11:56:06.427 [debug] Recursive field result for left: 9
11:56:06.427 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.427 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.427 [debug] Recursive field result for left: 0
11:56:06.427 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.427 [debug] Recursive field result for right: 0
11:56:06.427 [debug] do_fold called with non-variant data: 0
11:56:06.427 [debug] do_fold called with non-variant data: 0
11:56:06.427 [debug] Recursive field result for right: 9
11:56:06.427 [debug] do_fold called with non-variant data: 9
11:56:06.427 [debug] do_fold called with non-variant data: 9
11:56:06.427 [debug] Recursive field result for right: 26
11:56:06.427 [debug] do_fold called with non-variant data: 26
11:56:06.427 [debug] do_fold called with non-variant data: 26
11:56:06.427 [debug] Recursive field result for right: 59
11:56:06.427 [debug] do_fold called with non-variant data: 59
11:56:06.427 [debug] do_fold called with non-variant data: 59
11:56:06.427 [debug] Recursive field result for left: 124
11:56:06.427 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.427 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.427 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.427 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.427 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.427 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.427 [debug] Recursive field result for left: 0
11:56:06.427 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.428 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.428 [debug] Recursive field result for right: 0
11:56:06.428 [debug] do_fold called with non-variant data: 0
11:56:06.428 [debug] do_fold called with non-variant data: 0
11:56:06.428 [debug] Recursive field result for left: 9
11:56:06.428 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.428 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.428 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.428 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.428 [debug] Recursive field result for left: 0
11:56:06.428 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.428 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.428 [debug] Recursive field result for right: 0
11:56:06.428 [debug] do_fold called with non-variant data: 0
11:56:06.428 [debug] do_fold called with non-variant data: 0
11:56:06.428 [debug] Recursive field result for right: 9
11:56:06.428 [debug] do_fold called with non-variant data: 9
11:56:06.428 [debug] do_fold called with non-variant data: 9
11:56:06.428 [debug] Recursive field result for left: 26
11:56:06.428 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.428 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.428 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.428 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.428 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.428 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.428 [debug] Recursive field result for left: 0
11:56:06.428 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.428 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.428 [debug] Recursive field result for right: 0
11:56:06.428 [debug] do_fold called with non-variant data: 0
11:56:06.428 [debug] do_fold called with non-variant data: 0
11:56:06.428 [debug] Recursive field result for left: 9
11:56:06.428 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.428 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.428 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.428 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.428 [debug] Recursive field result for left: 0
11:56:06.428 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.428 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.428 [debug] Recursive field result for right: 0
11:56:06.428 [debug] do_fold called with non-variant data: 0
11:56:06.428 [debug] do_fold called with non-variant data: 0
11:56:06.428 [debug] Recursive field result for right: 9
11:56:06.428 [debug] do_fold called with non-variant data: 9
11:56:06.428 [debug] do_fold called with non-variant data: 9
11:56:06.428 [debug] Recursive field result for right: 26
11:56:06.428 [debug] do_fold called with non-variant data: 26
11:56:06.428 [debug] do_fold called with non-variant data: 26
11:56:06.428 [debug] Recursive field result for left: 59
11:56:06.428 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.428 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.428 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.428 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.428 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.429 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.429 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.429 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.429 [debug] Recursive field result for left: 0
11:56:06.429 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.429 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.429 [debug] Recursive field result for right: 0
11:56:06.429 [debug] do_fold called with non-variant data: 0
11:56:06.429 [debug] do_fold called with non-variant data: 0
11:56:06.429 [debug] Recursive field result for left: 9
11:56:06.429 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.429 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.429 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.429 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.429 [debug] Recursive field result for left: 0
11:56:06.429 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.429 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.429 [debug] Recursive field result for right: 0
11:56:06.429 [debug] do_fold called with non-variant data: 0
11:56:06.429 [debug] do_fold called with non-variant data: 0
11:56:06.429 [debug] Recursive field result for right: 9
11:56:06.429 [debug] do_fold called with non-variant data: 9
11:56:06.429 [debug] do_fold called with non-variant data: 9
11:56:06.429 [debug] Recursive field result for left: 26
11:56:06.429 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.429 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.429 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.429 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.429 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.429 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.429 [debug] Recursive field result for left: 0
11:56:06.429 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.429 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.429 [debug] Recursive field result for right: 0
11:56:06.429 [debug] do_fold called with non-variant data: 0
11:56:06.429 [debug] do_fold called with non-variant data: 0
11:56:06.429 [debug] Recursive field result for left: 9
11:56:06.429 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.429 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.429 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.429 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.429 [debug] Recursive field result for left: 0
11:56:06.429 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.429 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.429 [debug] Recursive field result for right: 0
11:56:06.429 [debug] do_fold called with non-variant data: 0
11:56:06.429 [debug] do_fold called with non-variant data: 0
11:56:06.429 [debug] Recursive field result for right: 9
11:56:06.429 [debug] do_fold called with non-variant data: 9
11:56:06.429 [debug] do_fold called with non-variant data: 9
11:56:06.429 [debug] Recursive field result for right: 26
11:56:06.429 [debug] do_fold called with non-variant data: 26
11:56:06.429 [debug] do_fold called with non-variant data: 26
11:56:06.429 [debug] Recursive field result for right: 59
11:56:06.429 [debug] do_fold called with non-variant data: 59
11:56:06.429 [debug] do_fold called with non-variant data: 59
11:56:06.429 [debug] Recursive field result for right: 124
11:56:06.429 [debug] do_fold called with non-variant data: 124
11:56:06.429 [debug] do_fold called with non-variant data: 124
11:56:06.429 [debug] Recursive field result for left: 253
11:56:06.429 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.430 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.430 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.430 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.430 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.430 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.430 [debug] Recursive field result for left: 0
11:56:06.430 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.430 [debug] Recursive field result for right: 0
11:56:06.430 [debug] do_fold called with non-variant data: 0
11:56:06.430 [debug] do_fold called with non-variant data: 0
11:56:06.430 [debug] Recursive field result for left: 9
11:56:06.430 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.430 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.430 [debug] Recursive field result for left: 0
11:56:06.430 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.430 [debug] Recursive field result for right: 0
11:56:06.430 [debug] do_fold called with non-variant data: 0
11:56:06.430 [debug] do_fold called with non-variant data: 0
11:56:06.430 [debug] Recursive field result for right: 9
11:56:06.430 [debug] do_fold called with non-variant data: 9
11:56:06.430 [debug] do_fold called with non-variant data: 9
11:56:06.430 [debug] Recursive field result for left: 26
11:56:06.430 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.430 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.430 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.430 [debug] Recursive field result for left: 0
11:56:06.430 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.430 [debug] Recursive field result for right: 0
11:56:06.430 [debug] do_fold called with non-variant data: 0
11:56:06.430 [debug] do_fold called with non-variant data: 0
11:56:06.430 [debug] Recursive field result for left: 9
11:56:06.430 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.430 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.430 [debug] Recursive field result for left: 0
11:56:06.430 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.430 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.430 [debug] Recursive field result for right: 0
11:56:06.430 [debug] do_fold called with non-variant data: 0
11:56:06.430 [debug] do_fold called with non-variant data: 0
11:56:06.430 [debug] Recursive field result for right: 9
11:56:06.430 [debug] do_fold called with non-variant data: 9
11:56:06.430 [debug] do_fold called with non-variant data: 9
11:56:06.430 [debug] Recursive field result for right: 26
11:56:06.430 [debug] do_fold called with non-variant data: 26
11:56:06.430 [debug] do_fold called with non-variant data: 26
11:56:06.431 [debug] Recursive field result for left: 59
11:56:06.431 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.431 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.431 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.431 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.431 [debug] Recursive field result for left: 0
11:56:06.431 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.431 [debug] Recursive field result for right: 0
11:56:06.431 [debug] do_fold called with non-variant data: 0
11:56:06.431 [debug] do_fold called with non-variant data: 0
11:56:06.431 [debug] Recursive field result for left: 9
11:56:06.431 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.431 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.431 [debug] Recursive field result for left: 0
11:56:06.431 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.431 [debug] Recursive field result for right: 0
11:56:06.431 [debug] do_fold called with non-variant data: 0
11:56:06.431 [debug] do_fold called with non-variant data: 0
11:56:06.431 [debug] Recursive field result for right: 9
11:56:06.431 [debug] do_fold called with non-variant data: 9
11:56:06.431 [debug] do_fold called with non-variant data: 9
11:56:06.431 [debug] Recursive field result for left: 26
11:56:06.431 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.431 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.431 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.431 [debug] Recursive field result for left: 0
11:56:06.431 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.431 [debug] Recursive field result for right: 0
11:56:06.431 [debug] do_fold called with non-variant data: 0
11:56:06.431 [debug] do_fold called with non-variant data: 0
11:56:06.431 [debug] Recursive field result for left: 9
11:56:06.431 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.431 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.431 [debug] Recursive field result for left: 0
11:56:06.431 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.431 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.431 [debug] Recursive field result for right: 0
11:56:06.431 [debug] do_fold called with non-variant data: 0
11:56:06.431 [debug] do_fold called with non-variant data: 0
11:56:06.431 [debug] Recursive field result for right: 9
11:56:06.431 [debug] do_fold called with non-variant data: 9
11:56:06.431 [debug] do_fold called with non-variant data: 9
11:56:06.431 [debug] Recursive field result for right: 26
11:56:06.431 [debug] do_fold called with non-variant data: 26
11:56:06.431 [debug] do_fold called with non-variant data: 26
11:56:06.431 [debug] Recursive field result for right: 59
11:56:06.431 [debug] do_fold called with non-variant data: 59
11:56:06.431 [debug] do_fold called with non-variant data: 59
11:56:06.431 [debug] Recursive field result for left: 124
11:56:06.431 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.432 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.432 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.432 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.432 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.432 [debug] Recursive field result for left: 0
11:56:06.432 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.432 [debug] Recursive field result for right: 0
11:56:06.432 [debug] do_fold called with non-variant data: 0
11:56:06.432 [debug] do_fold called with non-variant data: 0
11:56:06.432 [debug] Recursive field result for left: 9
11:56:06.432 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.432 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.432 [debug] Recursive field result for left: 0
11:56:06.432 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.432 [debug] Recursive field result for right: 0
11:56:06.432 [debug] do_fold called with non-variant data: 0
11:56:06.432 [debug] do_fold called with non-variant data: 0
11:56:06.432 [debug] Recursive field result for right: 9
11:56:06.432 [debug] do_fold called with non-variant data: 9
11:56:06.432 [debug] do_fold called with non-variant data: 9
11:56:06.432 [debug] Recursive field result for left: 26
11:56:06.432 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.432 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.432 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.432 [debug] Recursive field result for left: 0
11:56:06.432 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.432 [debug] Recursive field result for right: 0
11:56:06.432 [debug] do_fold called with non-variant data: 0
11:56:06.432 [debug] do_fold called with non-variant data: 0
11:56:06.432 [debug] Recursive field result for left: 9
11:56:06.432 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.432 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.432 [debug] Recursive field result for left: 0
11:56:06.432 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.432 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.432 [debug] Recursive field result for right: 0
11:56:06.432 [debug] do_fold called with non-variant data: 0
11:56:06.432 [debug] do_fold called with non-variant data: 0
11:56:06.432 [debug] Recursive field result for right: 9
11:56:06.432 [debug] do_fold called with non-variant data: 9
11:56:06.432 [debug] do_fold called with non-variant data: 9
11:56:06.432 [debug] Recursive field result for right: 26
11:56:06.432 [debug] do_fold called with non-variant data: 26
11:56:06.432 [debug] do_fold called with non-variant data: 26
11:56:06.432 [debug] Recursive field result for left: 59
11:56:06.432 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.433 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.433 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.433 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.433 [debug] Recursive field result for left: 0
11:56:06.433 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.433 [debug] Recursive field result for right: 0
11:56:06.433 [debug] do_fold called with non-variant data: 0
11:56:06.433 [debug] do_fold called with non-variant data: 0
11:56:06.433 [debug] Recursive field result for left: 9
11:56:06.433 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.433 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.433 [debug] Recursive field result for left: 0
11:56:06.433 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.433 [debug] Recursive field result for right: 0
11:56:06.433 [debug] do_fold called with non-variant data: 0
11:56:06.433 [debug] do_fold called with non-variant data: 0
11:56:06.433 [debug] Recursive field result for right: 9
11:56:06.433 [debug] do_fold called with non-variant data: 9
11:56:06.433 [debug] do_fold called with non-variant data: 9
11:56:06.433 [debug] Recursive field result for left: 26
11:56:06.433 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.433 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.433 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.433 [debug] Recursive field result for left: 0
11:56:06.433 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.433 [debug] Recursive field result for right: 0
11:56:06.433 [debug] do_fold called with non-variant data: 0
11:56:06.433 [debug] do_fold called with non-variant data: 0
11:56:06.433 [debug] Recursive field result for left: 9
11:56:06.433 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.433 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.433 [debug] Recursive field result for left: 0
11:56:06.433 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.433 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.433 [debug] Recursive field result for right: 0
11:56:06.433 [debug] do_fold called with non-variant data: 0
11:56:06.433 [debug] do_fold called with non-variant data: 0
11:56:06.433 [debug] Recursive field result for right: 9
11:56:06.433 [debug] do_fold called with non-variant data: 9
11:56:06.433 [debug] do_fold called with non-variant data: 9
11:56:06.433 [debug] Recursive field result for right: 26
11:56:06.433 [debug] do_fold called with non-variant data: 26
11:56:06.433 [debug] do_fold called with non-variant data: 26
11:56:06.433 [debug] Recursive field result for right: 59
11:56:06.433 [debug] do_fold called with non-variant data: 59
11:56:06.433 [debug] do_fold called with non-variant data: 59
11:56:06.433 [debug] Recursive field result for right: 124
11:56:06.433 [debug] do_fold called with non-variant data: 124
11:56:06.433 [debug] do_fold called with non-variant data: 124
11:56:06.433 [debug] Recursive field result for right: 253
11:56:06.433 [debug] do_fold called with non-variant data: 253
11:56:06.433 [debug] do_fold called with non-variant data: 253
11:56:06.433 [debug] Recursive field result for right: 510
11:56:06.433 [debug] do_fold called with non-variant data: 510
11:56:06.433 [debug] do_fold called with non-variant data: 510
11:56:06.433 [debug] Recursive field result for right: 1023
11:56:06.433 [debug] do_fold called with non-variant data: 1023
11:56:06.433 [debug] do_fold called with non-variant data: 1023
11:56:06.433 [debug] Recursive field result for left: 2048
11:56:06.436 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val (truncated)
11:56:06.438 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf (truncated)
11:56:06.439 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, variant_type: :node, state: nil
11:56:06.439 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.440 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.440 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.440 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.441 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.441 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.441 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.441 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.441 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.441 [debug] Recursive field result for left: 0
11:56:06.441 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.441 [debug] Recursive field result for right: 0
11:56:06.441 [debug] do_fold called with non-variant data: 0
11:56:06.441 [debug] do_fold called with non-variant data: 0
11:56:06.441 [debug] Recursive field result for left: 9
11:56:06.441 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.441 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.441 [debug] Recursive field result for left: 0
11:56:06.441 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.441 [debug] Recursive field result for right: 0
11:56:06.441 [debug] do_fold called with non-variant data: 0
11:56:06.441 [debug] do_fold called with non-variant data: 0
11:56:06.441 [debug] Recursive field result for right: 9
11:56:06.441 [debug] do_fold called with non-variant data: 9
11:56:06.441 [debug] do_fold called with non-variant data: 9
11:56:06.441 [debug] Recursive field result for left: 26
11:56:06.441 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.441 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.441 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.441 [debug] Recursive field result for left: 0
11:56:06.441 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.441 [debug] Recursive field result for right: 0
11:56:06.441 [debug] do_fold called with non-variant data: 0
11:56:06.441 [debug] do_fold called with non-variant data: 0
11:56:06.441 [debug] Recursive field result for left: 9
11:56:06.441 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.441 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.441 [debug] Recursive field result for left: 0
11:56:06.441 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.441 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.441 [debug] Recursive field result for right: 0
11:56:06.442 [debug] do_fold called with non-variant data: 0
11:56:06.442 [debug] do_fold called with non-variant data: 0
11:56:06.442 [debug] Recursive field result for right: 9
11:56:06.442 [debug] do_fold called with non-variant data: 9
11:56:06.442 [debug] do_fold called with non-variant data: 9
11:56:06.442 [debug] Recursive field result for right: 26
11:56:06.442 [debug] do_fold called with non-variant data: 26
11:56:06.442 [debug] do_fold called with non-variant data: 26
11:56:06.442 [debug] Recursive field result for left: 59
11:56:06.442 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.442 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.442 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.442 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.442 [debug] Recursive field result for left: 0
11:56:06.442 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.442 [debug] Recursive field result for right: 0
11:56:06.442 [debug] do_fold called with non-variant data: 0
11:56:06.442 [debug] do_fold called with non-variant data: 0
11:56:06.442 [debug] Recursive field result for left: 9
11:56:06.442 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.442 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.442 [debug] Recursive field result for left: 0
11:56:06.442 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.442 [debug] Recursive field result for right: 0
11:56:06.442 [debug] do_fold called with non-variant data: 0
11:56:06.442 [debug] do_fold called with non-variant data: 0
11:56:06.442 [debug] Recursive field result for right: 9
11:56:06.442 [debug] do_fold called with non-variant data: 9
11:56:06.442 [debug] do_fold called with non-variant data: 9
11:56:06.442 [debug] Recursive field result for left: 26
11:56:06.442 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.442 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.442 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.442 [debug] Recursive field result for left: 0
11:56:06.442 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.442 [debug] Recursive field result for right: 0
11:56:06.442 [debug] do_fold called with non-variant data: 0
11:56:06.442 [debug] do_fold called with non-variant data: 0
11:56:06.442 [debug] Recursive field result for left: 9
11:56:06.442 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.442 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.442 [debug] Recursive field result for left: 0
11:56:06.442 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.442 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.442 [debug] Recursive field result for right: 0
11:56:06.442 [debug] do_fold called with non-variant data: 0
11:56:06.442 [debug] do_fold called with non-variant data: 0
11:56:06.442 [debug] Recursive field result for right: 9
11:56:06.442 [debug] do_fold called with non-variant data: 9
11:56:06.442 [debug] do_fold called with non-variant data: 9
11:56:06.442 [debug] Recursive field result for right: 26
11:56:06.442 [debug] do_fold called with non-variant data: 26
11:56:06.442 [debug] do_fold called with non-variant data: 26
11:56:06.442 [debug] Recursive field result for right: 59
11:56:06.442 [debug] do_fold called with non-variant data: 59
11:56:06.442 [debug] do_fold called with non-variant data: 59
11:56:06.442 [debug] Recursive field result for left: 124
11:56:06.443 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.443 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.443 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.443 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.443 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.443 [debug] Recursive field result for left: 0
11:56:06.443 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.443 [debug] Recursive field result for right: 0
11:56:06.443 [debug] do_fold called with non-variant data: 0
11:56:06.443 [debug] do_fold called with non-variant data: 0
11:56:06.443 [debug] Recursive field result for left: 9
11:56:06.443 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.443 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.443 [debug] Recursive field result for left: 0
11:56:06.443 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.443 [debug] Recursive field result for right: 0
11:56:06.443 [debug] do_fold called with non-variant data: 0
11:56:06.443 [debug] do_fold called with non-variant data: 0
11:56:06.443 [debug] Recursive field result for right: 9
11:56:06.443 [debug] do_fold called with non-variant data: 9
11:56:06.443 [debug] do_fold called with non-variant data: 9
11:56:06.443 [debug] Recursive field result for left: 26
11:56:06.443 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.443 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.443 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.443 [debug] Recursive field result for left: 0
11:56:06.443 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.443 [debug] Recursive field result for right: 0
11:56:06.443 [debug] do_fold called with non-variant data: 0
11:56:06.443 [debug] do_fold called with non-variant data: 0
11:56:06.443 [debug] Recursive field result for left: 9
11:56:06.443 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.443 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.443 [debug] Recursive field result for left: 0
11:56:06.443 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.443 [debug] Recursive field result for right: 0
11:56:06.443 [debug] do_fold called with non-variant data: 0
11:56:06.443 [debug] do_fold called with non-variant data: 0
11:56:06.443 [debug] Recursive field result for right: 9
11:56:06.443 [debug] do_fold called with non-variant data: 9
11:56:06.443 [debug] do_fold called with non-variant data: 9
11:56:06.443 [debug] Recursive field result for right: 26
11:56:06.443 [debug] do_fold called with non-variant data: 26
11:56:06.443 [debug] do_fold called with non-variant data: 26
11:56:06.443 [debug] Recursive field result for left: 59
11:56:06.443 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.443 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.443 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.443 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.444 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.444 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.444 [debug] Recursive field result for left: 0
11:56:06.444 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.444 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.444 [debug] Recursive field result for right: 0
11:56:06.444 [debug] do_fold called with non-variant data: 0
11:56:06.444 [debug] do_fold called with non-variant data: 0
11:56:06.444 [debug] Recursive field result for left: 9
11:56:06.444 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.444 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.444 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.444 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.444 [debug] Recursive field result for left: 0
11:56:06.444 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.444 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.444 [debug] Recursive field result for right: 0
11:56:06.444 [debug] do_fold called with non-variant data: 0
11:56:06.444 [debug] do_fold called with non-variant data: 0
11:56:06.444 [debug] Recursive field result for right: 9
11:56:06.444 [debug] do_fold called with non-variant data: 9
11:56:06.444 [debug] do_fold called with non-variant data: 9
11:56:06.444 [debug] Recursive field result for left: 26
11:56:06.444 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.444 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.444 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.444 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.444 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.444 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.444 [debug] Recursive field result for left: 0
11:56:06.444 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.444 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.444 [debug] Recursive field result for right: 0
11:56:06.444 [debug] do_fold called with non-variant data: 0
11:56:06.444 [debug] do_fold called with non-variant data: 0
11:56:06.444 [debug] Recursive field result for left: 9
11:56:06.444 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.444 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.444 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.444 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.444 [debug] Recursive field result for left: 0
11:56:06.444 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.444 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.444 [debug] Recursive field result for right: 0
11:56:06.444 [debug] do_fold called with non-variant data: 0
11:56:06.444 [debug] do_fold called with non-variant data: 0
11:56:06.444 [debug] Recursive field result for right: 9
11:56:06.444 [debug] do_fold called with non-variant data: 9
11:56:06.444 [debug] do_fold called with non-variant data: 9
11:56:06.444 [debug] Recursive field result for right: 26
11:56:06.444 [debug] do_fold called with non-variant data: 26
11:56:06.444 [debug] do_fold called with non-variant data: 26
11:56:06.444 [debug] Recursive field result for right: 59
11:56:06.444 [debug] do_fold called with non-variant data: 59
11:56:06.444 [debug] do_fold called with non-variant data: 59
11:56:06.444 [debug] Recursive field result for right: 124
11:56:06.444 [debug] do_fold called with non-variant data: 124
11:56:06.444 [debug] do_fold called with non-variant data: 124
11:56:06.444 [debug] Recursive field result for left: 253
11:56:06.445 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.445 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.445 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.445 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.445 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.445 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.445 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.445 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.445 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.445 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.445 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.445 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.445 [debug] Recursive field result for left: 0
11:56:06.445 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.445 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.445 [debug] Recursive field result for right: 0
11:56:06.445 [debug] do_fold called with non-variant data: 0
11:56:06.445 [debug] do_fold called with non-variant data: 0
11:56:06.445 [debug] Recursive field result for left: 9
11:56:06.445 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.445 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.445 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.445 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.445 [debug] Recursive field result for left: 0
11:56:06.445 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.445 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.446 [debug] Recursive field result for right: 0
11:56:06.446 [debug] do_fold called with non-variant data: 0
11:56:06.446 [debug] do_fold called with non-variant data: 0
11:56:06.446 [debug] Recursive field result for right: 9
11:56:06.446 [debug] do_fold called with non-variant data: 9
11:56:06.446 [debug] do_fold called with non-variant data: 9
11:56:06.446 [debug] Recursive field result for left: 26
11:56:06.446 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.446 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.446 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.446 [debug] Recursive field result for left: 0
11:56:06.446 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.446 [debug] Recursive field result for right: 0
11:56:06.446 [debug] do_fold called with non-variant data: 0
11:56:06.446 [debug] do_fold called with non-variant data: 0
11:56:06.446 [debug] Recursive field result for left: 9
11:56:06.446 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.446 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.446 [debug] Recursive field result for left: 0
11:56:06.446 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.446 [debug] Recursive field result for right: 0
11:56:06.446 [debug] do_fold called with non-variant data: 0
11:56:06.446 [debug] do_fold called with non-variant data: 0
11:56:06.446 [debug] Recursive field result for right: 9
11:56:06.446 [debug] do_fold called with non-variant data: 9
11:56:06.446 [debug] do_fold called with non-variant data: 9
11:56:06.446 [debug] Recursive field result for right: 26
11:56:06.446 [debug] do_fold called with non-variant data: 26
11:56:06.446 [debug] do_fold called with non-variant data: 26
11:56:06.446 [debug] Recursive field result for left: 59
11:56:06.446 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.446 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.446 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.446 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.446 [debug] Recursive field result for left: 0
11:56:06.446 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.446 [debug] Recursive field result for right: 0
11:56:06.446 [debug] do_fold called with non-variant data: 0
11:56:06.446 [debug] do_fold called with non-variant data: 0
11:56:06.446 [debug] Recursive field result for left: 9
11:56:06.446 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.446 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.446 [debug] Recursive field result for left: 0
11:56:06.446 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.446 [debug] Recursive field result for right: 0
11:56:06.446 [debug] do_fold called with non-variant data: 0
11:56:06.446 [debug] do_fold called with non-variant data: 0
11:56:06.446 [debug] Recursive field result for right: 9
11:56:06.446 [debug] do_fold called with non-variant data: 9
11:56:06.446 [debug] do_fold called with non-variant data: 9
11:56:06.446 [debug] Recursive field result for left: 26
11:56:06.446 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.446 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.446 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.446 [debug] Recursive field result for left: 0
11:56:06.446 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.446 [debug] Recursive field result for right: 0
11:56:06.446 [debug] do_fold called with non-variant data: 0
11:56:06.446 [debug] do_fold called with non-variant data: 0
11:56:06.446 [debug] Recursive field result for left: 9
11:56:06.446 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.446 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.446 [debug] Recursive field result for left: 0
11:56:06.446 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.446 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.447 [debug] Recursive field result for right: 0
11:56:06.447 [debug] do_fold called with non-variant data: 0
11:56:06.447 [debug] do_fold called with non-variant data: 0
11:56:06.447 [debug] Recursive field result for right: 9
11:56:06.447 [debug] do_fold called with non-variant data: 9
11:56:06.447 [debug] do_fold called with non-variant data: 9
11:56:06.447 [debug] Recursive field result for right: 26
11:56:06.447 [debug] do_fold called with non-variant data: 26
11:56:06.447 [debug] do_fold called with non-variant data: 26
11:56:06.447 [debug] Recursive field result for right: 59
11:56:06.447 [debug] do_fold called with non-variant data: 59
11:56:06.447 [debug] do_fold called with non-variant data: 59
11:56:06.447 [debug] Recursive field result for left: 124
11:56:06.447 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.447 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.447 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.447 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.447 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.447 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.447 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.447 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.447 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.447 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.447 [debug] Recursive field result for left: 0
11:56:06.447 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.447 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.447 [debug] Recursive field result for right: 0
11:56:06.447 [debug] do_fold called with non-variant data: 0
11:56:06.447 [debug] do_fold called with non-variant data: 0
11:56:06.447 [debug] Recursive field result for left: 9
11:56:06.447 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.447 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.447 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.447 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.447 [debug] Recursive field result for left: 0
11:56:06.447 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.447 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.447 [debug] Recursive field result for right: 0
11:56:06.447 [debug] do_fold called with non-variant data: 0
11:56:06.447 [debug] do_fold called with non-variant data: 0
11:56:06.447 [debug] Recursive field result for right: 9
11:56:06.447 [debug] do_fold called with non-variant data: 9
11:56:06.447 [debug] do_fold called with non-variant data: 9
11:56:06.447 [debug] Recursive field result for left: 26
11:56:06.447 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.447 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.447 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.447 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.447 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.447 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.447 [debug] Recursive field result for left: 0
11:56:06.447 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.447 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.447 [debug] Recursive field result for right: 0
11:56:06.447 [debug] do_fold called with non-variant data: 0
11:56:06.447 [debug] do_fold called with non-variant data: 0
11:56:06.448 [debug] Recursive field result for left: 9
11:56:06.448 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.448 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.448 [debug] Recursive field result for left: 0
11:56:06.448 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.448 [debug] Recursive field result for right: 0
11:56:06.448 [debug] do_fold called with non-variant data: 0
11:56:06.448 [debug] do_fold called with non-variant data: 0
11:56:06.448 [debug] Recursive field result for right: 9
11:56:06.448 [debug] do_fold called with non-variant data: 9
11:56:06.448 [debug] do_fold called with non-variant data: 9
11:56:06.448 [debug] Recursive field result for right: 26
11:56:06.448 [debug] do_fold called with non-variant data: 26
11:56:06.448 [debug] do_fold called with non-variant data: 26
11:56:06.448 [debug] Recursive field result for left: 59
11:56:06.448 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.448 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.448 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.448 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.448 [debug] Recursive field result for left: 0
11:56:06.448 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.448 [debug] Recursive field result for right: 0
11:56:06.448 [debug] do_fold called with non-variant data: 0
11:56:06.448 [debug] do_fold called with non-variant data: 0
11:56:06.448 [debug] Recursive field result for left: 9
11:56:06.448 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.448 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.448 [debug] Recursive field result for left: 0
11:56:06.448 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.448 [debug] Recursive field result for right: 0
11:56:06.448 [debug] do_fold called with non-variant data: 0
11:56:06.448 [debug] do_fold called with non-variant data: 0
11:56:06.448 [debug] Recursive field result for right: 9
11:56:06.448 [debug] do_fold called with non-variant data: 9
11:56:06.448 [debug] do_fold called with non-variant data: 9
11:56:06.448 [debug] Recursive field result for left: 26
11:56:06.448 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.448 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.448 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.448 [debug] Recursive field result for left: 0
11:56:06.448 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.448 [debug] Recursive field result for right: 0
11:56:06.448 [debug] do_fold called with non-variant data: 0
11:56:06.448 [debug] do_fold called with non-variant data: 0
11:56:06.448 [debug] Recursive field result for left: 9
11:56:06.448 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.448 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.448 [debug] Recursive field result for left: 0
11:56:06.448 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.448 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.448 [debug] Recursive field result for right: 0
11:56:06.448 [debug] do_fold called with non-variant data: 0
11:56:06.448 [debug] do_fold called with non-variant data: 0
11:56:06.448 [debug] Recursive field result for right: 9
11:56:06.448 [debug] do_fold called with non-variant data: 9
11:56:06.448 [debug] do_fold called with non-variant data: 9
11:56:06.448 [debug] Recursive field result for right: 26
11:56:06.448 [debug] do_fold called with non-variant data: 26
11:56:06.448 [debug] do_fold called with non-variant data: 26
11:56:06.449 [debug] Recursive field result for right: 59
11:56:06.449 [debug] do_fold called with non-variant data: 59
11:56:06.449 [debug] do_fold called with non-variant data: 59
11:56:06.449 [debug] Recursive field result for right: 124
11:56:06.449 [debug] do_fold called with non-variant data: 124
11:56:06.449 [debug] do_fold called with non-variant data: 124
11:56:06.449 [debug] Recursive field result for right: 253
11:56:06.449 [debug] do_fold called with non-variant data: 253
11:56:06.449 [debug] do_fold called with non-variant data: 253
11:56:06.449 [debug] Recursive field result for left: 510
11:56:06.449 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.449 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.449 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.449 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.449 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.450 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.450 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.450 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.450 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.450 [debug] Recursive field result for left: 0
11:56:06.450 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.450 [debug] Recursive field result for right: 0
11:56:06.450 [debug] do_fold called with non-variant data: 0
11:56:06.450 [debug] do_fold called with non-variant data: 0
11:56:06.450 [debug] Recursive field result for left: 9
11:56:06.450 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.450 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.450 [debug] Recursive field result for left: 0
11:56:06.450 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.450 [debug] Recursive field result for right: 0
11:56:06.450 [debug] do_fold called with non-variant data: 0
11:56:06.450 [debug] do_fold called with non-variant data: 0
11:56:06.450 [debug] Recursive field result for right: 9
11:56:06.450 [debug] do_fold called with non-variant data: 9
11:56:06.450 [debug] do_fold called with non-variant data: 9
11:56:06.450 [debug] Recursive field result for left: 26
11:56:06.450 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.450 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.450 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.450 [debug] Recursive field result for left: 0
11:56:06.450 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.450 [debug] Recursive field result for right: 0
11:56:06.450 [debug] do_fold called with non-variant data: 0
11:56:06.450 [debug] do_fold called with non-variant data: 0
11:56:06.450 [debug] Recursive field result for left: 9
11:56:06.450 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.450 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.450 [debug] Recursive field result for left: 0
11:56:06.450 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.450 [debug] Recursive field result for right: 0
11:56:06.450 [debug] do_fold called with non-variant data: 0
11:56:06.450 [debug] do_fold called with non-variant data: 0
11:56:06.450 [debug] Recursive field result for right: 9
11:56:06.450 [debug] do_fold called with non-variant data: 9
11:56:06.450 [debug] do_fold called with non-variant data: 9
11:56:06.450 [debug] Recursive field result for right: 26
11:56:06.450 [debug] do_fold called with non-variant data: 26
11:56:06.450 [debug] do_fold called with non-variant data: 26
11:56:06.450 [debug] Recursive field result for left: 59
11:56:06.450 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.450 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.450 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.450 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.450 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.451 [debug] Recursive field result for left: 0
11:56:06.451 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.451 [debug] Recursive field result for right: 0
11:56:06.451 [debug] do_fold called with non-variant data: 0
11:56:06.451 [debug] do_fold called with non-variant data: 0
11:56:06.451 [debug] Recursive field result for left: 9
11:56:06.451 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.451 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.451 [debug] Recursive field result for left: 0
11:56:06.451 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.451 [debug] Recursive field result for right: 0
11:56:06.451 [debug] do_fold called with non-variant data: 0
11:56:06.451 [debug] do_fold called with non-variant data: 0
11:56:06.451 [debug] Recursive field result for right: 9
11:56:06.451 [debug] do_fold called with non-variant data: 9
11:56:06.451 [debug] do_fold called with non-variant data: 9
11:56:06.451 [debug] Recursive field result for left: 26
11:56:06.451 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.451 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.451 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.451 [debug] Recursive field result for left: 0
11:56:06.451 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.451 [debug] Recursive field result for right: 0
11:56:06.451 [debug] do_fold called with non-variant data: 0
11:56:06.451 [debug] do_fold called with non-variant data: 0
11:56:06.451 [debug] Recursive field result for left: 9
11:56:06.451 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.451 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.451 [debug] Recursive field result for left: 0
11:56:06.451 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.451 [debug] Recursive field result for right: 0
11:56:06.451 [debug] do_fold called with non-variant data: 0
11:56:06.451 [debug] do_fold called with non-variant data: 0
11:56:06.451 [debug] Recursive field result for right: 9
11:56:06.451 [debug] do_fold called with non-variant data: 9
11:56:06.451 [debug] do_fold called with non-variant data: 9
11:56:06.451 [debug] Recursive field result for right: 26
11:56:06.451 [debug] do_fold called with non-variant data: 26
11:56:06.451 [debug] do_fold called with non-variant data: 26
11:56:06.451 [debug] Recursive field result for right: 59
11:56:06.451 [debug] do_fold called with non-variant data: 59
11:56:06.451 [debug] do_fold called with non-variant data: 59
11:56:06.451 [debug] Recursive field result for left: 124
11:56:06.451 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.451 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.451 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.451 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.451 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.451 [debug] Recursive field result for left: 0
11:56:06.451 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.451 [debug] Recursive field result for right: 0
11:56:06.451 [debug] do_fold called with non-variant data: 0
11:56:06.451 [debug] do_fold called with non-variant data: 0
11:56:06.451 [debug] Recursive field result for left: 9
11:56:06.451 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.451 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.451 [debug] Recursive field result for left: 0
11:56:06.451 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.451 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.451 [debug] Recursive field result for right: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.452 [debug] Recursive field result for right: 9
11:56:06.452 [debug] do_fold called with non-variant data: 9
11:56:06.452 [debug] do_fold called with non-variant data: 9
11:56:06.452 [debug] Recursive field result for left: 26
11:56:06.452 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.452 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.452 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.452 [debug] Recursive field result for left: 0
11:56:06.452 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.452 [debug] Recursive field result for right: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.452 [debug] Recursive field result for left: 9
11:56:06.452 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.452 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.452 [debug] Recursive field result for left: 0
11:56:06.452 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.452 [debug] Recursive field result for right: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.452 [debug] Recursive field result for right: 9
11:56:06.452 [debug] do_fold called with non-variant data: 9
11:56:06.452 [debug] do_fold called with non-variant data: 9
11:56:06.452 [debug] Recursive field result for right: 26
11:56:06.452 [debug] do_fold called with non-variant data: 26
11:56:06.452 [debug] do_fold called with non-variant data: 26
11:56:06.452 [debug] Recursive field result for left: 59
11:56:06.452 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.452 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.452 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.452 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.452 [debug] Recursive field result for left: 0
11:56:06.452 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.452 [debug] Recursive field result for right: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.452 [debug] Recursive field result for left: 9
11:56:06.452 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.452 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.452 [debug] Recursive field result for left: 0
11:56:06.452 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.452 [debug] Recursive field result for right: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.452 [debug] Recursive field result for right: 9
11:56:06.452 [debug] do_fold called with non-variant data: 9
11:56:06.452 [debug] do_fold called with non-variant data: 9
11:56:06.452 [debug] Recursive field result for left: 26
11:56:06.452 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.452 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.452 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.452 [debug] Recursive field result for left: 0
11:56:06.452 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.452 [debug] Recursive field result for right: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.452 [debug] Recursive field result for left: 9
11:56:06.452 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.452 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.452 [debug] Recursive field result for left: 0
11:56:06.452 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.452 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.452 [debug] Recursive field result for right: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.452 [debug] do_fold called with non-variant data: 0
11:56:06.453 [debug] Recursive field result for right: 9
11:56:06.453 [debug] do_fold called with non-variant data: 9
11:56:06.453 [debug] do_fold called with non-variant data: 9
11:56:06.453 [debug] Recursive field result for right: 26
11:56:06.453 [debug] do_fold called with non-variant data: 26
11:56:06.453 [debug] do_fold called with non-variant data: 26
11:56:06.453 [debug] Recursive field result for right: 59
11:56:06.453 [debug] do_fold called with non-variant data: 59
11:56:06.453 [debug] do_fold called with non-variant data: 59
11:56:06.453 [debug] Recursive field result for right: 124
11:56:06.453 [debug] do_fold called with non-variant data: 124
11:56:06.453 [debug] do_fold called with non-variant data: 124
11:56:06.453 [debug] Recursive field result for left: 253
11:56:06.453 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.453 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.453 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.453 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.453 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.453 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.453 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.453 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.453 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.453 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.453 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.453 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.453 [debug] Recursive field result for left: 0
11:56:06.453 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.453 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.453 [debug] Recursive field result for right: 0
11:56:06.453 [debug] do_fold called with non-variant data: 0
11:56:06.453 [debug] do_fold called with non-variant data: 0
11:56:06.453 [debug] Recursive field result for left: 9
11:56:06.453 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.453 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.453 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.453 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.453 [debug] Recursive field result for left: 0
11:56:06.453 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.453 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.453 [debug] Recursive field result for right: 0
11:56:06.453 [debug] do_fold called with non-variant data: 0
11:56:06.453 [debug] do_fold called with non-variant data: 0
11:56:06.453 [debug] Recursive field result for right: 9
11:56:06.453 [debug] do_fold called with non-variant data: 9
11:56:06.453 [debug] do_fold called with non-variant data: 9
11:56:06.453 [debug] Recursive field result for left: 26
11:56:06.453 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.454 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.454 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.454 [debug] Recursive field result for left: 0
11:56:06.454 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.454 [debug] Recursive field result for right: 0
11:56:06.454 [debug] do_fold called with non-variant data: 0
11:56:06.454 [debug] do_fold called with non-variant data: 0
11:56:06.454 [debug] Recursive field result for left: 9
11:56:06.454 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.454 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.454 [debug] Recursive field result for left: 0
11:56:06.454 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.454 [debug] Recursive field result for right: 0
11:56:06.454 [debug] do_fold called with non-variant data: 0
11:56:06.454 [debug] do_fold called with non-variant data: 0
11:56:06.454 [debug] Recursive field result for right: 9
11:56:06.454 [debug] do_fold called with non-variant data: 9
11:56:06.454 [debug] do_fold called with non-variant data: 9
11:56:06.454 [debug] Recursive field result for right: 26
11:56:06.454 [debug] do_fold called with non-variant data: 26
11:56:06.454 [debug] do_fold called with non-variant data: 26
11:56:06.454 [debug] Recursive field result for left: 59
11:56:06.454 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.454 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.454 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.454 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.454 [debug] Recursive field result for left: 0
11:56:06.454 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.454 [debug] Recursive field result for right: 0
11:56:06.454 [debug] do_fold called with non-variant data: 0
11:56:06.454 [debug] do_fold called with non-variant data: 0
11:56:06.454 [debug] Recursive field result for left: 9
11:56:06.454 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.454 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.454 [debug] Recursive field result for left: 0
11:56:06.454 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.454 [debug] Recursive field result for right: 0
11:56:06.454 [debug] do_fold called with non-variant data: 0
11:56:06.454 [debug] do_fold called with non-variant data: 0
11:56:06.454 [debug] Recursive field result for right: 9
11:56:06.454 [debug] do_fold called with non-variant data: 9
11:56:06.454 [debug] do_fold called with non-variant data: 9
11:56:06.454 [debug] Recursive field result for left: 26
11:56:06.454 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.454 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.454 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.454 [debug] Recursive field result for left: 0
11:56:06.454 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.454 [debug] Recursive field result for right: 0
11:56:06.454 [debug] do_fold called with non-variant data: 0
11:56:06.454 [debug] do_fold called with non-variant data: 0
11:56:06.454 [debug] Recursive field result for left: 9
11:56:06.454 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.454 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.454 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.454 [debug] Recursive field result for left: 0
11:56:06.454 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.455 [debug] Recursive field result for right: 0
11:56:06.455 [debug] do_fold called with non-variant data: 0
11:56:06.455 [debug] do_fold called with non-variant data: 0
11:56:06.455 [debug] Recursive field result for right: 9
11:56:06.455 [debug] do_fold called with non-variant data: 9
11:56:06.455 [debug] do_fold called with non-variant data: 9
11:56:06.455 [debug] Recursive field result for right: 26
11:56:06.455 [debug] do_fold called with non-variant data: 26
11:56:06.455 [debug] do_fold called with non-variant data: 26
11:56:06.455 [debug] Recursive field result for right: 59
11:56:06.455 [debug] do_fold called with non-variant data: 59
11:56:06.455 [debug] do_fold called with non-variant data: 59
11:56:06.455 [debug] Recursive field result for left: 124
11:56:06.455 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.455 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.455 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.455 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.455 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.455 [debug] Recursive field result for left: 0
11:56:06.455 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.455 [debug] Recursive field result for right: 0
11:56:06.455 [debug] do_fold called with non-variant data: 0
11:56:06.455 [debug] do_fold called with non-variant data: 0
11:56:06.455 [debug] Recursive field result for left: 9
11:56:06.455 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.455 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.455 [debug] Recursive field result for left: 0
11:56:06.455 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.455 [debug] Recursive field result for right: 0
11:56:06.455 [debug] do_fold called with non-variant data: 0
11:56:06.455 [debug] do_fold called with non-variant data: 0
11:56:06.455 [debug] Recursive field result for right: 9
11:56:06.455 [debug] do_fold called with non-variant data: 9
11:56:06.455 [debug] do_fold called with non-variant data: 9
11:56:06.455 [debug] Recursive field result for left: 26
11:56:06.455 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.455 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.455 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.455 [debug] Recursive field result for left: 0
11:56:06.455 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.455 [debug] Recursive field result for right: 0
11:56:06.455 [debug] do_fold called with non-variant data: 0
11:56:06.455 [debug] do_fold called with non-variant data: 0
11:56:06.455 [debug] Recursive field result for left: 9
11:56:06.455 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.455 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.455 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.455 [debug] Recursive field result for left: 0
11:56:06.456 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.456 [debug] Recursive field result for right: 0
11:56:06.456 [debug] do_fold called with non-variant data: 0
11:56:06.456 [debug] do_fold called with non-variant data: 0
11:56:06.456 [debug] Recursive field result for right: 9
11:56:06.456 [debug] do_fold called with non-variant data: 9
11:56:06.456 [debug] do_fold called with non-variant data: 9
11:56:06.456 [debug] Recursive field result for right: 26
11:56:06.456 [debug] do_fold called with non-variant data: 26
11:56:06.456 [debug] do_fold called with non-variant data: 26
11:56:06.456 [debug] Recursive field result for left: 59
11:56:06.456 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.456 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.456 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.456 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.456 [debug] Recursive field result for left: 0
11:56:06.456 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.456 [debug] Recursive field result for right: 0
11:56:06.456 [debug] do_fold called with non-variant data: 0
11:56:06.456 [debug] do_fold called with non-variant data: 0
11:56:06.456 [debug] Recursive field result for left: 9
11:56:06.456 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.456 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.456 [debug] Recursive field result for left: 0
11:56:06.456 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.456 [debug] Recursive field result for right: 0
11:56:06.456 [debug] do_fold called with non-variant data: 0
11:56:06.456 [debug] do_fold called with non-variant data: 0
11:56:06.456 [debug] Recursive field result for right: 9
11:56:06.456 [debug] do_fold called with non-variant data: 9
11:56:06.456 [debug] do_fold called with non-variant data: 9
11:56:06.456 [debug] Recursive field result for left: 26
11:56:06.456 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.456 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.456 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.456 [debug] Recursive field result for left: 0
11:56:06.456 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.456 [debug] Recursive field result for right: 0
11:56:06.456 [debug] do_fold called with non-variant data: 0
11:56:06.456 [debug] do_fold called with non-variant data: 0
11:56:06.456 [debug] Recursive field result for left: 9
11:56:06.456 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.456 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.456 [debug] Recursive field result for left: 0
11:56:06.456 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.456 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.456 [debug] Recursive field result for right: 0
11:56:06.456 [debug] do_fold called with non-variant data: 0
11:56:06.456 [debug] do_fold called with non-variant data: 0
11:56:06.456 [debug] Recursive field result for right: 9
11:56:06.456 [debug] do_fold called with non-variant data: 9
11:56:06.456 [debug] do_fold called with non-variant data: 9
11:56:06.456 [debug] Recursive field result for right: 26
11:56:06.456 [debug] do_fold called with non-variant data: 26
11:56:06.456 [debug] do_fold called with non-variant data: 26
11:56:06.456 [debug] Recursive field result for right: 59
11:56:06.456 [debug] do_fold called with non-variant data: 59
11:56:06.456 [debug] do_fold called with non-variant data: 59
11:56:06.456 [debug] Recursive field result for right: 124
11:56:06.456 [debug] do_fold called with non-variant data: 124
11:56:06.456 [debug] do_fold called with non-variant data: 124
11:56:06.456 [debug] Recursive field result for right: 253
11:56:06.456 [debug] do_fold called with non-variant data: 253
11:56:06.456 [debug] do_fold called with non-variant data: 253
11:56:06.456 [debug] Recursive field result for right: 510
11:56:06.456 [debug] do_fold called with non-variant data: 510
11:56:06.456 [debug] do_fold called with non-variant data: 510
11:56:06.456 [debug] Recursive field result for left: 1023
11:56:06.457 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}, variant_type: :node, state: nil
11:56:06.458 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, val: 3, variant: :node}
11:56:06.458 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.459 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.459 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.459 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.459 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.459 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.459 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.459 [debug] Recursive field result for left: 0
11:56:06.459 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.459 [debug] Recursive field result for right: 0
11:56:06.459 [debug] do_fold called with non-variant data: 0
11:56:06.459 [debug] do_fold called with non-variant data: 0
11:56:06.459 [debug] Recursive field result for left: 9
11:56:06.459 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.459 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.459 [debug] Recursive field result for left: 0
11:56:06.459 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.459 [debug] Recursive field result for right: 0
11:56:06.459 [debug] do_fold called with non-variant data: 0
11:56:06.459 [debug] do_fold called with non-variant data: 0
11:56:06.459 [debug] Recursive field result for right: 9
11:56:06.459 [debug] do_fold called with non-variant data: 9
11:56:06.459 [debug] do_fold called with non-variant data: 9
11:56:06.459 [debug] Recursive field result for left: 26
11:56:06.459 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.459 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.459 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.459 [debug] Recursive field result for left: 0
11:56:06.459 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.459 [debug] Recursive field result for right: 0
11:56:06.459 [debug] do_fold called with non-variant data: 0
11:56:06.459 [debug] do_fold called with non-variant data: 0
11:56:06.459 [debug] Recursive field result for left: 9
11:56:06.459 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.459 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.459 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.460 [debug] Recursive field result for left: 0
11:56:06.460 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.460 [debug] Recursive field result for right: 0
11:56:06.460 [debug] do_fold called with non-variant data: 0
11:56:06.460 [debug] do_fold called with non-variant data: 0
11:56:06.460 [debug] Recursive field result for right: 9
11:56:06.460 [debug] do_fold called with non-variant data: 9
11:56:06.460 [debug] do_fold called with non-variant data: 9
11:56:06.460 [debug] Recursive field result for right: 26
11:56:06.460 [debug] do_fold called with non-variant data: 26
11:56:06.460 [debug] do_fold called with non-variant data: 26
11:56:06.460 [debug] Recursive field result for left: 59
11:56:06.460 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.460 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.460 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.460 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.460 [debug] Recursive field result for left: 0
11:56:06.460 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.460 [debug] Recursive field result for right: 0
11:56:06.460 [debug] do_fold called with non-variant data: 0
11:56:06.460 [debug] do_fold called with non-variant data: 0
11:56:06.460 [debug] Recursive field result for left: 9
11:56:06.460 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.460 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.460 [debug] Recursive field result for left: 0
11:56:06.460 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.460 [debug] Recursive field result for right: 0
11:56:06.460 [debug] do_fold called with non-variant data: 0
11:56:06.460 [debug] do_fold called with non-variant data: 0
11:56:06.460 [debug] Recursive field result for right: 9
11:56:06.460 [debug] do_fold called with non-variant data: 9
11:56:06.460 [debug] do_fold called with non-variant data: 9
11:56:06.460 [debug] Recursive field result for left: 26
11:56:06.460 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.460 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.460 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.460 [debug] Recursive field result for left: 0
11:56:06.460 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.460 [debug] Recursive field result for right: 0
11:56:06.460 [debug] do_fold called with non-variant data: 0
11:56:06.460 [debug] do_fold called with non-variant data: 0
11:56:06.460 [debug] Recursive field result for left: 9
11:56:06.460 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.460 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.460 [debug] Recursive field result for left: 0
11:56:06.460 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.460 [debug] Recursive field result for right: 0
11:56:06.460 [debug] do_fold called with non-variant data: 0
11:56:06.460 [debug] do_fold called with non-variant data: 0
11:56:06.460 [debug] Recursive field result for right: 9
11:56:06.460 [debug] do_fold called with non-variant data: 9
11:56:06.460 [debug] do_fold called with non-variant data: 9
11:56:06.460 [debug] Recursive field result for right: 26
11:56:06.460 [debug] do_fold called with non-variant data: 26
11:56:06.460 [debug] do_fold called with non-variant data: 26
11:56:06.460 [debug] Recursive field result for right: 59
11:56:06.460 [debug] do_fold called with non-variant data: 59
11:56:06.460 [debug] do_fold called with non-variant data: 59
11:56:06.460 [debug] Recursive field result for left: 124
11:56:06.460 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.460 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.460 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.460 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.460 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.460 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.461 [debug] Recursive field result for left: 0
11:56:06.461 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.461 [debug] Recursive field result for right: 0
11:56:06.461 [debug] do_fold called with non-variant data: 0
11:56:06.461 [debug] do_fold called with non-variant data: 0
11:56:06.461 [debug] Recursive field result for left: 9
11:56:06.461 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.461 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.461 [debug] Recursive field result for left: 0
11:56:06.461 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.461 [debug] Recursive field result for right: 0
11:56:06.461 [debug] do_fold called with non-variant data: 0
11:56:06.461 [debug] do_fold called with non-variant data: 0
11:56:06.461 [debug] Recursive field result for right: 9
11:56:06.461 [debug] do_fold called with non-variant data: 9
11:56:06.461 [debug] do_fold called with non-variant data: 9
11:56:06.461 [debug] Recursive field result for left: 26
11:56:06.461 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.461 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.461 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.461 [debug] Recursive field result for left: 0
11:56:06.461 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.461 [debug] Recursive field result for right: 0
11:56:06.461 [debug] do_fold called with non-variant data: 0
11:56:06.461 [debug] do_fold called with non-variant data: 0
11:56:06.461 [debug] Recursive field result for left: 9
11:56:06.461 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.461 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.461 [debug] Recursive field result for left: 0
11:56:06.461 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.461 [debug] Recursive field result for right: 0
11:56:06.461 [debug] do_fold called with non-variant data: 0
11:56:06.461 [debug] do_fold called with non-variant data: 0
11:56:06.461 [debug] Recursive field result for right: 9
11:56:06.461 [debug] do_fold called with non-variant data: 9
11:56:06.461 [debug] do_fold called with non-variant data: 9
11:56:06.461 [debug] Recursive field result for right: 26
11:56:06.461 [debug] do_fold called with non-variant data: 26
11:56:06.461 [debug] do_fold called with non-variant data: 26
11:56:06.461 [debug] Recursive field result for left: 59
11:56:06.461 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.461 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.461 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.461 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.461 [debug] Recursive field result for left: 0
11:56:06.461 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.461 [debug] Recursive field result for right: 0
11:56:06.461 [debug] do_fold called with non-variant data: 0
11:56:06.461 [debug] do_fold called with non-variant data: 0
11:56:06.461 [debug] Recursive field result for left: 9
11:56:06.461 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.461 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.461 [debug] Recursive field result for left: 0
11:56:06.461 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.461 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.461 [debug] Recursive field result for right: 0
11:56:06.461 [debug] do_fold called with non-variant data: 0
11:56:06.461 [debug] do_fold called with non-variant data: 0
11:56:06.461 [debug] Recursive field result for right: 9
11:56:06.461 [debug] do_fold called with non-variant data: 9
11:56:06.461 [debug] do_fold called with non-variant data: 9
11:56:06.461 [debug] Recursive field result for left: 26
11:56:06.462 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.462 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.462 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.462 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.462 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.462 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.462 [debug] Recursive field result for left: 0
11:56:06.462 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.462 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.462 [debug] Recursive field result for right: 0
11:56:06.462 [debug] do_fold called with non-variant data: 0
11:56:06.462 [debug] do_fold called with non-variant data: 0
11:56:06.462 [debug] Recursive field result for left: 9
11:56:06.462 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.462 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.462 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.462 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.462 [debug] Recursive field result for left: 0
11:56:06.462 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.462 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.462 [debug] Recursive field result for right: 0
11:56:06.462 [debug] do_fold called with non-variant data: 0
11:56:06.462 [debug] do_fold called with non-variant data: 0
11:56:06.462 [debug] Recursive field result for right: 9
11:56:06.462 [debug] do_fold called with non-variant data: 9
11:56:06.462 [debug] do_fold called with non-variant data: 9
11:56:06.462 [debug] Recursive field result for right: 26
11:56:06.462 [debug] do_fold called with non-variant data: 26
11:56:06.462 [debug] do_fold called with non-variant data: 26
11:56:06.462 [debug] Recursive field result for right: 59
11:56:06.462 [debug] do_fold called with non-variant data: 59
11:56:06.462 [debug] do_fold called with non-variant data: 59
11:56:06.462 [debug] Recursive field result for right: 124
11:56:06.462 [debug] do_fold called with non-variant data: 124
11:56:06.462 [debug] do_fold called with non-variant data: 124
11:56:06.462 [debug] Recursive field result for left: 253
11:56:06.462 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.463 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.463 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.463 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.463 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.463 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.463 [debug] Recursive field result for left: 0
11:56:06.463 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.463 [debug] Recursive field result for right: 0
11:56:06.463 [debug] do_fold called with non-variant data: 0
11:56:06.463 [debug] do_fold called with non-variant data: 0
11:56:06.463 [debug] Recursive field result for left: 9
11:56:06.463 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.463 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.463 [debug] Recursive field result for left: 0
11:56:06.463 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.463 [debug] Recursive field result for right: 0
11:56:06.463 [debug] do_fold called with non-variant data: 0
11:56:06.463 [debug] do_fold called with non-variant data: 0
11:56:06.463 [debug] Recursive field result for right: 9
11:56:06.463 [debug] do_fold called with non-variant data: 9
11:56:06.463 [debug] do_fold called with non-variant data: 9
11:56:06.463 [debug] Recursive field result for left: 26
11:56:06.463 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.463 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.463 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.463 [debug] Recursive field result for left: 0
11:56:06.463 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.463 [debug] Recursive field result for right: 0
11:56:06.463 [debug] do_fold called with non-variant data: 0
11:56:06.463 [debug] do_fold called with non-variant data: 0
11:56:06.463 [debug] Recursive field result for left: 9
11:56:06.463 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.463 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.463 [debug] Recursive field result for left: 0
11:56:06.463 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.463 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.463 [debug] Recursive field result for right: 0
11:56:06.463 [debug] do_fold called with non-variant data: 0
11:56:06.463 [debug] do_fold called with non-variant data: 0
11:56:06.463 [debug] Recursive field result for right: 9
11:56:06.463 [debug] do_fold called with non-variant data: 9
11:56:06.463 [debug] do_fold called with non-variant data: 9
11:56:06.463 [debug] Recursive field result for right: 26
11:56:06.463 [debug] do_fold called with non-variant data: 26
11:56:06.463 [debug] do_fold called with non-variant data: 26
11:56:06.463 [debug] Recursive field result for left: 59
11:56:06.463 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.464 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.464 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.464 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.464 [debug] Recursive field result for left: 0
11:56:06.464 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.464 [debug] Recursive field result for right: 0
11:56:06.464 [debug] do_fold called with non-variant data: 0
11:56:06.464 [debug] do_fold called with non-variant data: 0
11:56:06.464 [debug] Recursive field result for left: 9
11:56:06.464 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.464 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.464 [debug] Recursive field result for left: 0
11:56:06.464 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.464 [debug] Recursive field result for right: 0
11:56:06.464 [debug] do_fold called with non-variant data: 0
11:56:06.464 [debug] do_fold called with non-variant data: 0
11:56:06.464 [debug] Recursive field result for right: 9
11:56:06.464 [debug] do_fold called with non-variant data: 9
11:56:06.464 [debug] do_fold called with non-variant data: 9
11:56:06.464 [debug] Recursive field result for left: 26
11:56:06.464 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.464 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.464 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.464 [debug] Recursive field result for left: 0
11:56:06.464 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.464 [debug] Recursive field result for right: 0
11:56:06.464 [debug] do_fold called with non-variant data: 0
11:56:06.464 [debug] do_fold called with non-variant data: 0
11:56:06.464 [debug] Recursive field result for left: 9
11:56:06.464 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.464 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.464 [debug] Recursive field result for left: 0
11:56:06.464 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.464 [debug] Recursive field result for right: 0
11:56:06.464 [debug] do_fold called with non-variant data: 0
11:56:06.464 [debug] do_fold called with non-variant data: 0
11:56:06.464 [debug] Recursive field result for right: 9
11:56:06.464 [debug] do_fold called with non-variant data: 9
11:56:06.464 [debug] do_fold called with non-variant data: 9
11:56:06.464 [debug] Recursive field result for right: 26
11:56:06.464 [debug] do_fold called with non-variant data: 26
11:56:06.464 [debug] do_fold called with non-variant data: 26
11:56:06.464 [debug] Recursive field result for right: 59
11:56:06.464 [debug] do_fold called with non-variant data: 59
11:56:06.464 [debug] do_fold called with non-variant data: 59
11:56:06.464 [debug] Recursive field result for left: 124
11:56:06.464 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.464 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.464 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.465 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.465 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.465 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.465 [debug] Recursive field result for left: 0
11:56:06.465 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.465 [debug] Recursive field result for right: 0
11:56:06.465 [debug] do_fold called with non-variant data: 0
11:56:06.465 [debug] do_fold called with non-variant data: 0
11:56:06.465 [debug] Recursive field result for left: 9
11:56:06.465 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.465 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.465 [debug] Recursive field result for left: 0
11:56:06.465 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.465 [debug] Recursive field result for right: 0
11:56:06.465 [debug] do_fold called with non-variant data: 0
11:56:06.465 [debug] do_fold called with non-variant data: 0
11:56:06.465 [debug] Recursive field result for right: 9
11:56:06.465 [debug] do_fold called with non-variant data: 9
11:56:06.465 [debug] do_fold called with non-variant data: 9
11:56:06.465 [debug] Recursive field result for left: 26
11:56:06.465 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.465 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.465 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.465 [debug] Recursive field result for left: 0
11:56:06.465 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.465 [debug] Recursive field result for right: 0
11:56:06.465 [debug] do_fold called with non-variant data: 0
11:56:06.465 [debug] do_fold called with non-variant data: 0
11:56:06.465 [debug] Recursive field result for left: 9
11:56:06.465 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.465 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.465 [debug] Recursive field result for left: 0
11:56:06.465 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.465 [debug] Recursive field result for right: 0
11:56:06.465 [debug] do_fold called with non-variant data: 0
11:56:06.465 [debug] do_fold called with non-variant data: 0
11:56:06.465 [debug] Recursive field result for right: 9
11:56:06.465 [debug] do_fold called with non-variant data: 9
11:56:06.465 [debug] do_fold called with non-variant data: 9
11:56:06.465 [debug] Recursive field result for right: 26
11:56:06.465 [debug] do_fold called with non-variant data: 26
11:56:06.465 [debug] do_fold called with non-variant data: 26
11:56:06.465 [debug] Recursive field result for left: 59
11:56:06.465 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.465 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.465 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.465 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.465 [debug] Recursive field result for left: 0
11:56:06.465 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.465 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.465 [debug] Recursive field result for right: 0
11:56:06.466 [debug] do_fold called with non-variant data: 0
11:56:06.466 [debug] do_fold called with non-variant data: 0
11:56:06.466 [debug] Recursive field result for left: 9
11:56:06.466 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.466 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.466 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.466 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.466 [debug] Recursive field result for left: 0
11:56:06.466 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.466 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.466 [debug] Recursive field result for right: 0
11:56:06.466 [debug] do_fold called with non-variant data: 0
11:56:06.466 [debug] do_fold called with non-variant data: 0
11:56:06.466 [debug] Recursive field result for right: 9
11:56:06.466 [debug] do_fold called with non-variant data: 9
11:56:06.466 [debug] do_fold called with non-variant data: 9
11:56:06.466 [debug] Recursive field result for left: 26
11:56:06.466 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.466 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.466 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.466 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.466 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.466 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.466 [debug] Recursive field result for left: 0
11:56:06.466 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.466 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.466 [debug] Recursive field result for right: 0
11:56:06.466 [debug] do_fold called with non-variant data: 0
11:56:06.466 [debug] do_fold called with non-variant data: 0
11:56:06.466 [debug] Recursive field result for left: 9
11:56:06.466 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.466 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.466 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.466 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.466 [debug] Recursive field result for left: 0
11:56:06.466 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.466 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.466 [debug] Recursive field result for right: 0
11:56:06.466 [debug] do_fold called with non-variant data: 0
11:56:06.466 [debug] do_fold called with non-variant data: 0
11:56:06.466 [debug] Recursive field result for right: 9
11:56:06.466 [debug] do_fold called with non-variant data: 9
11:56:06.466 [debug] do_fold called with non-variant data: 9
11:56:06.466 [debug] Recursive field result for right: 26
11:56:06.466 [debug] do_fold called with non-variant data: 26
11:56:06.466 [debug] do_fold called with non-variant data: 26
11:56:06.466 [debug] Recursive field result for right: 59
11:56:06.466 [debug] do_fold called with non-variant data: 59
11:56:06.466 [debug] do_fold called with non-variant data: 59
11:56:06.466 [debug] Recursive field result for right: 124
11:56:06.466 [debug] do_fold called with non-variant data: 124
11:56:06.466 [debug] do_fold called with non-variant data: 124
11:56:06.466 [debug] Recursive field result for right: 253
11:56:06.466 [debug] do_fold called with non-variant data: 253
11:56:06.466 [debug] do_fold called with non-variant data: 253
11:56:06.466 [debug] Recursive field result for left: 510
11:56:06.466 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}, variant_type: :node, state: nil
11:56:06.466 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, right: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, val: 4, variant: :node}
11:56:06.467 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.467 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.467 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.467 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.467 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.467 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.467 [debug] Recursive field result for left: 0
11:56:06.467 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.467 [debug] Recursive field result for right: 0
11:56:06.467 [debug] do_fold called with non-variant data: 0
11:56:06.467 [debug] do_fold called with non-variant data: 0
11:56:06.467 [debug] Recursive field result for left: 9
11:56:06.467 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.467 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.467 [debug] Recursive field result for left: 0
11:56:06.467 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.467 [debug] Recursive field result for right: 0
11:56:06.467 [debug] do_fold called with non-variant data: 0
11:56:06.467 [debug] do_fold called with non-variant data: 0
11:56:06.467 [debug] Recursive field result for right: 9
11:56:06.467 [debug] do_fold called with non-variant data: 9
11:56:06.467 [debug] do_fold called with non-variant data: 9
11:56:06.467 [debug] Recursive field result for left: 26
11:56:06.467 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.467 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.467 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.467 [debug] Recursive field result for left: 0
11:56:06.467 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.467 [debug] Recursive field result for right: 0
11:56:06.467 [debug] do_fold called with non-variant data: 0
11:56:06.467 [debug] do_fold called with non-variant data: 0
11:56:06.467 [debug] Recursive field result for left: 9
11:56:06.467 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.467 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.467 [debug] Recursive field result for left: 0
11:56:06.467 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.467 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.467 [debug] Recursive field result for right: 0
11:56:06.467 [debug] do_fold called with non-variant data: 0
11:56:06.467 [debug] do_fold called with non-variant data: 0
11:56:06.467 [debug] Recursive field result for right: 9
11:56:06.467 [debug] do_fold called with non-variant data: 9
11:56:06.467 [debug] do_fold called with non-variant data: 9
11:56:06.467 [debug] Recursive field result for right: 26
11:56:06.467 [debug] do_fold called with non-variant data: 26
11:56:06.467 [debug] do_fold called with non-variant data: 26
11:56:06.467 [debug] Recursive field result for left: 59
11:56:06.467 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.468 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.468 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.468 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.468 [debug] Recursive field result for left: 0
11:56:06.468 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.468 [debug] Recursive field result for right: 0
11:56:06.468 [debug] do_fold called with non-variant data: 0
11:56:06.468 [debug] do_fold called with non-variant data: 0
11:56:06.468 [debug] Recursive field result for left: 9
11:56:06.468 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.468 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.468 [debug] Recursive field result for left: 0
11:56:06.468 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.468 [debug] Recursive field result for right: 0
11:56:06.468 [debug] do_fold called with non-variant data: 0
11:56:06.468 [debug] do_fold called with non-variant data: 0
11:56:06.468 [debug] Recursive field result for right: 9
11:56:06.468 [debug] do_fold called with non-variant data: 9
11:56:06.468 [debug] do_fold called with non-variant data: 9
11:56:06.468 [debug] Recursive field result for left: 26
11:56:06.468 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.468 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.468 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.468 [debug] Recursive field result for left: 0
11:56:06.468 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.468 [debug] Recursive field result for right: 0
11:56:06.468 [debug] do_fold called with non-variant data: 0
11:56:06.468 [debug] do_fold called with non-variant data: 0
11:56:06.468 [debug] Recursive field result for left: 9
11:56:06.468 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.468 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.468 [debug] Recursive field result for left: 0
11:56:06.468 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.468 [debug] Recursive field result for right: 0
11:56:06.468 [debug] do_fold called with non-variant data: 0
11:56:06.468 [debug] do_fold called with non-variant data: 0
11:56:06.468 [debug] Recursive field result for right: 9
11:56:06.468 [debug] do_fold called with non-variant data: 9
11:56:06.468 [debug] do_fold called with non-variant data: 9
11:56:06.468 [debug] Recursive field result for right: 26
11:56:06.468 [debug] do_fold called with non-variant data: 26
11:56:06.468 [debug] do_fold called with non-variant data: 26
11:56:06.468 [debug] Recursive field result for right: 59
11:56:06.468 [debug] do_fold called with non-variant data: 59
11:56:06.468 [debug] do_fold called with non-variant data: 59
11:56:06.468 [debug] Recursive field result for left: 124
11:56:06.468 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.468 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.468 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.468 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.468 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.468 [debug] Recursive field result for left: 0
11:56:06.468 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.468 [debug] Recursive field result for right: 0
11:56:06.468 [debug] do_fold called with non-variant data: 0
11:56:06.468 [debug] do_fold called with non-variant data: 0
11:56:06.468 [debug] Recursive field result for left: 9
11:56:06.468 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.468 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.468 [debug] Recursive field result for left: 0
11:56:06.468 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.468 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.468 [debug] Recursive field result for right: 0
11:56:06.468 [debug] do_fold called with non-variant data: 0
11:56:06.468 [debug] do_fold called with non-variant data: 0
11:56:06.468 [debug] Recursive field result for right: 9
11:56:06.468 [debug] do_fold called with non-variant data: 9
11:56:06.468 [debug] do_fold called with non-variant data: 9
11:56:06.468 [debug] Recursive field result for left: 26
11:56:06.469 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.469 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.469 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.469 [debug] Recursive field result for left: 0
11:56:06.469 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.469 [debug] Recursive field result for right: 0
11:56:06.469 [debug] do_fold called with non-variant data: 0
11:56:06.469 [debug] do_fold called with non-variant data: 0
11:56:06.469 [debug] Recursive field result for left: 9
11:56:06.469 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.469 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.469 [debug] Recursive field result for left: 0
11:56:06.469 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.469 [debug] Recursive field result for right: 0
11:56:06.469 [debug] do_fold called with non-variant data: 0
11:56:06.469 [debug] do_fold called with non-variant data: 0
11:56:06.469 [debug] Recursive field result for right: 9
11:56:06.469 [debug] do_fold called with non-variant data: 9
11:56:06.469 [debug] do_fold called with non-variant data: 9
11:56:06.469 [debug] Recursive field result for right: 26
11:56:06.469 [debug] do_fold called with non-variant data: 26
11:56:06.469 [debug] do_fold called with non-variant data: 26
11:56:06.469 [debug] Recursive field result for left: 59
11:56:06.469 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.469 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.469 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.469 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.469 [debug] Recursive field result for left: 0
11:56:06.469 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.469 [debug] Recursive field result for right: 0
11:56:06.469 [debug] do_fold called with non-variant data: 0
11:56:06.469 [debug] do_fold called with non-variant data: 0
11:56:06.469 [debug] Recursive field result for left: 9
11:56:06.469 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.469 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.469 [debug] Recursive field result for left: 0
11:56:06.469 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.469 [debug] Recursive field result for right: 0
11:56:06.469 [debug] do_fold called with non-variant data: 0
11:56:06.469 [debug] do_fold called with non-variant data: 0
11:56:06.469 [debug] Recursive field result for right: 9
11:56:06.469 [debug] do_fold called with non-variant data: 9
11:56:06.469 [debug] do_fold called with non-variant data: 9
11:56:06.469 [debug] Recursive field result for left: 26
11:56:06.469 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.469 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.469 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.469 [debug] Recursive field result for left: 0
11:56:06.469 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.469 [debug] Recursive field result for right: 0
11:56:06.469 [debug] do_fold called with non-variant data: 0
11:56:06.469 [debug] do_fold called with non-variant data: 0
11:56:06.469 [debug] Recursive field result for left: 9
11:56:06.469 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.469 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.469 [debug] Recursive field result for left: 0
11:56:06.469 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.469 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.469 [debug] Recursive field result for right: 0
11:56:06.469 [debug] do_fold called with non-variant data: 0
11:56:06.469 [debug] do_fold called with non-variant data: 0
11:56:06.469 [debug] Recursive field result for right: 9
11:56:06.469 [debug] do_fold called with non-variant data: 9
11:56:06.469 [debug] do_fold called with non-variant data: 9
11:56:06.469 [debug] Recursive field result for right: 26
11:56:06.469 [debug] do_fold called with non-variant data: 26
11:56:06.469 [debug] do_fold called with non-variant data: 26
11:56:06.469 [debug] Recursive field result for right: 59
11:56:06.469 [debug] do_fold called with non-variant data: 59
11:56:06.469 [debug] do_fold called with non-variant data: 59
11:56:06.469 [debug] Recursive field result for right: 124
11:56:06.469 [debug] do_fold called with non-variant data: 124
11:56:06.469 [debug] do_fold called with non-variant data: 124
11:56:06.469 [debug] Recursive field result for left: 253
11:56:06.469 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, right: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, val: 5, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for left: 0
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for right: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] Recursive field result for left: 9
11:56:06.470 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for left: 0
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for right: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] Recursive field result for right: 9
11:56:06.470 [debug] do_fold called with non-variant data: 9
11:56:06.470 [debug] do_fold called with non-variant data: 9
11:56:06.470 [debug] Recursive field result for left: 26
11:56:06.470 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for left: 0
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for right: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] Recursive field result for left: 9
11:56:06.470 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for left: 0
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for right: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] Recursive field result for right: 9
11:56:06.470 [debug] do_fold called with non-variant data: 9
11:56:06.470 [debug] do_fold called with non-variant data: 9
11:56:06.470 [debug] Recursive field result for right: 26
11:56:06.470 [debug] do_fold called with non-variant data: 26
11:56:06.470 [debug] do_fold called with non-variant data: 26
11:56:06.470 [debug] Recursive field result for left: 59
11:56:06.470 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for left: 0
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for right: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] Recursive field result for left: 9
11:56:06.470 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for left: 0
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for right: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] Recursive field result for right: 9
11:56:06.470 [debug] do_fold called with non-variant data: 9
11:56:06.470 [debug] do_fold called with non-variant data: 9
11:56:06.470 [debug] Recursive field result for left: 26
11:56:06.470 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for left: 0
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for right: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] do_fold called with non-variant data: 0
11:56:06.470 [debug] Recursive field result for left: 9
11:56:06.470 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.470 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.470 [debug] Recursive field result for left: 0
11:56:06.470 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.471 [debug] Recursive field result for right: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] Recursive field result for right: 9
11:56:06.471 [debug] do_fold called with non-variant data: 9
11:56:06.471 [debug] do_fold called with non-variant data: 9
11:56:06.471 [debug] Recursive field result for right: 26
11:56:06.471 [debug] do_fold called with non-variant data: 26
11:56:06.471 [debug] do_fold called with non-variant data: 26
11:56:06.471 [debug] Recursive field result for right: 59
11:56:06.471 [debug] do_fold called with non-variant data: 59
11:56:06.471 [debug] do_fold called with non-variant data: 59
11:56:06.471 [debug] Recursive field result for left: 124
11:56:06.471 [debug] do_fold called with data: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}, variant_type: :node, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}
11:56:06.471 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.471 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.471 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.471 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.471 [debug] Recursive field result for left: 0
11:56:06.471 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.471 [debug] Recursive field result for right: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] Recursive field result for left: 9
11:56:06.471 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.471 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.471 [debug] Recursive field result for left: 0
11:56:06.471 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.471 [debug] Recursive field result for right: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] Recursive field result for right: 9
11:56:06.471 [debug] do_fold called with non-variant data: 9
11:56:06.471 [debug] do_fold called with non-variant data: 9
11:56:06.471 [debug] Recursive field result for left: 26
11:56:06.471 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.471 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.471 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.471 [debug] Recursive field result for left: 0
11:56:06.471 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.471 [debug] Recursive field result for right: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] Recursive field result for left: 9
11:56:06.471 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.471 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.471 [debug] Recursive field result for left: 0
11:56:06.471 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.471 [debug] Recursive field result for right: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] Recursive field result for right: 9
11:56:06.471 [debug] do_fold called with non-variant data: 9
11:56:06.471 [debug] do_fold called with non-variant data: 9
11:56:06.471 [debug] Recursive field result for right: 26
11:56:06.471 [debug] do_fold called with non-variant data: 26
11:56:06.471 [debug] do_fold called with non-variant data: 26
11:56:06.471 [debug] Recursive field result for left: 59
11:56:06.471 [debug] do_fold called with data: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, variant_type: :node, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}
11:56:06.471 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.471 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.471 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.471 [debug] Recursive field result for left: 0
11:56:06.471 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.471 [debug] Recursive field result for right: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] Recursive field result for left: 9
11:56:06.471 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.471 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.471 [debug] Recursive field result for left: 0
11:56:06.471 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.471 [debug] Recursive field result for right: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] do_fold called with non-variant data: 0
11:56:06.471 [debug] Recursive field result for right: 9
11:56:06.471 [debug] do_fold called with non-variant data: 9
11:56:06.471 [debug] do_fold called with non-variant data: 9
11:56:06.471 [debug] Recursive field result for left: 26
11:56:06.471 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, variant_type: :node, state: nil
11:56:06.471 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}
11:56:06.471 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.472 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.472 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.472 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.472 [debug] Recursive field result for left: 0
11:56:06.472 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.472 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.472 [debug] Recursive field result for right: 0
11:56:06.472 [debug] do_fold called with non-variant data: 0
11:56:06.472 [debug] do_fold called with non-variant data: 0
11:56:06.472 [debug] Recursive field result for left: 9
11:56:06.472 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, variant_type: :node, state: nil
11:56:06.472 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}
11:56:06.472 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.472 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.472 [debug] Recursive field result for left: 0
11:56:06.472 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
11:56:06.472 [debug] Processing recursive fields of: %{variant: :leaf}
11:56:06.472 [debug] Recursive field result for right: 0
11:56:06.472 [debug] do_fold called with non-variant data: 0
11:56:06.472 [debug] do_fold called with non-variant data: 0
11:56:06.472 [debug] Recursive field result for right: 9
11:56:06.472 [debug] do_fold called with non-variant data: 9
11:56:06.472 [debug] do_fold called with non-variant data: 9
11:56:06.472 [debug] Recursive field result for right: 26
11:56:06.472 [debug] do_fold called with non-variant data: 26
11:56:06.472 [debug] do_fold called with non-variant data: 26
11:56:06.472 [debug] Recursive field result for right: 59
11:56:06.472 [debug] do_fold called with non-variant data: 59
11:56:06.472 [debug] do_fold called with non-variant data: 59
11:56:06.472 [debug] Recursive field result for right: 124
11:56:06.472 [debug] do_fold called with non-variant data: 124
11:56:06.472 [debug] do_fold called with non-variant data: 124
11:56:06.472 [debug] Recursive field result for right: 253
11:56:06.472 [debug] do_fold called with non-variant data: 253
11:56:06.472 [debug] do_fold called with non-variant data: 253
11:56:06.472 [debug] Recursive field result for right: 510
11:56:06.472 [debug] do_fold called with non-variant data: 510
11:56:06.472 [debug] do_fold called with non-variant data: 510
11:56:06.472 [debug] Recursive field result for right: 1023
11:56:06.472 [debug] do_fold called with non-variant data: 1023
11:56:06.472 [debug] do_fold called with non-variant data: 1023
11:56:06.472 [debug] Recursive field result for right: 2048
11:56:06.472 [debug] do_fold called with non-variant data: 2048
11:56:06.472 [debug] do_fold called with non-variant data: 2048
11:56:06.472 [debug] Recursive field result for right: 4097
11:56:06.472 [debug] do_fold called with non-variant data: 4097
11:56:06.472 [debug] do_fold called with non-variant data: 4097
.11:56:06.474 [debug] Bend initial value: 1
11:56:06.474 [debug] Executing bend with initial: 1
11:56:06.474 [debug] Executing fun with value: 1
11:56:06.474 [debug] Evaluating bend block with value: 1
11:56:06.474 [debug] Block returned: %{edges: %{to_id: 2, variant: :edge, weight: 2}, id: 1, value: 10, variant: :vertex}
11:56:06.475 [debug] Fun returned result: %{edges: %{to_id: 2, variant: :edge, weight: 2}, id: 1, value: 10, variant: :vertex}
11:56:06.475 [debug] Processing constructed value: %{edges: %{to_id: 2, variant: :edge, weight: 2}, id: 1, value: 10, variant: :vertex}
11:56:06.475 [debug] do_bend final result: %{edges: %{to_id: 2, variant: :edge, weight: 2}, id: 1, value: 10, variant: :vertex}
11:56:06.475 [debug] Final bend result: %{edges: %{to_id: 2, variant: :edge, weight: 2}, id: 1, value: 10, variant: :vertex}
11:56:06.475 [debug] do_fold called with data: %{edges: %{to_id: 2, variant: :edge, weight: 2}, id: 1, value: 10, variant: :vertex}, variant_type: :vertex, state: nil
11:56:06.475 [debug] Processing recursive fields of: %{edges: %{to_id: 2, variant: :edge, weight: 2}, id: 1, value: 10, variant: :vertex}
11:56:06.475 [debug] do_fold called with data: %{to_id: 2, variant: :edge, weight: 2}, variant_type: :edge, state: nil
11:56:06.475 [debug] Processing recursive fields of: %{to_id: 2, variant: :edge, weight: 2}
11:56:06.475 [debug] Recursive field result for edges: 2
11:56:06.475 [debug] do_fold called with non-variant data: 2
12
%{
  edges: %{to_id: 2, variant: :edge, weight: 2},
  id: 1,
  value: 10,
  variant: :vertex
}
.11:56:06.476 [debug] do_fold called with data: %{props: %{c: 3}, proto: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.476 [debug] Processing recursive fields of: %{props: %{c: 3}, proto: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}
11:56:06.476 [debug] do_fold called with data: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.476 [debug] Processing recursive fields of: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}
11:56:06.476 [debug] do_fold called with data: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant_type: :object, state: nil
11:56:06.476 [debug] Processing recursive fields of: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}
11:56:06.476 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.476 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.476 [debug] Recursive field result for proto: nil
11:56:06.476 [debug] Recursive field result for proto: 1
11:56:06.476 [debug] do_fold called with non-variant data: 1
11:56:06.476 [debug] Recursive field result for proto: 1
11:56:06.476 [debug] do_fold called with non-variant data: 1
11:56:06.476 [debug] do_fold called with data: %{props: %{c: 3}, proto: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.476 [debug] Processing recursive fields of: %{props: %{c: 3}, proto: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}
11:56:06.476 [debug] do_fold called with data: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.476 [debug] Processing recursive fields of: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}
11:56:06.476 [debug] do_fold called with data: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant_type: :object, state: nil
11:56:06.476 [debug] Processing recursive fields of: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}
11:56:06.476 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.476 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.476 [debug] Recursive field result for proto: nil
11:56:06.476 [debug] do_fold called with non-variant data: nil
11:56:06.476 [debug] Recursive field result for proto: nil
11:56:06.476 [debug] Recursive field result for proto: 2
11:56:06.476 [debug] do_fold called with non-variant data: 2
11:56:06.476 [debug] do_fold called with data: %{props: %{c: 3}, proto: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.476 [debug] Processing recursive fields of: %{props: %{c: 3}, proto: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}
11:56:06.476 [debug] do_fold called with data: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.476 [debug] Processing recursive fields of: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}
11:56:06.476 [debug] do_fold called with data: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant_type: :object, state: nil
11:56:06.476 [debug] Processing recursive fields of: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}
11:56:06.476 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.476 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.476 [debug] Recursive field result for proto: nil
11:56:06.476 [debug] do_fold called with non-variant data: nil
11:56:06.476 [debug] Recursive field result for proto: nil
11:56:06.476 [debug] do_fold called with non-variant data: nil
11:56:06.476 [debug] Recursive field result for proto: nil
11:56:06.476 [debug] do_fold called with data: %{props: %{c: 3}, proto: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.476 [debug] Processing recursive fields of: %{props: %{c: 3}, proto: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}
11:56:06.477 [debug] do_fold called with data: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.477 [debug] Processing recursive fields of: %{props: %{b: 2}, proto: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant: :object}
11:56:06.477 [debug] do_fold called with data: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}, variant_type: :object, state: nil
11:56:06.477 [debug] Processing recursive fields of: %{props: %{a: 1}, proto: %{variant: :null}, variant: :object}
11:56:06.477 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.477 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.477 [debug] Recursive field result for proto: nil
11:56:06.477 [debug] do_fold called with non-variant data: nil
11:56:06.477 [debug] Recursive field result for proto: nil
11:56:06.477 [debug] do_fold called with non-variant data: nil
11:56:06.477 [debug] Recursive field result for proto: nil
11:56:06.477 [debug] do_fold called with non-variant data: nil
.11:56:06.478 [debug] do_fold called with data: %{props: %{name: "John", role: "Developer"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.478 [debug] Processing recursive fields of: %{props: %{name: "John", role: "Developer"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}
11:56:06.478 [debug] do_fold called with data: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.478 [debug] Processing recursive fields of: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}
11:56:06.478 [debug] do_fold called with data: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant_type: :object, state: nil
11:56:06.478 [debug] Processing recursive fields of: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}
11:56:06.478 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.478 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.478 [debug] Recursive field result for proto: nil
11:56:06.478 [debug] do_fold called with non-variant data: nil
11:56:06.478 [debug] Recursive field result for proto: nil
11:56:06.478 [debug] do_fold called with non-variant data: nil
11:56:06.478 [debug] Recursive field result for proto: nil
11:56:06.478 [debug] do_fold called with data: %{props: %{name: "John", role: "Developer"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.478 [debug] Processing recursive fields of: %{props: %{name: "John", role: "Developer"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}
11:56:06.478 [debug] do_fold called with data: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}
11:56:06.479 [debug] do_fold called with data: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant_type: :object, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}
11:56:06.479 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.479 [debug] Recursive field result for proto: nil
11:56:06.479 [debug] Recursive field result for proto: "human"
11:56:06.479 [debug] do_fold called with non-variant data: "human"
11:56:06.479 [debug] Recursive field result for proto: "human"
11:56:06.479 [debug] do_fold called with non-variant data: "human"
11:56:06.479 [debug] do_fold called with data: %{props: %{name: "John", role: "Developer"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{props: %{name: "John", role: "Developer"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}
11:56:06.479 [debug] do_fold called with data: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}
11:56:06.479 [debug] do_fold called with data: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant_type: :object, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}
11:56:06.479 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.479 [debug] Recursive field result for proto: nil
11:56:06.479 [debug] do_fold called with non-variant data: nil
11:56:06.479 [debug] Recursive field result for proto: nil
11:56:06.479 [debug] Recursive field result for proto: "employee"
11:56:06.479 [debug] do_fold called with data: %{props: %{name: "John", role: "Developer"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{props: %{name: "John", role: "Developer"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}
11:56:06.479 [debug] do_fold called with data: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}
11:56:06.479 [debug] do_fold called with data: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant_type: :object, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}
11:56:06.479 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.479 [debug] Recursive field result for proto: nil
11:56:06.479 [debug] Recursive field result for proto: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>
11:56:06.479 [debug] do_fold called with non-variant data: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>
11:56:06.479 [debug] Recursive field result for proto: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>
11:56:06.479 [debug] do_fold called with non-variant data: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>
11:56:06.479 [debug] do_fold called with data: %{props: %{name: "John", role: "Developer"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{props: %{name: "John", role: "Developer"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}
11:56:06.479 [debug] do_fold called with data: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}
11:56:06.479 [debug] do_fold called with data: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant_type: :object, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}
11:56:06.479 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.479 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.479 [debug] Recursive field result for proto: nil
11:56:06.479 [debug] do_fold called with non-variant data: nil
11:56:06.479 [debug] Recursive field result for proto: nil
11:56:06.479 [debug] Recursive field result for proto: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>
11:56:06.479 [debug] do_fold called with non-variant data: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>
11:56:06.479 [debug] do_fold called with data: %{props: %{name: "John", role: "Developer", skill: "Elixir"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.480 [debug] Processing recursive fields of: %{props: %{name: "John", role: "Developer", skill: "Elixir"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}
11:56:06.480 [debug] do_fold called with data: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.480 [debug] Processing recursive fields of: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}
11:56:06.480 [debug] do_fold called with data: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant_type: :object, state: nil
11:56:06.480 [debug] Processing recursive fields of: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}
11:56:06.480 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.480 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.480 [debug] Recursive field result for proto: nil
11:56:06.480 [debug] do_fold called with non-variant data: nil
11:56:06.480 [debug] Recursive field result for proto: nil
11:56:06.480 [debug] do_fold called with non-variant data: nil
11:56:06.480 [debug] Recursive field result for proto: nil
11:56:06.480 [debug] do_fold called with data: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.480 [debug] Processing recursive fields of: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}
11:56:06.480 [debug] do_fold called with data: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant_type: :object, state: nil
11:56:06.480 [debug] Processing recursive fields of: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}
11:56:06.480 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.480 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.480 [debug] Recursive field result for proto: nil
11:56:06.480 [debug] do_fold called with non-variant data: nil
11:56:06.480 [debug] Recursive field result for proto: nil
11:56:06.480 [debug] do_fold called with non-variant data: nil
11:56:06.480 [debug] do_fold called with data: %{props: %{name: "John", role: "Developer"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.480 [debug] Processing recursive fields of: %{props: %{name: "John", role: "Developer"}, proto: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant: :object}
11:56:06.480 [debug] do_fold called with data: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}, variant_type: :object, state: nil
11:56:06.480 [debug] Processing recursive fields of: %{props: %{role: "employee", work: #Function<0.29533915/0 in Prototypal.create_employee_prototype/1>}, proto: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant: :object}
11:56:06.480 [debug] do_fold called with data: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}, variant_type: :object, state: nil
11:56:06.480 [debug] Processing recursive fields of: %{props: %{greet: #Function<1.29533915/1 in Prototypal.create_person_prototype/0>, species: "human"}, proto: %{variant: :null}, variant: :object}
11:56:06.480 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:56:06.480 [debug] Processing recursive fields of: %{variant: :null}
11:56:06.480 [debug] Recursive field result for proto: nil
11:56:06.480 [debug] do_fold called with non-variant data: nil
11:56:06.480 [debug] Recursive field result for proto: nil
11:56:06.480 [debug] do_fold called with non-variant data: nil
.11:56:06.480 [debug] Recursive field result for proto: nil
11:56:06.480 [debug] do_fold called with non-variant data: nil
========
%{
  edges: %{to_id: 2, variant: :edge, weight: 5},
  id: 1,
  value: 10,
  variant: :vertex
}
========
11:56:06.481 [debug] do_fold called with data: %{edges: %{to_id: 2, variant: :edge, weight: 5}, id: 1, value: 10, variant: :vertex}, variant_type: :vertex, state: nil
11:56:06.481 [debug] Processing recursive fields of: %{edges: %{to_id: 2, variant: :edge, weight: 5}, id: 1, value: 10, variant: :vertex}
11:56:06.481 [debug] do_fold called with data: %{to_id: 2, variant: :edge, weight: 5}, variant_type: :edge, state: nil
11:56:06.481 [debug] Processing recursive fields of: %{to_id: 2, variant: :edge, weight: 5}
11:56:06.481 [debug] Recursive field result for edges: 5
11:56:06.481 [debug] do_fold called with non-variant data: 5
.
Finished in 5.6 seconds (5.0s async, 0.5s sync)
88 tests, 0 failures, 9 excluded

Randomized with seed 783123
