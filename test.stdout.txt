    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 13 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/my_graph.ex:13: MyGraph.sum/1

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 10 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/my_tree.ex:10: MyTree.sum/1

Running ExUnit with seed: 813922, max_cases: 48


17:18:13.836 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:LinkedList]} with block: {:__block__, [], [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]}

17:18:13.836 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:BinaryTree]} with block: {:__block__, [], [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]}

17:18:13.836 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:BinaryTree]} with block: {:__block__, [], [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]}

17:18:13.836 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:BinaryTree]} with block: {:__block__, [], [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]}

17:18:13.836 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:LinkedList]} with block: {:__block__, [], [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]}

17:18:13.837 [debug] Extracted variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

17:18:13.837 [debug] Extracted variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

17:18:13.837 [debug] Extracted variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

17:18:13.837 [debug] Generating constructors for variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

17:18:13.837 [debug] Extracted variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

17:18:13.837 [debug] Extracted variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

17:18:13.837 [debug] Generating constructors for variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

17:18:13.837 [debug] Generating constructors for variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

17:18:13.837 [debug] Generating constructors for variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

17:18:13.837 [debug] Processing variant: {:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}

17:18:13.837 [debug] Processing variant: {:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}

17:18:13.837 [debug] Constructor: :cons, meta: [line: 7, column: 5], args: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

17:18:13.837 [debug] Processing variant: {:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}

17:18:13.837 [debug] Extracting constructor args from: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

17:18:13.837 [debug] Generating constructors for variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

17:18:13.838 [debug] Constructor: :node, meta: [line: 7, column: 5], args: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

17:18:13.838 [debug] Processing variant: {:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}

17:18:13.838 [debug] Extracting constructor args from: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

17:18:13.838 [debug] Found value arg: :val

17:18:13.838 [debug] Found recursive arg: :left

17:18:13.838 [debug] Found recursive arg: :right

17:18:13.838 [debug] Constructor: :node, meta: [line: 7, column: 5], args: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

17:18:13.838 [debug] Extracting constructor args from: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

17:18:13.838 [debug] Extracted arg_names: [:val, :left, :right]

17:18:13.838 [debug] Found value arg: :val

17:18:13.838 [debug] Found recursive arg: :left

17:18:13.838 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

17:18:13.838 [debug] Found recursive arg: :right

17:18:13.838 [debug] Extracted arg_names: [:val, :left, :right]

17:18:13.838 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

17:18:13.837 [debug] Found value arg: :head

17:18:13.838 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

17:18:13.838 [debug] Processing variant: {:leaf, [line: 8, column: 5], []}

17:18:13.837 [debug] Processing variant: {:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}

17:18:13.838 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

17:18:13.838 [debug] Processing variant: {:leaf, [line: 8, column: 5], []}

17:18:13.838 [debug] Constructor: :leaf, meta: [line: 8, column: 5], args: []

17:18:13.838 [debug] Constructor: :node, meta: [line: 7, column: 5], args: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

17:18:13.838 [debug] Extracting constructor args from: []

17:18:13.838 [debug] Found recursive arg: :tail

17:18:13.838 [debug] Extracted arg_names: []

17:18:13.838 [debug] Constructor: :leaf, meta: [line: 8, column: 5], args: []

17:18:13.838 [debug] Generated arg vars: []

17:18:13.838 [debug] Field pairs: []

17:18:13.838 [debug] Extracted arg_names: [:head, :tail]

17:18:13.838 [debug] Extracting constructor args from: []

17:18:13.838 [debug] Extracting constructor args from: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

17:18:13.838 [debug] Extracted arg_names: []

17:18:13.838 [debug] Found value arg: :val

17:18:13.838 [debug] Generated arg vars: []

17:18:13.838 [debug] Found recursive arg: :left

17:18:13.838 [debug] Field pairs: []

17:18:13.838 [debug] Found recursive arg: :right

17:18:13.838 [debug] Generated arg vars: [{:head, [], nil}, {:tail, [], nil}]

17:18:13.838 [debug] Extracted arg_names: [:val, :left, :right]

17:18:13.838 [debug] Field pairs: [head: {:head, [], nil}, tail: {:tail, [], nil}]

17:18:13.838 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

17:18:13.838 [debug] Processing variant: {:null, [line: 8, column: 5], []}

17:18:13.838 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

17:18:13.838 [debug] Constructor: :null, meta: [line: 8, column: 5], args: []

17:18:13.838 [debug] Processing variant: {:leaf, [line: 8, column: 5], []}

17:18:13.838 [debug] Extracting constructor args from: []

17:18:13.838 [debug] Constructor: :leaf, meta: [line: 8, column: 5], args: []

17:18:13.838 [debug] Extracted arg_names: []

17:18:13.838 [debug] Extracting constructor args from: []

17:18:13.838 [debug] Generated arg vars: []

17:18:13.838 [debug] Field pairs: []

17:18:13.838 [debug] Extracted arg_names: []

17:18:13.838 [debug] Generated arg vars: []

17:18:13.838 [debug] Field pairs: []

17:18:13.838 [debug] Constructor: :cons, meta: [line: 7, column: 5], args: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

17:18:13.838 [debug] Extracting constructor args from: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

17:18:13.838 [debug] Found value arg: :head

17:18:13.838 [debug] Found recursive arg: :tail

17:18:13.838 [debug] Extracted arg_names: [:head, :tail]

17:18:13.838 [debug] Generated arg vars: [{:head, [], nil}, {:tail, [], nil}]

17:18:13.838 [debug] Field pairs: [head: {:head, [], nil}, tail: {:tail, [], nil}]

17:18:13.839 [debug] Processing variant: {:null, [line: 8, column: 5], []}

17:18:13.839 [debug] Constructor: :null, meta: [line: 8, column: 5], args: []

17:18:13.839 [debug] Extracting constructor args from: []

17:18:13.839 [debug] Extracted arg_names: []

17:18:13.839 [debug] Generated arg vars: []

17:18:13.839 [debug] Field pairs: []

17:18:13.854 [debug] Fold expression: {:tree, [line: 21, column: 14], nil}, opts: [], cases: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

17:18:13.854 [debug] Extracting cases from list: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

17:18:13.854 [debug] Extracted fold cases: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]
    warning: unused import BenBen
    │
  3 │   import BenBen
    │   ~
    │
    └─ test/my_tree_test.exs:3:3


17:18:13.854 [debug] Generating fold cases: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

17:18:13.854 [debug] Generating pattern match for :node with args: [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]

17:18:13.854 [debug] Extracting bindings from args: [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]

17:18:13.854 [debug] Transforming recursive refs in body: {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]} with bindings: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}], state: nil

17:18:13.854 [debug] Processing recursive reference: {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}

17:18:13.854 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

17:18:13.854 [debug] Processing recursive reference: {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}

17:18:13.854 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

17:18:13.854 [debug] Generating pattern match for :leaf with args: []

17:18:13.854 [debug] Extracting bindings from args: []

17:18:13.854 [debug] Transforming recursive refs in body: 0 with bindings: [], state: nil

17:18:13.854 [debug] Generated fold cases after transformation: [{:->, [line: 22, column: 40], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :leaf]}], 0]}]
    warning: unused import BenBen
    │
  3 │   import BenBen
    │   ~
    │
    └─ test/my_graph_test.exs:3:3


17:18:13.855 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 21, column: 14], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 22, column: 40], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :leaf]}], 0]}]]]}]}]}]}
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 21 │         fold tree do
    │         ~~~~~~~~~~~~
    │
    └─ test/sum_of_tree_test.exs:21: SumOfTreeTest."test fold operations basic sum of tree"/1


17:18:13.858 [debug] Bend operation with var: :val, initial: 1

17:18:13.858 [debug] Fork operation with expression: {:+, [line: 16, column: 43], [{:val, [line: 16, column: 39], nil}, 1]}

17:18:13.859 [debug] Fold expression: {:list, [line: 17, column: 14], nil}, opts: [with: 0], cases: [{:->, [line: 18, column: 34], [[{:case, [line: 18, column: 11], [{:cons, [line: 18, column: 16], [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:null, [line: 23, column: 16], []}]}], {0, {:state, [line: 24, column: 17], nil}}]}]

17:18:13.859 [debug] Extracting cases from list: [{:->, [line: 18, column: 34], [[{:case, [line: 18, column: 11], [{:cons, [line: 18, column: 16], [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:null, [line: 23, column: 16], []}]}], {0, {:state, [line: 24, column: 17], nil}}]}]

17:18:13.859 [debug] Extracted fold cases: [{:->, [line: 18, column: 34], [[{:case, [line: 18, column: 11], [{:cons, [line: 18, column: 16], [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:null, [line: 23, column: 16], []}]}], {0, {:state, [line: 24, column: 17], nil}}]}]

17:18:13.860 [debug] Generating fold cases: [{:->, [line: 18, column: 34], [[{:case, [line: 18, column: 11], [{:cons, [line: 18, column: 16], [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:null, [line: 23, column: 16], []}]}], {0, {:state, [line: 24, column: 17], nil}}]}]

17:18:13.860 [debug] Generating pattern match for :cons with args: [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]

17:18:13.860 [debug] Extracting bindings from args: [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]

17:18:13.860 [debug] Transforming recursive refs in body: {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]} with bindings: [head: {:head, [], nil}, tail: {:tail, [], nil}], state: 0

17:18:13.860 [debug] Processing recursive reference: {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}

17:18:13.860 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

17:18:13.860 [debug] Generating pattern match for :null with args: []

17:18:13.860 [debug] Extracting bindings from args: []

17:18:13.860 [debug] Transforming recursive refs in body: {0, {:state, [line: 24, column: 17], nil}} with bindings: [], state: 0

17:18:13.860 [debug] Bend operation with var: :val, initial: 0

17:18:13.860 [debug] Generated fold cases after transformation: [{:->, [line: 18, column: 34], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :null]}], {0, {:state, [line: 24, column: 17], nil}}]}]

17:18:13.860 [debug] Fork operation with expression: {:+, [line: 16, column: 43], [{:val, [line: 16, column: 39], nil}, 1]}

17:18:13.860 [debug] Fork operation with expression: {:+, [line: 16, column: 58], [{:val, [line: 16, column: 54], nil}, 1]}

17:18:13.860 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 17, column: 14], nil}, 0, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 18, column: 34], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :null]}], {0, {:state, [line: 24, column: 17], nil}}]}]]]}]}]}]}
    warning: variable "new_state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 19 │             {tail_value, new_state} = recu(tail)
    │                          ~
    │
    └─ test/fold_with_state_test.exs:19:26: FoldWithStateTest."test fold operations fold with state"/1


17:18:13.890 [debug] Executing bend with initial: 0

17:18:13.890 [debug] Executing bend with initial: 1

17:18:13.890 [debug] Executing bend with initial: 1

17:18:13.892 [debug] Executing bend with initial: 1

17:18:13.892 [debug] Executing bend with initial: 1

17:18:13.892 [debug] Executing bend with initial: 2

17:18:13.894 [debug] do_fold called with data: %{id: 1, value: 10, edges: 2, variant: :vertex}, state: nil

17:18:13.894 [debug] Processing recursive fields of: %{id: 1, value: 10, edges: 2, variant: :vertex}

17:18:13.894 [debug] do_fold called with non-variant data: 1

17:18:13.894 [debug] Non-variant field id result: 1

17:18:13.894 [debug] do_fold called with non-variant data: 10

17:18:13.894 [debug] Non-variant field value result: 10

17:18:13.894 [debug] do_fold called with non-variant data: 2

17:18:13.894 [debug] Non-variant field edges result: 2

17:18:13.894 [debug] After processing fields - processed: %{id: 1, value: 10, edges: 2, variant: :vertex}, intermediate_state: nil

17:18:13.894 [debug] do_fold called with data: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 3, variant: :node}, val: 1, variant: :node}, state: nil

17:18:13.894 [debug] Processing recursive fields of: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 3, variant: :node}, val: 1, variant: :node}

17:18:13.894 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}, state: nil

17:18:13.894 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 2, variant: :node}

17:18:13.894 [debug] do_fold called with data: %{variant: :leaf}, state: nil

17:18:13.894 [debug] Terminal case result: 0

17:18:13.894 [debug] Recursive field result for left: 0

17:18:13.894 [debug] do_fold called with data: %{variant: :leaf}, state: nil

17:18:13.894 [debug] Terminal case result: 0

17:18:13.894 [debug] Recursive field result for right: 0

17:18:13.894 [debug] do_fold called with non-variant data: 2

17:18:13.894 [debug] Non-variant field val result: 2

17:18:13.894 [debug] After processing fields - processed: %{left: 0, right: 0, val: 2, variant: :node}, intermediate_state: nil

17:18:13.894 [debug] do_fold called with non-variant data: 0

17:18:13.894 [debug] do_fold called with non-variant data: 0

17:18:13.894 [debug] Final result after fun: 2 with intermediate_state: nil

17:18:13.894 [debug] Recursive field result for left: 2

17:18:13.894 [debug] do_fold called with data: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 3, variant: :node}, state: nil

17:18:13.894 [debug] Processing recursive fields of: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 3, variant: :node}

17:18:13.894 [debug] do_fold called with data: %{variant: :leaf}, state: nil

17:18:13.894 [debug] Terminal case result: 0

17:18:13.894 [debug] Recursive field result for left: 0

17:18:13.894 [debug] do_fold called with data: %{variant: :leaf}, state: nil

17:18:13.894 [debug] Terminal case result: 0

17:18:13.894 [debug] Recursive field result for right: 0

17:18:13.894 [debug] do_fold called with non-variant data: 3

17:18:13.894 [debug] Non-variant field val result: 3

17:18:13.894 [debug] After processing fields - processed: %{left: 0, right: 0, val: 3, variant: :node}, intermediate_state: nil

17:18:13.894 [debug] do_fold called with non-variant data: 0

17:18:13.894 [debug] do_fold called with non-variant data: 0

17:18:13.894 [debug] Final result after fun: 3 with intermediate_state: nil

17:18:13.894 [debug] Recursive field result for right: 3

17:18:13.894 [debug] do_fold called with non-variant data: 1

17:18:13.894 [debug] Non-variant field val result: 1

17:18:13.894 [debug] After processing fields - processed: %{left: 2, right: 3, val: 1, variant: :node}, intermediate_state: nil

17:18:13.894 [debug] do_fold called with non-variant data: 2

17:18:13.894 [debug] do_fold called with non-variant data: 3

17:18:13.894 [debug] Final result after fun: 6 with intermediate_state: nil

17:18:13.894 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, state: 0

17:18:13.894 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}

17:18:13.894 [debug] do_fold called with non-variant data: 1

17:18:13.894 [debug] Non-variant field head result: {1, 0}

17:18:13.894 [debug] do_fold called with data: %{head: 2, tail: %{variant: :null}, variant: :cons}, state: 0

17:18:13.894 [debug] Processing recursive fields of: %{head: 2, tail: %{variant: :null}, variant: :cons}

17:18:13.894 [debug] do_fold called with non-variant data: 2

17:18:13.894 [debug] Non-variant field head result: {2, 0}

17:18:13.894 [debug] do_fold called with data: %{variant: :null}, state: 0

17:18:13.895 [debug] Terminal case result: {0, 0}

17:18:13.895 [debug] Recursive field result for tail: {0, 0}

17:18:13.895 [debug] After processing fields - processed: %{head: 2, tail: 0, variant: :cons}, intermediate_state: 0

17:18:13.895 [debug] do_fold called with non-variant data: 0

17:18:13.895 [debug] Final result after fun: {2, 2} with intermediate_state: 0

17:18:13.895 [debug] Recursive field result for tail: {2, 2}

17:18:13.895 [debug] After processing fields - processed: %{head: 1, tail: 2, variant: :cons}, intermediate_state: 2

17:18:13.895 [debug] do_fold called with non-variant data: 2

17:18:13.895 [debug] Final result after fun: {1, 3} with intermediate_state: 2

17:18:13.895 [debug] Executing bend with initial: 0

17:18:13.895 [debug] Executing bend with initial: 1

17:18:13.895 [debug] Executing bend with initial: 1

17:18:13.895 [debug] Executing bend with initial: 1

17:18:13.895 [debug] Executing bend with initial: 2


  1) test my example tree creation and summing (MyTreeTest)
     test/my_tree_test.exs:6
     ** (KeyError) key :id not found in: %{left: 1, right: 1, val: 0, variant: :node}
     code: assert tree.id == 0
     stacktrace:
       test/my_tree_test.exs:11: (test)



  2) test my example graph creation and summing (MyGraphTest)
     test/my_graph_test.exs:6
     ** (CaseClauseError) no case clause matching: %{id: 1, value: 10, edges: 2, variant: :vertex}
     code: total = MyGraph.sum(graph)
     stacktrace:
       (ben_ben 0.1.0) lib/examples/my_graph.ex:13: anonymous fn/2 in MyGraph.sum/1
       (ben_ben 0.1.0) lib/ben_ben.ex:234: BenBen.do_fold/3
       test/my_graph_test.exs:15: (test)

...

  3) test bend operations creates binary tree of specified depth (CreateBinaryTreeTest)
     test/create_binary_tree_test.exs:12
     ** (KeyError) key :val not found in: 1

     If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
     code: assert tree.left.val == 1
     stacktrace:
       test/create_binary_tree_test.exs:25: (test)



  4) test bend operations creates linked list (CreateLinkedListTest)
     test/create_linked_list_test.exs:12
     ** (KeyError) key :head not found in: 2

     If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
     code: assert list.tail.head == 2
     stacktrace:
       test/create_linked_list_test.exs:25: (test)


Finished in 0.06 seconds (0.00s async, 0.06s sync)
7 tests, 4 failures
