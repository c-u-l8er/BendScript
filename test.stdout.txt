Compiling 4 files (.ex)
     warning: clauses with the same name and arity (number of arguments) should be grouped together, "defp generate_fold_cases/2" was previously defined (lib/ben_ben.ex:127)
     │
 164 │   defp generate_fold_cases({:__block__, _meta, cases}, state) do
     │        ~
     │
     └─ lib/ben_ben.ex:164:8

     warning: variable "other" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 364 │           other ->
     │           ~
     │
     └─ lib/ben_ben.ex:364:11: BenBen.process_constructed/2

     warning: function generate_pattern_match/1 is unused
     │
 215 │   defp generate_pattern_match({name, _, args}) when is_list(args) do
     │        ~
     │
     └─ lib/ben_ben.ex:215:8: BenBen (module)

     warning: function extract_bindings/1 is unused
     │
 240 │   defp extract_bindings(args) do
     │        ~
     │
     └─ lib/ben_ben.ex:240:8: BenBen (module)

     warning: this clause for generate_fold_cases/2 cannot match because a previous clause at line 127 always matches
     │
 164 │   defp generate_fold_cases({:__block__, _meta, cases}, state) do
     │        ~
     │
     └─ lib/ben_ben.ex:164:8

     warning: this clause for generate_fold_cases/2 cannot match because a previous clause at line 127 always matches
     │
 168 │   defp generate_fold_cases(single_case, state) when not is_list(single_case) do
     │        ~
     │
     └─ lib/ben_ben.ex:168:8


11:44:14.216 [debug] Defining type {:__aliases__, [line: 4, column: 11], [:MyGraph]} with block: {:__block__, [], [{:vertex, [line: 6, column: 5], [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]}, {:edge, [line: 8, column: 5], [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]}]}

11:44:14.216 [debug] Defining type {:__aliases__, [line: 4, column: 11], [:MyTree]} with block: {:__block__, [], [{:node, [line: 5, column: 5], [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]}, {:leaf, [line: 6, column: 5], []}]}

11:44:14.216 [debug] Defining type {:__aliases__, [line: 4, column: 11], [:Tree]} with block: {:__block__, [], [{:node, [line: 5, column: 5], [{:value, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 17], [{:left, [line: 5, column: 22], nil}]}, {:recu, [line: 5, column: 29], [{:right, [line: 5, column: 34], nil}]}]}, {:leaf, [line: 6, column: 5], []}]}

11:44:14.217 [debug] Extracted variants: [{:vertex, [line: 6, column: 5], [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]}, {:edge, [line: 8, column: 5], [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]}]

11:44:14.217 [debug] Extracted variants: [{:node, [line: 5, column: 5], [{:value, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 17], [{:left, [line: 5, column: 22], nil}]}, {:recu, [line: 5, column: 29], [{:right, [line: 5, column: 34], nil}]}]}, {:leaf, [line: 6, column: 5], []}]

11:44:14.217 [debug] Extracted variants: [{:node, [line: 5, column: 5], [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]}, {:leaf, [line: 6, column: 5], []}]

11:44:14.217 [debug] Generating constructors for variants: [{:node, [line: 5, column: 5], [{:value, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 17], [{:left, [line: 5, column: 22], nil}]}, {:recu, [line: 5, column: 29], [{:right, [line: 5, column: 34], nil}]}]}, {:leaf, [line: 6, column: 5], []}]

11:44:14.217 [debug] Generating constructors for variants: [{:vertex, [line: 6, column: 5], [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]}, {:edge, [line: 8, column: 5], [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]}]

11:44:14.217 [debug] Processing variant: {:node, [line: 5, column: 5], [{:value, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 17], [{:left, [line: 5, column: 22], nil}]}, {:recu, [line: 5, column: 29], [{:right, [line: 5, column: 34], nil}]}]}

11:44:14.217 [debug] Constructor: :node, meta: [line: 5, column: 5], args: [{:value, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 17], [{:left, [line: 5, column: 22], nil}]}, {:recu, [line: 5, column: 29], [{:right, [line: 5, column: 34], nil}]}]

11:44:14.217 [debug] Processing variant: {:vertex, [line: 6, column: 5], [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]}

11:44:14.217 [debug] Extracting constructor args from: [{:value, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 17], [{:left, [line: 5, column: 22], nil}]}, {:recu, [line: 5, column: 29], [{:right, [line: 5, column: 34], nil}]}]

11:44:14.217 [debug] Found value arg: :value

11:44:14.217 [debug] Found recursive arg: :left

11:44:14.217 [debug] Generating constructors for variants: [{:node, [line: 5, column: 5], [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]}, {:leaf, [line: 6, column: 5], []}]

11:44:14.217 [debug] Found recursive arg: :right

11:44:14.217 [debug] Extracted arg_names: [:value, :left, :right]

11:44:14.217 [debug] Generated arg vars: [{:value, [], nil}, {:left, [], nil}, {:right, [], nil}]

11:44:14.217 [debug] Field pairs: [value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

11:44:14.217 [debug] Constructor: :vertex, meta: [line: 6, column: 5], args: [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]

11:44:14.217 [debug] Processing variant: {:leaf, [line: 6, column: 5], []}

11:44:14.217 [debug] Constructor: :leaf, meta: [line: 6, column: 5], args: []

11:44:14.217 [debug] Extracting constructor args from: [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]

11:44:14.217 [debug] Extracting constructor args from: []

11:44:14.217 [debug] Found value arg: :id

11:44:14.217 [debug] Extracted arg_names: []

11:44:14.217 [debug] Processing variant: {:node, [line: 5, column: 5], [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]}

11:44:14.217 [debug] Generated arg vars: []

11:44:14.217 [debug] Field pairs: []

11:44:14.217 [debug] Found value arg: :value

11:44:14.217 [debug] Found recursive arg: :edges

11:44:14.217 [debug] Extracted arg_names: [:id, :value, :edges]

11:44:14.217 [debug] Generated arg vars: [{:id, [], nil}, {:value, [], nil}, {:edges, [], nil}]

11:44:14.217 [debug] Field pairs: [id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]

11:44:14.217 [debug] Constructor: :node, meta: [line: 5, column: 5], args: [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]

11:44:14.217 [debug] Processing variant: {:edge, [line: 8, column: 5], [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]}

11:44:14.217 [debug] Constructor: :edge, meta: [line: 8, column: 5], args: [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]

11:44:14.218 [debug] Extracting constructor args from: [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]

11:44:14.218 [debug] Extracting constructor args from: [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]

11:44:14.218 [debug] Found value arg: :val

11:44:14.218 [debug] Found recursive arg: :left

11:44:14.218 [debug] Found value arg: :to_id

11:44:14.218 [debug] Found recursive arg: :right

11:44:14.218 [debug] Found value arg: :weight

11:44:14.218 [debug] Extracted arg_names: [:val, :left, :right]

11:44:14.218 [debug] Extracted arg_names: [:to_id, :weight]

11:44:14.218 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

11:44:14.218 [debug] Generated arg vars: [{:to_id, [], nil}, {:weight, [], nil}]

11:44:14.218 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

11:44:14.218 [debug] Field pairs: [to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]

11:44:14.218 [debug] Processing variant: {:leaf, [line: 6, column: 5], []}

11:44:14.218 [debug] Constructor: :leaf, meta: [line: 6, column: 5], args: []

11:44:14.218 [debug] Extracting constructor args from: []

11:44:14.218 [debug] Extracted arg_names: []

11:44:14.218 [debug] Generated arg vars: []

11:44:14.218 [debug] Field pairs: []

11:44:14.226 [debug] Bend operation with var: :level, initial: 0

11:44:14.226 [debug] Fork operation with expression: {:+, [line: 15, column: 22], [{:level, [line: 15, column: 16], nil}, 1]}

11:44:14.226 [debug] Fork operation with expression: {:+, [line: 16, column: 22], [{:level, [line: 16, column: 16], nil}, 1]}

11:44:14.227 [debug] Fold expression: {:tree, [line: 26, column: 10], nil}, opts: [], cases: [{:->, [line: 27, column: 38], [[{:case, [line: 27, column: 7], [{:node, [line: 27, column: 12], [{:value, [line: 27, column: 17], nil}, {:left, [line: 27, column: 24], nil}, {:right, [line: 27, column: 30], nil}]}]}], {{:., [line: 28, column: 13], [{:__aliases__, [line: 28, column: 9], [:Tree]}, :node]}, [line: 28, column: 14], [{{:., [line: 29, column: 23], [{:transform_fn, [line: 29, column: 11], nil}]}, [line: 29, column: 23], [{:value, [line: 29, column: 25], nil}]}, {:recu, [line: 30, column: 11], [{:left, [line: 30, column: 16], nil}]}, {:recu, [line: 31, column: 11], [{:right, [line: 31, column: 16], nil}]}]}]}, {:->, [line: 34, column: 20], [[{:case, [line: 34, column: 7], [{:leaf, [line: 34, column: 12], []}]}], {{:., [line: 35, column: 13], [{:__aliases__, [line: 35, column: 9], [:Tree]}, :leaf]}, [line: 35, column: 14], []}]}]

11:44:14.227 [debug] Extracting cases from list: [{:->, [line: 27, column: 38], [[{:case, [line: 27, column: 7], [{:node, [line: 27, column: 12], [{:value, [line: 27, column: 17], nil}, {:left, [line: 27, column: 24], nil}, {:right, [line: 27, column: 30], nil}]}]}], {{:., [line: 28, column: 13], [{:__aliases__, [line: 28, column: 9], [:Tree]}, :node]}, [line: 28, column: 14], [{{:., [line: 29, column: 23], [{:transform_fn, [line: 29, column: 11], nil}]}, [line: 29, column: 23], [{:value, [line: 29, column: 25], nil}]}, {:recu, [line: 30, column: 11], [{:left, [line: 30, column: 16], nil}]}, {:recu, [line: 31, column: 11], [{:right, [line: 31, column: 16], nil}]}]}]}, {:->, [line: 34, column: 20], [[{:case, [line: 34, column: 7], [{:leaf, [line: 34, column: 12], []}]}], {{:., [line: 35, column: 13], [{:__aliases__, [line: 35, column: 9], [:Tree]}, :leaf]}, [line: 35, column: 14], []}]}]

11:44:14.227 [debug] Extracted fold cases: [{:->, [line: 27, column: 38], [[{:case, [line: 27, column: 7], [{:node, [line: 27, column: 12], [{:value, [line: 27, column: 17], nil}, {:left, [line: 27, column: 24], nil}, {:right, [line: 27, column: 30], nil}]}]}], {{:., [line: 28, column: 13], [{:__aliases__, [line: 28, column: 9], [:Tree]}, :node]}, [line: 28, column: 14], [{{:., [line: 29, column: 23], [{:transform_fn, [line: 29, column: 11], nil}]}, [line: 29, column: 23], [{:value, [line: 29, column: 25], nil}]}, {:recu, [line: 30, column: 11], [{:left, [line: 30, column: 16], nil}]}, {:recu, [line: 31, column: 11], [{:right, [line: 31, column: 16], nil}]}]}]}, {:->, [line: 34, column: 20], [[{:case, [line: 34, column: 7], [{:leaf, [line: 34, column: 12], []}]}], {{:., [line: 35, column: 13], [{:__aliases__, [line: 35, column: 9], [:Tree]}, :leaf]}, [line: 35, column: 14], []}]}]

11:44:14.227 [debug] Fold expression: {:graph, [line: 13, column: 10], nil}, opts: [], cases: [{:->, [line: 14, column: 38], [[{:case, [line: 14, column: 7], [{:vertex, [line: 14, column: 12], [{:id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 23], nil}, {:edges, [line: 14, column: 30], nil}]}]}], {:+, [line: 15, column: 15], [{:value, [line: 15, column: 9], nil}, {:recu, [line: 15, column: 17], [{:edges, [line: 15, column: 22], nil}]}]}]}, {:->, [line: 17, column: 33], [[{:case, [line: 17, column: 7], [{:edge, [line: 17, column: 12], [{:to_id, [line: 17, column: 17], nil}, {:weight, [line: 17, column: 24], nil}]}]}], {:if, [line: 19, column: 9], [{:and, [line: 19, column: 23], [{:==, [line: 19, column: 18], [{:to_id, [line: 19, column: 12], nil}, 0]}, {:==, [line: 19, column: 34], [{:weight, [line: 19, column: 27], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22, column: 11], nil}]]}]}]

11:44:14.227 [debug] Generating fold cases: [{:->, [line: 27, column: 38], [[{:case, [line: 27, column: 7], [{:node, [line: 27, column: 12], [{:value, [line: 27, column: 17], nil}, {:left, [line: 27, column: 24], nil}, {:right, [line: 27, column: 30], nil}]}]}], {{:., [line: 28, column: 13], [{:__aliases__, [line: 28, column: 9], [:Tree]}, :node]}, [line: 28, column: 14], [{{:., [line: 29, column: 23], [{:transform_fn, [line: 29, column: 11], nil}]}, [line: 29, column: 23], [{:value, [line: 29, column: 25], nil}]}, {:recu, [line: 30, column: 11], [{:left, [line: 30, column: 16], nil}]}, {:recu, [line: 31, column: 11], [{:right, [line: 31, column: 16], nil}]}]}]}, {:->, [line: 34, column: 20], [[{:case, [line: 34, column: 7], [{:leaf, [line: 34, column: 12], []}]}], {{:., [line: 35, column: 13], [{:__aliases__, [line: 35, column: 9], [:Tree]}, :leaf]}, [line: 35, column: 14], []}]}]

11:44:14.227 [debug] Extracting cases from list: [{:->, [line: 14, column: 38], [[{:case, [line: 14, column: 7], [{:vertex, [line: 14, column: 12], [{:id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 23], nil}, {:edges, [line: 14, column: 30], nil}]}]}], {:+, [line: 15, column: 15], [{:value, [line: 15, column: 9], nil}, {:recu, [line: 15, column: 17], [{:edges, [line: 15, column: 22], nil}]}]}]}, {:->, [line: 17, column: 33], [[{:case, [line: 17, column: 7], [{:edge, [line: 17, column: 12], [{:to_id, [line: 17, column: 17], nil}, {:weight, [line: 17, column: 24], nil}]}]}], {:if, [line: 19, column: 9], [{:and, [line: 19, column: 23], [{:==, [line: 19, column: 18], [{:to_id, [line: 19, column: 12], nil}, 0]}, {:==, [line: 19, column: 34], [{:weight, [line: 19, column: 27], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22, column: 11], nil}]]}]}]

11:44:14.227 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

11:44:14.227 [debug] Extracted fold cases: [{:->, [line: 14, column: 38], [[{:case, [line: 14, column: 7], [{:vertex, [line: 14, column: 12], [{:id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 23], nil}, {:edges, [line: 14, column: 30], nil}]}]}], {:+, [line: 15, column: 15], [{:value, [line: 15, column: 9], nil}, {:recu, [line: 15, column: 17], [{:edges, [line: 15, column: 22], nil}]}]}]}, {:->, [line: 17, column: 33], [[{:case, [line: 17, column: 7], [{:edge, [line: 17, column: 12], [{:to_id, [line: 17, column: 17], nil}, {:weight, [line: 17, column: 24], nil}]}]}], {:if, [line: 19, column: 9], [{:and, [line: 19, column: 23], [{:==, [line: 19, column: 18], [{:to_id, [line: 19, column: 12], nil}, 0]}, {:==, [line: 19, column: 34], [{:weight, [line: 19, column: 27], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22, column: 11], nil}]]}]}]

11:44:14.227 [debug] Transforming recursive refs in body: {{:., [line: 28, column: 13], [{:__aliases__, [line: 28, column: 9], [:Tree]}, :node]}, [line: 28, column: 14], [{{:., [line: 29, column: 23], [{:transform_fn, [line: 29, column: 11], nil}]}, [line: 29, column: 23], [{:value, [line: 29, column: 25], nil}]}, {:recu, [line: 30, column: 11], [{:left, [line: 30, column: 16], nil}]}, {:recu, [line: 31, column: 11], [{:right, [line: 31, column: 16], nil}]}]} with bindings: [value: true, left: true, right: true], state: nil

11:44:14.227 [debug] Processing recursive reference: {:recu, [line: 30, column: 11], [{:left, [line: 30, column: 16], nil}]}

11:44:14.227 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.227 [debug] Generating fold cases: [{:->, [line: 14, column: 38], [[{:case, [line: 14, column: 7], [{:vertex, [line: 14, column: 12], [{:id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 23], nil}, {:edges, [line: 14, column: 30], nil}]}]}], {:+, [line: 15, column: 15], [{:value, [line: 15, column: 9], nil}, {:recu, [line: 15, column: 17], [{:edges, [line: 15, column: 22], nil}]}]}]}, {:->, [line: 17, column: 33], [[{:case, [line: 17, column: 7], [{:edge, [line: 17, column: 12], [{:to_id, [line: 17, column: 17], nil}, {:weight, [line: 17, column: 24], nil}]}]}], {:if, [line: 19, column: 9], [{:and, [line: 19, column: 23], [{:==, [line: 19, column: 18], [{:to_id, [line: 19, column: 12], nil}, 0]}, {:==, [line: 19, column: 34], [{:weight, [line: 19, column: 27], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22, column: 11], nil}]]}]}]

11:44:14.227 [debug] Generated pattern: {:%{}, [], [variant: :vertex, id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]} for variant: :vertex

11:44:14.227 [debug] Processing recursive reference: {:recu, [line: 31, column: 11], [{:right, [line: 31, column: 16], nil}]}

11:44:14.227 [debug] Transforming recursive refs in body: {:+, [line: 15, column: 15], [{:value, [line: 15, column: 9], nil}, {:recu, [line: 15, column: 17], [{:edges, [line: 15, column: 22], nil}]}]} with bindings: [id: true, value: true, edges: true], state: nil

11:44:14.227 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.227 [debug] Processing recursive reference: {:recu, [line: 15, column: 17], [{:edges, [line: 15, column: 22], nil}]}

11:44:14.227 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

11:44:14.227 [debug] Transformed recursive reference to: {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.227 [debug] Generated pattern: {:%{}, [], [variant: :edge, to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]} for variant: :edge

11:44:14.227 [debug] Transforming recursive refs in body: {{:., [line: 35, column: 13], [{:__aliases__, [line: 35, column: 9], [:Tree]}, :leaf]}, [line: 35, column: 14], []} with bindings: [], state: nil

11:44:14.227 [debug] Transforming recursive refs in body: {:if, [line: 19, column: 9], [{:and, [line: 19, column: 23], [{:==, [line: 19, column: 18], [{:to_id, [line: 19, column: 12], nil}, 0]}, {:==, [line: 19, column: 34], [{:weight, [line: 19, column: 27], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22, column: 11], nil}]]} with bindings: [to_id: true, weight: true], state: nil

11:44:14.227 [debug] Generated fold cases after transformation: [{:->, [line: 14, column: 38], [[{:%{}, [], [variant: :vertex, id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]}], {:+, [line: 15, column: 15], [{:value, [line: 15, column: 9], nil}, {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 17, column: 33], [[{:%{}, [], [variant: :edge, to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]}], {:if, [line: 19, column: 9], [{:and, [line: 19, column: 23], [{:==, [line: 19, column: 18], [{:to_id, [line: 19, column: 12], nil}, 0]}, {:==, [line: 19, column: 34], [{:weight, [line: 19, column: 27], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22, column: 11], nil}]]}]}]

11:44:14.228 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 13, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 14, column: 38], [[{:%{}, [], [variant: :vertex, id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]}], {:+, [line: 15, column: 15], [{:value, [line: 15, column: 9], nil}, {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 17, column: 33], [[{:%{}, [], [variant: :edge, to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]}], {:if, [line: 19, column: 9], [{:and, [line: 19, column: 23], [{:==, [line: 19, column: 18], [{:to_id, [line: 19, column: 12], nil}, 0]}, {:==, [line: 19, column: 34], [{:weight, [line: 19, column: 27], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22, column: 11], nil}]]}]}]]]}]}]}]}

11:44:14.228 [debug] Generated fold cases after transformation: [{:->, [line: 27, column: 38], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {{:., [line: 28, column: 13], [{:__aliases__, [line: 28, column: 9], [:Tree]}, :node]}, [line: 28, column: 14], [{{:., [line: 29, column: 23], [{:transform_fn, [line: 29, column: 11], nil}]}, [line: 29, column: 23], [{:value, [line: 29, column: 25], nil}]}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 34, column: 20], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 35, column: 13], [{:__aliases__, [line: 35, column: 9], [:Tree]}, :leaf]}, [line: 35, column: 14], []}]}]

11:44:14.228 [debug] Bend operation with var: :vertex_id, initial: 1
    warning: variable "id" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 13 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/my_graph.ex:13: MyGraph.sum/1


11:44:14.228 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 26, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 27, column: 38], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {{:., [line: 28, column: 13], [{:__aliases__, [line: 28, column: 9], [:Tree]}, :node]}, [line: 28, column: 14], [{{:., [line: 29, column: 23], [{:transform_fn, [line: 29, column: 11], nil}]}, [line: 29, column: 23], [{:value, [line: 29, column: 25], nil}]}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 34, column: 20], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 35, column: 13], [{:__aliases__, [line: 35, column: 9], [:Tree]}, :leaf]}, [line: 35, column: 14], []}]}]]]}]}]}]}
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 13 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/my_graph.ex:13: MyGraph.sum/1


11:44:14.228 [debug] Fold expression: {:tree, [line: 41, column: 10], nil}, opts: [], cases: [{:->, [line: 42, column: 38], [[{:case, [line: 42, column: 7], [{:node, [line: 42, column: 12], [{:value, [line: 42, column: 17], nil}, {:left, [line: 42, column: 24], nil}, {:right, [line: 42, column: 30], nil}]}]}], {:if, [line: 43, column: 9], [{{:., [line: 43, column: 21], [{:predicate, [line: 43, column: 12], nil}]}, [line: 43, column: 21], [{:value, [line: 43, column: 23], nil}]}, [do: {{:., [line: 44, column: 15], [{:__aliases__, [line: 44, column: 11], [:Tree]}, :node]}, [line: 44, column: 16], [{:value, [line: 44, column: 21], nil}, {:recu, [line: 44, column: 28], [{:left, [line: 44, column: 33], nil}]}, {:recu, [line: 44, column: 40], [{:right, [line: 44, column: 45], nil}]}]}, else: {{:., [line: 46, column: 15], [{:__aliases__, [line: 46, column: 11], [:Tree]}, :leaf]}, [line: 46, column: 16], []}]]}]}, {:->, [line: 49, column: 20], [[{:case, [line: 49, column: 7], [{:leaf, [line: 49, column: 12], []}]}], {{:., [line: 50, column: 13], [{:__aliases__, [line: 50, column: 9], [:Tree]}, :leaf]}, [line: 50, column: 14], []}]}]
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 26 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/tree_operations.ex:26: TreeOperations.map_tree/2


11:44:14.229 [debug] Extracting cases from list: [{:->, [line: 42, column: 38], [[{:case, [line: 42, column: 7], [{:node, [line: 42, column: 12], [{:value, [line: 42, column: 17], nil}, {:left, [line: 42, column: 24], nil}, {:right, [line: 42, column: 30], nil}]}]}], {:if, [line: 43, column: 9], [{{:., [line: 43, column: 21], [{:predicate, [line: 43, column: 12], nil}]}, [line: 43, column: 21], [{:value, [line: 43, column: 23], nil}]}, [do: {{:., [line: 44, column: 15], [{:__aliases__, [line: 44, column: 11], [:Tree]}, :node]}, [line: 44, column: 16], [{:value, [line: 44, column: 21], nil}, {:recu, [line: 44, column: 28], [{:left, [line: 44, column: 33], nil}]}, {:recu, [line: 44, column: 40], [{:right, [line: 44, column: 45], nil}]}]}, else: {{:., [line: 46, column: 15], [{:__aliases__, [line: 46, column: 11], [:Tree]}, :leaf]}, [line: 46, column: 16], []}]]}]}, {:->, [line: 49, column: 20], [[{:case, [line: 49, column: 7], [{:leaf, [line: 49, column: 12], []}]}], {{:., [line: 50, column: 13], [{:__aliases__, [line: 50, column: 9], [:Tree]}, :leaf]}, [line: 50, column: 14], []}]}]

11:44:14.229 [debug] Fold expression: {:tree, [line: 10, column: 10], nil}, opts: [], cases: [{:->, [line: 11, column: 36], [[{:case, [line: 11, column: 7], [{:node, [line: 11, column: 12], [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]}]}, {:->, [line: 12, column: 20], [[{:case, [line: 12, column: 7], [{:leaf, [line: 12, column: 12], []}]}], 0]}]

11:44:14.229 [debug] Extracting cases from list: [{:->, [line: 11, column: 36], [[{:case, [line: 11, column: 7], [{:node, [line: 11, column: 12], [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]}]}, {:->, [line: 12, column: 20], [[{:case, [line: 12, column: 7], [{:leaf, [line: 12, column: 12], []}]}], 0]}]

11:44:14.229 [debug] Extracted fold cases: [{:->, [line: 42, column: 38], [[{:case, [line: 42, column: 7], [{:node, [line: 42, column: 12], [{:value, [line: 42, column: 17], nil}, {:left, [line: 42, column: 24], nil}, {:right, [line: 42, column: 30], nil}]}]}], {:if, [line: 43, column: 9], [{{:., [line: 43, column: 21], [{:predicate, [line: 43, column: 12], nil}]}, [line: 43, column: 21], [{:value, [line: 43, column: 23], nil}]}, [do: {{:., [line: 44, column: 15], [{:__aliases__, [line: 44, column: 11], [:Tree]}, :node]}, [line: 44, column: 16], [{:value, [line: 44, column: 21], nil}, {:recu, [line: 44, column: 28], [{:left, [line: 44, column: 33], nil}]}, {:recu, [line: 44, column: 40], [{:right, [line: 44, column: 45], nil}]}]}, else: {{:., [line: 46, column: 15], [{:__aliases__, [line: 46, column: 11], [:Tree]}, :leaf]}, [line: 46, column: 16], []}]]}]}, {:->, [line: 49, column: 20], [[{:case, [line: 49, column: 7], [{:leaf, [line: 49, column: 12], []}]}], {{:., [line: 50, column: 13], [{:__aliases__, [line: 50, column: 9], [:Tree]}, :leaf]}, [line: 50, column: 14], []}]}]

11:44:14.229 [debug] Extracted fold cases: [{:->, [line: 11, column: 36], [[{:case, [line: 11, column: 7], [{:node, [line: 11, column: 12], [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]}]}, {:->, [line: 12, column: 20], [[{:case, [line: 12, column: 7], [{:leaf, [line: 12, column: 12], []}]}], 0]}]

11:44:14.229 [debug] Generating fold cases: [{:->, [line: 42, column: 38], [[{:case, [line: 42, column: 7], [{:node, [line: 42, column: 12], [{:value, [line: 42, column: 17], nil}, {:left, [line: 42, column: 24], nil}, {:right, [line: 42, column: 30], nil}]}]}], {:if, [line: 43, column: 9], [{{:., [line: 43, column: 21], [{:predicate, [line: 43, column: 12], nil}]}, [line: 43, column: 21], [{:value, [line: 43, column: 23], nil}]}, [do: {{:., [line: 44, column: 15], [{:__aliases__, [line: 44, column: 11], [:Tree]}, :node]}, [line: 44, column: 16], [{:value, [line: 44, column: 21], nil}, {:recu, [line: 44, column: 28], [{:left, [line: 44, column: 33], nil}]}, {:recu, [line: 44, column: 40], [{:right, [line: 44, column: 45], nil}]}]}, else: {{:., [line: 46, column: 15], [{:__aliases__, [line: 46, column: 11], [:Tree]}, :leaf]}, [line: 46, column: 16], []}]]}]}, {:->, [line: 49, column: 20], [[{:case, [line: 49, column: 7], [{:leaf, [line: 49, column: 12], []}]}], {{:., [line: 50, column: 13], [{:__aliases__, [line: 50, column: 9], [:Tree]}, :leaf]}, [line: 50, column: 14], []}]}]

11:44:14.229 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

11:44:14.229 [debug] Transforming recursive refs in body: {:if, [line: 43, column: 9], [{{:., [line: 43, column: 21], [{:predicate, [line: 43, column: 12], nil}]}, [line: 43, column: 21], [{:value, [line: 43, column: 23], nil}]}, [do: {{:., [line: 44, column: 15], [{:__aliases__, [line: 44, column: 11], [:Tree]}, :node]}, [line: 44, column: 16], [{:value, [line: 44, column: 21], nil}, {:recu, [line: 44, column: 28], [{:left, [line: 44, column: 33], nil}]}, {:recu, [line: 44, column: 40], [{:right, [line: 44, column: 45], nil}]}]}, else: {{:., [line: 46, column: 15], [{:__aliases__, [line: 46, column: 11], [:Tree]}, :leaf]}, [line: 46, column: 16], []}]]} with bindings: [value: true, left: true, right: true], state: nil

11:44:14.229 [debug] Processing recursive reference: {:recu, [line: 44, column: 28], [{:left, [line: 44, column: 33], nil}]}

11:44:14.229 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.229 [debug] Processing recursive reference: {:recu, [line: 44, column: 40], [{:right, [line: 44, column: 45], nil}]}

11:44:14.229 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.229 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

11:44:14.229 [debug] Transforming recursive refs in body: {{:., [line: 50, column: 13], [{:__aliases__, [line: 50, column: 9], [:Tree]}, :leaf]}, [line: 50, column: 14], []} with bindings: [], state: nil

11:44:14.229 [debug] Generating fold cases: [{:->, [line: 11, column: 36], [[{:case, [line: 11, column: 7], [{:node, [line: 11, column: 12], [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]}]}, {:->, [line: 12, column: 20], [[{:case, [line: 12, column: 7], [{:leaf, [line: 12, column: 12], []}]}], 0]}]

11:44:14.229 [debug] Generated pattern: {:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

11:44:14.229 [debug] Generated fold cases after transformation: [{:->, [line: 42, column: 38], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:if, [line: 43, column: 9], [{{:., [line: 43, column: 21], [{:predicate, [line: 43, column: 12], nil}]}, [line: 43, column: 21], [{:value, [line: 43, column: 23], nil}]}, [do: {{:., [line: 44, column: 15], [{:__aliases__, [line: 44, column: 11], [:Tree]}, :node]}, [line: 44, column: 16], [{:value, [line: 44, column: 21], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, else: {{:., [line: 46, column: 15], [{:__aliases__, [line: 46, column: 11], [:Tree]}, :leaf]}, [line: 46, column: 16], []}]]}]}, {:->, [line: 49, column: 20], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 50, column: 13], [{:__aliases__, [line: 50, column: 9], [:Tree]}, :leaf]}, [line: 50, column: 14], []}]}]

11:44:14.229 [debug] Transforming recursive refs in body: {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]} with bindings: [val: true, left: true, right: true], state: nil
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 10 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/my_tree.ex:10: MyTree.sum/1


11:44:14.229 [debug] Processing recursive reference: {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}

11:44:14.230 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.230 [debug] Processing recursive reference: {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}

11:44:14.230 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.230 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

11:44:14.230 [debug] Transforming recursive refs in body: 0 with bindings: [], state: nil

11:44:14.230 [debug] Generated fold cases after transformation: [{:->, [line: 11, column: 36], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 12, column: 20], [[{:%{}, [], [variant: :leaf]}], 0]}]

11:44:14.230 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 41, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 42, column: 38], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:if, [line: 43, column: 9], [{{:., [line: 43, column: 21], [{:predicate, [line: 43, column: 12], nil}]}, [line: 43, column: 21], [{:value, [line: 43, column: 23], nil}]}, [do: {{:., [line: 44, column: 15], [{:__aliases__, [line: 44, column: 11], [:Tree]}, :node]}, [line: 44, column: 16], [{:value, [line: 44, column: 21], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, ...}, {...}]], [{:value, [], ...}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{...}, ...]], [{:value, ...}]}]}]}, else: {{:., [line: 46, column: 15], [{:__aliases__, [line: 46, column: 11], [:Tree]}, :leaf]}, [line: 46, column: 16], []}]]}]}, {:->, [line: 49, column: 20], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 50, column: 13], [{:__aliases__, [line: 50, column: 9], [:Tree]}, :leaf]}, [line: 50, column: 14], []}]}]]]}]}]}]}

11:44:14.230 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 10, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 11, column: 36], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 12, column: 20], [[{:%{}, [], [variant: :leaf]}], 0]}]]]}]}]}]}

11:44:14.230 [debug] Bend operation with var: :val, initial: 0

11:44:14.230 [debug] Fork operation with expression: {:+, [line: 19, column: 35], [{:val, [line: 19, column: 31], nil}, 1]}

11:44:14.230 [debug] Fork operation with expression: {:+, [line: 19, column: 50], [{:val, [line: 19, column: 46], nil}, 1]}

11:44:14.230 [debug] Fold expression: {:tree, [line: 57, column: 12], nil}, opts: [with: {:%{}, [line: 57, column: 24], [{0, 1}]}], cases: [{:->, [line: 59, column: 40], [[{:case, [line: 59, column: 9], [{:node, [line: 59, column: 14], [{:value, [line: 59, column: 19], nil}, {:left, [line: 59, column: 26], nil}, {:right, [line: 59, column: 32], nil}]}]}], {:__block__, [], [{:=, [line: 60, column: 28], [{{:_, [line: 60, column: 12], nil}, {:left_counts, [line: 60, column: 15], nil}}, {:recu, [line: 60, column: 30], [{:left, [line: 60, column: 35], nil}]}]}, {:=, [line: 61, column: 29], [{{:_, [line: 61, column: 12], nil}, {:right_counts, [line: 61, column: 15], nil}}, {:recu, [line: 61, column: 31], [{:right, [line: 61, column: 36], nil}]}]}, {:=, [line: 64, column: 18], [{:merged, [line: 64, column: 11], nil}, {:merge_counts, [line: 64, column: 20], [{:left_counts, [line: 64, column: 33], nil}, {:right_counts, [line: 64, column: 46], nil}]}]}, {:=, [line: 67, column: 25], [{:current_level, [line: 67, column: 11], nil}, {:if, [line: 68, column: 13], [{:==, [line: 68, column: 33], [{:map_size, [line: 68, column: 16], [{:merged, [line: 68, column: 25], nil}]}, 0]}, [do: 0, else: {:+, [line: 68, column: 85], [{:|>, [line: 68, column: 70], [{{:., [line: 68, column: 56], [{:__aliases__, [line: 68, column: 53], [:Map]}, :keys]}, [line: 68, column: 57], [{:merged, [line: 68, column: 62], nil}]}, {{:., [line: 68, column: 77], [{:__aliases__, [line: 68, column: 73], [:Enum]}, :max]}, [line: 68, column: 78], []}]}, 1]}]]}]}, {:=, [line: 70, column: 22], [{:new_counts, [line: 70, column: 11], nil}, {{:., [line: 70, column: 27], [{:__aliases__, [line: 70, column: 24], [:Map]}, :put]}, [line: 70, column: 28], [{:merged, [line: 70, column: 32], nil}, {:current_level, [line: 70, column: 40], nil}, 1]}]}, {{:value, [line: 72, column: 12], nil}, {:new_counts, [line: 72, column: 19], nil}}]}]}, {:->, [line: 74, column: 22], [[{:case, [line: 74, column: 9], [{:leaf, [line: 74, column: 14], []}]}], {0, {:state, [line: 75, column: 15], nil}}]}]
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 41 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/tree_operations.ex:41: TreeOperations.filter_tree/2


11:44:14.231 [debug] Extracting cases from list: [{:->, [line: 59, column: 40], [[{:case, [line: 59, column: 9], [{:node, [line: 59, column: 14], [{:value, [line: 59, column: 19], nil}, {:left, [line: 59, column: 26], nil}, {:right, [line: 59, column: 32], nil}]}]}], {:__block__, [], [{:=, [line: 60, column: 28], [{{:_, [line: 60, column: 12], nil}, {:left_counts, [line: 60, column: 15], nil}}, {:recu, [line: 60, column: 30], [{:left, [line: 60, column: 35], nil}]}]}, {:=, [line: 61, column: 29], [{{:_, [line: 61, column: 12], nil}, {:right_counts, [line: 61, column: 15], nil}}, {:recu, [line: 61, column: 31], [{:right, [line: 61, column: 36], nil}]}]}, {:=, [line: 64, column: 18], [{:merged, [line: 64, column: 11], nil}, {:merge_counts, [line: 64, column: 20], [{:left_counts, [line: 64, column: 33], nil}, {:right_counts, [line: 64, column: 46], nil}]}]}, {:=, [line: 67, column: 25], [{:current_level, [line: 67, column: 11], nil}, {:if, [line: 68, column: 13], [{:==, [line: 68, column: 33], [{:map_size, [line: 68, column: 16], [{:merged, [line: 68, column: 25], nil}]}, 0]}, [do: 0, else: {:+, [line: 68, column: 85], [{:|>, [line: 68, column: 70], [{{:., [line: 68, column: 56], [{:__aliases__, [line: 68, column: 53], [:Map]}, :keys]}, [line: 68, column: 57], [{:merged, [line: 68, column: 62], nil}]}, {{:., [line: 68, column: 77], [{:__aliases__, [line: 68, column: 73], [:Enum]}, :max]}, [line: 68, column: 78], []}]}, 1]}]]}]}, {:=, [line: 70, column: 22], [{:new_counts, [line: 70, column: 11], nil}, {{:., [line: 70, column: 27], [{:__aliases__, [line: 70, column: 24], [:Map]}, :put]}, [line: 70, column: 28], [{:merged, [line: 70, column: 32], nil}, {:current_level, [line: 70, column: 40], nil}, 1]}]}, {{:value, [line: 72, column: 12], nil}, {:new_counts, [line: 72, column: 19], nil}}]}]}, {:->, [line: 74, column: 22], [[{:case, [line: 74, column: 9], [{:leaf, [line: 74, column: 14], []}]}], {0, {:state, [line: 75, column: 15], nil}}]}]

11:44:14.231 [debug] Extracted fold cases: [{:->, [line: 59, column: 40], [[{:case, [line: 59, column: 9], [{:node, [line: 59, column: 14], [{:value, [line: 59, column: 19], nil}, {:left, [line: 59, column: 26], nil}, {:right, [line: 59, column: 32], nil}]}]}], {:__block__, [], [{:=, [line: 60, column: 28], [{{:_, [line: 60, column: 12], nil}, {:left_counts, [line: 60, column: 15], nil}}, {:recu, [line: 60, column: 30], [{:left, [line: 60, column: 35], nil}]}]}, {:=, [line: 61, column: 29], [{{:_, [line: 61, column: 12], nil}, {:right_counts, [line: 61, column: 15], nil}}, {:recu, [line: 61, column: 31], [{:right, [line: 61, column: 36], nil}]}]}, {:=, [line: 64, column: 18], [{:merged, [line: 64, column: 11], nil}, {:merge_counts, [line: 64, column: 20], [{:left_counts, [line: 64, column: 33], nil}, {:right_counts, [line: 64, column: 46], nil}]}]}, {:=, [line: 67, column: 25], [{:current_level, [line: 67, column: 11], nil}, {:if, [line: 68, column: 13], [{:==, [line: 68, column: 33], [{:map_size, [line: 68, column: 16], [{:merged, [line: 68, column: 25], nil}]}, 0]}, [do: 0, else: {:+, [line: 68, column: 85], [{:|>, [line: 68, column: 70], [{{:., [line: 68, column: 56], [{:__aliases__, [line: 68, column: 53], [:Map]}, :keys]}, [line: 68, column: 57], [{:merged, [line: 68, column: 62], nil}]}, {{:., [line: 68, column: 77], [{:__aliases__, [line: 68, column: 73], [:Enum]}, :max]}, [line: 68, column: 78], []}]}, 1]}]]}]}, {:=, [line: 70, column: 22], [{:new_counts, [line: 70, column: 11], nil}, {{:., [line: 70, column: 27], [{:__aliases__, [line: 70, column: 24], [:Map]}, :put]}, [line: 70, column: 28], [{:merged, [line: 70, column: 32], nil}, {:current_level, [line: 70, column: 40], nil}, 1]}]}, {{:value, [line: 72, column: 12], nil}, {:new_counts, [line: 72, column: 19], nil}}]}]}, {:->, [line: 74, column: 22], [[{:case, [line: 74, column: 9], [{:leaf, [line: 74, column: 14], []}]}], {0, {:state, [line: 75, column: 15], nil}}]}]

11:44:14.231 [debug] Generating fold cases: [{:->, [line: 59, column: 40], [[{:case, [line: 59, column: 9], [{:node, [line: 59, column: 14], [{:value, [line: 59, column: 19], nil}, {:left, [line: 59, column: 26], nil}, {:right, [line: 59, column: 32], nil}]}]}], {:__block__, [], [{:=, [line: 60, column: 28], [{{:_, [line: 60, column: 12], nil}, {:left_counts, [line: 60, column: 15], nil}}, {:recu, [line: 60, column: 30], [{:left, [line: 60, column: 35], nil}]}]}, {:=, [line: 61, column: 29], [{{:_, [line: 61, column: 12], nil}, {:right_counts, [line: 61, column: 15], nil}}, {:recu, [line: 61, column: 31], [{:right, [line: 61, column: 36], nil}]}]}, {:=, [line: 64, column: 18], [{:merged, [line: 64, column: 11], nil}, {:merge_counts, [line: 64, column: 20], [{:left_counts, [line: 64, column: 33], nil}, {:right_counts, [line: 64, column: 46], nil}]}]}, {:=, [line: 67, column: 25], [{:current_level, [line: 67, column: 11], nil}, {:if, [line: 68, column: 13], [{:==, [line: 68, column: 33], [{:map_size, [line: 68, column: 16], [{:merged, [line: 68, column: 25], nil}]}, 0]}, [do: 0, else: {:+, [line: 68, column: 85], [{:|>, [line: 68, column: 70], [{{:., [line: 68, column: 56], [{:__aliases__, [line: 68, column: 53], [:Map]}, :keys]}, [line: 68, column: 57], [{:merged, [line: 68, column: 62], nil}]}, {{:., [line: 68, column: 77], [{:__aliases__, [line: 68, column: 73], [:Enum]}, :max]}, [line: 68, column: 78], []}]}, 1]}]]}]}, {:=, [line: 70, column: 22], [{:new_counts, [line: 70, column: 11], nil}, {{:., [line: 70, column: 27], [{:__aliases__, [line: 70, column: 24], [:Map]}, :put]}, [line: 70, column: 28], [{:merged, [line: 70, column: 32], nil}, {:current_level, [line: 70, column: 40], nil}, 1]}]}, {{:value, [line: 72, column: 12], nil}, {:new_counts, [line: 72, column: 19], nil}}]}]}, {:->, [line: 74, column: 22], [[{:case, [line: 74, column: 9], [{:leaf, [line: 74, column: 14], []}]}], {0, {:state, [line: 75, column: 15], nil}}]}]

11:44:14.231 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

11:44:14.231 [debug] Transforming recursive refs in body: {:__block__, [], [{:=, [line: 60, column: 28], [{{:_, [line: 60, column: 12], nil}, {:left_counts, [line: 60, column: 15], nil}}, {:recu, [line: 60, column: 30], [{:left, [line: 60, column: 35], nil}]}]}, {:=, [line: 61, column: 29], [{{:_, [line: 61, column: 12], nil}, {:right_counts, [line: 61, column: 15], nil}}, {:recu, [line: 61, column: 31], [{:right, [line: 61, column: 36], nil}]}]}, {:=, [line: 64, column: 18], [{:merged, [line: 64, column: 11], nil}, {:merge_counts, [line: 64, column: 20], [{:left_counts, [line: 64, column: 33], nil}, {:right_counts, [line: 64, column: 46], nil}]}]}, {:=, [line: 67, column: 25], [{:current_level, [line: 67, column: 11], nil}, {:if, [line: 68, column: 13], [{:==, [line: 68, column: 33], [{:map_size, [line: 68, column: 16], [{:merged, [line: 68, column: 25], nil}]}, 0]}, [do: 0, else: {:+, [line: 68, column: 85], [{:|>, [line: 68, column: 70], [{{:., [line: 68, column: 56], [{:__aliases__, [line: 68, column: 53], [:Map]}, :keys]}, [line: 68, column: 57], [{:merged, [line: 68, column: 62], nil}]}, {{:., [line: 68, column: 77], [{:__aliases__, [line: 68, column: 73], [:Enum]}, :max]}, [line: 68, column: 78], []}]}, 1]}]]}]}, {:=, [line: 70, column: 22], [{:new_counts, [line: 70, column: 11], nil}, {{:., [line: 70, column: 27], [{:__aliases__, [line: 70, column: 24], [:Map]}, :put]}, [line: 70, column: 28], [{:merged, [line: 70, column: 32], nil}, {:current_level, [line: 70, column: 40], nil}, 1]}]}, {{:value, [line: 72, column: 12], nil}, {:new_counts, [line: 72, column: 19], nil}}]} with bindings: [value: true, left: true, right: true], state: {:%{}, [line: 57, column: 24], [{0, 1}]}

11:44:14.231 [debug] Processing recursive reference: {:recu, [line: 60, column: 30], [{:left, [line: 60, column: 35], nil}]}

11:44:14.231 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.231 [debug] Processing recursive reference: {:recu, [line: 61, column: 31], [{:right, [line: 61, column: 36], nil}]}

11:44:14.231 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.231 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

11:44:14.232 [debug] Transforming recursive refs in body: {0, {:state, [line: 75, column: 15], nil}} with bindings: [], state: {:%{}, [line: 57, column: 24], [{0, 1}]}

11:44:14.232 [debug] Generated fold cases after transformation: [{:->, [line: 59, column: 40], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 60, column: 28], [{{:_, [line: 60, column: 12], nil}, {:left_counts, [line: 60, column: 15], nil}}, {:do_fold, [], [{:left, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 61, column: 29], [{{:_, [line: 61, column: 12], nil}, {:right_counts, [line: 61, column: 15], nil}}, {:do_fold, [], [{:right, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 64, column: 18], [{:merged, [line: 64, column: 11], nil}, {:merge_counts, [line: 64, column: 20], [{:left_counts, [line: 64, column: 33], nil}, {:right_counts, [line: 64, column: 46], nil}]}]}, {:=, [line: 67, column: 25], [{:current_level, [line: 67, column: 11], nil}, {:if, [line: 68, column: 13], [{:==, [line: 68, column: 33], [{:map_size, [line: 68, column: 16], [{:merged, [line: 68, column: 25], nil}]}, 0]}, [do: 0, else: {:+, [line: 68, column: 85], [{:|>, [line: 68, column: 70], [{{:., [line: 68, column: 56], [{:__aliases__, [line: 68, column: 53], [:Map]}, :keys]}, [line: 68, column: 57], [{:merged, [line: 68, column: 62], nil}]}, {{:., [line: 68, column: 77], [{:__aliases__, [line: 68, column: 73], [:Enum]}, :max]}, [line: 68, column: 78], []}]}, 1]}]]}]}, {:=, [line: 70, column: 22], [{:new_counts, [line: 70, column: 11], nil}, {{:., [line: 70, column: 27], [{:__aliases__, [line: 70, column: 24], [:Map]}, :put]}, [line: 70, column: 28], [{:merged, [line: 70, column: 32], nil}, {:current_level, [line: 70, column: 40], nil}, 1]}]}, {{:value, [line: 72, column: 12], nil}, {:new_counts, [line: 72, column: 19], nil}}]}]}, {:->, [line: 74, column: 22], [[{:%{}, [], [variant: :leaf]}], {0, {:state, [line: 75, column: 15], nil}}]}]

11:44:14.233 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 57, column: 12], nil}, {:%{}, [line: 57, column: 24], [{0, 1}]}, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 59, column: 40], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 60, column: 28], [{{:_, [line: 60, column: 12], nil}, {:left_counts, [line: 60, column: 15], nil}}, {:do_fold, [], [{:left, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 61, column: 29], [{{:_, [line: 61, column: 12], nil}, {:right_counts, [line: 61, column: 15], nil}}, {:do_fold, [], [{:right, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, ...}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 64, column: 18], [{:merged, [line: 64, column: 11], nil}, {:merge_counts, [line: 64, column: 20], [{:left_counts, [line: 64, column: 33], nil}, {:right_counts, [line: 64, column: 46], nil}]}]}, {:=, [line: 67, column: 25], [{:current_level, [line: 67, column: 11], nil}, {:if, [line: 68, column: 13], [{:==, [line: 68, column: 33], [{:map_size, [line: 68, ...], [...]}, 0]}, [do: 0, else: {:+, [line: 68, column: 85], [{...}, ...]}]]}]}, {:=, [line: 70, column: 22], [{:new_counts, [line: 70, column: 11], nil}, {{:., [line: 70, column: 27], [{:__aliases__, [line: 70, column: 24], [:Map]}, :put]}, [line: 70, column: 28], [{:merged, [line: 70, column: 32], nil}, {:current_level, [line: 70, column: 40], nil}, 1]}]}, {{:value, [line: 72, column: 12], nil}, {:new_counts, [line: 72, column: 19], nil}}]}]}, {:->, [line: 74, column: 22], [[{:%{}, [], [variant: :leaf]}], {0, {:state, [line: 75, column: 15], nil}}]}]]]}]}]}]}

11:44:14.234 [debug] Fold expression: {:tree, [line: 110, column: 10], nil}, opts: [], cases: [{:->, [line: 111, column: 38], [[{:case, [line: 111, column: 7], [{:node, [line: 111, column: 12], [{:value, [line: 111, column: 17], nil}, {:left, [line: 111, column: 24], nil}, {:right, [line: 111, column: 30], nil}]}]}], {:__block__, [], [{:=, [line: 112, column: 21], [{:left_values, [line: 112, column: 9], nil}, {:recu, [line: 112, column: 23], [{:left, [line: 112, column: 28], nil}]}]}, {:=, [line: 113, column: 22], [{:right_values, [line: 113, column: 9], nil}, {:recu, [line: 113, column: 24], [{:right, [line: 113, column: 29], nil}]}]}, {:++, [line: 114, column: 21], [{:left_values, [line: 114, column: 9], nil}, {:++, [line: 114, column: 32], [[{:value, [line: 114, column: 25], nil}], {:right_values, [line: 114, column: 35], nil}]}]}]}]}, {:->, [line: 116, column: 20], [[{:case, [line: 116, column: 7], [{:leaf, [line: 116, column: 12], []}]}], []]}]

11:44:14.234 [debug] Extracting cases from list: [{:->, [line: 111, column: 38], [[{:case, [line: 111, column: 7], [{:node, [line: 111, column: 12], [{:value, [line: 111, column: 17], nil}, {:left, [line: 111, column: 24], nil}, {:right, [line: 111, column: 30], nil}]}]}], {:__block__, [], [{:=, [line: 112, column: 21], [{:left_values, [line: 112, column: 9], nil}, {:recu, [line: 112, column: 23], [{:left, [line: 112, column: 28], nil}]}]}, {:=, [line: 113, column: 22], [{:right_values, [line: 113, column: 9], nil}, {:recu, [line: 113, column: 24], [{:right, [line: 113, column: 29], nil}]}]}, {:++, [line: 114, column: 21], [{:left_values, [line: 114, column: 9], nil}, {:++, [line: 114, column: 32], [[{:value, [line: 114, column: 25], nil}], {:right_values, [line: 114, column: 35], nil}]}]}]}]}, {:->, [line: 116, column: 20], [[{:case, [line: 116, column: 7], [{:leaf, [line: 116, column: 12], []}]}], []]}]

11:44:14.234 [debug] Extracted fold cases: [{:->, [line: 111, column: 38], [[{:case, [line: 111, column: 7], [{:node, [line: 111, column: 12], [{:value, [line: 111, column: 17], nil}, {:left, [line: 111, column: 24], nil}, {:right, [line: 111, column: 30], nil}]}]}], {:__block__, [], [{:=, [line: 112, column: 21], [{:left_values, [line: 112, column: 9], nil}, {:recu, [line: 112, column: 23], [{:left, [line: 112, column: 28], nil}]}]}, {:=, [line: 113, column: 22], [{:right_values, [line: 113, column: 9], nil}, {:recu, [line: 113, column: 24], [{:right, [line: 113, column: 29], nil}]}]}, {:++, [line: 114, column: 21], [{:left_values, [line: 114, column: 9], nil}, {:++, [line: 114, column: 32], [[{:value, [line: 114, column: 25], nil}], {:right_values, [line: 114, column: 35], nil}]}]}]}]}, {:->, [line: 116, column: 20], [[{:case, [line: 116, column: 7], [{:leaf, [line: 116, column: 12], []}]}], []]}]

11:44:14.234 [debug] Generating fold cases: [{:->, [line: 111, column: 38], [[{:case, [line: 111, column: 7], [{:node, [line: 111, column: 12], [{:value, [line: 111, column: 17], nil}, {:left, [line: 111, column: 24], nil}, {:right, [line: 111, column: 30], nil}]}]}], {:__block__, [], [{:=, [line: 112, column: 21], [{:left_values, [line: 112, column: 9], nil}, {:recu, [line: 112, column: 23], [{:left, [line: 112, column: 28], nil}]}]}, {:=, [line: 113, column: 22], [{:right_values, [line: 113, column: 9], nil}, {:recu, [line: 113, column: 24], [{:right, [line: 113, column: 29], nil}]}]}, {:++, [line: 114, column: 21], [{:left_values, [line: 114, column: 9], nil}, {:++, [line: 114, column: 32], [[{:value, [line: 114, column: 25], nil}], {:right_values, [line: 114, column: 35], nil}]}]}]}]}, {:->, [line: 116, column: 20], [[{:case, [line: 116, column: 7], [{:leaf, [line: 116, column: 12], []}]}], []]}]

11:44:14.234 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

11:44:14.235 [debug] Transforming recursive refs in body: {:__block__, [], [{:=, [line: 112, column: 21], [{:left_values, [line: 112, column: 9], nil}, {:recu, [line: 112, column: 23], [{:left, [line: 112, column: 28], nil}]}]}, {:=, [line: 113, column: 22], [{:right_values, [line: 113, column: 9], nil}, {:recu, [line: 113, column: 24], [{:right, [line: 113, column: 29], nil}]}]}, {:++, [line: 114, column: 21], [{:left_values, [line: 114, column: 9], nil}, {:++, [line: 114, column: 32], [[{:value, [line: 114, column: 25], nil}], {:right_values, [line: 114, column: 35], nil}]}]}]} with bindings: [value: true, left: true, right: true], state: nil

11:44:14.235 [debug] Processing recursive reference: {:recu, [line: 112, column: 23], [{:left, [line: 112, column: 28], nil}]}

11:44:14.235 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.235 [debug] Processing recursive reference: {:recu, [line: 113, column: 24], [{:right, [line: 113, column: 29], nil}]}

11:44:14.235 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.235 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

11:44:14.235 [debug] Transforming recursive refs in body: [] with bindings: [], state: nil

11:44:14.235 [debug] Generated fold cases after transformation: [{:->, [line: 111, column: 38], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 112, column: 21], [{:left_values, [line: 112, column: 9], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 113, column: 22], [{:right_values, [line: 113, column: 9], nil}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:++, [line: 114, column: 21], [{:left_values, [line: 114, column: 9], nil}, {:++, [line: 114, column: 32], [[{:value, [line: 114, column: 25], nil}], {:right_values, [line: 114, column: 35], nil}]}]}]}]}, {:->, [line: 116, column: 20], [[{:%{}, [], [variant: :leaf]}], []]}]

11:44:14.235 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 110, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 111, column: 38], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 112, column: 21], [{:left_values, [line: 112, column: 9], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 113, column: 22], [{:right_values, [line: 113, column: 9], nil}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, ...}]], [{:value, [], BenBen}]}]}]}, {:++, [line: 114, column: 21], [{:left_values, [line: 114, column: 9], nil}, {:++, [line: 114, column: 32], [[{:value, [line: 114, column: 25], nil}], {:right_values, [line: 114, column: 35], nil}]}]}]}]}, {:->, [line: 116, column: 20], [[{:%{}, [], [variant: :leaf]}], []]}]]]}]}]}]}
     warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 110 │     fold tree do
     │     ~~~~~~~~~~~~
     │
     └─ lib/examples/tree_operations.ex:110: TreeOperations.collect_values/1

    warning: function merge_with_level_increment/2 is unused
    │
 93 │   defp merge_with_level_increment(left_counts, right_counts) do
    │        ~
    │
    └─ lib/examples/tree_operations.ex:93:8: TreeOperations (module)

    warning: function max_level/2 is unused
    │
 81 │   defp max_level(left_counts, right_counts) do
    │        ~
    │
    └─ lib/examples/tree_operations.ex:81:8: TreeOperations (module)

Generated ben_ben app

11:44:14.299 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:LinkedList]} with block: {:__block__, [], [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]}

11:44:14.299 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:LinkedList]} with block: {:__block__, [], [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]}

11:44:14.299 [debug] Extracted variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

11:44:14.299 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:BinaryTree]} with block: {:__block__, [], [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]}

11:44:14.299 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:BinaryTree]} with block: {:__block__, [], [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]}

11:44:14.299 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:BinaryTree]} with block: {:__block__, [], [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]}

11:44:14.299 [debug] Generating constructors for variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

11:44:14.299 [debug] Extracted variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

11:44:14.299 [debug] Extracted variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

11:44:14.299 [debug] Processing variant: {:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}

11:44:14.299 [debug] Extracted variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

11:44:14.299 [debug] Extracted variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

11:44:14.299 [debug] Generating constructors for variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

11:44:14.299 [debug] Processing variant: {:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}

11:44:14.299 [debug] Generating constructors for variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

11:44:14.299 [debug] Generating constructors for variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

11:44:14.299 [debug] Generating constructors for variants: [{:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}, {:leaf, [line: 8, column: 5], []}]

11:44:14.299 [debug] Processing variant: {:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}

11:44:14.299 [debug] Constructor: :node, meta: [line: 7, column: 5], args: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

11:44:14.299 [debug] Constructor: :cons, meta: [line: 7, column: 5], args: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

11:44:14.299 [debug] Processing variant: {:node, [line: 7, column: 5], [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]}

11:44:14.299 [debug] Processing variant: {:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}

11:44:14.299 [debug] Constructor: :node, meta: [line: 7, column: 5], args: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

11:44:14.299 [debug] Constructor: :node, meta: [line: 7, column: 5], args: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

11:44:14.299 [debug] Extracting constructor args from: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

11:44:14.299 [debug] Constructor: :cons, meta: [line: 7, column: 5], args: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

11:44:14.299 [debug] Extracting constructor args from: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

11:44:14.299 [debug] Extracting constructor args from: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

11:44:14.299 [debug] Extracting constructor args from: [{:val, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 15], [{:left, [line: 7, column: 20], nil}]}, {:recu, [line: 7, column: 27], [{:right, [line: 7, column: 32], nil}]}]

11:44:14.299 [debug] Found value arg: :val

11:44:14.299 [debug] Found value arg: :head

11:44:14.299 [debug] Found value arg: :val

11:44:14.299 [debug] Extracting constructor args from: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

11:44:14.299 [debug] Found recursive arg: :left

11:44:14.299 [debug] Found value arg: :val

11:44:14.299 [debug] Found recursive arg: :tail

11:44:14.299 [debug] Found value arg: :head

11:44:14.299 [debug] Found recursive arg: :right

11:44:14.299 [debug] Found recursive arg: :left

11:44:14.299 [debug] Extracted arg_names: [:head, :tail]

11:44:14.299 [debug] Found recursive arg: :left

11:44:14.299 [debug] Extracted arg_names: [:val, :left, :right]

11:44:14.299 [debug] Found recursive arg: :tail

11:44:14.299 [debug] Found recursive arg: :right

11:44:14.299 [debug] Generated arg vars: [{:head, [], nil}, {:tail, [], nil}]

11:44:14.299 [debug] Found recursive arg: :right

11:44:14.299 [debug] Field pairs: [head: {:head, [], nil}, tail: {:tail, [], nil}]

11:44:14.299 [debug] Extracted arg_names: [:val, :left, :right]

11:44:14.299 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

11:44:14.299 [debug] Processing variant: {:null, [line: 8, column: 5], []}

11:44:14.299 [debug] Extracted arg_names: [:head, :tail]

11:44:14.299 [debug] Constructor: :null, meta: [line: 8, column: 5], args: []

11:44:14.299 [debug] Extracted arg_names: [:val, :left, :right]

11:44:14.299 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

11:44:14.299 [debug] Extracting constructor args from: []

11:44:14.299 [debug] Extracted arg_names: []

11:44:14.299 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

11:44:14.299 [debug] Processing variant: {:leaf, [line: 8, column: 5], []}

11:44:14.299 [debug] Generated arg vars: [{:head, [], nil}, {:tail, [], nil}]

11:44:14.299 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

11:44:14.299 [debug] Constructor: :leaf, meta: [line: 8, column: 5], args: []

11:44:14.299 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

11:44:14.299 [debug] Generated arg vars: []

11:44:14.299 [debug] Extracting constructor args from: []

11:44:14.299 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

11:44:14.299 [debug] Field pairs: []

11:44:14.299 [debug] Field pairs: [head: {:head, [], nil}, tail: {:tail, [], nil}]

11:44:14.300 [debug] Processing variant: {:leaf, [line: 8, column: 5], []}

11:44:14.299 [debug] Processing variant: {:leaf, [line: 8, column: 5], []}

11:44:14.300 [debug] Constructor: :leaf, meta: [line: 8, column: 5], args: []

11:44:14.300 [debug] Processing variant: {:null, [line: 8, column: 5], []}

11:44:14.300 [debug] Constructor: :leaf, meta: [line: 8, column: 5], args: []

11:44:14.300 [debug] Constructor: :null, meta: [line: 8, column: 5], args: []

11:44:14.300 [debug] Extracted arg_names: []

11:44:14.300 [debug] Extracting constructor args from: []

11:44:14.300 [debug] Extracted arg_names: []

11:44:14.300 [debug] Extracting constructor args from: []

11:44:14.300 [debug] Extracting constructor args from: []

11:44:14.300 [debug] Extracted arg_names: []

11:44:14.300 [debug] Generated arg vars: []

11:44:14.300 [debug] Generated arg vars: []

11:44:14.300 [debug] Field pairs: []

11:44:14.300 [debug] Extracted arg_names: []

11:44:14.300 [debug] Generated arg vars: []

11:44:14.300 [debug] Generated arg vars: []

11:44:14.300 [debug] Field pairs: []

11:44:14.300 [debug] Field pairs: []

11:44:14.300 [debug] Field pairs: []
Running ExUnit with seed: 287719, max_cases: 48


11:44:14.322 [debug] Fold expression: {:list, [line: 17, column: 14], nil}, opts: [with: 0], cases: [{:->, [line: 18, column: 34], [[{:case, [line: 18, column: 11], [{:cons, [line: 18, column: 16], [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:null, [line: 23, column: 16], []}]}], {0, {:state, [line: 24, column: 17], nil}}]}]

11:44:14.322 [debug] Extracting cases from list: [{:->, [line: 18, column: 34], [[{:case, [line: 18, column: 11], [{:cons, [line: 18, column: 16], [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:null, [line: 23, column: 16], []}]}], {0, {:state, [line: 24, column: 17], nil}}]}]

11:44:14.322 [debug] Extracted fold cases: [{:->, [line: 18, column: 34], [[{:case, [line: 18, column: 11], [{:cons, [line: 18, column: 16], [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:null, [line: 23, column: 16], []}]}], {0, {:state, [line: 24, column: 17], nil}}]}]

11:44:14.322 [debug] Generating fold cases: [{:->, [line: 18, column: 34], [[{:case, [line: 18, column: 11], [{:cons, [line: 18, column: 16], [{:head, [line: 18, column: 21], nil}, {:tail, [line: 18, column: 27], nil}]}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:null, [line: 23, column: 16], []}]}], {0, {:state, [line: 24, column: 17], nil}}]}]

11:44:14.322 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

11:44:14.322 [debug] Transforming recursive refs in body: {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]} with bindings: [head: true, tail: true], state: 0

11:44:14.322 [debug] Processing recursive reference: {:recu, [line: 19, column: 39], [{:tail, [line: 19, column: 44], nil}]}

11:44:14.322 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.322 [debug] Bend operation with var: :val, initial: 1

11:44:14.322 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

11:44:14.323 [debug] Transforming recursive refs in body: {0, {:state, [line: 24, column: 17], nil}} with bindings: [], state: 0

11:44:14.323 [debug] Generated fold cases after transformation: [{:->, [line: 18, column: 34], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :null]}], {0, {:state, [line: 24, column: 17], nil}}]}]

11:44:14.323 [debug] Fork operation with expression: {:+, [line: 16, column: 43], [{:val, [line: 16, column: 39], nil}, 1]}

11:44:14.323 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 17, column: 14], nil}, 0, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 18, column: 34], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [line: 11], [{:=, [line: 19, column: 37], [{{:tail_value, [line: 19, column: 14], nil}, {:new_state, [line: 19, column: 26], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 20, column: 21], [{:new_sum, [line: 20, column: 13], nil}, {:+, [line: 20, column: 28], [{:head, [line: 20, column: 23], nil}, {:tail_value, [line: 20, column: 30], nil}]}]}, {{:head, [line: 21, column: 14], nil}, {:new_sum, [line: 21, column: 20], nil}}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :null]}], {0, {:state, [line: 24, column: 17], nil}}]}]]]}]}]}]}
    warning: variable "new_state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 19 │             {tail_value, new_state} = recu(tail)
    │                          ~
    │
    └─ test/fold_with_state_test.exs:19:26: FoldWithStateTest."test fold operations fold with state"/1


11:44:14.325 [debug] Bend operation with var: :val, initial: 0

11:44:14.325 [debug] Fork operation with expression: {:+, [line: 16, column: 43], [{:val, [line: 16, column: 39], nil}, 1]}

11:44:14.325 [debug] Fork operation with expression: {:+, [line: 16, column: 58], [{:val, [line: 16, column: 54], nil}, 1]}
    warning: unused import BenBen
    │
  3 │   import BenBen
    │   ~
    │
    └─ test/my_graph2_test.exs:3:3


11:44:14.329 [debug] Fold expression: {:tree, [line: 21, column: 14], nil}, opts: [], cases: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

11:44:14.329 [debug] Extracting cases from list: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

11:44:14.329 [debug] Extracted fold cases: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

11:44:14.329 [debug] Generating fold cases: [{:->, [line: 22, column: 40], [[{:case, [line: 22, column: 11], [{:node, [line: 22, column: 16], [{:val, [line: 22, column: 21], nil}, {:left, [line: 22, column: 26], nil}, {:right, [line: 22, column: 32], nil}]}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]}]}, {:->, [line: 23, column: 24], [[{:case, [line: 23, column: 11], [{:leaf, [line: 23, column: 16], []}]}], 0]}]

11:44:14.329 [debug] Generated pattern: {:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

11:44:14.329 [debug] Transforming recursive refs in body: {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}]}, {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}]} with bindings: [val: true, left: true, right: true], state: nil

11:44:14.329 [debug] Processing recursive reference: {:recu, [line: 22, column: 49], [{:left, [line: 22, column: 54], nil}]}

11:44:14.329 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.329 [debug] Processing recursive reference: {:recu, [line: 22, column: 62], [{:right, [line: 22, column: 67], nil}]}

11:44:14.329 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

11:44:14.329 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf
    warning: unused import BenBen
    │
  3 │   import BenBen
    │   ~
    │
    └─ test/my_graph_test.exs:3:3


11:44:14.329 [debug] Transforming recursive refs in body: 0 with bindings: [], state: nil

11:44:14.329 [debug] Generated fold cases after transformation: [{:->, [line: 22, column: 40], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :leaf]}], 0]}]

11:44:14.330 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 21, column: 14], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 22, column: 40], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 22, column: 60], [{:+, [line: 22, column: 47], [{:val, [line: 22, column: 43], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 23, column: 24], [[{:%{}, [], [variant: :leaf]}], 0]}]]]}]}]}]}
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 21 │         fold tree do
    │         ~~~~~~~~~~~~
    │
    └─ test/sum_of_tree_test.exs:21: SumOfTreeTest."test fold operations basic sum of tree"/1

    warning: unused import BenBen
    │
  3 │   import BenBen
    │   ~
    │
    └─ test/my_tree_test.exs:3:3

========
%{
  id: 1,
  value: 10,
  edges: %{variant: :edge, to_id: 2, weight: 5},
  variant: :vertex
}
========

11:44:14.365 [debug] do_fold called with data: %{id: 1, value: 10, edges: %{variant: :edge, to_id: 2, weight: 5}, variant: :vertex}, variant_type: :vertex, state: nil

11:44:14.365 [debug] Processing recursive fields of: %{id: 1, value: 10, edges: %{variant: :edge, to_id: 2, weight: 5}, variant: :vertex}

11:44:14.365 [debug] do_fold called with data: %{variant: :edge, to_id: 2, weight: 5}, variant_type: :edge, state: nil

11:44:14.365 [debug] Processing recursive fields of: %{variant: :edge, to_id: 2, weight: 5}

11:44:14.365 [debug] Recursive field result for edges: 5

11:44:14.365 [debug] do_fold called with non-variant data: 5
.
11:44:14.366 [debug] Bend initial value: 1

11:44:14.366 [debug] Executing bend with initial: 1

11:44:14.366 [debug] Executing fun with value: 1

11:44:14.366 [debug] Evaluating bend block with value: 1

11:44:14.366 [debug] Block returned: %{id: 1, value: 10, edges: %{variant: :edge, to_id: 2, weight: 2}, variant: :vertex}

11:44:14.366 [debug] Fun returned result: %{id: 1, value: 10, edges: %{variant: :edge, to_id: 2, weight: 2}, variant: :vertex}

11:44:14.366 [debug] Processing constructed value: %{id: 1, value: 10, edges: %{variant: :edge, to_id: 2, weight: 2}, variant: :vertex}

11:44:14.366 [debug] do_bend final result: %{id: 1, value: 10, edges: %{variant: :edge, to_id: 2, weight: 2}, variant: :vertex}

11:44:14.366 [debug] Final bend result: %{id: 1, value: 10, edges: %{variant: :edge, to_id: 2, weight: 2}, variant: :vertex}

11:44:14.366 [debug] do_fold called with data: %{id: 1, value: 10, edges: %{variant: :edge, to_id: 2, weight: 2}, variant: :vertex}, variant_type: :vertex, state: nil

11:44:14.366 [debug] Processing recursive fields of: %{id: 1, value: 10, edges: %{variant: :edge, to_id: 2, weight: 2}, variant: :vertex}

11:44:14.366 [debug] do_fold called with data: %{variant: :edge, to_id: 2, weight: 2}, variant_type: :edge, state: nil

11:44:14.366 [debug] Processing recursive fields of: %{variant: :edge, to_id: 2, weight: 2}

11:44:14.366 [debug] Recursive field result for edges: 2
12

11:44:14.366 [debug] do_fold called with non-variant data: 2
%{
  id: 1,
  value: 10,
  edges: %{variant: :edge, to_id: 2, weight: 2},
  variant: :vertex
}
.
11:44:14.366 [debug] Bend initial value: 0

11:44:14.366 [debug] Executing bend with initial: 0

11:44:14.366 [debug] Executing fun with value: 0

11:44:14.366 [debug] Evaluating bend block with value: 0

11:44:14.366 [debug] Block returned: %{left: {:fork, 1}, right: {:fork, 1}, val: 0, variant: :node}

11:44:14.366 [debug] Fun returned result: %{left: {:fork, 1}, right: {:fork, 1}, val: 0, variant: :node}

11:44:14.366 [debug] Processing constructed value: %{left: {:fork, 1}, right: {:fork, 1}, val: 0, variant: :node}

11:44:14.366 [debug] Executing bend with initial: 1

11:44:14.366 [debug] Executing fun with value: 1

11:44:14.366 [debug] Evaluating bend block with value: 1

11:44:14.366 [debug] Block returned: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}

11:44:14.366 [debug] Fun returned result: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}

11:44:14.366 [debug] Processing constructed value: %{left: {:fork, 2}, right: {:fork, 2}, val: 1, variant: :node}

11:44:14.366 [debug] Executing bend with initial: 2

11:44:14.366 [debug] Executing fun with value: 2

11:44:14.366 [debug] Evaluating bend block with value: 2

11:44:14.366 [debug] Block returned: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}

11:44:14.366 [debug] Fun returned result: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}

11:44:14.366 [debug] Processing constructed value: %{left: {:fork, 3}, right: {:fork, 3}, val: 2, variant: :node}

11:44:14.366 [debug] Executing bend with initial: 3

11:44:14.366 [debug] Executing fun with value: 3

11:44:14.366 [debug] Evaluating bend block with value: 3

11:44:14.366 [debug] Block returned: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}

11:44:14.366 [debug] Fun returned result: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}

11:44:14.366 [debug] Processing constructed value: %{left: {:fork, 4}, right: {:fork, 4}, val: 3, variant: :node}

11:44:14.366 [debug] Executing bend with initial: 4

11:44:14.366 [debug] Executing fun with value: 4

11:44:14.366 [debug] Evaluating bend block with value: 4

11:44:14.366 [debug] Block returned: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}

11:44:14.366 [debug] Fun returned result: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}

11:44:14.366 [debug] Processing constructed value: %{left: {:fork, 5}, right: {:fork, 5}, val: 4, variant: :node}

11:44:14.366 [debug] Executing bend with initial: 5

11:44:14.366 [debug] Executing fun with value: 5

11:44:14.366 [debug] Evaluating bend block with value: 5

11:44:14.366 [debug] Block returned: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}

11:44:14.366 [debug] Fun returned result: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}

11:44:14.366 [debug] Processing constructed value: %{left: {:fork, 6}, right: {:fork, 6}, val: 5, variant: :node}

11:44:14.366 [debug] Executing bend with initial: 6

11:44:14.366 [debug] Executing fun with value: 6

11:44:14.366 [debug] Evaluating bend block with value: 6

11:44:14.366 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}

11:44:14.366 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}

11:44:14.366 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}

11:44:14.366 [debug] Executing bend with initial: 7

11:44:14.366 [debug] Executing fun with value: 7

11:44:14.366 [debug] Evaluating bend block with value: 7

11:44:14.366 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

11:44:14.367 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

11:44:14.367 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

11:44:14.367 [debug] Executing bend with initial: 8

11:44:14.367 [debug] Executing fun with value: 8

11:44:14.367 [debug] Evaluating bend block with value: 8

11:44:14.367 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.367 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.367 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.367 [debug] Executing bend with initial: 9

11:44:14.367 [debug] Executing fun with value: 9

11:44:14.367 [debug] Evaluating bend block with value: 9

11:44:14.367 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.367 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.367 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.367 [debug] Executing bend with initial: 10

11:44:14.367 [debug] Executing fun with value: 10

11:44:14.367 [debug] Evaluating bend block with value: 10

11:44:14.367 [debug] Block returned: %{variant: :leaf}

11:44:14.367 [debug] Fun returned result: %{variant: :leaf}

11:44:14.367 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.367 [debug] do_bend final result: %{variant: :leaf}

11:44:14.367 [debug] Executing bend with initial: 10

11:44:14.367 [debug] Executing fun with value: 10

11:44:14.367 [debug] Evaluating bend block with value: 10

11:44:14.367 [debug] Block returned: %{variant: :leaf}

11:44:14.367 [debug] Fun returned result: %{variant: :leaf}

11:44:14.367 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.367 [debug] do_bend final result: %{variant: :leaf}

11:44:14.367 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

11:44:14.367 [debug] Executing bend with initial: 9

11:44:14.367 [debug] Executing fun with value: 9

11:44:14.367 [debug] Evaluating bend block with value: 9

11:44:14.367 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.367 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.367 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.367 [debug] Executing bend with initial: 10

11:44:14.367 [debug] Executing fun with value: 10

11:44:14.367 [debug] Evaluating bend block with value: 10

11:44:14.367 [debug] Block returned: %{variant: :leaf}

11:44:14.367 [debug] Fun returned result: %{variant: :leaf}

11:44:14.367 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.367 [debug] do_bend final result: %{variant: :leaf}

11:44:14.367 [debug] Executing bend with initial: 10

11:44:14.367 [debug] Executing fun with value: 10

11:44:14.367 [debug] Evaluating bend block with value: 10

11:44:14.367 [debug] Block returned: %{variant: :leaf}

11:44:14.367 [debug] Fun returned result: %{variant: :leaf}

11:44:14.367 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.367 [debug] do_bend final result: %{variant: :leaf}

11:44:14.367 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

11:44:14.367 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}

11:44:14.367 [debug] Executing bend with initial: 8

11:44:14.367 [debug] Executing fun with value: 8

11:44:14.367 [debug] Evaluating bend block with value: 8

11:44:14.367 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.367 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.367 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.367 [debug] Executing bend with initial: 9

11:44:14.367 [debug] Executing fun with value: 9

11:44:14.367 [debug] Evaluating bend block with value: 9

11:44:14.367 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.367 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.367 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.367 [debug] Executing bend with initial: 10

11:44:14.367 [debug] Executing fun with value: 10

11:44:14.367 [debug] Evaluating bend block with value: 10

11:44:14.367 [debug] Block returned: %{variant: :leaf}

11:44:14.367 [debug] Fun returned result: %{variant: :leaf}

11:44:14.367 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.367 [debug] do_bend final result: %{variant: :leaf}

11:44:14.367 [debug] Executing bend with initial: 10

11:44:14.367 [debug] Executing fun with value: 10

11:44:14.367 [debug] Evaluating bend block with value: 10

11:44:14.367 [debug] Block returned: %{variant: :leaf}

11:44:14.367 [debug] Fun returned result: %{variant: :leaf}

11:44:14.367 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.367 [debug] do_bend final result: %{variant: :leaf}

11:44:14.367 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

11:44:14.367 [debug] Executing bend with initial: 9

11:44:14.367 [debug] Executing fun with value: 9

11:44:14.367 [debug] Evaluating bend block with value: 9

11:44:14.367 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.367 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.367 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.367 [debug] Executing bend with initial: 10

11:44:14.367 [debug] Executing fun with value: 10

11:44:14.367 [debug] Evaluating bend block with value: 10

11:44:14.367 [debug] Block returned: %{variant: :leaf}

11:44:14.368 [debug] Fun returned result: %{variant: :leaf}

11:44:14.368 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.368 [debug] do_bend final result: %{variant: :leaf}

11:44:14.368 [debug] Executing bend with initial: 10

11:44:14.368 [debug] Executing fun with value: 10

11:44:14.368 [debug] Evaluating bend block with value: 10

11:44:14.368 [debug] Block returned: %{variant: :leaf}

11:44:14.368 [debug] Fun returned result: %{variant: :leaf}

11:44:14.368 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.368 [debug] do_bend final result: %{variant: :leaf}

11:44:14.368 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

11:44:14.368 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}

11:44:14.368 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}

11:44:14.368 [debug] Executing bend with initial: 7

11:44:14.368 [debug] Executing fun with value: 7

11:44:14.368 [debug] Evaluating bend block with value: 7

11:44:14.368 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

11:44:14.368 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

11:44:14.368 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

11:44:14.368 [debug] Executing bend with initial: 8

11:44:14.368 [debug] Executing fun with value: 8

11:44:14.368 [debug] Evaluating bend block with value: 8

11:44:14.368 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.368 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.368 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.368 [debug] Executing bend with initial: 9

11:44:14.368 [debug] Executing fun with value: 9

11:44:14.368 [debug] Evaluating bend block with value: 9

11:44:14.368 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.368 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.368 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.368 [debug] Executing bend with initial: 10

11:44:14.368 [debug] Executing fun with value: 10

11:44:14.368 [debug] Evaluating bend block with value: 10

11:44:14.368 [debug] Block returned: %{variant: :leaf}

11:44:14.368 [debug] Fun returned result: %{variant: :leaf}

11:44:14.368 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.368 [debug] do_bend final result: %{variant: :leaf}

11:44:14.368 [debug] Executing bend with initial: 10

11:44:14.368 [debug] Executing fun with value: 10

11:44:14.368 [debug] Evaluating bend block with value: 10

11:44:14.368 [debug] Block returned: %{variant: :leaf}

11:44:14.368 [debug] Fun returned result: %{variant: :leaf}

11:44:14.368 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.368 [debug] do_bend final result: %{variant: :leaf}

11:44:14.368 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

11:44:14.368 [debug] Executing bend with initial: 9

11:44:14.368 [debug] Executing fun with value: 9

11:44:14.368 [debug] Evaluating bend block with value: 9

11:44:14.368 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.368 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.368 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.368 [debug] Executing bend with initial: 10

11:44:14.368 [debug] Executing fun with value: 10

11:44:14.368 [debug] Evaluating bend block with value: 10

11:44:14.368 [debug] Block returned: %{variant: :leaf}

11:44:14.368 [debug] Fun returned result: %{variant: :leaf}

11:44:14.368 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.368 [debug] do_bend final result: %{variant: :leaf}

11:44:14.368 [debug] Executing bend with initial: 10

11:44:14.368 [debug] Executing fun with value: 10

11:44:14.368 [debug] Evaluating bend block with value: 10

11:44:14.368 [debug] Block returned: %{variant: :leaf}

11:44:14.368 [debug] Fun returned result: %{variant: :leaf}

11:44:14.368 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.368 [debug] do_bend final result: %{variant: :leaf}

11:44:14.368 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

11:44:14.368 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}

11:44:14.368 [debug] Executing bend with initial: 8

11:44:14.368 [debug] Executing fun with value: 8

11:44:14.368 [debug] Evaluating bend block with value: 8

11:44:14.368 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.368 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.368 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.368 [debug] Executing bend with initial: 9

11:44:14.368 [debug] Executing fun with value: 9

11:44:14.368 [debug] Evaluating bend block with value: 9

11:44:14.368 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.368 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.368 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.368 [debug] Executing bend with initial: 10

11:44:14.368 [debug] Executing fun with value: 10

11:44:14.368 [debug] Evaluating bend block with value: 10

11:44:14.368 [debug] Block returned: %{variant: :leaf}

11:44:14.368 [debug] Fun returned result: %{variant: :leaf}

11:44:14.368 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.368 [debug] do_bend final result: %{variant: :leaf}

11:44:14.368 [debug] Executing bend with initial: 10

11:44:14.368 [debug] Executing fun with value: 10

11:44:14.368 [debug] Evaluating bend block with value: 10

11:44:14.368 [debug] Block returned: %{variant: :leaf}

11:44:14.368 [debug] Fun returned result: %{variant: :leaf}

11:44:14.369 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.369 [debug] do_bend final result: %{variant: :leaf}

11:44:14.369 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

11:44:14.369 [debug] Executing bend with initial: 9

11:44:14.369 [debug] Executing fun with value: 9

11:44:14.369 [debug] Evaluating bend block with value: 9

11:44:14.369 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.369 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.369 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.369 [debug] Executing bend with initial: 10

11:44:14.369 [debug] Executing fun with value: 10

11:44:14.369 [debug] Evaluating bend block with value: 10

11:44:14.369 [debug] Block returned: %{variant: :leaf}

11:44:14.369 [debug] Fun returned result: %{variant: :leaf}

11:44:14.369 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.369 [debug] do_bend final result: %{variant: :leaf}

11:44:14.369 [debug] Executing bend with initial: 10

11:44:14.369 [debug] Executing fun with value: 10

11:44:14.369 [debug] Evaluating bend block with value: 10

11:44:14.369 [debug] Block returned: %{variant: :leaf}

11:44:14.369 [debug] Fun returned result: %{variant: :leaf}

11:44:14.369 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.369 [debug] do_bend final result: %{variant: :leaf}

11:44:14.369 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

11:44:14.369 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}

11:44:14.369 [debug] do_bend final result: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}

11:44:14.369 [debug] do_bend final result: %{left: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, right: %{left: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, right: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}, val: 7, variant: :node}, val: 6, variant: :node}

11:44:14.369 [debug] Executing bend with initial: 6

11:44:14.369 [debug] Executing fun with value: 6

11:44:14.369 [debug] Evaluating bend block with value: 6

11:44:14.369 [debug] Block returned: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}

11:44:14.369 [debug] Fun returned result: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}

11:44:14.369 [debug] Processing constructed value: %{left: {:fork, 7}, right: {:fork, 7}, val: 6, variant: :node}

11:44:14.369 [debug] Executing bend with initial: 7

11:44:14.369 [debug] Executing fun with value: 7

11:44:14.369 [debug] Evaluating bend block with value: 7

11:44:14.369 [debug] Block returned: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

11:44:14.369 [debug] Fun returned result: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

11:44:14.369 [debug] Processing constructed value: %{left: {:fork, 8}, right: {:fork, 8}, val: 7, variant: :node}

11:44:14.369 [debug] Executing bend with initial: 8

11:44:14.369 [debug] Executing fun with value: 8

11:44:14.369 [debug] Evaluating bend block with value: 8

11:44:14.369 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.369 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.369 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.369 [debug] Executing bend with initial: 9

11:44:14.369 [debug] Executing fun with value: 9

11:44:14.369 [debug] Evaluating bend block with value: 9

11:44:14.369 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.369 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.369 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.369 [debug] Executing bend with initial: 10

11:44:14.369 [debug] Executing fun with value: 10

11:44:14.369 [debug] Evaluating bend block with value: 10

11:44:14.369 [debug] Block returned: %{variant: :leaf}

11:44:14.369 [debug] Fun returned result: %{variant: :leaf}

11:44:14.369 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.369 [debug] do_bend final result: %{variant: :leaf}

11:44:14.369 [debug] Executing bend with initial: 10

11:44:14.369 [debug] Executing fun with value: 10

11:44:14.369 [debug] Evaluating bend block with value: 10

11:44:14.369 [debug] Block returned: %{variant: :leaf}

11:44:14.369 [debug] Fun returned result: %{variant: :leaf}

11:44:14.369 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.369 [debug] do_bend final result: %{variant: :leaf}

11:44:14.369 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

11:44:14.369 [debug] Executing bend with initial: 9

11:44:14.369 [debug] Executing fun with value: 9

11:44:14.369 [debug] Evaluating bend block with value: 9

11:44:14.369 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.369 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.369 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.369 [debug] Executing bend with initial: 10

11:44:14.369 [debug] Executing fun with value: 10

11:44:14.369 [debug] Evaluating bend block with value: 10

11:44:14.369 [debug] Block returned: %{variant: :leaf}

11:44:14.369 [debug] Fun returned result: %{variant: :leaf}

11:44:14.369 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.369 [debug] do_bend final result: %{variant: :leaf}

11:44:14.369 [debug] Executing bend with initial: 10

11:44:14.369 [debug] Executing fun with value: 10

11:44:14.369 [debug] Evaluating bend block with value: 10

11:44:14.369 [debug] Block returned: %{variant: :leaf}

11:44:14.369 [debug] Fun returned result: %{variant: :leaf}

11:44:14.369 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.369 [debug] do_bend final result: %{variant: :leaf}

11:44:14.369 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

11:44:14.369 [debug] do_bend final result: %{left: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, right: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}, val: 8, variant: :node}

11:44:14.369 [debug] Executing bend with initial: 8

11:44:14.369 [debug] Executing fun with value: 8

11:44:14.369 [debug] Evaluating bend block with value: 8

11:44:14.369 [debug] Block returned: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.369 [debug] Fun returned result: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.370 [debug] Processing constructed value: %{left: {:fork, 9}, right: {:fork, 9}, val: 8, variant: :node}

11:44:14.370 [debug] Executing bend with initial: 9

11:44:14.370 [debug] Executing fun with value: 9

11:44:14.370 [debug] Evaluating bend block with value: 9

11:44:14.370 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.370 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.370 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.370 [debug] Executing bend with initial: 10

11:44:14.370 [debug] Executing fun with value: 10

11:44:14.370 [debug] Evaluating bend block with value: 10

11:44:14.370 [debug] Block returned: %{variant: :leaf}

11:44:14.370 [debug] Fun returned result: %{variant: :leaf}

11:44:14.370 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.370 [debug] do_bend final result: %{variant: :leaf}

11:44:14.370 [debug] Executing bend with initial: 10

11:44:14.370 [debug] Executing fun with value: 10

11:44:14.370 [debug] Evaluating bend block with value: 10

11:44:14.370 [debug] Block returned: %{variant: :leaf}

11:44:14.370 [debug] Fun returned result: %{variant: :leaf}

11:44:14.370 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.370 [debug] do_bend final result: %{variant: :leaf}

11:44:14.370 [debug] do_bend final result: %{left: %{variant: :leaf}, right: %{variant: :leaf}, val: 9, variant: :node}

11:44:14.370 [debug] Executing bend with initial: 9

11:44:14.370 [debug] Executing fun with value: 9

11:44:14.370 [debug] Evaluating bend block with value: 9

11:44:14.370 [debug] Block returned: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.370 [debug] Fun returned result: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.370 [debug] Processing constructed value: %{left: {:fork, 10}, right: {:fork, 10}, val: 9, variant: :node}

11:44:14.370 [debug] Executing bend with initial: 10

11:44:14.370 [debug] Executing fun with value: 10

11:44:14.370 [debug] Evaluating bend block with value: 10

11:44:14.370 [debug] Block returned: %{variant: :leaf}

11:44:14.370 [debug] Fun returned result: %{variant: :leaf}

11:44:14.370 [debug] Processing constructed value: %{variant: :leaf}

11:44:14.370 [debug] do_bend final result: %{variant: :leaf}

11:44:14.370 [debug] Executing bend with initial: 10

11:44:14.370 [debug] Executing fun with value: 10

11:44:14.370 [debug] Evaluating bend block with value: 10

11:44:14.370 [debug] Block returned: %{variant: :leaf}

11:44:14.370 [debug] Fun returned result: %{variant: :leaf}
......

  1) test tree operations filters tree nodes (TreeOperationsTest)
     test/tree_operations_test.exs:26
     ** (BadFunctionError) expected a function, got: 2
     code: filtered = filter_tree(tree, &(rem(&1, 2) == 0))
     stacktrace:
       (ben_ben 0.1.0) lib/ben_ben.ex:267: BenBen.do_fold/3
       (ben_ben 0.1.0) lib/examples/tree_operations.ex:41: anonymous fn/3 in TreeOperations.filter_tree/2
       (ben_ben 0.1.0) lib/ben_ben.ex:295: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.18.1) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       (ben_ben 0.1.0) lib/ben_ben.ex:264: BenBen.do_fold/3
       (ben_ben 0.1.0) lib/ben_ben.ex:295: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.18.1) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       (ben_ben 0.1.0) lib/ben_ben.ex:264: BenBen.do_fold/3
       test/tree_operations_test.exs:29: (test)



  2) test tree operations balances unbalanced tree (TreeOperationsTest)
     test/tree_operations_test.exs:49
     ** (BadFunctionError) expected a function, got: 1
     code: balanced = balance_tree(unbalanced)
     stacktrace:
       (ben_ben 0.1.0) lib/ben_ben.ex:267: BenBen.do_fold/3
       (ben_ben 0.1.0) lib/examples/tree_operations.ex:26: anonymous fn/3 in TreeOperations.map_tree/2
       (ben_ben 0.1.0) lib/ben_ben.ex:295: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.18.1) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       (ben_ben 0.1.0) lib/ben_ben.ex:264: BenBen.do_fold/3
       test/tree_operations_test.exs:62: (test)



  3) test tree operations counts nodes at each level (TreeOperationsTest)
     test/tree_operations_test.exs:37
     ** (MatchError) no match of right hand side value: %{0 => 128, 1 => 64, 2 => 32, 3 => 16, 4 => 8, 5 => 4, 6 => 2, 7 => 1}
     code: {_, counts} = level_counts(tree)
     stacktrace:
       test/tree_operations_test.exs:39: (test)



  4) test tree operations maps values in tree (TreeOperationsTest)
     test/tree_operations_test.exs:17
     ** (BadFunctionError) expected a function, got: 1
     code: mapped_tree = map_tree(tree, &(&1 * 3))
     stacktrace:
       (ben_ben 0.1.0) lib/ben_ben.ex:267: BenBen.do_fold/3
       (ben_ben 0.1.0) lib/examples/tree_operations.ex:26: anonymous fn/3 in TreeOperations.map_tree/2
       (ben_ben 0.1.0) lib/ben_ben.ex:295: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.18.1) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       (ben_ben 0.1.0) lib/ben_ben.ex:264: BenBen.do_fold/3
       test/tree_operations_test.exs:19: (test)

.
Finished in 0.4 seconds (0.00s async, 0.4s sync)
13 tests, 4 failures
