Compiling 27 files (.ex)
warning: clauses with the same name and arity (number of arguments) should be grouped together, "defp generate_fold_cases/2" was previously defined (lib/kernel_shtf/ben_ben.ex:140)
  lib/kernel_shtf/ben_ben.ex:177

warning: variable "name" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/kernel_shtf/gov.ex:17: KernelShtf.Gov.fabric/2

warning: variable "where_clause" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/bridge_imo/cypher/cypher_executer.ex:84: CypherExecutor.handle_parsed_command/6

warning: variable "other" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/kernel_shtf/ben_ben.ex:393: KernelShtf.BenBen.process_constructed/2

warning: variable "var" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/bridge_imo/cypher/cypher_executer.ex:117: CypherExecutor.parse_create_and_return/1

warning: variable "var" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/bridge_imo/cypher/cypher_executer.ex:129: CypherExecutor.parse_match_and_return/1

warning: function extract_bindings/1 is unused
  lib/kernel_shtf/ben_ben.ex:256

warning: function generate_pattern_match/1 is unused
  lib/kernel_shtf/ben_ben.ex:231

warning: function parse_create_and_return/1 is unused
  lib/bridge_imo/cypher/cypher_executer.ex:115

warning: function parse_create_pattern/1 is unused
  lib/bridge_imo/cypher/cypher_executer.ex:226

warning: function parse_match_and_return/1 is unused
  lib/bridge_imo/cypher/cypher_executer.ex:127

warning: function parse_node/2 is unused
  lib/bridge_imo/cypher/cypher_executer.ex:287

warning: function parse_node_match/1 is unused
  lib/bridge_imo/cypher/cypher_executer.ex:318

warning: function parse_node_simple/1 is unused
  lib/bridge_imo/cypher/cypher_executer.ex:100

warning: function parse_pattern/1 is unused
  lib/bridge_imo/cypher/cypher_executer.ex:242

warning: function parse_property/2 is unused
  lib/bridge_imo/cypher/cypher_executer.ex:250

warning: variable "opts" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abc_law/mecha_cyph.ex:10: MechaCyph.canvas/1

warning: variable "drum" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abc_law/mecha_cyph.ex:92: MechaCyph.handle_state_event/2

warning: variable "event" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abc_law/mecha_cyph.ex:92: MechaCyph.handle_state_event/2

warning: variable "results" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abc_law/mecha_cyph.ex:158: MechaCyph.execute_query/2

warning: variable "opts" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/concrete_irl/graffiti/persistance.ex:64: Graffiti.Persistence.Worker.init/1

warning: variable "tx_id" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/concrete_irl/graffiti/persistance.ex:76: Graffiti.Persistence.save_vertex/2

warning: variable "tx_id" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/concrete_irl/graffiti/persistance.ex:86: Graffiti.Persistence.save_edge/2

warning: this clause for generate_fold_cases/2 cannot match because a previous clause at line 140 always matches
  lib/kernel_shtf/ben_ben.ex:177

warning: this clause for generate_fold_cases/2 cannot match because a previous clause at line 140 always matches
  lib/kernel_shtf/ben_ben.ex:181

warning: variable "expression" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/bridge_imo/mecha_cyph/exec_battle.ex:43: BridgeImo.MechaCyph.ExecBattle.return/1


07:09:42.415 [debug] Defining type {:__aliases__, [line: 7], [:Transaction]} with block: {:__block__, [], [{:pending, [line: 9], [{:operations, [line: 9], nil}, {:timestamp, [line: 9], nil}]}, {:committed, [line: 10], [{:changes, [line: 10], nil}, {:timestamp, [line: 10], nil}]}, {:rolled_back, [line: 11], [{:reason, [line: 11], nil}, {:timestamp, [line: 11], nil}]}]}

07:09:42.415 [debug] Defining type {:__aliases__, [line: 4], [:Tree]} with block: {:__block__, [], [{:node, [line: 5], [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]}

07:09:42.415 [debug] Defining type {:__aliases__, [line: 7], [:List]} with block: {:__block__, [], [{:cons, [line: 8], [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]}, {:null, [line: 9], []}]}

07:09:42.426 [debug] Extracted variants: [{:pending, [line: 9], [{:operations, [line: 9], nil}, {:timestamp, [line: 9], nil}]}, {:committed, [line: 10], [{:changes, [line: 10], nil}, {:timestamp, [line: 10], nil}]}, {:rolled_back, [line: 11], [{:reason, [line: 11], nil}, {:timestamp, [line: 11], nil}]}]

07:09:42.415 [debug] Defining type {:__aliases__, [line: 5], [:Graph]} with block: {:__block__, [], [{:graph, [line: 6], [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 7], [{:from, [line: 7], nil}, {:to, [line: 7], nil}]}, {:empty, [line: 8], []}]}

07:09:42.426 [debug] Extracted variants: [{:node, [line: 5], [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]

07:09:42.426 [debug] Extracted variants: [{:cons, [line: 8], [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]}, {:null, [line: 9], []}]

07:09:42.416 [debug] Defining type {:__aliases__, [line: 5], [:ProtoObject]} with block: {:__block__, [], [{:object, [line: 7], [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]}, {:null, [line: 9], []}]}

07:09:42.426 [debug] Extracted variants: [{:graph, [line: 6], [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 7], [{:from, [line: 7], nil}, {:to, [line: 7], nil}]}, {:empty, [line: 8], []}]

07:09:42.426 [debug] Extracted variants: [{:object, [line: 7], [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]}, {:null, [line: 9], []}]

07:09:42.426 [debug] Generating constructors for variants: [{:cons, [line: 8], [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]}, {:null, [line: 9], []}]

07:09:42.426 [debug] Generating constructors for variants: [{:pending, [line: 9], [{:operations, [line: 9], nil}, {:timestamp, [line: 9], nil}]}, {:committed, [line: 10], [{:changes, [line: 10], nil}, {:timestamp, [line: 10], nil}]}, {:rolled_back, [line: 11], [{:reason, [line: 11], nil}, {:timestamp, [line: 11], nil}]}]

07:09:42.416 [debug] Defining type {:__aliases__, [line: 4], [:Graph]} with block: {:__block__, [], [{:graph, [line: 6], [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]}, {:vertex, [line: 7], [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]}, {:edge, [line: 8], [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]}, {:empty, [line: 9], []}]}

07:09:42.426 [debug] Generating constructors for variants: [{:graph, [line: 6], [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 7], [{:from, [line: 7], nil}, {:to, [line: 7], nil}]}, {:empty, [line: 8], []}]

07:09:42.426 [debug] Processing variant: {:cons, [line: 8], [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]}

07:09:42.426 [debug] Processing variant: {:pending, [line: 9], [{:operations, [line: 9], nil}, {:timestamp, [line: 9], nil}]}

07:09:42.426 [debug] Constructor: :pending, meta: [line: 9], args: [{:operations, [line: 9], nil}, {:timestamp, [line: 9], nil}]

07:09:42.426 [debug] Extracting constructor args from: [{:operations, [line: 9], nil}, {:timestamp, [line: 9], nil}]

07:09:42.426 [debug] Found value arg: :operations

07:09:42.426 [debug] Constructor: :cons, meta: [line: 8], args: [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]

07:09:42.426 [debug] Processing variant: {:graph, [line: 6], [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}

07:09:42.426 [debug] Constructor: :graph, meta: [line: 6], args: [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]

07:09:42.426 [debug] Extracting constructor args from: [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]

07:09:42.426 [debug] Generating constructors for variants: [{:node, [line: 5], [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]

07:09:42.426 [debug] Found value arg: :head

07:09:42.426 [debug] Generating constructors for variants: [{:object, [line: 7], [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]}, {:null, [line: 9], []}]

07:09:42.426 [debug] Found recursive arg: :tail

07:09:42.426 [debug] Found value arg: :timestamp

07:09:42.426 [debug] Extracted arg_names: [:operations, :timestamp]

07:09:42.426 [debug] Extracted arg_names: [:head, :tail]

07:09:42.426 [debug] Processing variant: {:object, [line: 7], [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]}

07:09:42.426 [debug] Processing variant: {:node, [line: 5], [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}

07:09:42.426 [debug] Generated arg vars: [{:head, [], nil}, {:tail, [], nil}]

07:09:42.426 [debug] Field pairs: [head: {:head, [], nil}, tail: {:tail, [], nil}]

07:09:42.426 [debug] Extracted variants: [{:graph, [line: 6], [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]}, {:vertex, [line: 7], [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]}, {:edge, [line: 8], [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]}, {:empty, [line: 9], []}]

07:09:42.426 [debug] Constructor: :node, meta: [line: 5], args: [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]

07:09:42.426 [debug] Constructor: :object, meta: [line: 7], args: [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]

07:09:42.426 [debug] Extracting constructor args from: [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]

07:09:42.426 [debug] Found value arg: :vertices

07:09:42.426 [debug] Found recursive arg: :edges

07:09:42.426 [debug] Generated arg vars: [{:operations, [], nil}, {:timestamp, [], nil}]

07:09:42.426 [debug] Extracted arg_names: [:vertices, :edges]

07:09:42.426 [debug] Field pairs: [operations: {:operations, [], nil}, timestamp: {:timestamp, [], nil}]

07:09:42.426 [debug] Generated arg vars: [{:vertices, [], nil}, {:edges, [], nil}]

07:09:42.426 [debug] Processing variant: {:committed, [line: 10], [{:changes, [line: 10], nil}, {:timestamp, [line: 10], nil}]}

07:09:42.426 [debug] Processing variant: {:null, [line: 9], []}

07:09:42.426 [debug] Field pairs: [vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]

07:09:42.426 [debug] Constructor: :null, meta: [line: 9], args: []

07:09:42.426 [debug] Constructor: :committed, meta: [line: 10], args: [{:changes, [line: 10], nil}, {:timestamp, [line: 10], nil}]

07:09:42.426 [debug] Extracting constructor args from: []

07:09:42.426 [debug] Extracted arg_names: []

07:09:42.426 [debug] Extracting constructor args from: [{:changes, [line: 10], nil}, {:timestamp, [line: 10], nil}]

07:09:42.426 [debug] Generated arg vars: []

07:09:42.426 [debug] Field pairs: []

07:09:42.426 [debug] Found value arg: :changes

07:09:42.426 [debug] Extracting constructor args from: [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]

07:09:42.426 [debug] Found value arg: :timestamp

07:09:42.426 [debug] Extracted arg_names: [:changes, :timestamp]

07:09:42.426 [debug] Found value arg: :value

07:09:42.426 [debug] Generated arg vars: [{:changes, [], nil}, {:timestamp, [], nil}]

07:09:42.426 [debug] Found recursive arg: :left

07:09:42.426 [debug] Field pairs: [changes: {:changes, [], nil}, timestamp: {:timestamp, [], nil}]

07:09:42.426 [debug] Found recursive arg: :right

07:09:42.426 [debug] Processing variant: {:rolled_back, [line: 11], [{:reason, [line: 11], nil}, {:timestamp, [line: 11], nil}]}

07:09:42.426 [debug] Extracting constructor args from: [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]

07:09:42.426 [debug] Processing variant: {:edge, [line: 7], [{:from, [line: 7], nil}, {:to, [line: 7], nil}]}

07:09:42.426 [debug] Generating constructors for variants: [{:graph, [line: 6], [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]}, {:vertex, [line: 7], [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]}, {:edge, [line: 8], [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]}, {:empty, [line: 9], []}]

07:09:42.426 [debug] Constructor: :rolled_back, meta: [line: 11], args: [{:reason, [line: 11], nil}, {:timestamp, [line: 11], nil}]

07:09:42.426 [debug] Extracted arg_names: [:value, :left, :right]

07:09:42.426 [debug] Generated arg vars: [{:value, [], nil}, {:left, [], nil}, {:right, [], nil}]

07:09:42.426 [debug] Extracting constructor args from: [{:reason, [line: 11], nil}, {:timestamp, [line: 11], nil}]

07:09:42.426 [debug] Found value arg: :reason

07:09:42.426 [debug] Found value arg: :timestamp

07:09:42.426 [debug] Field pairs: [value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

07:09:42.427 [debug] Extracted arg_names: [:reason, :timestamp]

07:09:42.427 [debug] Processing variant: {:leaf, [line: 6], []}

07:09:42.427 [debug] Constructor: :leaf, meta: [line: 6], args: []

07:09:42.427 [debug] Generated arg vars: [{:reason, [], nil}, {:timestamp, [], nil}]

07:09:42.427 [debug] Found value arg: :props

07:09:42.427 [debug] Found recursive arg: :proto

07:09:42.427 [debug] Extracted arg_names: [:props, :proto]

07:09:42.427 [debug] Processing variant: {:graph, [line: 6], [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]}

07:09:42.427 [debug] Field pairs: [reason: {:reason, [], nil}, timestamp: {:timestamp, [], nil}]

07:09:42.427 [debug] Generated arg vars: [{:props, [], nil}, {:proto, [], nil}]

07:09:42.427 [debug] Field pairs: [props: {:props, [], nil}, proto: {:proto, [], nil}]

07:09:42.427 [debug] Processing variant: {:null, [line: 9], []}

07:09:42.427 [debug] Constructor: :null, meta: [line: 9], args: []

07:09:42.427 [debug] Extracting constructor args from: []

07:09:42.427 [debug] Constructor: :graph, meta: [line: 6], args: [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]

07:09:42.427 [debug] Constructor: :edge, meta: [line: 7], args: [{:from, [line: 7], nil}, {:to, [line: 7], nil}]

07:09:42.427 [debug] Extracting constructor args from: [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]

07:09:42.427 [debug] Extracting constructor args from: [{:from, [line: 7], nil}, {:to, [line: 7], nil}]

07:09:42.427 [debug] Found value arg: :vertex_map

07:09:42.427 [debug] Found value arg: :from

07:09:42.427 [debug] Found recursive arg: :edge_list

07:09:42.427 [debug] Found value arg: :to

07:09:42.427 [debug] Found value arg: :metadata

07:09:42.427 [debug] Extracted arg_names: [:from, :to]

07:09:42.427 [debug] Extracted arg_names: [:vertex_map, :edge_list, :metadata]

07:09:42.427 [debug] Extracting constructor args from: []

07:09:42.427 [debug] Extracted arg_names: []

07:09:42.427 [debug] Generated arg vars: []

07:09:42.427 [debug] Field pairs: []

07:09:42.427 [debug] Generated arg vars: [{:vertex_map, [], nil}, {:edge_list, [], nil}, {:metadata, [], nil}]

07:09:42.427 [debug] Field pairs: [vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]

07:09:42.427 [debug] Extracted arg_names: []

07:09:42.427 [debug] Processing variant: {:vertex, [line: 7], [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]}

07:09:42.427 [debug] Generated arg vars: []

07:09:42.427 [debug] Field pairs: []

07:09:42.427 [debug] Generated arg vars: [{:from, [], nil}, {:to, [], nil}]

07:09:42.427 [debug] Constructor: :vertex, meta: [line: 7], args: [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]

07:09:42.427 [debug] Field pairs: [from: {:from, [], nil}, to: {:to, [], nil}]

07:09:42.427 [debug] Extracting constructor args from: [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]

07:09:42.427 [debug] Processing variant: {:empty, [line: 8], []}

07:09:42.427 [debug] Found value arg: :vertex_id

07:09:42.427 [debug] Constructor: :empty, meta: [line: 8], args: []

07:09:42.427 [debug] Extracting constructor args from: []

07:09:42.427 [debug] Found value arg: :properties

07:09:42.427 [debug] Extracted arg_names: []

07:09:42.427 [debug] Found recursive arg: :adjacency

07:09:42.427 [debug] Generated arg vars: []

07:09:42.427 [debug] Extracted arg_names: [:vertex_id, :properties, :adjacency]

07:09:42.427 [debug] Field pairs: []

07:09:42.427 [debug] Generated arg vars: [{:vertex_id, [], nil}, {:properties, [], nil}, {:adjacency, [], nil}]

07:09:42.427 [debug] Field pairs: [vertex_id: {:vertex_id, [], nil}, properties: {:properties, [], nil}, adjacency: {:adjacency, [], nil}]

07:09:42.427 [debug] Processing variant: {:edge, [line: 8], [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]}

07:09:42.427 [debug] Constructor: :edge, meta: [line: 8], args: [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]

07:09:42.427 [debug] Extracting constructor args from: [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]

07:09:42.427 [debug] Found value arg: :source_id

07:09:42.427 [debug] Found value arg: :target_id

07:09:42.427 [debug] Found value arg: :edge_weight

07:09:42.427 [debug] Found value arg: :edge_props

07:09:42.427 [debug] Extracted arg_names: [:source_id, :target_id, :edge_weight, :edge_props]

07:09:42.427 [debug] Generated arg vars: [{:source_id, [], nil}, {:target_id, [], nil}, {:edge_weight, [], nil}, {:edge_props, [], nil}]

07:09:42.427 [debug] Field pairs: [source_id: {:source_id, [], nil}, target_id: {:target_id, [], nil}, edge_weight: {:edge_weight, [], nil}, edge_props: {:edge_props, [], nil}]

07:09:42.427 [debug] Processing variant: {:empty, [line: 9], []}

07:09:42.427 [debug] Constructor: :empty, meta: [line: 9], args: []

07:09:42.428 [debug] Extracting constructor args from: []

07:09:42.428 [debug] Extracted arg_names: []

07:09:42.428 [debug] Generated arg vars: []

07:09:42.428 [debug] Field pairs: []
warning: unused import KernelShtf.BenBen
  lib/bridge_imo/mecha_cyph/exec_battle.ex:3

warning: module attribute @red_duration was set but never used
  lib/abc_law/intersection_signal.ex:6


07:09:42.482 [debug] Fold expression: {:graph, [line: 16], nil}, opts: [], cases: [{:->, [line: 17], [[{:case, [line: 17], [{:graph, [line: 17], [{:vertices, [line: 17], nil}, {:edges, [line: 17], nil}]}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:case, [line: 20], [{:empty, [line: 20], []}]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

07:09:42.483 [debug] Extracting cases from list: [{:->, [line: 17], [[{:case, [line: 17], [{:graph, [line: 17], [{:vertices, [line: 17], nil}, {:edges, [line: 17], nil}]}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:case, [line: 20], [{:empty, [line: 20], []}]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

07:09:42.483 [debug] Extracted fold cases: [{:->, [line: 17], [[{:case, [line: 17], [{:graph, [line: 17], [{:vertices, [line: 17], nil}, {:edges, [line: 17], nil}]}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:case, [line: 20], [{:empty, [line: 20], []}]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

07:09:42.483 [debug] Generating fold cases: [{:->, [line: 17], [[{:case, [line: 17], [{:graph, [line: 17], [{:vertices, [line: 17], nil}, {:edges, [line: 17], nil}]}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:case, [line: 20], [{:empty, [line: 20], []}]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

07:09:42.483 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

07:09:42.483 [debug] Transforming recursive refs:
Body: {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}
Bindings: [vertices: true, edges: true]
State: nil


07:09:42.483 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

07:09:42.484 [debug] Transforming recursive refs:
Body: {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}
Bindings: []
State: nil


07:09:42.484 [debug] Generated fold cases after transformation: [{:->, [line: 17], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:%{}, [], [variant: :empty]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

07:09:42.484 [debug] Bend operation with var: :level, initial: 0

07:09:42.484 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 16], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 17], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:%{}, [], [variant: :empty]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]]]}]}]}]}

07:09:42.484 [debug] Fork operation with expression: {:+, [line: 15], [{:level, [line: 15], nil}, 1]}

07:09:42.485 [debug] Fork operation with expression: {:+, [line: 16], [{:level, [line: 16], nil}, 1]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/simple_graph.ex:16: SimpleGraph.add_vertex/2


07:09:42.485 [debug] Fold expression: {:tree, [line: 26], nil}, opts: [], cases: [{:->, [line: 27], [[{:case, [line: 27], [{:node, [line: 27], [{:value, [line: 27], nil}, {:left, [line: 27], nil}, {:right, [line: 27], nil}]}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:case, [line: 31], [{:leaf, [line: 31], []}]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

07:09:42.485 [debug] Fold expression: {:obj, [line: 19], nil}, opts: [], cases: [{:->, [line: 20], [[{:case, [line: 20], [{:object, [line: 20], [{:props, [line: 20], nil}, {:proto, [line: 20], nil}]}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], nil]}]

07:09:42.485 [debug] Extracting cases from list: [{:->, [line: 27], [[{:case, [line: 27], [{:node, [line: 27], [{:value, [line: 27], nil}, {:left, [line: 27], nil}, {:right, [line: 27], nil}]}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:case, [line: 31], [{:leaf, [line: 31], []}]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

07:09:42.485 [debug] Extracted fold cases: [{:->, [line: 27], [[{:case, [line: 27], [{:node, [line: 27], [{:value, [line: 27], nil}, {:left, [line: 27], nil}, {:right, [line: 27], nil}]}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:case, [line: 31], [{:leaf, [line: 31], []}]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

07:09:42.485 [debug] Fold expression: {:graph, [line: 26], nil}, opts: [], cases: [{:->, [line: 27], [[{:case, [line: 27], [{:graph, [line: 27], [{:vertices, [line: 27], nil}, {:edges, [line: 27], nil}]}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:empty, [line: 39], []}]}], {:graph, [line: 40], nil}]}]

07:09:42.485 [debug] Generating fold cases: [{:->, [line: 27], [[{:case, [line: 27], [{:node, [line: 27], [{:value, [line: 27], nil}, {:left, [line: 27], nil}, {:right, [line: 27], nil}]}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:case, [line: 31], [{:leaf, [line: 31], []}]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

07:09:42.485 [debug] Extracting cases from list: [{:->, [line: 20], [[{:case, [line: 20], [{:object, [line: 20], [{:props, [line: 20], nil}, {:proto, [line: 20], nil}]}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], nil]}]

07:09:42.485 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

07:09:42.485 [debug] Transforming recursive refs:
Body: {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}
Bindings: [value: true, left: true, right: true]
State: nil


07:09:42.485 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

07:09:42.485 [debug] Transforming recursive refs:
Body: {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}
Bindings: []
State: nil


07:09:42.485 [debug] Generated fold cases after transformation: [{:->, [line: 27], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

07:09:42.485 [debug] Extracted fold cases: [{:->, [line: 20], [[{:case, [line: 20], [{:object, [line: 20], [{:props, [line: 20], nil}, {:proto, [line: 20], nil}]}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], nil]}]

07:09:42.485 [debug] Extracting cases from list: [{:->, [line: 27], [[{:case, [line: 27], [{:graph, [line: 27], [{:vertices, [line: 27], nil}, {:edges, [line: 27], nil}]}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:empty, [line: 39], []}]}], {:graph, [line: 40], nil}]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/parents.ex:26: Parents.map_tree/2


07:09:42.486 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 26], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 27], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]]]}]}]}]}

07:09:42.486 [debug] Generating fold cases: [{:->, [line: 20], [[{:case, [line: 20], [{:object, [line: 20], [{:props, [line: 20], nil}, {:proto, [line: 20], nil}]}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], nil]}]

07:09:42.486 [debug] Generated pattern: {:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]} for variant: :object

07:09:42.486 [debug] Extracted fold cases: [{:->, [line: 27], [[{:case, [line: 27], [{:graph, [line: 27], [{:vertices, [line: 27], nil}, {:edges, [line: 27], nil}]}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:empty, [line: 39], []}]}], {:graph, [line: 40], nil}]}]

07:09:42.486 [debug] Bend operation with var: :val, initial: {:enum, [line: 14], nil}

07:09:42.486 [debug] Transforming recursive refs:
Body: {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}
Bindings: [props: true, proto: true]
State: nil


07:09:42.486 [debug] Processing recursive reference: {:recu, [line: 23], [{:proto, [line: 23], nil}]}

07:09:42.486 [debug] Transformed recursive reference to: {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.486 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

07:09:42.486 [debug] Transforming recursive refs:
Body: nil
Bindings: []
State: nil


07:09:42.486 [debug] Generating fold cases: [{:->, [line: 27], [[{:case, [line: 27], [{:graph, [line: 27], [{:vertices, [line: 27], nil}, {:edges, [line: 27], nil}]}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:empty, [line: 39], []}]}], {:graph, [line: 40], nil}]}]

07:09:42.486 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

07:09:42.486 [debug] Fold expression: {:tree, [line: 38], nil}, opts: [], cases: [{:->, [line: 39], [[{:case, [line: 39], [{:node, [line: 39], [{:value, [line: 39], nil}, {:left, [line: 39], nil}, {:right, [line: 39], nil}]}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:case, [line: 49], [{:leaf, [line: 49], []}]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

07:09:42.486 [debug] Generated fold cases after transformation: [{:->, [line: 20], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:%{}, [], [variant: :null]}], nil]}]

07:09:42.486 [debug] Extracting cases from list: [{:->, [line: 39], [[{:case, [line: 39], [{:node, [line: 39], [{:value, [line: 39], nil}, {:left, [line: 39], nil}, {:right, [line: 39], nil}]}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:case, [line: 49], [{:leaf, [line: 49], []}]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

07:09:42.486 [debug] Transforming recursive refs:
Body: {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}
Bindings: [vertices: true, edges: true]
State: nil


07:09:42.486 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

07:09:42.486 [debug] Transforming recursive refs:
Body: {:graph, [line: 40], nil}
Bindings: []
State: nil


07:09:42.486 [debug] Fork operation with expression: {:tail, [line: 17], nil}

07:09:42.486 [debug] Extracted fold cases: [{:->, [line: 39], [[{:case, [line: 39], [{:node, [line: 39], [{:value, [line: 39], nil}, {:left, [line: 39], nil}, {:right, [line: 39], nil}]}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:case, [line: 49], [{:leaf, [line: 49], []}]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prototypal.ex:19: Prototypal.get_property/2


07:09:42.486 [debug] Final quoted expression: {:do_fold, [], [{:obj, [line: 19], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 20], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{...}, ...]], [{:value, ...}]}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:%{}, [], [variant: :null]}], nil]}]]]}]}]}]}

07:09:42.486 [debug] Generating fold cases: [{:->, [line: 39], [[{:case, [line: 39], [{:node, [line: 39], [{:value, [line: 39], nil}, {:left, [line: 39], nil}, {:right, [line: 39], nil}]}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:case, [line: 49], [{:leaf, [line: 49], []}]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

07:09:42.486 [debug] Generated fold cases after transformation: [{:->, [line: 27], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:%{}, [], [variant: :empty]}], {:graph, [line: 40], nil}]}]

07:09:42.486 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

07:09:42.486 [debug] Transforming recursive refs:
Body: {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}
Bindings: [value: true, left: true, right: true]
State: nil


07:09:42.486 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

07:09:42.486 [debug] Transforming recursive refs:
Body: {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}
Bindings: []
State: nil


07:09:42.486 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 26], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 27], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [...]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{...}], {...}]}, {:->, [line: 33], [[...], ...]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:%{}, [], [variant: :empty]}], {:graph, [line: 40], nil}]}]]]}]}]}]}

07:09:42.487 [debug] Generated fold cases after transformation: [{:->, [line: 39], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

07:09:42.487 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 38], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 39], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/simple_graph.ex:26: SimpleGraph.add_edge/3


07:09:42.487 [debug] Fold expression: {:list, [line: 40], nil}, opts: [], cases: [{:->, [line: 41], [[{:case, [line: 41], [{:cons, [line: 41], [{:head, [line: 41], nil}, {:tail, [line: 41], nil}]}]}], [{:|, [line: 41], [{:head, [line: 41], nil}, {:recu, [line: 41], [{:tail, [line: 41], nil}]}]}]]}, {:->, [line: 42], [[{:case, [line: 42], [{:null, [line: 42], []}]}], []]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/parents.ex:38: Parents.filter_tree/2


07:09:42.487 [debug] Fold expression: {:graph, [line: 45], nil}, opts: [], cases: [{:->, [line: 46], [[{:case, [line: 46], [{:graph, [line: 46], [{:vertices, [line: 46], nil}, {:edges, [line: 46], nil}]}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:case, [line: 47], [{:empty, [line: 47], []}]}], []]}]

07:09:42.487 [debug] Extracting cases from list: [{:->, [line: 46], [[{:case, [line: 46], [{:graph, [line: 46], [{:vertices, [line: 46], nil}, {:edges, [line: 46], nil}]}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:case, [line: 47], [{:empty, [line: 47], []}]}], []]}]

07:09:42.487 [debug] Extracted fold cases: [{:->, [line: 46], [[{:case, [line: 46], [{:graph, [line: 46], [{:vertices, [line: 46], nil}, {:edges, [line: 46], nil}]}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:case, [line: 47], [{:empty, [line: 47], []}]}], []]}]

07:09:42.487 [debug] Generating fold cases: [{:->, [line: 46], [[{:case, [line: 46], [{:graph, [line: 46], [{:vertices, [line: 46], nil}, {:edges, [line: 46], nil}]}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:case, [line: 47], [{:empty, [line: 47], []}]}], []]}]

07:09:42.487 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

07:09:42.487 [debug] Transforming recursive refs:
Body: {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}
Bindings: [vertices: true, edges: true]
State: nil


07:09:42.487 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

07:09:42.487 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


07:09:42.487 [debug] Generated fold cases after transformation: [{:->, [line: 46], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:%{}, [], [variant: :empty]}], []]}]

07:09:42.487 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 45], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 46], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}

07:09:42.487 [debug] Fold expression: {:tree, [line: 56], nil}, opts: [with: {:%{}, [line: 56], [{0, 1}]}], cases: [{:->, [line: 57], [[{:case, [line: 57], [{:node, [line: 57], [{:value, [line: 57], nil}, {:left, [line: 57], nil}, {:right, [line: 57], nil}]}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:case, [line: 69], [{:leaf, [line: 69], []}]}], {0, {:state, [line: 70], nil}}]}]
warning: variable "edges" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/simple_graph.ex:45: SimpleGraph.vertices/1


07:09:42.487 [debug] Extracting cases from list: [{:->, [line: 41], [[{:case, [line: 41], [{:cons, [line: 41], [{:head, [line: 41], nil}, {:tail, [line: 41], nil}]}]}], [{:|, [line: 41], [{:head, [line: 41], nil}, {:recu, [line: 41], [{:tail, [line: 41], nil}]}]}]]}, {:->, [line: 42], [[{:case, [line: 42], [{:null, [line: 42], []}]}], []]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/simple_graph.ex:45: SimpleGraph.vertices/1


07:09:42.487 [debug] Extracted fold cases: [{:->, [line: 41], [[{:case, [line: 41], [{:cons, [line: 41], [{:head, [line: 41], nil}, {:tail, [line: 41], nil}]}]}], [{:|, [line: 41], [{:head, [line: 41], nil}, {:recu, [line: 41], [{:tail, [line: 41], nil}]}]}]]}, {:->, [line: 42], [[{:case, [line: 42], [{:null, [line: 42], []}]}], []]}]

07:09:42.487 [debug] Extracting cases from list: [{:->, [line: 57], [[{:case, [line: 57], [{:node, [line: 57], [{:value, [line: 57], nil}, {:left, [line: 57], nil}, {:right, [line: 57], nil}]}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:case, [line: 69], [{:leaf, [line: 69], []}]}], {0, {:state, [line: 70], nil}}]}]

07:09:42.488 [debug] Generating fold cases: [{:->, [line: 41], [[{:case, [line: 41], [{:cons, [line: 41], [{:head, [line: 41], nil}, {:tail, [line: 41], nil}]}]}], [{:|, [line: 41], [{:head, [line: 41], nil}, {:recu, [line: 41], [{:tail, [line: 41], nil}]}]}]]}, {:->, [line: 42], [[{:case, [line: 42], [{:null, [line: 42], []}]}], []]}]

07:09:42.488 [debug] Fold expression: {:graph, [line: 52], nil}, opts: [], cases: [{:->, [line: 53], [[{:case, [line: 53], [{:graph, [line: 53], [{:vertices, [line: 53], nil}, {:edges, [line: 53], nil}]}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:case, [line: 60], [{:empty, [line: 60], []}]}], []]}]

07:09:42.488 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

07:09:42.488 [debug] Transforming recursive refs:
Body: [{:|, [line: 41], [{:head, [line: 41], nil}, {:recu, [line: 41], [{:tail, [line: 41], nil}]}]}]
Bindings: [head: true, tail: true]
State: nil


07:09:42.488 [debug] Processing recursive reference: {:recu, [line: 41], [{:tail, [line: 41], nil}]}

07:09:42.488 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.488 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

07:09:42.488 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


07:09:42.488 [debug] Extracting cases from list: [{:->, [line: 53], [[{:case, [line: 53], [{:graph, [line: 53], [{:vertices, [line: 53], nil}, {:edges, [line: 53], nil}]}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:case, [line: 60], [{:empty, [line: 60], []}]}], []]}]

07:09:42.488 [debug] Generated fold cases after transformation: [{:->, [line: 41], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], [{:|, [line: 41], [{:head, [line: 41], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}]]}, {:->, [line: 42], [[{:%{}, [], [variant: :null]}], []]}]

07:09:42.488 [debug] Extracted fold cases: [{:->, [line: 57], [[{:case, [line: 57], [{:node, [line: 57], [{:value, [line: 57], nil}, {:left, [line: 57], nil}, {:right, [line: 57], nil}]}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:case, [line: 69], [{:leaf, [line: 69], []}]}], {0, {:state, [line: 70], nil}}]}]

07:09:42.488 [debug] Extracted fold cases: [{:->, [line: 53], [[{:case, [line: 53], [{:graph, [line: 53], [{:vertices, [line: 53], nil}, {:edges, [line: 53], nil}]}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:case, [line: 60], [{:empty, [line: 60], []}]}], []]}]

07:09:42.488 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 40], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 41], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], [{:|, [line: 41], [{:head, [line: 41], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}]]}, {:->, [line: 42], [[{:%{}, [], [variant: :null]}], []]}]]]}]}]}]}

07:09:42.488 [debug] Generating fold cases: [{:->, [line: 53], [[{:case, [line: 53], [{:graph, [line: 53], [{:vertices, [line: 53], nil}, {:edges, [line: 53], nil}]}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:case, [line: 60], [{:empty, [line: 60], []}]}], []]}]

07:09:42.488 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/chain.ex:40: Chain.breaker/1


07:09:42.488 [debug] Fold expression: {:graph, [line: 25], nil}, opts: [], cases: [{:->, [line: 26], [[{:case, [line: 26], [{:graph, [line: 26], [{:vertex_map, [line: 26], nil}, {:edge_list, [line: 26], nil}, {:metadata, [line: 26], nil}]}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:case, [line: 34], [{:empty, [line: 34], []}]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]

07:09:42.488 [debug] Transforming recursive refs:
Body: {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}
Bindings: [vertices: true, edges: true]
State: nil


07:09:42.488 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

07:09:42.488 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


07:09:42.489 [debug] Generating fold cases: [{:->, [line: 57], [[{:case, [line: 57], [{:node, [line: 57], [{:value, [line: 57], nil}, {:left, [line: 57], nil}, {:right, [line: 57], nil}]}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:case, [line: 69], [{:leaf, [line: 69], []}]}], {0, {:state, [line: 70], nil}}]}]

07:09:42.489 [debug] Generated fold cases after transformation: [{:->, [line: 53], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:%{}, [], [variant: :empty]}], []]}]

07:09:42.489 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

07:09:42.489 [debug] Fold expression: {:list, [line: 47], nil}, opts: [], cases: [{:->, [line: 48], [[{:case, [line: 48], [{:cons, [line: 48], [{:head, [line: 48], nil}, {:tail, [line: 48], nil}]}]}], [{:|, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}]]}, {:->, [line: 51], [[{:case, [line: 51], [{:null, [line: 51], []}]}], []]}]

07:09:42.489 [debug] Extracting cases from list: [{:->, [line: 26], [[{:case, [line: 26], [{:graph, [line: 26], [{:vertex_map, [line: 26], nil}, {:edge_list, [line: 26], nil}, {:metadata, [line: 26], nil}]}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:case, [line: 34], [{:empty, [line: 34], []}]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]

07:09:42.489 [debug] Extracting cases from list: [{:->, [line: 48], [[{:case, [line: 48], [{:cons, [line: 48], [{:head, [line: 48], nil}, {:tail, [line: 48], nil}]}]}], [{:|, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}]]}, {:->, [line: 51], [[{:case, [line: 51], [{:null, [line: 51], []}]}], []]}]

07:09:42.489 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 52], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 53], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}

07:09:42.489 [debug] Extracted fold cases: [{:->, [line: 48], [[{:case, [line: 48], [{:cons, [line: 48], [{:head, [line: 48], nil}, {:tail, [line: 48], nil}]}]}], [{:|, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}]]}, {:->, [line: 51], [[{:case, [line: 51], [{:null, [line: 51], []}]}], []]}]

07:09:42.489 [debug] Generating fold cases: [{:->, [line: 48], [[{:case, [line: 48], [{:cons, [line: 48], [{:head, [line: 48], nil}, {:tail, [line: 48], nil}]}]}], [{:|, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}]]}, {:->, [line: 51], [[{:case, [line: 51], [{:null, [line: 51], []}]}], []]}]

07:09:42.489 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

07:09:42.489 [debug] Transforming recursive refs:
Body: [{:|, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}]
Bindings: [head: true, tail: true]
State: nil


07:09:42.489 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}
Bindings: [value: true, left: true, right: true]
State: {:%{}, [line: 56], [{0, 1}]}


07:09:42.489 [debug] Processing recursive reference: {:recu, [line: 49], [{:tail, [line: 49], nil}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/simple_graph.ex:52: SimpleGraph.neighbors/2


07:09:42.489 [debug] Extracted fold cases: [{:->, [line: 26], [[{:case, [line: 26], [{:graph, [line: 26], [{:vertex_map, [line: 26], nil}, {:edge_list, [line: 26], nil}, {:metadata, [line: 26], nil}]}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:case, [line: 34], [{:empty, [line: 34], []}]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]

07:09:42.489 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.489 [debug] Processing recursive reference: {:recu, [line: 58], [{:left, [line: 58], nil}]}

07:09:42.489 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

07:09:42.489 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


07:09:42.489 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.489 [debug] Generated fold cases after transformation: [{:->, [line: 48], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], [{:|, [line: 49], [{:head, [line: 49], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}]]}, {:->, [line: 51], [[{:%{}, [], [variant: :null]}], []]}]

07:09:42.489 [debug] Processing recursive reference: {:recu, [line: 59], [{:right, [line: 59], nil}]}

07:09:42.489 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.489 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

07:09:42.489 [debug] Transforming recursive refs:
Body: {0, {:state, [line: 70], nil}}
Bindings: []
State: {:%{}, [line: 56], [{0, 1}]}


07:09:42.489 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 47], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 48], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], [{:|, [line: 49], [{:head, [line: 49], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}]]}, {:->, [line: 51], [[{:%{}, [], [variant: :null]}], []]}]]]}]}]}]}

07:09:42.489 [debug] Generating fold cases: [{:->, [line: 26], [[{:case, [line: 26], [{:graph, [line: 26], [{:vertex_map, [line: 26], nil}, {:edge_list, [line: 26], nil}, {:metadata, [line: 26], nil}]}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:case, [line: 34], [{:empty, [line: 34], []}]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/chain.ex:47: Chain.breaker/1


07:09:42.489 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

07:09:42.489 [debug] Fold expression: {:graph, [line: 82], nil}, opts: [], cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertices, [line: 83], nil}, {:edges, [line: 83], nil}]}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:case, [line: 90], [{:empty, [line: 90], []}]}], false]}]

07:09:42.489 [debug] Transforming recursive refs:
Body: {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


07:09:42.490 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

07:09:42.490 [debug] Transforming recursive refs:
Body: {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}
Bindings: []
State: nil

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/chain.ex:67: Chain.map/2

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:25: PropGraph.add_vertex/3

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/simple_graph.ex:82: SimpleGraph.has_path?/3


07:09:42.490 [debug] Extracting cases from list: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertices, [line: 83], nil}, {:edges, [line: 83], nil}]}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:case, [line: 90], [{:empty, [line: 90], []}]}], false]}]

07:09:42.490 [debug] Generated fold cases after transformation: [{:->, [line: 57], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:do_fold, [], [{:left, [], nil}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:do_fold, [], [{:right, [], nil}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:%{}, [], [variant: :leaf]}], {0, {:state, [line: 70], nil}}]}]

07:09:42.490 [debug] Generated fold cases after transformation: [{:->, [line: 26], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:%{}, [], [variant: :empty]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]

07:09:42.490 [debug] Fold expression: {:list, [line: 67], nil}, opts: [], cases: [{:->, [line: 68], [[{:case, [line: 68], [{:cons, [line: 68], [{:head, [line: 68], nil}, {:tail, [line: 68], nil}]}]}], {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:recu, [line: 69], [{:tail, [line: 69], nil}]}]}]}, {:->, [line: 71], [[{:case, [line: 71], [{:null, [line: 71], []}]}], {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}]}]

07:09:42.490 [debug] Extracted fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertices, [line: 83], nil}, {:edges, [line: 83], nil}]}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:case, [line: 90], [{:empty, [line: 90], []}]}], false]}]

07:09:42.490 [debug] Extracting cases from list: [{:->, [line: 68], [[{:case, [line: 68], [{:cons, [line: 68], [{:head, [line: 68], nil}, {:tail, [line: 68], nil}]}]}], {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:recu, [line: 69], [{:tail, [line: 69], nil}]}]}]}, {:->, [line: 71], [[{:case, [line: 71], [{:null, [line: 71], []}]}], {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}]}]

07:09:42.490 [debug] Extracted fold cases: [{:->, [line: 68], [[{:case, [line: 68], [{:cons, [line: 68], [{:head, [line: 68], nil}, {:tail, [line: 68], nil}]}]}], {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:recu, [line: 69], [{:tail, [line: 69], nil}]}]}]}, {:->, [line: 71], [[{:case, [line: 71], [{:null, [line: 71], []}]}], {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}]}]

07:09:42.490 [debug] Generating fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertices, [line: 83], nil}, {:edges, [line: 83], nil}]}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:case, [line: 90], [{:empty, [line: 90], []}]}], false]}]

07:09:42.490 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 25], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 26], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [...], ...}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:%{}, [], [variant: :empty]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, ...}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]]]}]}]}]}

07:09:42.490 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

07:09:42.490 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 56], nil}, {:%{}, [line: 56], [{0, 1}]}, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 57], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:do_fold, [], [{:left, [], nil}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:do_fold, [], [{:right, [], nil}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, ...}]], [{:value, [], KernelShtf.BenBen}]}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [...]}, [line: 63], [{...}, ...]}, {{:., [...], ...}, [line: 64], [...]}]}, {{:., [line: 65], [{:__aliases__, [...], ...}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:%{}, [], [variant: :leaf]}], {0, {:state, [line: 70], nil}}]}]]]}]}]}]}

07:09:42.490 [debug] Transforming recursive refs:
Body: {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}
Bindings: [vertices: true, edges: true]
State: nil


07:09:42.490 [debug] Generating fold cases: [{:->, [line: 68], [[{:case, [line: 68], [{:cons, [line: 68], [{:head, [line: 68], nil}, {:tail, [line: 68], nil}]}]}], {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:recu, [line: 69], [{:tail, [line: 69], nil}]}]}]}, {:->, [line: 71], [[{:case, [line: 71], [{:null, [line: 71], []}]}], {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}]}]

07:09:42.490 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

07:09:42.490 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

07:09:42.490 [debug] Transforming recursive refs:
Body: false
Bindings: []
State: nil


07:09:42.490 [debug] Transforming recursive refs:
Body: {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:recu, [line: 69], [{:tail, [line: 69], nil}]}]}
Bindings: [head: true, tail: true]
State: nil


07:09:42.491 [debug] Processing recursive reference: {:recu, [line: 69], [{:tail, [line: 69], nil}]}

07:09:42.491 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.491 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

07:09:42.491 [debug] Transforming recursive refs:
Body: {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}
Bindings: []
State: nil


07:09:42.491 [debug] Generated fold cases after transformation: [{:->, [line: 83], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:%{}, [], [variant: :empty]}], false]}]

07:09:42.491 [debug] Generated fold cases after transformation: [{:->, [line: 68], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}]}, {:->, [line: 71], [[{:%{}, [], [variant: :null]}], {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}]}]

07:09:42.491 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 67], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 68], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}]}, {:->, [line: 71], [[{:%{}, [], [variant: :null]}], {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}]}]]]}]}]}]}

07:09:42.491 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 82], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 83], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:%{}, [], [variant: :empty]}], false]}]]]}]}]}]}

07:09:42.491 [debug] Fold expression: {:tree, [line: 128], nil}, opts: [], cases: [{:->, [line: 129], [[{:case, [line: 129], [{:node, [line: 129], [{:value, [line: 129], nil}, {:left, [line: 129], nil}, {:right, [line: 129], nil}]}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:case, [line: 134], [{:leaf, [line: 134], []}]}], []]}]

07:09:42.491 [debug] Extracting cases from list: [{:->, [line: 129], [[{:case, [line: 129], [{:node, [line: 129], [{:value, [line: 129], nil}, {:left, [line: 129], nil}, {:right, [line: 129], nil}]}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:case, [line: 134], [{:leaf, [line: 134], []}]}], []]}]

07:09:42.491 [debug] Fold expression: {:list, [line: 81], nil}, opts: [], cases: [{:->, [line: 82], [[{:case, [line: 82], [{:cons, [line: 82], [{:head, [line: 82], nil}, {:tail, [line: 82], nil}]}]}], {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, else: {:recu, [line: 86], [{:tail, [line: 86], nil}]}]]}]}, {:->, [line: 89], [[{:case, [line: 89], [{:null, [line: 89], []}]}], {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}]}]

07:09:42.492 [debug] Extracting cases from list: [{:->, [line: 82], [[{:case, [line: 82], [{:cons, [line: 82], [{:head, [line: 82], nil}, {:tail, [line: 82], nil}]}]}], {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, else: {:recu, [line: 86], [{:tail, [line: 86], nil}]}]]}]}, {:->, [line: 89], [[{:case, [line: 89], [{:null, [line: 89], []}]}], {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}]}]

07:09:42.492 [debug] Extracted fold cases: [{:->, [line: 129], [[{:case, [line: 129], [{:node, [line: 129], [{:value, [line: 129], nil}, {:left, [line: 129], nil}, {:right, [line: 129], nil}]}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:case, [line: 134], [{:leaf, [line: 134], []}]}], []]}]

07:09:42.492 [debug] Extracted fold cases: [{:->, [line: 82], [[{:case, [line: 82], [{:cons, [line: 82], [{:head, [line: 82], nil}, {:tail, [line: 82], nil}]}]}], {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, else: {:recu, [line: 86], [{:tail, [line: 86], nil}]}]]}]}, {:->, [line: 89], [[{:case, [line: 89], [{:null, [line: 89], []}]}], {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}]}]

07:09:42.492 [debug] Generating fold cases: [{:->, [line: 129], [[{:case, [line: 129], [{:node, [line: 129], [{:value, [line: 129], nil}, {:left, [line: 129], nil}, {:right, [line: 129], nil}]}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:case, [line: 134], [{:leaf, [line: 134], []}]}], []]}]

07:09:42.492 [debug] Fold expression: {:graph, [line: 46], nil}, opts: [], cases: [{:->, [line: 47], [[{:case, [line: 47], [{:graph, [line: 47], [{:vertex_map, [line: 47], nil}, {:edge_list, [line: 47], nil}, {:metadata, [line: 47], nil}]}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:case, [line: 65], [{:empty, [line: 65], []}]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

07:09:42.492 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

07:09:42.492 [debug] Generating fold cases: [{:->, [line: 82], [[{:case, [line: 82], [{:cons, [line: 82], [{:head, [line: 82], nil}, {:tail, [line: 82], nil}]}]}], {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, else: {:recu, [line: 86], [{:tail, [line: 86], nil}]}]]}]}, {:->, [line: 89], [[{:case, [line: 89], [{:null, [line: 89], []}]}], {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}]}]

07:09:42.492 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

07:09:42.492 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}
Bindings: [value: true, left: true, right: true]
State: nil


07:09:42.492 [debug] Processing recursive reference: {:recu, [line: 130], [{:left, [line: 130], nil}]}

07:09:42.492 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.492 [debug] Transforming recursive refs:
Body: {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, else: {:recu, [line: 86], [{:tail, [line: 86], nil}]}]]}
Bindings: [head: true, tail: true]
State: nil


07:09:42.492 [debug] Processing recursive reference: {:recu, [line: 131], [{:right, [line: 131], nil}]}

07:09:42.492 [debug] Processing recursive reference: {:recu, [line: 84], [{:tail, [line: 84], nil}]}

07:09:42.492 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.492 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.492 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

07:09:42.492 [debug] Processing recursive reference: {:recu, [line: 86], [{:tail, [line: 86], nil}]}

07:09:42.492 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


07:09:42.492 [debug] Extracting cases from list: [{:->, [line: 47], [[{:case, [line: 47], [{:graph, [line: 47], [{:vertex_map, [line: 47], nil}, {:edge_list, [line: 47], nil}, {:metadata, [line: 47], nil}]}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:case, [line: 65], [{:empty, [line: 65], []}]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

07:09:42.492 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.492 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

07:09:42.492 [debug] Transforming recursive refs:
Body: {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}
Bindings: []
State: nil


07:09:42.492 [debug] Generated fold cases after transformation: [{:->, [line: 129], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:%{}, [], [variant: :leaf]}], []]}]

07:09:42.492 [debug] Fold expression: {:obj, [line: 73], nil}, opts: [], cases: [{:->, [line: 74], [[{:case, [line: 74], [{:object, [line: 74], [{:props, [line: 74], nil}, {:proto, [line: 74], nil}]}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}]}, {:->, [line: 80], [[{:case, [line: 80], [{:null, [line: 80], []}]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

07:09:42.492 [debug] Extracted fold cases: [{:->, [line: 47], [[{:case, [line: 47], [{:graph, [line: 47], [{:vertex_map, [line: 47], nil}, {:edge_list, [line: 47], nil}, {:metadata, [line: 47], nil}]}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:case, [line: 65], [{:empty, [line: 65], []}]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

07:09:42.493 [debug] Generated fold cases after transformation: [{:->, [line: 82], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}, else: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]]}]}, {:->, [line: 89], [[{:%{}, [], [variant: :null]}], {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}]}]

07:09:42.493 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 128], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 129], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, ...}]], [{:value, [], KernelShtf.BenBen}]}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:%{}, [], [variant: :leaf]}], []]}]]]}]}]}]}

07:09:42.493 [debug] Extracting cases from list: [{:->, [line: 74], [[{:case, [line: 74], [{:object, [line: 74], [{:props, [line: 74], nil}, {:proto, [line: 74], nil}]}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}]}, {:->, [line: 80], [[{:case, [line: 80], [{:null, [line: 80], []}]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

07:09:42.493 [debug] Generating fold cases: [{:->, [line: 47], [[{:case, [line: 47], [{:graph, [line: 47], [{:vertex_map, [line: 47], nil}, {:edge_list, [line: 47], nil}, {:metadata, [line: 47], nil}]}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:case, [line: 65], [{:empty, [line: 65], []}]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

07:09:42.493 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 81], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 82], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, ...}, {...}]], [{:value, [], ...}]}]}]}, else: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]]}]}, {:->, [line: 89], [[{:%{}, [], [variant: :null]}], {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}]}]]]}]}]}]}

07:09:42.493 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

07:09:42.493 [debug] Extracted fold cases: [{:->, [line: 74], [[{:case, [line: 74], [{:object, [line: 74], [{:props, [line: 74], nil}, {:proto, [line: 74], nil}]}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}]}, {:->, [line: 80], [[{:case, [line: 80], [{:null, [line: 80], []}]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/parents.ex:128: Parents.collect_values/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/chain.ex:81: Chain.filter/2


07:09:42.493 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


07:09:42.493 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

07:09:42.493 [debug] Transforming recursive refs:
Body: {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}
Bindings: []
State: nil


07:09:42.493 [debug] Generating fold cases: [{:->, [line: 74], [[{:case, [line: 74], [{:object, [line: 74], [{:props, [line: 74], nil}, {:proto, [line: 74], nil}]}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}]}, {:->, [line: 80], [[{:case, [line: 80], [{:null, [line: 80], []}]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

07:09:42.493 [debug] Generated pattern: {:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]} for variant: :object

07:09:42.493 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}
Bindings: [props: true, proto: true]
State: nil


07:09:42.493 [debug] Processing recursive reference: {:recu, [line: 78], [{:proto, [line: 78], nil}]}

07:09:42.493 [debug] Transformed recursive reference to: {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.493 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

07:09:42.493 [debug] Fold expression: {:list, [line: 115], nil}, opts: [], cases: [{:->, [line: 116], [[{:case, [line: 116], [{:cons, [line: 116], [{:head, [line: 116], nil}, {:tail, [line: 116], nil}]}]}], {:+, [line: 116], [1, {:recu, [line: 116], [{:tail, [line: 116], nil}]}]}]}, {:->, [line: 117], [[{:case, [line: 117], [{:null, [line: 117], []}]}], 0]}]

07:09:42.494 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}
Bindings: []
State: nil


07:09:42.494 [debug] Generated fold cases after transformation: [{:->, [line: 47], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:%{}, [], [variant: :empty]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

07:09:42.494 [debug] Extracting cases from list: [{:->, [line: 116], [[{:case, [line: 116], [{:cons, [line: 116], [{:head, [line: 116], nil}, {:tail, [line: 116], nil}]}]}], {:+, [line: 116], [1, {:recu, [line: 116], [{:tail, [line: 116], nil}]}]}]}, {:->, [line: 117], [[{:case, [line: 117], [{:null, [line: 117], []}]}], 0]}]

07:09:42.494 [debug] Extracted fold cases: [{:->, [line: 116], [[{:case, [line: 116], [{:cons, [line: 116], [{:head, [line: 116], nil}, {:tail, [line: 116], nil}]}]}], {:+, [line: 116], [1, {:recu, [line: 116], [{:tail, [line: 116], nil}]}]}]}, {:->, [line: 117], [[{:case, [line: 117], [{:null, [line: 117], []}]}], 0]}]

07:09:42.494 [debug] Generating fold cases: [{:->, [line: 116], [[{:case, [line: 116], [{:cons, [line: 116], [{:head, [line: 116], nil}, {:tail, [line: 116], nil}]}]}], {:+, [line: 116], [1, {:recu, [line: 116], [{:tail, [line: 116], nil}]}]}]}, {:->, [line: 117], [[{:case, [line: 117], [{:null, [line: 117], []}]}], 0]}]

07:09:42.494 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

07:09:42.494 [debug] Transforming recursive refs:
Body: {:+, [line: 116], [1, {:recu, [line: 116], [{:tail, [line: 116], nil}]}]}
Bindings: [head: true, tail: true]
State: nil


07:09:42.494 [debug] Processing recursive reference: {:recu, [line: 116], [{:tail, [line: 116], nil}]}

07:09:42.494 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.494 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

07:09:42.494 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil


07:09:42.494 [debug] Generated fold cases after transformation: [{:->, [line: 74], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}]}, {:->, [line: 80], [[{:%{}, [], [variant: :null]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

07:09:42.494 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 46], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 47], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, ...}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{...}, ...]}, [{:new_edge, [...], ...}, {:reverse_edge, ...}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, ...}], {:hd, ...}]}, {:->, [line: 60], [[{...}], {...}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:%{}, [], [variant: :empty]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]]]}]}]}]}

07:09:42.494 [debug] Generated fold cases after transformation: [{:->, [line: 116], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:+, [line: 116], [1, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}]}, {:->, [line: 117], [[{:%{}, [], [variant: :null]}], 0]}]

07:09:42.494 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 115], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 116], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:+, [line: 116], [1, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}]}, {:->, [line: 117], [[{:%{}, [], [variant: :null]}], 0]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:46: PropGraph.add_edge/5

warning: variable "head" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/chain.ex:115: Chain.length/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/chain.ex:115: Chain.length/1


07:09:42.494 [debug] Fold expression: {:graph, [line: 72], nil}, opts: [], cases: [{:->, [line: 73], [[{:case, [line: 73], [{:graph, [line: 73], [{:vertex_map, [line: 73], nil}, {:edge_list, [line: 73], nil}, {:metadata, [line: 73], nil}]}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:empty, [line: 76], []}]}], 0]}]

07:09:42.494 [debug] Extracting cases from list: [{:->, [line: 73], [[{:case, [line: 73], [{:graph, [line: 73], [{:vertex_map, [line: 73], nil}, {:edge_list, [line: 73], nil}, {:metadata, [line: 73], nil}]}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:empty, [line: 76], []}]}], 0]}]

07:09:42.494 [debug] Final quoted expression: {:do_fold, [], [{:obj, [line: 73], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 74], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [...], ...}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [...]}, [line: 76], [{...}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, ...]}, [line: 77], [{:indent, ...}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}]}, {:->, [line: 80], [[{:%{}, [], [variant: :null]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, ...]}, [line: 82], [{:indent, ...}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]]]}]}]}]}

07:09:42.494 [debug] Bend operation with var: :val, initial: {{:list, [line: 125], nil}, {{:., [line: 125], [{:__aliases__, [line: 125], [:List]}, :null]}, [line: 125], []}}

07:09:42.494 [debug] Extracted fold cases: [{:->, [line: 73], [[{:case, [line: 73], [{:graph, [line: 73], [{:vertex_map, [line: 73], nil}, {:edge_list, [line: 73], nil}, {:metadata, [line: 73], nil}]}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:empty, [line: 76], []}]}], 0]}]

07:09:42.494 [debug] Generating fold cases: [{:->, [line: 73], [[{:case, [line: 73], [{:graph, [line: 73], [{:vertex_map, [line: 73], nil}, {:edge_list, [line: 73], nil}, {:metadata, [line: 73], nil}]}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:empty, [line: 76], []}]}], 0]}]

07:09:42.494 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

07:09:42.494 [debug] Transforming recursive refs:
Body: {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


07:09:42.494 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

07:09:42.494 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil


07:09:42.494 [debug] Generated fold cases after transformation: [{:->, [line: 73], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:%{}, [], [variant: :empty]}], 0]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prototypal.ex:73: Prototypal.inspect_object/2


07:09:42.495 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 72], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 73], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:%{}, [], [variant: :empty]}], 0]}]]]}]}]}]}

07:09:42.495 [debug] Fork operation with expression: {:tail, [line: 131], nil}
warning: variable "edge_list" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:72: PropGraph.vertex_count/1

warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:72: PropGraph.vertex_count/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:72: PropGraph.vertex_count/1

warning: clauses with the same name and arity (number of arguments) should be grouped together, "def reverse/1" was previously defined (lib/abstract_pov/chain.ex:96)
  lib/abstract_pov/chain.ex:122


07:09:42.495 [debug] Fold expression: {:obj, [line: 87], nil}, opts: [], cases: [{:->, [line: 88], [[{:case, [line: 88], [{:object, [line: 88], [{:props, [line: 88], nil}, {:proto, [line: 88], nil}]}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]

07:09:42.495 [debug] Fold expression: {:graph, [line: 82], nil}, opts: [], cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertex_map, [line: 83], nil}, {:edge_list, [line: 83], nil}, {:metadata, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:case, [line: 93], [{:empty, [line: 93], []}]}], 0]}]

07:09:42.495 [debug] Extracting cases from list: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertex_map, [line: 83], nil}, {:edge_list, [line: 83], nil}, {:metadata, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:case, [line: 93], [{:empty, [line: 93], []}]}], 0]}]

07:09:42.495 [debug] Fold expression: {:list1, [line: 153], nil}, opts: [], cases: [{:->, [line: 154], [[{:case, [line: 154], [{:cons, [line: 154], [{:head, [line: 154], nil}, {:tail, [line: 154], nil}]}]}], {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:recu, [line: 155], [{:tail, [line: 155], nil}]}]}]}, {:->, [line: 157], [[{:case, [line: 157], [{:null, [line: 157], []}]}], {:list2, [line: 158], nil}]}]

07:09:42.496 [debug] Extracting cases from list: [{:->, [line: 88], [[{:case, [line: 88], [{:object, [line: 88], [{:props, [line: 88], nil}, {:proto, [line: 88], nil}]}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]

07:09:42.496 [debug] Extracting cases from list: [{:->, [line: 154], [[{:case, [line: 154], [{:cons, [line: 154], [{:head, [line: 154], nil}, {:tail, [line: 154], nil}]}]}], {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:recu, [line: 155], [{:tail, [line: 155], nil}]}]}]}, {:->, [line: 157], [[{:case, [line: 157], [{:null, [line: 157], []}]}], {:list2, [line: 158], nil}]}]

07:09:42.496 [debug] Extracted fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertex_map, [line: 83], nil}, {:edge_list, [line: 83], nil}, {:metadata, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:case, [line: 93], [{:empty, [line: 93], []}]}], 0]}]

07:09:42.496 [debug] Extracted fold cases: [{:->, [line: 154], [[{:case, [line: 154], [{:cons, [line: 154], [{:head, [line: 154], nil}, {:tail, [line: 154], nil}]}]}], {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:recu, [line: 155], [{:tail, [line: 155], nil}]}]}]}, {:->, [line: 157], [[{:case, [line: 157], [{:null, [line: 157], []}]}], {:list2, [line: 158], nil}]}]

07:09:42.496 [debug] Generating fold cases: [{:->, [line: 154], [[{:case, [line: 154], [{:cons, [line: 154], [{:head, [line: 154], nil}, {:tail, [line: 154], nil}]}]}], {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:recu, [line: 155], [{:tail, [line: 155], nil}]}]}]}, {:->, [line: 157], [[{:case, [line: 157], [{:null, [line: 157], []}]}], {:list2, [line: 158], nil}]}]

07:09:42.496 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

07:09:42.496 [debug] Generating fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertex_map, [line: 83], nil}, {:edge_list, [line: 83], nil}, {:metadata, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:case, [line: 93], [{:empty, [line: 93], []}]}], 0]}]

07:09:42.496 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

07:09:42.496 [debug] Transforming recursive refs:
Body: {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:recu, [line: 155], [{:tail, [line: 155], nil}]}]}
Bindings: [head: true, tail: true]
State: nil


07:09:42.496 [debug] Processing recursive reference: {:recu, [line: 155], [{:tail, [line: 155], nil}]}

07:09:42.496 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.496 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


07:09:42.496 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

07:09:42.496 [debug] Transforming recursive refs:
Body: {:list2, [line: 158], nil}
Bindings: []
State: nil


07:09:42.496 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

07:09:42.496 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil


07:09:42.496 [debug] Generated fold cases after transformation: [{:->, [line: 154], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}]}, {:->, [line: 157], [[{:%{}, [], [variant: :null]}], {:list2, [line: 158], nil}]}]

07:09:42.496 [debug] Generated fold cases after transformation: [{:->, [line: 83], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:%{}, [], [variant: :empty]}], 0]}]

07:09:42.496 [debug] Extracted fold cases: [{:->, [line: 88], [[{:case, [line: 88], [{:object, [line: 88], [{:props, [line: 88], nil}, {:proto, [line: 88], nil}]}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]

07:09:42.496 [debug] Final quoted expression: {:do_fold, [], [{:list1, [line: 153], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 154], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}]}, {:->, [line: 157], [[{:%{}, [], [variant: :null]}], {:list2, [line: 158], nil}]}]]]}]}]}]}

07:09:42.496 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 82], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 83], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:%{}, [], [variant: :empty]}], 0]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/chain.ex:153: Chain.concat/2

warning: variable "vertex_map" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:82: PropGraph.edge_count/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:82: PropGraph.edge_count/1


07:09:42.497 [debug] Fold expression: {:list, [line: 166], nil}, opts: [with: {:initial, [line: 166], nil}], cases: [{:->, [line: 167], [[{:case, [line: 167], [{:cons, [line: 167], [{:head, [line: 167], nil}, {:tail, [line: 167], nil}]}]}], {:__block__, [line: 178], [{:=, [line: 169], [{{:_tail_result, [line: 169], nil}, {:acc, [line: 169], nil}}, {:recu, [line: 169], [{:tail, [line: 169], nil}]}]}, {{{:., [line: 172], [{:__aliases__, [counter: {Chain, 76}, line: 172], [:List]}, :null]}, [line: 172], []}, {{:., [line: 172], [{:fun, [line: 172], nil}]}, [line: 172], [{:acc, [line: 172], nil}, {:head, [line: 172], nil}]}}]}]}, {:->, [line: 174], [[{:case, [line: 174], [{:null, [line: 174], []}]}], {{{:., [line: 176], [{:__aliases__, [counter: {Chain, 76}, line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}]}]

07:09:42.497 [debug] Fold expression: {:graph, [line: 99], nil}, opts: [], cases: [{:->, [line: 100], [[{:case, [line: 100], [{:graph, [line: 100], [{:vertex_map, [line: 100], nil}, {:edge_list, [line: 100], nil}, {:metadata, [line: 100], nil}]}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:case, [line: 106], [{:empty, [line: 106], []}]}], []]}]

07:09:42.497 [debug] Extracting cases from list: [{:->, [line: 167], [[{:case, [line: 167], [{:cons, [line: 167], [{:head, [line: 167], nil}, {:tail, [line: 167], nil}]}]}], {:__block__, [line: 178], [{:=, [line: 169], [{{:_tail_result, [line: 169], nil}, {:acc, [line: 169], nil}}, {:recu, [line: 169], [{:tail, [line: 169], nil}]}]}, {{{:., [line: 172], [{:__aliases__, [counter: {Chain, 76}, line: 172], [:List]}, :null]}, [line: 172], []}, {{:., [line: 172], [{:fun, [line: 172], nil}]}, [line: 172], [{:acc, [line: 172], nil}, {:head, [line: 172], nil}]}}]}]}, {:->, [line: 174], [[{:case, [line: 174], [{:null, [line: 174], []}]}], {{{:., [line: 176], [{:__aliases__, [counter: {Chain, 76}, line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}]}]

07:09:42.497 [debug] Extracting cases from list: [{:->, [line: 100], [[{:case, [line: 100], [{:graph, [line: 100], [{:vertex_map, [line: 100], nil}, {:edge_list, [line: 100], nil}, {:metadata, [line: 100], nil}]}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:case, [line: 106], [{:empty, [line: 106], []}]}], []]}]

07:09:42.497 [debug] Generating fold cases: [{:->, [line: 88], [[{:case, [line: 88], [{:object, [line: 88], [{:props, [line: 88], nil}, {:proto, [line: 88], nil}]}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]

07:09:42.497 [debug] Generated pattern: {:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]} for variant: :object

07:09:42.497 [debug] Extracted fold cases: [{:->, [line: 167], [[{:case, [line: 167], [{:cons, [line: 167], [{:head, [line: 167], nil}, {:tail, [line: 167], nil}]}]}], {:__block__, [line: 178], [{:=, [line: 169], [{{:_tail_result, [line: 169], nil}, {:acc, [line: 169], nil}}, {:recu, [line: 169], [{:tail, [line: 169], nil}]}]}, {{{:., [line: 172], [{:__aliases__, [counter: {Chain, 76}, line: 172], [:List]}, :null]}, [line: 172], []}, {{:., [line: 172], [{:fun, [line: 172], nil}]}, [line: 172], [{:acc, [line: 172], nil}, {:head, [line: 172], nil}]}}]}]}, {:->, [line: 174], [[{:case, [line: 174], [{:null, [line: 174], []}]}], {{{:., [line: 176], [{:__aliases__, [counter: {Chain, 76}, line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}]}]

07:09:42.497 [debug] Extracted fold cases: [{:->, [line: 100], [[{:case, [line: 100], [{:graph, [line: 100], [{:vertex_map, [line: 100], nil}, {:edge_list, [line: 100], nil}, {:metadata, [line: 100], nil}]}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:case, [line: 106], [{:empty, [line: 106], []}]}], []]}]

07:09:42.497 [debug] Generating fold cases: [{:->, [line: 167], [[{:case, [line: 167], [{:cons, [line: 167], [{:head, [line: 167], nil}, {:tail, [line: 167], nil}]}]}], {:__block__, [line: 178], [{:=, [line: 169], [{{:_tail_result, [line: 169], nil}, {:acc, [line: 169], nil}}, {:recu, [line: 169], [{:tail, [line: 169], nil}]}]}, {{{:., [line: 172], [{:__aliases__, [counter: {Chain, 76}, line: 172], [:List]}, :null]}, [line: 172], []}, {{:., [line: 172], [{:fun, [line: 172], nil}]}, [line: 172], [{:acc, [line: 172], nil}, {:head, [line: 172], nil}]}}]}]}, {:->, [line: 174], [[{:case, [line: 174], [{:null, [line: 174], []}]}], {{{:., [line: 176], [{:__aliases__, [counter: {Chain, 76}, line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}]}]

07:09:42.497 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

07:09:42.497 [debug] Generating fold cases: [{:->, [line: 100], [[{:case, [line: 100], [{:graph, [line: 100], [{:vertex_map, [line: 100], nil}, {:edge_list, [line: 100], nil}, {:metadata, [line: 100], nil}]}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:case, [line: 106], [{:empty, [line: 106], []}]}], []]}]

07:09:42.497 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

07:09:42.497 [debug] Transforming recursive refs:
Body: {:__block__, [line: 178], [{:=, [line: 169], [{{:_tail_result, [line: 169], nil}, {:acc, [line: 169], nil}}, {:recu, [line: 169], [{:tail, [line: 169], nil}]}]}, {{{:., [line: 172], [{:__aliases__, [counter: {Chain, 76}, line: 172], [:List]}, :null]}, [line: 172], []}, {{:., [line: 172], [{:fun, [line: 172], nil}]}, [line: 172], [{:acc, [line: 172], nil}, {:head, [line: 172], nil}]}}]}
Bindings: [head: true, tail: true]
State: {:initial, [line: 166], nil}


07:09:42.497 [debug] Processing recursive reference: {:recu, [line: 169], [{:tail, [line: 169], nil}]}

07:09:42.497 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.497 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

07:09:42.497 [debug] Transforming recursive refs:
Body: {{{:., [line: 176], [{:__aliases__, [counter: {Chain, 76}, line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}
Bindings: []
State: {:initial, [line: 166], nil}


07:09:42.497 [debug] Transforming recursive refs:
Body: {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}
Bindings: [props: true, proto: true]
State: nil


07:09:42.497 [debug] Transforming recursive refs:
Body: {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


07:09:42.497 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

07:09:42.497 [debug] Processing recursive reference: {:recu, [line: 92], [{:proto, [line: 92], nil}]}

07:09:42.497 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


07:09:42.497 [debug] Transformed recursive reference to: {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}

07:09:42.497 [debug] Generated fold cases after transformation: [{:->, [line: 167], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [line: 178], [{:=, [line: 169], [{{:_tail_result, [line: 169], nil}, {:acc, [line: 169], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}, {{{:., [line: 172], [{:__aliases__, [counter: {Chain, 76}, line: 172], [:List]}, :null]}, [line: 172], []}, {{:., [line: 172], [{:fun, [line: 172], nil}]}, [line: 172], [{:acc, [line: 172], nil}, {:head, [line: 172], nil}]}}]}]}, {:->, [line: 174], [[{:%{}, [], [variant: :null]}], {{{:., [line: 176], [{:__aliases__, [counter: {Chain, 76}, line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}]}]

07:09:42.498 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

07:09:42.498 [debug] Transforming recursive refs:
Body: {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}
Bindings: []
State: nil


07:09:42.498 [debug] Generated fold cases after transformation: [{:->, [line: 100], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:%{}, [], [variant: :empty]}], []]}]

07:09:42.498 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 166], nil}, {:initial, [line: 166], nil}, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 167], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [line: 178], [{:=, [line: 169], [{{:_tail_result, [line: 169], nil}, {:acc, [line: 169], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}, {{{:., [line: 172], [{:__aliases__, [counter: {Chain, 76}, line: 172], [:List]}, :null]}, [line: 172], []}, {{:., [line: 172], [{:fun, [line: 172], nil}]}, [line: 172], [{:acc, [line: 172], nil}, {:head, [line: 172], nil}]}}]}]}, {:->, [line: 174], [[{:%{}, [], [variant: :null]}], {{{:., [line: 176], [{:__aliases__, [counter: {Chain, 76}, line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}]}]]]}]}]}]}

07:09:42.498 [debug] Bend operation with var: :val, initial: {{:list, [line: 186], nil}, {:n, [line: 186], nil}}

07:09:42.498 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 99], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 100], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}

07:09:42.498 [debug] Generated fold cases after transformation: [{:->, [line: 88], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:%{}, [], [variant: :null]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]
warning: variable "vertex" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:103: PropGraph.get_neighbors/2

warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:99: PropGraph.get_neighbors/2

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:99: PropGraph.get_neighbors/2


07:09:42.498 [debug] Fork operation with expression: {{:tail, [line: 192], nil}, {:-, [line: 192], [{:count, [line: 192], nil}, 1]}}

07:09:42.498 [debug] Final quoted expression: {:do_fold, [], [{:obj, [line: 87], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 88], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [...], ...}, :puts]}, [line: 91], [{:<<>>, [line: 91], [...]}]}, {:do_fold, [], [{:proto, [], ...}, nil, {...}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, ...}, :puts]}, [line: 95], [{:<<>>, [...], ...}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:%{}, [], [variant: :null]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]]]}]}]}]}

07:09:42.499 [debug] Fold expression: {:graph, [line: 113], nil}, opts: [], cases: [{:->, [line: 114], [[{:case, [line: 114], [{:graph, [line: 114], [{:vertex_map, [line: 114], nil}, {:edge_list, [line: 114], nil}, {:metadata, [line: 114], nil}]}]}], {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}]}, {:->, [line: 118], [[{:case, [line: 118], [{:empty, [line: 118], []}]}], []]}]

07:09:42.499 [debug] Extracting cases from list: [{:->, [line: 114], [[{:case, [line: 114], [{:graph, [line: 114], [{:vertex_map, [line: 114], nil}, {:edge_list, [line: 114], nil}, {:metadata, [line: 114], nil}]}]}], {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}]}, {:->, [line: 118], [[{:case, [line: 118], [{:empty, [line: 118], []}]}], []]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prototypal.ex:87: Prototypal.debug_chain/2


07:09:42.499 [debug] Extracted fold cases: [{:->, [line: 114], [[{:case, [line: 114], [{:graph, [line: 114], [{:vertex_map, [line: 114], nil}, {:edge_list, [line: 114], nil}, {:metadata, [line: 114], nil}]}]}], {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}]}, {:->, [line: 118], [[{:case, [line: 118], [{:empty, [line: 118], []}]}], []]}]

07:09:42.499 [debug] Generating fold cases: [{:->, [line: 114], [[{:case, [line: 114], [{:graph, [line: 114], [{:vertex_map, [line: 114], nil}, {:edge_list, [line: 114], nil}, {:metadata, [line: 114], nil}]}]}], {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}]}, {:->, [line: 118], [[{:case, [line: 118], [{:empty, [line: 118], []}]}], []]}]

07:09:42.499 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

07:09:42.499 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


07:09:42.499 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

07:09:42.499 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


07:09:42.499 [debug] Generated fold cases after transformation: [{:->, [line: 114], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}]}, {:->, [line: 118], [[{:%{}, [], [variant: :empty]}], []]}]

07:09:42.499 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 113], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 114], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}]}, {:->, [line: 118], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}
warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:113: PropGraph.shortest_path/3

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:113: PropGraph.shortest_path/3


07:09:42.500 [debug] Fold expression: {:graph, [line: 125], nil}, opts: [], cases: [{:->, [line: 126], [[{:case, [line: 126], [{:graph, [line: 126], [{:vertex_map, [line: 126], nil}, {:edge_list, [line: 126], nil}, {:metadata, [line: 126], nil}]}]}], {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, [line: 131], nil}, {:_, [line: 131], nil}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [line: 132], nil}, {:depth_first_search, [line: 132], [{:vertex_map, [line: 132], nil}, {:edge_list, [line: 132], nil}, {:first, [line: 132], nil}, {{:., [line: 132], [{:__aliases__, [line: 132], [:MapSet]}, :new]}, [line: 132], []}]}]}, {:==, [line: 133], [{{:., [line: 133], [{:__aliases__, [line: 133], [:MapSet]}, :size]}, [line: 133], [{:visited, [line: 133], nil}]}, {:length, [line: 133], [{:all_vertices, [line: 133], nil}]}]}]}]}]]]}]}, {:->, [line: 137], [[{:case, [line: 137], [{:empty, [line: 137], []}]}], true]}]

07:09:42.500 [debug] Extracting cases from list: [{:->, [line: 126], [[{:case, [line: 126], [{:graph, [line: 126], [{:vertex_map, [line: 126], nil}, {:edge_list, [line: 126], nil}, {:metadata, [line: 126], nil}]}]}], {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, [line: 131], nil}, {:_, [line: 131], nil}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [line: 132], nil}, {:depth_first_search, [line: 132], [{:vertex_map, [line: 132], nil}, {:edge_list, [line: 132], nil}, {:first, [line: 132], nil}, {{:., [line: 132], [{:__aliases__, [line: 132], [:MapSet]}, :new]}, [line: 132], []}]}]}, {:==, [line: 133], [{{:., [line: 133], [{:__aliases__, [line: 133], [:MapSet]}, :size]}, [line: 133], [{:visited, [line: 133], nil}]}, {:length, [line: 133], [{:all_vertices, [line: 133], nil}]}]}]}]}]]]}]}, {:->, [line: 137], [[{:case, [line: 137], [{:empty, [line: 137], []}]}], true]}]

07:09:42.501 [debug] Extracted fold cases: [{:->, [line: 126], [[{:case, [line: 126], [{:graph, [line: 126], [{:vertex_map, [line: 126], nil}, {:edge_list, [line: 126], nil}, {:metadata, [line: 126], nil}]}]}], {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, [line: 131], nil}, {:_, [line: 131], nil}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [line: 132], nil}, {:depth_first_search, [line: 132], [{:vertex_map, [line: 132], nil}, {:edge_list, [line: 132], nil}, {:first, [line: 132], nil}, {{:., [line: 132], [{:__aliases__, [line: 132], [:MapSet]}, :new]}, [line: 132], []}]}]}, {:==, [line: 133], [{{:., [line: 133], [{:__aliases__, [line: 133], [:MapSet]}, :size]}, [line: 133], [{:visited, [line: 133], nil}]}, {:length, [line: 133], [{:all_vertices, [line: 133], nil}]}]}]}]}]]]}]}, {:->, [line: 137], [[{:case, [line: 137], [{:empty, [line: 137], []}]}], true]}]
warning: function merge_counts/2 is unused
  lib/abstract_pov/parents.ex:75


07:09:42.501 [debug] Generating fold cases: [{:->, [line: 126], [[{:case, [line: 126], [{:graph, [line: 126], [{:vertex_map, [line: 126], nil}, {:edge_list, [line: 126], nil}, {:metadata, [line: 126], nil}]}]}], {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, [line: 131], nil}, {:_, [line: 131], nil}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [line: 132], nil}, {:depth_first_search, [line: 132], [{:vertex_map, [line: 132], nil}, {:edge_list, [line: 132], nil}, {:first, [line: 132], nil}, {{:., [line: 132], [{:__aliases__, [line: 132], [:MapSet]}, :new]}, [line: 132], []}]}]}, {:==, [line: 133], [{{:., [line: 133], [{:__aliases__, [line: 133], [:MapSet]}, :size]}, [line: 133], [{:visited, [line: 133], nil}]}, {:length, [line: 133], [{:all_vertices, [line: 133], nil}]}]}]}]}]]]}]}, {:->, [line: 137], [[{:case, [line: 137], [{:empty, [line: 137], []}]}], true]}]
warning: function merge_with_level_increment/2 is unused
  lib/abstract_pov/parents.ex:80


07:09:42.501 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

07:09:42.501 [debug] Transforming recursive refs:
Body: {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, [line: 131], nil}, {:_, [line: 131], nil}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [line: 132], nil}, {:depth_first_search, [line: 132], [{:vertex_map, [line: 132], nil}, {:edge_list, [line: 132], nil}, {:first, [line: 132], nil}, {{:., [line: 132], [{:__aliases__, [line: 132], [:MapSet]}, :new]}, [line: 132], []}]}]}, {:==, [line: 133], [{{:., [line: 133], [{:__aliases__, [line: 133], [:MapSet]}, :size]}, [line: 133], [{:visited, [line: 133], nil}]}, {:length, [line: 133], [{:all_vertices, [line: 133], nil}]}]}]}]}]]]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


07:09:42.501 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

07:09:42.501 [debug] Transforming recursive refs:
Body: true
Bindings: []
State: nil


07:09:42.501 [debug] Generated fold cases after transformation: [{:->, [line: 126], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, [line: 131], nil}, {:_, [line: 131], nil}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [line: 132], nil}, {:depth_first_search, [line: 132], [{:vertex_map, [line: 132], nil}, {:edge_list, [line: 132], nil}, {:first, [line: 132], nil}, {{:., [line: 132], [{:__aliases__, [line: 132], [:MapSet]}, :new]}, [line: 132], []}]}]}, {:==, [line: 133], [{{:., [line: 133], [{:__aliases__, [line: 133], [:MapSet]}, :size]}, [line: 133], [{:visited, [line: 133], nil}]}, {:length, [line: 133], [{:all_vertices, [line: 133], nil}]}]}]}]}]]]}]}, {:->, [line: 137], [[{:%{}, [], [variant: :empty]}], true]}]

07:09:42.502 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 125], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 126], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, ...}, {...}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [...], ...}, {:depth_first_search, ...}]}, {:==, [line: 133], [{{...}, ...}, {...}]}]}]}]]]}]}, {:->, [line: 137], [[{:%{}, [], [variant: :empty]}], true]}]]]}]}]}]}
warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:125: PropGraph.is_connected?/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/abstract_pov/prop_graph.ex:125: PropGraph.is_connected?/1

warning: this clause for reverse/1 cannot match because a previous clause at line 96 always matches
  lib/abstract_pov/chain.ex:122

warning: unused alias QueryBuilder
  lib/bridge_imo/mecha_cyph/queries/spaceship_queries.ex:6


07:09:42.561 [debug] Fold expression: {{:., [line: 154], [{:state, [line: 154], nil}, :graph]}, [no_parens: true, line: 154], []}, opts: [], cases: [{:->, [line: 155], [[{:case, [line: 155], [{:graph, [line: 155], [{:vertex_map, [line: 155], nil}, {:edge_list, [line: 155], nil}, {:metadata, [line: 155], nil}]}]}], {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, :to_string]}, [line: 157], [{:inspect, [line: 157], [{:vertex_map, [line: 157], nil}]}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [Kernel, :to_string]}, [line: 158], [{:inspect, [line: 158], [{:edge_list, [line: 158], nil}]}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., [line: 161], [Kernel, :to_string]}, [line: 161], [{:inspect, [line: 161], [{:edges, [line: 161], nil}]}]}, {:binary, [line: 161], nil}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{{:., [line: 164], [Kernel, :to_string]}, [line: 164], [{:inspect, [line: 164], [{:results, [line: 164], nil}]}]}, {:binary, [line: 164], nil}]}]}]}, {:results, [line: 166], nil}]}]}, {:->, [line: 168], [[{:case, [line: 168], [{:empty, [line: 168], []}]}], {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}]}]

07:09:42.562 [debug] Extracting cases from list: [{:->, [line: 155], [[{:case, [line: 155], [{:graph, [line: 155], [{:vertex_map, [line: 155], nil}, {:edge_list, [line: 155], nil}, {:metadata, [line: 155], nil}]}]}], {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, :to_string]}, [line: 157], [{:inspect, [line: 157], [{:vertex_map, [line: 157], nil}]}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [Kernel, :to_string]}, [line: 158], [{:inspect, [line: 158], [{:edge_list, [line: 158], nil}]}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., [line: 161], [Kernel, :to_string]}, [line: 161], [{:inspect, [line: 161], [{:edges, [line: 161], nil}]}]}, {:binary, [line: 161], nil}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{{:., [line: 164], [Kernel, :to_string]}, [line: 164], [{:inspect, [line: 164], [{:results, [line: 164], nil}]}]}, {:binary, [line: 164], nil}]}]}]}, {:results, [line: 166], nil}]}]}, {:->, [line: 168], [[{:case, [line: 168], [{:empty, [line: 168], []}]}], {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}]}]

07:09:42.562 [debug] Extracted fold cases: [{:->, [line: 155], [[{:case, [line: 155], [{:graph, [line: 155], [{:vertex_map, [line: 155], nil}, {:edge_list, [line: 155], nil}, {:metadata, [line: 155], nil}]}]}], {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, :to_string]}, [line: 157], [{:inspect, [line: 157], [{:vertex_map, [line: 157], nil}]}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [Kernel, :to_string]}, [line: 158], [{:inspect, [line: 158], [{:edge_list, [line: 158], nil}]}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., [line: 161], [Kernel, :to_string]}, [line: 161], [{:inspect, [line: 161], [{:edges, [line: 161], nil}]}]}, {:binary, [line: 161], nil}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{{:., [line: 164], [Kernel, :to_string]}, [line: 164], [{:inspect, [line: 164], [{:results, [line: 164], nil}]}]}, {:binary, [line: 164], nil}]}]}]}, {:results, [line: 166], nil}]}]}, {:->, [line: 168], [[{:case, [line: 168], [{:empty, [line: 168], []}]}], {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}]}]

07:09:42.563 [debug] Generating fold cases: [{:->, [line: 155], [[{:case, [line: 155], [{:graph, [line: 155], [{:vertex_map, [line: 155], nil}, {:edge_list, [line: 155], nil}, {:metadata, [line: 155], nil}]}]}], {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, :to_string]}, [line: 157], [{:inspect, [line: 157], [{:vertex_map, [line: 157], nil}]}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [Kernel, :to_string]}, [line: 158], [{:inspect, [line: 158], [{:edge_list, [line: 158], nil}]}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., [line: 161], [Kernel, :to_string]}, [line: 161], [{:inspect, [line: 161], [{:edges, [line: 161], nil}]}]}, {:binary, [line: 161], nil}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{{:., [line: 164], [Kernel, :to_string]}, [line: 164], [{:inspect, [line: 164], [{:results, [line: 164], nil}]}]}, {:binary, [line: 164], nil}]}]}]}, {:results, [line: 166], nil}]}]}, {:->, [line: 168], [[{:case, [line: 168], [{:empty, [line: 168], []}]}], {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}]}]

07:09:42.563 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

07:09:42.563 [debug] Transforming recursive refs:
Body: {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, :to_string]}, [line: 157], [{:inspect, [line: 157], [{:vertex_map, [line: 157], nil}]}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [Kernel, :to_string]}, [line: 158], [{:inspect, [line: 158], [{:edge_list, [line: 158], nil}]}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., [line: 161], [Kernel, :to_string]}, [line: 161], [{:inspect, [line: 161], [{:edges, [line: 161], nil}]}]}, {:binary, [line: 161], nil}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{{:., [line: 164], [Kernel, :to_string]}, [line: 164], [{:inspect, [line: 164], [{:results, [line: 164], nil}]}]}, {:binary, [line: 164], nil}]}]}]}, {:results, [line: 166], nil}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


07:09:42.563 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

07:09:42.563 [debug] Transforming recursive refs:
Body: {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}
Bindings: []
State: nil


07:09:42.564 [debug] Generated fold cases after transformation: [{:->, [line: 155], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, :to_string]}, [line: 157], [{:inspect, [line: 157], [{:vertex_map, [line: 157], nil}]}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [Kernel, :to_string]}, [line: 158], [{:inspect, [line: 158], [{:edge_list, [line: 158], nil}]}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., [line: 161], [Kernel, :to_string]}, [line: 161], [{:inspect, [line: 161], [{:edges, [line: 161], nil}]}]}, {:binary, [line: 161], nil}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{{:., [line: 164], [Kernel, :to_string]}, [line: 164], [{:inspect, [line: 164], [{:results, [line: 164], nil}]}]}, {:binary, [line: 164], nil}]}]}]}, {:results, [line: 166], nil}]}]}, {:->, [line: 168], [[{:%{}, [], [variant: :empty]}], {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}]}]

07:09:42.564 [debug] Final quoted expression: {:do_fold, [], [{{:., [line: 154], [{:state, [line: 154], nil}, :graph]}, [no_parens: true, line: 154], []}, nil, {:fn, [], [{:->, [], [[{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, {:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], KernelShtf.BenBen}]}], {:case, [], [{:var!, [context: KernelShtf.BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], KernelShtf.BenBen}]}, [do: [{:->, [line: 155], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, ...]}, [line: 157], [{:inspect, ...}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [...]}, [line: 158], [{...}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., ...}, [...], ...}, {:binary, ...}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{...}, ...]}]}]}, {:results, [line: 166], nil}]}]}, {:->, [line: 168], [[{:%{}, [], [variant: :empty]}], {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}]}]]]}]}]}]}
warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/concrete_irl/graffiti.ex:154: Graffiti.query/2

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  lib/concrete_irl/graffiti.ex:154: Graffiti.query/2

warning: incompatible types:

    map() !~ :s

in expression:

    # lib/bridge_imo/mecha_cyph/queries/spaceship_queries.ex:41
    s.properties

where "s" was given the type :s in:

    # lib/bridge_imo/mecha_cyph/queries/spaceship_queries.ex:40
    s = :s

where "s" was given the type map() (due to calling var.field) in:

    # lib/bridge_imo/mecha_cyph/queries/spaceship_queries.ex:41
    s.properties

HINT: "var.field" (without parentheses) implies "var" is a map() while "var.fun()" (with parentheses) implies "var" is an atom()

Conflict found at
  lib/bridge_imo/mecha_cyph/queries/spaceship_queries.ex:41: SpaceshipQueries.get_spaceship_by_name/2

warning: you must require Logger before invoking the macro Logger.debug/1
Invalid call found at 2 locations:
  lib/bridge_imo/mecha_cyph/query_builder.ex:5: BridgeImo.MechaCyph.QueryBuilder.add_node/2
  lib/bridge_imo/mecha_cyph/query_builder.ex:10: BridgeImo.MechaCyph.QueryBuilder.add_where/2

warning: incompatible types:

    map() !~ :s

in expression:

    # lib/bridge_imo/mecha_cyph/queries/spaceship_queries.ex:51
    s.properties

where "s" was given the type :s in:

    # lib/bridge_imo/mecha_cyph/queries/spaceship_queries.ex:50
    s = :s

where "s" was given the type map() (due to calling var.field) in:

    # lib/bridge_imo/mecha_cyph/queries/spaceship_queries.ex:51
    s.properties

HINT: "var.field" (without parentheses) implies "var" is a map() while "var.fun()" (with parentheses) implies "var" is an atom()

Conflict found at
  lib/bridge_imo/mecha_cyph/queries/spaceship_queries.ex:51: SpaceshipQueries.get_spaceships_by_class/2

Generated bendscript app
Excluding tags: [:skip]

warning: variable "query_map" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/bridge_imo/mecha_cyph/spaceship_queries_test.exs:44: SpaceshipQueriesTest."test SpaceshipQueries creates and retrieves spaceships"/1

warning: variable "query_data" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/bridge_imo/mecha_cyph/spaceship_queries_test.exs:36: SpaceshipQueriesTest."test SpaceshipQueries creates and retrieves spaceships"/1

warning: variable "updated_graph" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/bridge_imo/mecha_cyph/spaceship_queries_test.exs:42: SpaceshipQueriesTest."test SpaceshipQueries creates and retrieves spaceships"/1

warning: variable "final_data" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/bridge_imo/mecha_cyph/spaceship_queries_test.exs:58: SpaceshipQueriesTest."test SpaceshipQueries creates and retrieves spaceships"/1

warning: variable "properties" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/bridge_imo/mecha_cyph/spaceship_queries_test.exs:63: SpaceshipQueriesTest."test SpaceshipQueries creates spaceship with properties"/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/bridge_imo/mecha_cyph/spaceship_queries_test.exs:62: SpaceshipQueriesTest."test SpaceshipQueries creates spaceship with properties"/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/bridge_imo/mecha_cyph/spaceship_queries_test.exs:71: SpaceshipQueriesTest."test SpaceshipQueries handles empty results"/1

warning: variable "ships" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/bridge_imo/mecha_cyph/spaceship_queries_test.exs:76: SpaceshipQueriesTest."test SpaceshipQueries filters spaceships by class"/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/bridge_imo/mecha_cyph/spaceship_queries_test.exs:75: SpaceshipQueriesTest."test SpaceshipQueries filters spaceships by class"/1

warning: this clause cannot match because a previous clause at line 44 always matches
  test/bridge_imo/mecha_cyph/spaceship_queries_test.exs:50

07:09:42.984 [debug] Building create_spaceship query for name: "Millennium Falcon"
07:09:42.984 [info] Returning query with: :return
07:09:42.984 [debug] Building create_spaceship query for name: "Millennium Falcon"
07:09:42.984 [info] Returning query with: :return
07:09:42.984 [debug] EXECUT QUERY
07:09:42.985 [debug] EXECUTING the query %BridgeImo.MechaCyph.QueryBuilder{node: nil, where: nil, statement: nil}
07:09:42.985 [debug] Executing query with pattern: %BridgeImo.MechaCyph.QueryBuilder{node: nil, where: nil, statement: nil}
07:09:42.985 [debug] Current state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{Spaceship: %{properties: [name: [type: :string, required: true], class: [type: :string, required: false], crew_capacity: [type: :integer, required: false]], required: [:name]}}, transaction_counter: 0}
07:09:42.985 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
07:09:42.985 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
07:09:42.985 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
07:09:42.985 [debug] Processing recursive fields of: %{variant: :empty}
07:09:42.985 [debug] Empty graph, returning empty results
07:09:42.985 [debug] Recursive field result for edge_list: []
07:09:42.985 [debug] Processing graph with:
07:09:42.985 [debug]   vertex_map: %{}
07:09:42.985 [debug]   edge_list: []
07:09:42.985 [debug] Extracting edges from: []
07:09:42.985 [debug] Processing list of edges
07:09:42.985 [debug] Extracted edges result: []
07:09:42.985 [debug] Extracted edges: []
07:09:42.985 [debug] Executing query with pattern: %BridgeImo.MechaCyph.QueryBuilder{node: nil, where: nil, statement: nil}
07:09:42.985 [warning] Unsupported query pattern: %BridgeImo.MechaCyph.QueryBuilder{node: nil, where: nil, statement: nil}
07:09:42.985 [debug] Query results: []


  1) test SpaceshipQueries creates and retrieves spaceships (SpaceshipQueriesTest)
     test/bridge_imo/mecha_cyph/spaceship_queries_test.exs:30
     ** (MatchError) no match of right hand side value: {[], %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{Spaceship: %{properties: [name: [type: :string, required: true], class: [type: :string, required: false], crew_capacity: [type: :integer, required: false]], required: [:name]}}, transaction_counter: 0}}
     code: Enum.reduce(ships, state, fn name, acc_state ->
     stacktrace:
       (bendscript 0.1.0) lib/abc_law/mecha_cyph.ex:158: MechaCyph.execute_query/2
       test/bridge_imo/mecha_cyph/spaceship_queries_test.exs:45: anonymous fn/3 in SpaceshipQueriesTest."test SpaceshipQueries creates and retrieves spaceships"/1
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/bridge_imo/mecha_cyph/spaceship_queries_test.exs:35: (test)


Finished in 0.02 seconds (0.00s async, 0.02s sync)
4 tests, 1 failure, 3 excluded

Randomized with seed 938234
