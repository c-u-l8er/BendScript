Excluding tags: [:skip]

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  test/examples/graph_trx_test.exs:45: GraphTrxTest."test GraphTrx successful transaction"/1

warning: variable "reason" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/examples/graph_trx_test.exs:68: GraphTrxTest."test GraphTrx transaction rollback"/1

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  test/examples/graph_trx_test.exs:78: GraphTrxTest."test GraphTrx schema validation"/1

15:03:42.935 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
15:03:42.937 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:03:42.937 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:03:42.937 [debug] Processing recursive fields of: %{variant: :empty}
15:03:42.938 [debug] Recursive field result for edge_list: 0
..

  1) test GraphTrx successful transaction (GraphTrxTest)
     test/examples/graph_trx_test.exs:24
     ** (MatchError) no match of right hand side value: {:error, "Source vertex not found", %GraphTrx.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{1 => %{operations: [{:add_vertex, :person, "2", %{age: 25, name: "Bob"}}, {:add_vertex, :person, "1", %{age: 30, name: "Alice"}}], timestamp: 1736197422938, variant: :pending}}, locks: %{{:vertex, "1"} => 1, {:vertex, "2"} => 1}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 1}}
     code: {:ok, state} = GraphTrx.add_edge(state, tx_id, "1", "2", :knows)
     stacktrace:
       test/examples/graph_trx_test.exs:42: (test)

.
Finished in 0.05 seconds (0.00s async, 0.05s sync)
4 tests, 1 failure

Randomized with seed 856170
