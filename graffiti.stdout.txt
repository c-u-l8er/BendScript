Compiling 9 files (.ex)
warning: clauses with the same name and arity (number of arguments) should be grouped together, "defp generate_fold_cases/2" was previously defined (lib/ben_ben.ex:134)
  lib/ben_ben.ex:171

warning: variable "other" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/ben_ben.ex:374: BenBen.process_constructed/2

warning: function extract_bindings/1 is unused
  lib/ben_ben.ex:250

warning: function generate_pattern_match/1 is unused
  lib/ben_ben.ex:225

warning: this clause for generate_fold_cases/2 cannot match because a previous clause at line 134 always matches
  lib/ben_ben.ex:171

warning: this clause for generate_fold_cases/2 cannot match because a previous clause at line 134 always matches
  lib/ben_ben.ex:175


15:55:43.896 [debug] Defining type {:__aliases__, [line: 4], [:MyTree]} with block: {:__block__, [], [{:node, [line: 5], [{:val, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]}

15:55:43.896 [debug] Defining type {:__aliases__, [line: 4], [:Graph]} with block: {:__block__, [], [{:graph, [line: 6], [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]}, {:vertex, [line: 7], [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]}, {:edge, [line: 8], [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]}, {:empty, [line: 9], []}]}

15:55:43.899 [debug] Extracted variants: [{:node, [line: 5], [{:val, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]

15:55:43.896 [debug] Defining type {:__aliases__, [line: 5], [:Graph]} with block: {:__block__, [], [{:graph, [line: 6], [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 7], [{:from, [line: 7], nil}, {:to, [line: 7], nil}]}, {:empty, [line: 8], []}]}

15:55:43.896 [debug] Defining type {:__aliases__, [line: 4], [:Tree]} with block: {:__block__, [], [{:node, [line: 5], [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]}

15:55:43.896 [debug] Defining type {:__aliases__, [line: 7], [:Transaction]} with block: {:__block__, [], [{:pending, [line: 9], [{:operations, [line: 9], nil}, {:timestamp, [line: 9], nil}]}, {:committed, [line: 10], [{:changes, [line: 10], nil}, {:timestamp, [line: 10], nil}]}, {:rolled_back, [line: 11], [{:reason, [line: 11], nil}, {:timestamp, [line: 11], nil}]}]}

15:55:43.896 [debug] Defining type {:__aliases__, [line: 7], [:List]} with block: {:__block__, [], [{:cons, [line: 8], [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]}, {:null, [line: 9], []}]}

15:55:43.899 [debug] Extracted variants: [{:graph, [line: 6], [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 7], [{:from, [line: 7], nil}, {:to, [line: 7], nil}]}, {:empty, [line: 8], []}]

15:55:43.899 [debug] Extracted variants: [{:pending, [line: 9], [{:operations, [line: 9], nil}, {:timestamp, [line: 9], nil}]}, {:committed, [line: 10], [{:changes, [line: 10], nil}, {:timestamp, [line: 10], nil}]}, {:rolled_back, [line: 11], [{:reason, [line: 11], nil}, {:timestamp, [line: 11], nil}]}]

15:55:43.896 [debug] Defining type {:__aliases__, [line: 4], [:MyGraph]} with block: {:__block__, [], [{:vertex, [line: 6], [{:id, [line: 6], nil}, {:value, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 8], [{:to_id, [line: 8], nil}, {:weight, [line: 8], nil}]}]}

15:55:43.899 [debug] Extracted variants: [{:graph, [line: 6], [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]}, {:vertex, [line: 7], [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]}, {:edge, [line: 8], [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]}, {:empty, [line: 9], []}]

15:55:43.899 [debug] Extracted variants: [{:vertex, [line: 6], [{:id, [line: 6], nil}, {:value, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 8], [{:to_id, [line: 8], nil}, {:weight, [line: 8], nil}]}]

15:55:43.899 [debug] Generating constructors for variants: [{:node, [line: 5], [{:val, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]

15:55:43.899 [debug] Extracted variants: [{:node, [line: 5], [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]

15:55:43.899 [debug] Extracted variants: [{:cons, [line: 8], [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]}, {:null, [line: 9], []}]

15:55:43.899 [debug] Generating constructors for variants: [{:graph, [line: 6], [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 7], [{:from, [line: 7], nil}, {:to, [line: 7], nil}]}, {:empty, [line: 8], []}]

15:55:43.896 [debug] Defining type {:__aliases__, [line: 5], [:ProtoObject]} with block: {:__block__, [], [{:object, [line: 7], [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]}, {:null, [line: 9], []}]}

15:55:43.899 [debug] Generating constructors for variants: [{:pending, [line: 9], [{:operations, [line: 9], nil}, {:timestamp, [line: 9], nil}]}, {:committed, [line: 10], [{:changes, [line: 10], nil}, {:timestamp, [line: 10], nil}]}, {:rolled_back, [line: 11], [{:reason, [line: 11], nil}, {:timestamp, [line: 11], nil}]}]

15:55:43.899 [debug] Generating constructors for variants: [{:cons, [line: 8], [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]}, {:null, [line: 9], []}]

15:55:43.899 [debug] Generating constructors for variants: [{:vertex, [line: 6], [{:id, [line: 6], nil}, {:value, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 8], [{:to_id, [line: 8], nil}, {:weight, [line: 8], nil}]}]

15:55:43.899 [debug] Extracted variants: [{:object, [line: 7], [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]}, {:null, [line: 9], []}]

15:55:43.899 [debug] Generating constructors for variants: [{:graph, [line: 6], [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]}, {:vertex, [line: 7], [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]}, {:edge, [line: 8], [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]}, {:empty, [line: 9], []}]

15:55:43.899 [debug] Processing variant: {:node, [line: 5], [{:val, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}

15:55:43.899 [debug] Processing variant: {:graph, [line: 6], [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}

15:55:43.899 [debug] Processing variant: {:graph, [line: 6], [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]}

15:55:43.899 [debug] Constructor: :graph, meta: [line: 6], args: [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]

15:55:43.899 [debug] Constructor: :node, meta: [line: 5], args: [{:val, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]

15:55:43.899 [debug] Processing variant: {:pending, [line: 9], [{:operations, [line: 9], nil}, {:timestamp, [line: 9], nil}]}

15:55:43.899 [debug] Processing variant: {:cons, [line: 8], [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]}

15:55:43.899 [debug] Constructor: :graph, meta: [line: 6], args: [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]

15:55:43.899 [debug] Processing variant: {:vertex, [line: 6], [{:id, [line: 6], nil}, {:value, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}

15:55:43.899 [debug] Constructor: :pending, meta: [line: 9], args: [{:operations, [line: 9], nil}, {:timestamp, [line: 9], nil}]

15:55:43.899 [debug] Constructor: :vertex, meta: [line: 6], args: [{:id, [line: 6], nil}, {:value, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]

15:55:43.899 [debug] Extracting constructor args from: [{:vertex_map, [line: 6], nil}, {:recu, [line: 6], [{:edge_list, [line: 6], nil}]}, {:metadata, [line: 6], nil}]

15:55:43.899 [debug] Constructor: :cons, meta: [line: 8], args: [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]

15:55:43.899 [debug] Extracting constructor args from: [{:operations, [line: 9], nil}, {:timestamp, [line: 9], nil}]

15:55:43.899 [debug] Found value arg: :operations

15:55:43.899 [debug] Generating constructors for variants: [{:node, [line: 5], [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}, {:leaf, [line: 6], []}]

15:55:43.899 [debug] Extracting constructor args from: [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]

15:55:43.899 [debug] Extracting constructor args from: [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]

15:55:43.899 [debug] Found value arg: :head

15:55:43.899 [debug] Found recursive arg: :tail

15:55:43.899 [debug] Found value arg: :vertex_map

15:55:43.899 [debug] Found value arg: :vertices

15:55:43.899 [debug] Extracting constructor args from: [{:val, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]

15:55:43.899 [debug] Generating constructors for variants: [{:object, [line: 7], [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]}, {:null, [line: 9], []}]

15:55:43.899 [debug] Extracted arg_names: [:head, :tail]

15:55:43.899 [debug] Found recursive arg: :edges

15:55:43.899 [debug] Found value arg: :val

15:55:43.899 [debug] Found recursive arg: :edge_list

15:55:43.899 [debug] Extracted arg_names: [:vertices, :edges]

15:55:43.899 [debug] Processing variant: {:object, [line: 7], [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]}

15:55:43.899 [debug] Found value arg: :metadata

15:55:43.899 [debug] Generated arg vars: [{:vertices, [], nil}, {:edges, [], nil}]

15:55:43.899 [debug] Found recursive arg: :left

15:55:43.899 [debug] Generated arg vars: [{:head, [], nil}, {:tail, [], nil}]

15:55:43.899 [debug] Extracted arg_names: [:vertex_map, :edge_list, :metadata]

15:55:43.899 [debug] Found recursive arg: :right

15:55:43.899 [debug] Processing variant: {:node, [line: 5], [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]}

15:55:43.899 [debug] Field pairs: [head: {:head, [], nil}, tail: {:tail, [], nil}]

15:55:43.899 [debug] Constructor: :object, meta: [line: 7], args: [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]

15:55:43.899 [debug] Field pairs: [vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]

15:55:43.899 [debug] Processing variant: {:null, [line: 9], []}

15:55:43.899 [debug] Generated arg vars: [{:vertex_map, [], nil}, {:edge_list, [], nil}, {:metadata, [], nil}]

15:55:43.899 [debug] Extracting constructor args from: [{:id, [line: 6], nil}, {:value, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]

15:55:43.899 [debug] Extracted arg_names: [:val, :left, :right]

15:55:43.899 [debug] Processing variant: {:edge, [line: 7], [{:from, [line: 7], nil}, {:to, [line: 7], nil}]}

15:55:43.899 [debug] Found value arg: :id

15:55:43.899 [debug] Found value arg: :timestamp

15:55:43.899 [debug] Found value arg: :value

15:55:43.899 [debug] Constructor: :edge, meta: [line: 7], args: [{:from, [line: 7], nil}, {:to, [line: 7], nil}]

15:55:43.899 [debug] Extracted arg_names: [:operations, :timestamp]

15:55:43.899 [debug] Found recursive arg: :edges

15:55:43.899 [debug] Constructor: :null, meta: [line: 9], args: []

15:55:43.899 [debug] Extracting constructor args from: [{:from, [line: 7], nil}, {:to, [line: 7], nil}]

15:55:43.899 [debug] Extracted arg_names: [:id, :value, :edges]

15:55:43.899 [debug] Found value arg: :from

15:55:43.899 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

15:55:43.899 [debug] Found value arg: :to

15:55:43.899 [debug] Generated arg vars: [{:id, [], nil}, {:value, [], nil}, {:edges, [], nil}]

15:55:43.899 [debug] Extracted arg_names: [:from, :to]

15:55:43.899 [debug] Extracting constructor args from: []

15:55:43.899 [debug] Constructor: :node, meta: [line: 5], args: [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]

15:55:43.899 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

15:55:43.899 [debug] Generated arg vars: [{:from, [], nil}, {:to, [], nil}]

15:55:43.899 [debug] Extracted arg_names: []

15:55:43.899 [debug] Field pairs: [id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]

15:55:43.899 [debug] Processing variant: {:leaf, [line: 6], []}

15:55:43.899 [debug] Generated arg vars: []

15:55:43.899 [debug] Field pairs: [from: {:from, [], nil}, to: {:to, [], nil}]

15:55:43.899 [debug] Field pairs: []

15:55:43.899 [debug] Extracting constructor args from: [{:props, [line: 7], nil}, {:recu, [line: 7], [{:proto, [line: 7], nil}]}]

15:55:43.899 [debug] Constructor: :leaf, meta: [line: 6], args: []

15:55:43.899 [debug] Processing variant: {:edge, [line: 8], [{:to_id, [line: 8], nil}, {:weight, [line: 8], nil}]}

15:55:43.899 [debug] Processing variant: {:empty, [line: 8], []}

15:55:43.899 [debug] Extracting constructor args from: []

15:55:43.899 [debug] Field pairs: [vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]

15:55:43.899 [debug] Extracting constructor args from: [{:value, [line: 5], nil}, {:recu, [line: 5], [{:left, [line: 5], nil}]}, {:recu, [line: 5], [{:right, [line: 5], nil}]}]

15:55:43.899 [debug] Found value arg: :value

15:55:43.899 [debug] Found recursive arg: :left

15:55:43.899 [debug] Found recursive arg: :right

15:55:43.899 [debug] Processing variant: {:vertex, [line: 7], [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]}

15:55:43.900 [debug] Extracted arg_names: [:value, :left, :right]

15:55:43.900 [debug] Found value arg: :props

15:55:43.900 [debug] Generated arg vars: [{:value, [], nil}, {:left, [], nil}, {:right, [], nil}]

15:55:43.900 [debug] Found recursive arg: :proto

15:55:43.900 [debug] Constructor: :vertex, meta: [line: 7], args: [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]

15:55:43.900 [debug] Extracted arg_names: [:props, :proto]

15:55:43.900 [debug] Field pairs: [value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

15:55:43.900 [debug] Generated arg vars: [{:props, [], nil}, {:proto, [], nil}]

15:55:43.900 [debug] Extracting constructor args from: [{:vertex_id, [line: 7], nil}, {:properties, [line: 7], nil}, {:recu, [line: 7], [{:adjacency, [line: 7], nil}]}]

15:55:43.900 [debug] Processing variant: {:leaf, [line: 6], []}

15:55:43.900 [debug] Found value arg: :vertex_id

15:55:43.900 [debug] Field pairs: [props: {:props, [], nil}, proto: {:proto, [], nil}]

15:55:43.900 [debug] Constructor: :leaf, meta: [line: 6], args: []

15:55:43.900 [debug] Processing variant: {:null, [line: 9], []}

15:55:43.900 [debug] Generated arg vars: [{:operations, [], nil}, {:timestamp, [], nil}]

15:55:43.900 [debug] Constructor: :edge, meta: [line: 8], args: [{:to_id, [line: 8], nil}, {:weight, [line: 8], nil}]

15:55:43.900 [debug] Constructor: :empty, meta: [line: 8], args: []

15:55:43.900 [debug] Extracting constructor args from: []

15:55:43.900 [debug] Constructor: :null, meta: [line: 9], args: []

15:55:43.900 [debug] Field pairs: [operations: {:operations, [], nil}, timestamp: {:timestamp, [], nil}]

15:55:43.900 [debug] Extracting constructor args from: []

15:55:43.900 [debug] Extracting constructor args from: [{:to_id, [line: 8], nil}, {:weight, [line: 8], nil}]

15:55:43.900 [debug] Extracted arg_names: []

15:55:43.900 [debug] Extracting constructor args from: []

15:55:43.900 [debug] Extracted arg_names: []

15:55:43.900 [debug] Generated arg vars: []

15:55:43.900 [debug] Found value arg: :to_id

15:55:43.900 [debug] Field pairs: []

15:55:43.900 [debug] Found value arg: :weight

15:55:43.900 [debug] Processing variant: {:committed, [line: 10], [{:changes, [line: 10], nil}, {:timestamp, [line: 10], nil}]}

15:55:43.900 [debug] Extracted arg_names: []

15:55:43.900 [debug] Generated arg vars: []

15:55:43.900 [debug] Extracted arg_names: [:to_id, :weight]

15:55:43.900 [debug] Generated arg vars: []

15:55:43.900 [debug] Field pairs: []

15:55:43.900 [debug] Constructor: :committed, meta: [line: 10], args: [{:changes, [line: 10], nil}, {:timestamp, [line: 10], nil}]

15:55:43.900 [debug] Field pairs: []

15:55:43.900 [debug] Found value arg: :properties

15:55:43.900 [debug] Found recursive arg: :adjacency

15:55:43.900 [debug] Extracted arg_names: []

15:55:43.900 [debug] Generated arg vars: []

15:55:43.900 [debug] Field pairs: []

15:55:43.900 [debug] Generated arg vars: [{:to_id, [], nil}, {:weight, [], nil}]

15:55:43.900 [debug] Field pairs: [to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]

15:55:43.900 [debug] Extracting constructor args from: [{:changes, [line: 10], nil}, {:timestamp, [line: 10], nil}]

15:55:43.900 [debug] Found value arg: :changes

15:55:43.900 [debug] Found value arg: :timestamp

15:55:43.900 [debug] Extracted arg_names: [:changes, :timestamp]

15:55:43.900 [debug] Generated arg vars: [{:changes, [], nil}, {:timestamp, [], nil}]

15:55:43.900 [debug] Extracted arg_names: [:vertex_id, :properties, :adjacency]

15:55:43.900 [debug] Generated arg vars: [{:vertex_id, [], nil}, {:properties, [], nil}, {:adjacency, [], nil}]

15:55:43.900 [debug] Field pairs: [changes: {:changes, [], nil}, timestamp: {:timestamp, [], nil}]

15:55:43.900 [debug] Field pairs: [vertex_id: {:vertex_id, [], nil}, properties: {:properties, [], nil}, adjacency: {:adjacency, [], nil}]

15:55:43.900 [debug] Processing variant: {:rolled_back, [line: 11], [{:reason, [line: 11], nil}, {:timestamp, [line: 11], nil}]}

15:55:43.900 [debug] Constructor: :rolled_back, meta: [line: 11], args: [{:reason, [line: 11], nil}, {:timestamp, [line: 11], nil}]

15:55:43.900 [debug] Extracting constructor args from: [{:reason, [line: 11], nil}, {:timestamp, [line: 11], nil}]

15:55:43.900 [debug] Found value arg: :reason

15:55:43.900 [debug] Processing variant: {:edge, [line: 8], [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]}

15:55:43.900 [debug] Found value arg: :timestamp

15:55:43.900 [debug] Extracted arg_names: [:reason, :timestamp]

15:55:43.900 [debug] Generated arg vars: [{:reason, [], nil}, {:timestamp, [], nil}]

15:55:43.900 [debug] Constructor: :edge, meta: [line: 8], args: [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]

15:55:43.900 [debug] Field pairs: [reason: {:reason, [], nil}, timestamp: {:timestamp, [], nil}]

15:55:43.900 [debug] Extracting constructor args from: [{:source_id, [line: 8], nil}, {:target_id, [line: 8], nil}, {:edge_weight, [line: 8], nil}, {:edge_props, [line: 8], nil}]

15:55:43.900 [debug] Found value arg: :source_id

15:55:43.900 [debug] Found value arg: :target_id

15:55:43.900 [debug] Found value arg: :edge_weight

15:55:43.900 [debug] Found value arg: :edge_props

15:55:43.900 [debug] Extracted arg_names: [:source_id, :target_id, :edge_weight, :edge_props]

15:55:43.900 [debug] Generated arg vars: [{:source_id, [], nil}, {:target_id, [], nil}, {:edge_weight, [], nil}, {:edge_props, [], nil}]

15:55:43.900 [debug] Field pairs: [source_id: {:source_id, [], nil}, target_id: {:target_id, [], nil}, edge_weight: {:edge_weight, [], nil}, edge_props: {:edge_props, [], nil}]

15:55:43.900 [debug] Processing variant: {:empty, [line: 9], []}

15:55:43.900 [debug] Constructor: :empty, meta: [line: 9], args: []

15:55:43.900 [debug] Extracting constructor args from: []

15:55:43.900 [debug] Extracted arg_names: []

15:55:43.900 [debug] Generated arg vars: []

15:55:43.900 [debug] Field pairs: []

15:55:43.933 [debug] Fold expression: {:graph, [line: 13], nil}, opts: [], cases: [{:->, [line: 14], [[{:case, [line: 14], [{:vertex, [line: 14], [{:id, [line: 14], nil}, {:value, [line: 14], nil}, {:edges, [line: 14], nil}]}]}], {:+, [line: 15], [{:value, [line: 15], nil}, {:recu, [line: 15], [{:edges, [line: 15], nil}]}]}]}, {:->, [line: 17], [[{:case, [line: 17], [{:edge, [line: 17], [{:to_id, [line: 17], nil}, {:weight, [line: 17], nil}]}]}], {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}]}]

15:55:43.933 [debug] Extracting cases from list: [{:->, [line: 14], [[{:case, [line: 14], [{:vertex, [line: 14], [{:id, [line: 14], nil}, {:value, [line: 14], nil}, {:edges, [line: 14], nil}]}]}], {:+, [line: 15], [{:value, [line: 15], nil}, {:recu, [line: 15], [{:edges, [line: 15], nil}]}]}]}, {:->, [line: 17], [[{:case, [line: 17], [{:edge, [line: 17], [{:to_id, [line: 17], nil}, {:weight, [line: 17], nil}]}]}], {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}]}]

15:55:43.933 [debug] Fold expression: {:tree, [line: 10], nil}, opts: [], cases: [{:->, [line: 11], [[{:case, [line: 11], [{:node, [line: 11], [{:val, [line: 11], nil}, {:left, [line: 11], nil}, {:right, [line: 11], nil}]}]}], {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:recu, [line: 11], [{:left, [line: 11], nil}]}]}, {:recu, [line: 11], [{:right, [line: 11], nil}]}]}]}, {:->, [line: 12], [[{:case, [line: 12], [{:leaf, [line: 12], []}]}], 0]}]

15:55:43.933 [debug] Extracted fold cases: [{:->, [line: 14], [[{:case, [line: 14], [{:vertex, [line: 14], [{:id, [line: 14], nil}, {:value, [line: 14], nil}, {:edges, [line: 14], nil}]}]}], {:+, [line: 15], [{:value, [line: 15], nil}, {:recu, [line: 15], [{:edges, [line: 15], nil}]}]}]}, {:->, [line: 17], [[{:case, [line: 17], [{:edge, [line: 17], [{:to_id, [line: 17], nil}, {:weight, [line: 17], nil}]}]}], {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}]}]

15:55:43.933 [debug] Extracting cases from list: [{:->, [line: 11], [[{:case, [line: 11], [{:node, [line: 11], [{:val, [line: 11], nil}, {:left, [line: 11], nil}, {:right, [line: 11], nil}]}]}], {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:recu, [line: 11], [{:left, [line: 11], nil}]}]}, {:recu, [line: 11], [{:right, [line: 11], nil}]}]}]}, {:->, [line: 12], [[{:case, [line: 12], [{:leaf, [line: 12], []}]}], 0]}]

15:55:43.933 [debug] Extracted fold cases: [{:->, [line: 11], [[{:case, [line: 11], [{:node, [line: 11], [{:val, [line: 11], nil}, {:left, [line: 11], nil}, {:right, [line: 11], nil}]}]}], {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:recu, [line: 11], [{:left, [line: 11], nil}]}]}, {:recu, [line: 11], [{:right, [line: 11], nil}]}]}]}, {:->, [line: 12], [[{:case, [line: 12], [{:leaf, [line: 12], []}]}], 0]}]

15:55:43.933 [debug] Generating fold cases: [{:->, [line: 14], [[{:case, [line: 14], [{:vertex, [line: 14], [{:id, [line: 14], nil}, {:value, [line: 14], nil}, {:edges, [line: 14], nil}]}]}], {:+, [line: 15], [{:value, [line: 15], nil}, {:recu, [line: 15], [{:edges, [line: 15], nil}]}]}]}, {:->, [line: 17], [[{:case, [line: 17], [{:edge, [line: 17], [{:to_id, [line: 17], nil}, {:weight, [line: 17], nil}]}]}], {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}]}]

15:55:43.933 [debug] Generated pattern: {:%{}, [], [variant: :vertex, id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]} for variant: :vertex

15:55:43.933 [debug] Generating fold cases: [{:->, [line: 11], [[{:case, [line: 11], [{:node, [line: 11], [{:val, [line: 11], nil}, {:left, [line: 11], nil}, {:right, [line: 11], nil}]}]}], {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:recu, [line: 11], [{:left, [line: 11], nil}]}]}, {:recu, [line: 11], [{:right, [line: 11], nil}]}]}]}, {:->, [line: 12], [[{:case, [line: 12], [{:leaf, [line: 12], []}]}], 0]}]

15:55:43.933 [debug] Transforming recursive refs:
Body: {:+, [line: 15], [{:value, [line: 15], nil}, {:recu, [line: 15], [{:edges, [line: 15], nil}]}]}
Bindings: [id: true, value: true, edges: true]
State: nil


15:55:43.933 [debug] Processing recursive reference: {:recu, [line: 15], [{:edges, [line: 15], nil}]}

15:55:43.933 [debug] Generated pattern: {:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

15:55:43.933 [debug] Transformed recursive reference to: {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.933 [debug] Generated pattern: {:%{}, [], [variant: :edge, to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]} for variant: :edge

15:55:43.933 [debug] Transforming recursive refs:
Body: {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:recu, [line: 11], [{:left, [line: 11], nil}]}]}, {:recu, [line: 11], [{:right, [line: 11], nil}]}]}
Bindings: [val: true, left: true, right: true]
State: nil


15:55:43.933 [debug] Transforming recursive refs:
Body: {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}
Bindings: [to_id: true, weight: true]
State: nil


15:55:43.933 [debug] Processing recursive reference: {:recu, [line: 11], [{:left, [line: 11], nil}]}

15:55:43.933 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.933 [debug] Processing recursive reference: {:recu, [line: 11], [{:right, [line: 11], nil}]}

15:55:43.933 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.933 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

15:55:43.933 [debug] Generated fold cases after transformation: [{:->, [line: 14], [[{:%{}, [], [variant: :vertex, id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]}], {:+, [line: 15], [{:value, [line: 15], nil}, {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 17], [[{:%{}, [], [variant: :edge, to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]}], {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}]}]

15:55:43.933 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil


15:55:43.933 [debug] Generated fold cases after transformation: [{:->, [line: 11], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 12], [[{:%{}, [], [variant: :leaf]}], 0]}]

15:55:43.934 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 13], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 14], [[{:%{}, [], [variant: :vertex, id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]}], {:+, [line: 15], [{:value, [line: 15], nil}, {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 17], [[{:%{}, [], [variant: :edge, to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]}], {:if, [line: 19], [{:and, [line: 19], [{:==, [line: 19], [{:to_id, [line: 19], nil}, 0]}, {:==, [line: 19], [{:weight, [line: 19], nil}, 0]}]}, [do: 0, else: {:weight, [line: 22], nil}]]}]}]]]}]}]}]}

15:55:43.934 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 11], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 11], [{:+, [line: 11], [{:val, [line: 11], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 12], [[{:%{}, [], [variant: :leaf]}], 0]}]]]}]}]}]}
warning: variable "id" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/ben_ben/my_graph.ex:13: MyGraph.sum/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/ben_ben/my_tree.ex:10: MyTree.sum/1


15:55:43.934 [debug] Bend operation with var: :val, initial: 0
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/ben_ben/my_graph.ex:13: MyGraph.sum/1


15:55:43.934 [debug] Bend operation with var: :vertex_id, initial: 1

15:55:43.934 [debug] Fork operation with expression: {:+, [line: 19], [{:val, [line: 19], nil}, 1]}

15:55:43.934 [debug] Fork operation with expression: {:+, [line: 19], [{:val, [line: 19], nil}, 1]}

15:55:43.935 [debug] Fold expression: {:graph, [line: 16], nil}, opts: [], cases: [{:->, [line: 17], [[{:case, [line: 17], [{:graph, [line: 17], [{:vertices, [line: 17], nil}, {:edges, [line: 17], nil}]}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:case, [line: 20], [{:empty, [line: 20], []}]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

15:55:43.936 [debug] Extracting cases from list: [{:->, [line: 17], [[{:case, [line: 17], [{:graph, [line: 17], [{:vertices, [line: 17], nil}, {:edges, [line: 17], nil}]}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:case, [line: 20], [{:empty, [line: 20], []}]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

15:55:43.936 [debug] Extracted fold cases: [{:->, [line: 17], [[{:case, [line: 17], [{:graph, [line: 17], [{:vertices, [line: 17], nil}, {:edges, [line: 17], nil}]}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:case, [line: 20], [{:empty, [line: 20], []}]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

15:55:43.936 [debug] Generating fold cases: [{:->, [line: 17], [[{:case, [line: 17], [{:graph, [line: 17], [{:vertices, [line: 17], nil}, {:edges, [line: 17], nil}]}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:case, [line: 20], [{:empty, [line: 20], []}]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

15:55:43.936 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

15:55:43.936 [debug] Transforming recursive refs:
Body: {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}
Bindings: [vertices: true, edges: true]
State: nil


15:55:43.936 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:55:43.936 [debug] Transforming recursive refs:
Body: {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}
Bindings: []
State: nil


15:55:43.936 [debug] Generated fold cases after transformation: [{:->, [line: 17], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:%{}, [], [variant: :empty]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

15:55:43.937 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 16], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 17], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:%{}, [], [variant: :empty]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]]]}]}]}]}

15:55:43.937 [debug] Bend operation with var: :level, initial: 0
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/simple_graph.ex:16: SimpleGraph.add_vertex/2


15:55:43.937 [debug] Fold expression: {:graph, [line: 26], nil}, opts: [], cases: [{:->, [line: 27], [[{:case, [line: 27], [{:graph, [line: 27], [{:vertices, [line: 27], nil}, {:edges, [line: 27], nil}]}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:empty, [line: 39], []}]}], {:graph, [line: 40], nil}]}]

15:55:43.937 [debug] Fork operation with expression: {:+, [line: 15], [{:level, [line: 15], nil}, 1]}

15:55:43.937 [debug] Fork operation with expression: {:+, [line: 16], [{:level, [line: 16], nil}, 1]}

15:55:43.937 [debug] Extracting cases from list: [{:->, [line: 27], [[{:case, [line: 27], [{:graph, [line: 27], [{:vertices, [line: 27], nil}, {:edges, [line: 27], nil}]}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:empty, [line: 39], []}]}], {:graph, [line: 40], nil}]}]

15:55:43.938 [debug] Extracted fold cases: [{:->, [line: 27], [[{:case, [line: 27], [{:graph, [line: 27], [{:vertices, [line: 27], nil}, {:edges, [line: 27], nil}]}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:empty, [line: 39], []}]}], {:graph, [line: 40], nil}]}]

15:55:43.938 [debug] Bend operation with var: :val, initial: {:enum, [line: 14], nil}

15:55:43.938 [debug] Fold expression: {:tree, [line: 26], nil}, opts: [], cases: [{:->, [line: 27], [[{:case, [line: 27], [{:node, [line: 27], [{:value, [line: 27], nil}, {:left, [line: 27], nil}, {:right, [line: 27], nil}]}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:case, [line: 31], [{:leaf, [line: 31], []}]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

15:55:43.938 [debug] Generating fold cases: [{:->, [line: 27], [[{:case, [line: 27], [{:graph, [line: 27], [{:vertices, [line: 27], nil}, {:edges, [line: 27], nil}]}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:empty, [line: 39], []}]}], {:graph, [line: 40], nil}]}]

15:55:43.938 [debug] Fork operation with expression: {:tail, [line: 17], nil}

15:55:43.938 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

15:55:43.938 [debug] Extracting cases from list: [{:->, [line: 27], [[{:case, [line: 27], [{:node, [line: 27], [{:value, [line: 27], nil}, {:left, [line: 27], nil}, {:right, [line: 27], nil}]}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:case, [line: 31], [{:leaf, [line: 31], []}]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

15:55:43.938 [debug] Extracted fold cases: [{:->, [line: 27], [[{:case, [line: 27], [{:node, [line: 27], [{:value, [line: 27], nil}, {:left, [line: 27], nil}, {:right, [line: 27], nil}]}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:case, [line: 31], [{:leaf, [line: 31], []}]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

15:55:43.938 [debug] Transforming recursive refs:
Body: {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}
Bindings: [vertices: true, edges: true]
State: nil


15:55:43.938 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:55:43.938 [debug] Transforming recursive refs:
Body: {:graph, [line: 40], nil}
Bindings: []
State: nil


15:55:43.938 [debug] Fold expression: {:linked_list, [line: 24], nil}, opts: [], cases: [{:->, [line: 25], [[{:case, [line: 25], [{:cons, [line: 25], [{:head, [line: 25], nil}, {:tail, [line: 25], nil}]}]}], [{:|, [line: 26], [{:head, [line: 26], nil}, {:recu, [line: 26], [{:tail, [line: 26], nil}]}]}]]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], []]}]

15:55:43.938 [debug] Generating fold cases: [{:->, [line: 27], [[{:case, [line: 27], [{:node, [line: 27], [{:value, [line: 27], nil}, {:left, [line: 27], nil}, {:right, [line: 27], nil}]}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:case, [line: 31], [{:leaf, [line: 31], []}]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

15:55:43.938 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

15:55:43.938 [debug] Extracting cases from list: [{:->, [line: 25], [[{:case, [line: 25], [{:cons, [line: 25], [{:head, [line: 25], nil}, {:tail, [line: 25], nil}]}]}], [{:|, [line: 26], [{:head, [line: 26], nil}, {:recu, [line: 26], [{:tail, [line: 26], nil}]}]}]]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], []]}]

15:55:43.938 [debug] Transforming recursive refs:
Body: {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}
Bindings: [value: true, left: true, right: true]
State: nil


15:55:43.938 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

15:55:43.938 [debug] Transforming recursive refs:
Body: {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}
Bindings: []
State: nil

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/simple_graph.ex:26: SimpleGraph.add_edge/3

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/parents.ex:26: Parents.map_tree/2

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:24: Chain.breaker/1


15:55:43.938 [debug] Extracted fold cases: [{:->, [line: 25], [[{:case, [line: 25], [{:cons, [line: 25], [{:head, [line: 25], nil}, {:tail, [line: 25], nil}]}]}], [{:|, [line: 26], [{:head, [line: 26], nil}, {:recu, [line: 26], [{:tail, [line: 26], nil}]}]}]]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], []]}]

15:55:43.938 [debug] Generated fold cases after transformation: [{:->, [line: 27], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:%{}, [], [variant: :empty]}], {:graph, [line: 40], nil}]}]

15:55:43.939 [debug] Generating fold cases: [{:->, [line: 25], [[{:case, [line: 25], [{:cons, [line: 25], [{:head, [line: 25], nil}, {:tail, [line: 25], nil}]}]}], [{:|, [line: 26], [{:head, [line: 26], nil}, {:recu, [line: 26], [{:tail, [line: 26], nil}]}]}]]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], []]}]

15:55:43.939 [debug] Generated fold cases after transformation: [{:->, [line: 27], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]

15:55:43.939 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

15:55:43.939 [debug] Transforming recursive refs:
Body: [{:|, [line: 26], [{:head, [line: 26], nil}, {:recu, [line: 26], [{:tail, [line: 26], nil}]}]}]
Bindings: [head: true, tail: true]
State: nil


15:55:43.939 [debug] Processing recursive reference: {:recu, [line: 26], [{:tail, [line: 26], nil}]}

15:55:43.939 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 26], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 27], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [...]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{...}], {...}]}, {:->, [line: 33], [[...], ...]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:%{}, [], [variant: :empty]}], {:graph, [line: 40], nil}]}]]]}]}]}]}

15:55:43.939 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.939 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

15:55:43.939 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


15:55:43.939 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 26], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 27], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {{:., [line: 29], [{:__aliases__, [line: 29], [:Tree]}, :node]}, [line: 29], [{{:., [line: 29], [{:transform_fn, [line: 29], nil}]}, [line: 29], [{:value, [line: 29], nil}]}, {:left, [line: 29], nil}, {:right, [line: 29], nil}]}]}, {:->, [line: 31], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Tree]}, :leaf]}, [line: 32], []}]}]]]}]}]}]}

15:55:43.939 [debug] Generated fold cases after transformation: [{:->, [line: 25], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], [{:|, [line: 26], [{:head, [line: 26], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]]}, {:->, [line: 28], [[{:%{}, [], [variant: :null]}], []]}]

15:55:43.939 [debug] Final quoted expression: {:do_fold, [], [{:linked_list, [line: 24], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 25], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], [{:|, [line: 26], [{:head, [line: 26], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]]}, {:->, [line: 28], [[{:%{}, [], [variant: :null]}], []]}]]]}]}]}]}

15:55:43.939 [debug] Fold expression: {:obj, [line: 19], nil}, opts: [], cases: [{:->, [line: 20], [[{:case, [line: 20], [{:object, [line: 20], [{:props, [line: 20], nil}, {:proto, [line: 20], nil}]}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], nil]}]

15:55:43.939 [debug] Fold expression: {:graph, [line: 45], nil}, opts: [], cases: [{:->, [line: 46], [[{:case, [line: 46], [{:graph, [line: 46], [{:vertices, [line: 46], nil}, {:edges, [line: 46], nil}]}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:case, [line: 47], [{:empty, [line: 47], []}]}], []]}]

15:55:43.939 [debug] Extracting cases from list: [{:->, [line: 46], [[{:case, [line: 46], [{:graph, [line: 46], [{:vertices, [line: 46], nil}, {:edges, [line: 46], nil}]}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:case, [line: 47], [{:empty, [line: 47], []}]}], []]}]

15:55:43.939 [debug] Extracted fold cases: [{:->, [line: 46], [[{:case, [line: 46], [{:graph, [line: 46], [{:vertices, [line: 46], nil}, {:edges, [line: 46], nil}]}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:case, [line: 47], [{:empty, [line: 47], []}]}], []]}]

15:55:43.939 [debug] Extracting cases from list: [{:->, [line: 20], [[{:case, [line: 20], [{:object, [line: 20], [{:props, [line: 20], nil}, {:proto, [line: 20], nil}]}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], nil]}]

15:55:43.939 [debug] Generating fold cases: [{:->, [line: 46], [[{:case, [line: 46], [{:graph, [line: 46], [{:vertices, [line: 46], nil}, {:edges, [line: 46], nil}]}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:case, [line: 47], [{:empty, [line: 47], []}]}], []]}]

15:55:43.939 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

15:55:43.939 [debug] Transforming recursive refs:
Body: {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}
Bindings: [vertices: true, edges: true]
State: nil


15:55:43.939 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:55:43.939 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


15:55:43.939 [debug] Extracted fold cases: [{:->, [line: 20], [[{:case, [line: 20], [{:object, [line: 20], [{:props, [line: 20], nil}, {:proto, [line: 20], nil}]}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], nil]}]

15:55:43.939 [debug] Fold expression: {:list, [line: 35], nil}, opts: [], cases: [{:->, [line: 36], [[{:case, [line: 36], [{:cons, [line: 36], [{:head, [line: 36], nil}, {:tail, [line: 36], nil}]}]}], {{:., [line: 37], [{:__aliases__, [line: 37], [:List]}, :cons]}, [line: 37], [{{:., [line: 37], [{:transform_fn, [line: 37], nil}]}, [line: 37], [{:head, [line: 37], nil}]}, {:recu, [line: 37], [{:tail, [line: 37], nil}]}]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:null, [line: 39], []}]}], {{:., [line: 40], [{:__aliases__, [line: 40], [:List]}, :null]}, [line: 40], []}]}]

15:55:43.939 [debug] Fold expression: {:tree, [line: 38], nil}, opts: [], cases: [{:->, [line: 39], [[{:case, [line: 39], [{:node, [line: 39], [{:value, [line: 39], nil}, {:left, [line: 39], nil}, {:right, [line: 39], nil}]}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:case, [line: 49], [{:leaf, [line: 49], []}]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

15:55:43.939 [debug] Generated fold cases after transformation: [{:->, [line: 46], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:%{}, [], [variant: :empty]}], []]}]

15:55:43.939 [debug] Generating fold cases: [{:->, [line: 20], [[{:case, [line: 20], [{:object, [line: 20], [{:props, [line: 20], nil}, {:proto, [line: 20], nil}]}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:case, [line: 28], [{:null, [line: 28], []}]}], nil]}]

15:55:43.939 [debug] Generated pattern: {:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]} for variant: :object

15:55:43.940 [debug] Extracting cases from list: [{:->, [line: 36], [[{:case, [line: 36], [{:cons, [line: 36], [{:head, [line: 36], nil}, {:tail, [line: 36], nil}]}]}], {{:., [line: 37], [{:__aliases__, [line: 37], [:List]}, :cons]}, [line: 37], [{{:., [line: 37], [{:transform_fn, [line: 37], nil}]}, [line: 37], [{:head, [line: 37], nil}]}, {:recu, [line: 37], [{:tail, [line: 37], nil}]}]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:null, [line: 39], []}]}], {{:., [line: 40], [{:__aliases__, [line: 40], [:List]}, :null]}, [line: 40], []}]}]

15:55:43.940 [debug] Transforming recursive refs:
Body: {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:recu, [line: 23], [{:proto, [line: 23], nil}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}
Bindings: [props: true, proto: true]
State: nil


15:55:43.940 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 45], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 46], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}

15:55:43.940 [debug] Processing recursive reference: {:recu, [line: 23], [{:proto, [line: 23], nil}]}

15:55:43.940 [debug] Extracting cases from list: [{:->, [line: 39], [[{:case, [line: 39], [{:node, [line: 39], [{:value, [line: 39], nil}, {:left, [line: 39], nil}, {:right, [line: 39], nil}]}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:case, [line: 49], [{:leaf, [line: 49], []}]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

15:55:43.940 [debug] Transformed recursive reference to: {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.940 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

15:55:43.940 [debug] Extracted fold cases: [{:->, [line: 36], [[{:case, [line: 36], [{:cons, [line: 36], [{:head, [line: 36], nil}, {:tail, [line: 36], nil}]}]}], {{:., [line: 37], [{:__aliases__, [line: 37], [:List]}, :cons]}, [line: 37], [{{:., [line: 37], [{:transform_fn, [line: 37], nil}]}, [line: 37], [{:head, [line: 37], nil}]}, {:recu, [line: 37], [{:tail, [line: 37], nil}]}]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:null, [line: 39], []}]}], {{:., [line: 40], [{:__aliases__, [line: 40], [:List]}, :null]}, [line: 40], []}]}]

15:55:43.940 [debug] Transforming recursive refs:
Body: nil
Bindings: []
State: nil


15:55:43.940 [debug] Generating fold cases: [{:->, [line: 36], [[{:case, [line: 36], [{:cons, [line: 36], [{:head, [line: 36], nil}, {:tail, [line: 36], nil}]}]}], {{:., [line: 37], [{:__aliases__, [line: 37], [:List]}, :cons]}, [line: 37], [{{:., [line: 37], [{:transform_fn, [line: 37], nil}]}, [line: 37], [{:head, [line: 37], nil}]}, {:recu, [line: 37], [{:tail, [line: 37], nil}]}]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:null, [line: 39], []}]}], {{:., [line: 40], [{:__aliases__, [line: 40], [:List]}, :null]}, [line: 40], []}]}]

15:55:43.940 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

15:55:43.940 [debug] Generated fold cases after transformation: [{:->, [line: 20], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:%{}, [], [variant: :null]}], nil]}]

15:55:43.940 [debug] Transforming recursive refs:
Body: {{:., [line: 37], [{:__aliases__, [line: 37], [:List]}, :cons]}, [line: 37], [{{:., [line: 37], [{:transform_fn, [line: 37], nil}]}, [line: 37], [{:head, [line: 37], nil}]}, {:recu, [line: 37], [{:tail, [line: 37], nil}]}]}
Bindings: [head: true, tail: true]
State: nil


15:55:43.940 [debug] Processing recursive reference: {:recu, [line: 37], [{:tail, [line: 37], nil}]}

15:55:43.940 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.940 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

15:55:43.940 [debug] Extracted fold cases: [{:->, [line: 39], [[{:case, [line: 39], [{:node, [line: 39], [{:value, [line: 39], nil}, {:left, [line: 39], nil}, {:right, [line: 39], nil}]}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:case, [line: 49], [{:leaf, [line: 49], []}]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

15:55:43.940 [debug] Transforming recursive refs:
Body: {{:., [line: 40], [{:__aliases__, [line: 40], [:List]}, :null]}, [line: 40], []}
Bindings: []
State: nil


15:55:43.940 [debug] Final quoted expression: {:do_fold, [], [{:obj, [line: 19], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 20], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:case, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:Map]}, :get]}, [line: 21], [{:props, [line: 21], nil}, {:key, [line: 21], nil}]}, [do: [{:->, [line: 23], [[nil], {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{...}, ...]], [{:value, ...}]}]}]}, {:->, [line: 25], [[{:val, [line: 25], nil}], {:val, [line: 25], nil}]}]]]}]}, {:->, [line: 28], [[{:%{}, [], [variant: :null]}], nil]}]]]}]}]}]}

15:55:43.940 [debug] Generated fold cases after transformation: [{:->, [line: 36], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {{:., [line: 37], [{:__aliases__, [line: 37], [:List]}, :cons]}, [line: 37], [{{:., [line: 37], [{:transform_fn, [line: 37], nil}]}, [line: 37], [{:head, [line: 37], nil}]}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 39], [[{:%{}, [], [variant: :null]}], {{:., [line: 40], [{:__aliases__, [line: 40], [:List]}, :null]}, [line: 40], []}]}]

15:55:43.940 [debug] Generating fold cases: [{:->, [line: 39], [[{:case, [line: 39], [{:node, [line: 39], [{:value, [line: 39], nil}, {:left, [line: 39], nil}, {:right, [line: 39], nil}]}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:case, [line: 49], [{:leaf, [line: 49], []}]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

15:55:43.940 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

15:55:43.940 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 35], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 36], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {{:., [line: 37], [{:__aliases__, [line: 37], [:List]}, :cons]}, [line: 37], [{{:., [line: 37], [{:transform_fn, [line: 37], nil}]}, [line: 37], [{:head, [line: 37], nil}]}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 39], [[{:%{}, [], [variant: :null]}], {{:., [line: 40], [{:__aliases__, [line: 40], [:List]}, :null]}, [line: 40], []}]}]]]}]}]}]}

15:55:43.940 [debug] Transforming recursive refs:
Body: {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}
Bindings: [value: true, left: true, right: true]
State: nil

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prototypal.ex:19: Prototypal.get_property/2


15:55:43.940 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

15:55:43.940 [debug] Transforming recursive refs:
Body: {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}
Bindings: []
State: nil

warning: variable "edges" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/simple_graph.ex:45: SimpleGraph.vertices/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:35: Chain.map/2

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/simple_graph.ex:45: SimpleGraph.vertices/1


15:55:43.941 [debug] Generated fold cases after transformation: [{:->, [line: 39], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]

15:55:43.941 [debug] Fold expression: {:graph, [line: 52], nil}, opts: [], cases: [{:->, [line: 53], [[{:case, [line: 53], [{:graph, [line: 53], [{:vertices, [line: 53], nil}, {:edges, [line: 53], nil}]}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:case, [line: 60], [{:empty, [line: 60], []}]}], []]}]

15:55:43.941 [debug] Extracting cases from list: [{:->, [line: 53], [[{:case, [line: 53], [{:graph, [line: 53], [{:vertices, [line: 53], nil}, {:edges, [line: 53], nil}]}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:case, [line: 60], [{:empty, [line: 60], []}]}], []]}]

15:55:43.941 [debug] Extracted fold cases: [{:->, [line: 53], [[{:case, [line: 53], [{:graph, [line: 53], [{:vertices, [line: 53], nil}, {:edges, [line: 53], nil}]}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:case, [line: 60], [{:empty, [line: 60], []}]}], []]}]

15:55:43.941 [debug] Generating fold cases: [{:->, [line: 53], [[{:case, [line: 53], [{:graph, [line: 53], [{:vertices, [line: 53], nil}, {:edges, [line: 53], nil}]}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:case, [line: 60], [{:empty, [line: 60], []}]}], []]}]

15:55:43.941 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

15:55:43.941 [debug] Transforming recursive refs:
Body: {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}
Bindings: [vertices: true, edges: true]
State: nil


15:55:43.941 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 38], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 39], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:if, [line: 41], [{{:., [line: 41], [{:predicate, [line: 41], nil}]}, [line: 41], [{:value, [line: 41], nil}]}, [do: {{:., [line: 42], [{:__aliases__, [line: 42], [:Tree]}, :node]}, [line: 42], [{:value, [line: 42], nil}, {:left, [line: 42], nil}, {:right, [line: 42], nil}]}, else: {{:., [line: 46], [{:__aliases__, [line: 46], [:Tree]}, :node]}, [line: 46], [0, {:left, [line: 46], nil}, {:right, [line: 46], nil}]}]]}]}, {:->, [line: 49], [[{:%{}, [], [variant: :leaf]}], {{:., [line: 50], [{:__aliases__, [line: 50], [:Tree]}, :leaf]}, [line: 50], []}]}]]]}]}]}]}

15:55:43.941 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:55:43.941 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


15:55:43.941 [debug] Generated fold cases after transformation: [{:->, [line: 53], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:%{}, [], [variant: :empty]}], []]}]

15:55:43.941 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 52], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 53], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}

15:55:43.941 [debug] Fold expression: {:list, [line: 46], nil}, opts: [], cases: [{:->, [line: 47], [[{:case, [line: 47], [{:cons, [line: 47], [{:head, [line: 47], nil}, {:tail, [line: 47], nil}]}]}], {:if, [line: 48], [{{:., [line: 48], [{:predicate, [line: 48], nil}]}, [line: 48], [{:head, [line: 48], nil}]}, [do: {{:., [line: 49], [{:__aliases__, [line: 49], [:List]}, :cons]}, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}, else: {:recu, [line: 51], [{:tail, [line: 51], nil}]}]]}]}, {:->, [line: 54], [[{:case, [line: 54], [{:null, [line: 54], []}]}], {{:., [line: 55], [{:__aliases__, [line: 55], [:List]}, :null]}, [line: 55], []}]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/simple_graph.ex:52: SimpleGraph.neighbors/2

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/parents.ex:38: Parents.filter_tree/2


15:55:43.941 [debug] Fold expression: {:graph, [line: 82], nil}, opts: [], cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertices, [line: 83], nil}, {:edges, [line: 83], nil}]}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:case, [line: 90], [{:empty, [line: 90], []}]}], false]}]

15:55:43.942 [debug] Extracting cases from list: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertices, [line: 83], nil}, {:edges, [line: 83], nil}]}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:case, [line: 90], [{:empty, [line: 90], []}]}], false]}]

15:55:43.942 [debug] Extracting cases from list: [{:->, [line: 47], [[{:case, [line: 47], [{:cons, [line: 47], [{:head, [line: 47], nil}, {:tail, [line: 47], nil}]}]}], {:if, [line: 48], [{{:., [line: 48], [{:predicate, [line: 48], nil}]}, [line: 48], [{:head, [line: 48], nil}]}, [do: {{:., [line: 49], [{:__aliases__, [line: 49], [:List]}, :cons]}, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}, else: {:recu, [line: 51], [{:tail, [line: 51], nil}]}]]}]}, {:->, [line: 54], [[{:case, [line: 54], [{:null, [line: 54], []}]}], {{:., [line: 55], [{:__aliases__, [line: 55], [:List]}, :null]}, [line: 55], []}]}]

15:55:43.942 [debug] Extracted fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertices, [line: 83], nil}, {:edges, [line: 83], nil}]}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:case, [line: 90], [{:empty, [line: 90], []}]}], false]}]

15:55:43.942 [debug] Generating fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertices, [line: 83], nil}, {:edges, [line: 83], nil}]}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:case, [line: 90], [{:empty, [line: 90], []}]}], false]}]

15:55:43.942 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

15:55:43.942 [debug] Transforming recursive refs:
Body: {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}
Bindings: [vertices: true, edges: true]
State: nil


15:55:43.942 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:55:43.942 [debug] Transforming recursive refs:
Body: false
Bindings: []
State: nil


15:55:43.942 [debug] Extracted fold cases: [{:->, [line: 47], [[{:case, [line: 47], [{:cons, [line: 47], [{:head, [line: 47], nil}, {:tail, [line: 47], nil}]}]}], {:if, [line: 48], [{{:., [line: 48], [{:predicate, [line: 48], nil}]}, [line: 48], [{:head, [line: 48], nil}]}, [do: {{:., [line: 49], [{:__aliases__, [line: 49], [:List]}, :cons]}, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}, else: {:recu, [line: 51], [{:tail, [line: 51], nil}]}]]}]}, {:->, [line: 54], [[{:case, [line: 54], [{:null, [line: 54], []}]}], {{:., [line: 55], [{:__aliases__, [line: 55], [:List]}, :null]}, [line: 55], []}]}]

15:55:43.942 [debug] Generated fold cases after transformation: [{:->, [line: 83], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:%{}, [], [variant: :empty]}], false]}]

15:55:43.942 [debug] Fold expression: {:tree, [line: 56], nil}, opts: [with: {:%{}, [line: 56], [{0, 1}]}], cases: [{:->, [line: 57], [[{:case, [line: 57], [{:node, [line: 57], [{:value, [line: 57], nil}, {:left, [line: 57], nil}, {:right, [line: 57], nil}]}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:case, [line: 69], [{:leaf, [line: 69], []}]}], {0, {:state, [line: 70], nil}}]}]

15:55:43.942 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 82], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 83], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:%{}, [], [variant: :empty]}], false]}]]]}]}]}]}

15:55:43.942 [debug] Generating fold cases: [{:->, [line: 47], [[{:case, [line: 47], [{:cons, [line: 47], [{:head, [line: 47], nil}, {:tail, [line: 47], nil}]}]}], {:if, [line: 48], [{{:., [line: 48], [{:predicate, [line: 48], nil}]}, [line: 48], [{:head, [line: 48], nil}]}, [do: {{:., [line: 49], [{:__aliases__, [line: 49], [:List]}, :cons]}, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}, else: {:recu, [line: 51], [{:tail, [line: 51], nil}]}]]}]}, {:->, [line: 54], [[{:case, [line: 54], [{:null, [line: 54], []}]}], {{:., [line: 55], [{:__aliases__, [line: 55], [:List]}, :null]}, [line: 55], []}]}]

15:55:43.942 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

15:55:43.943 [debug] Transforming recursive refs:
Body: {:if, [line: 48], [{{:., [line: 48], [{:predicate, [line: 48], nil}]}, [line: 48], [{:head, [line: 48], nil}]}, [do: {{:., [line: 49], [{:__aliases__, [line: 49], [:List]}, :cons]}, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}, else: {:recu, [line: 51], [{:tail, [line: 51], nil}]}]]}
Bindings: [head: true, tail: true]
State: nil


15:55:43.943 [debug] Processing recursive reference: {:recu, [line: 49], [{:tail, [line: 49], nil}]}

15:55:43.943 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/simple_graph.ex:82: SimpleGraph.has_path?/3


15:55:43.943 [debug] Processing recursive reference: {:recu, [line: 51], [{:tail, [line: 51], nil}]}

15:55:43.943 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.943 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

15:55:43.943 [debug] Transforming recursive refs:
Body: {{:., [line: 55], [{:__aliases__, [line: 55], [:List]}, :null]}, [line: 55], []}
Bindings: []
State: nil


15:55:43.943 [debug] Extracting cases from list: [{:->, [line: 57], [[{:case, [line: 57], [{:node, [line: 57], [{:value, [line: 57], nil}, {:left, [line: 57], nil}, {:right, [line: 57], nil}]}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:case, [line: 69], [{:leaf, [line: 69], []}]}], {0, {:state, [line: 70], nil}}]}]

15:55:43.943 [debug] Generated fold cases after transformation: [{:->, [line: 47], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 48], [{{:., [line: 48], [{:predicate, [line: 48], nil}]}, [line: 48], [{:head, [line: 48], nil}]}, [do: {{:., [line: 49], [{:__aliases__, [line: 49], [:List]}, :cons]}, [line: 49], [{:head, [line: 49], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, else: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]]}]}, {:->, [line: 54], [[{:%{}, [], [variant: :null]}], {{:., [line: 55], [{:__aliases__, [line: 55], [:List]}, :null]}, [line: 55], []}]}]

15:55:43.943 [debug] Fold expression: {:graph, [line: 25], nil}, opts: [], cases: [{:->, [line: 26], [[{:case, [line: 26], [{:graph, [line: 26], [{:vertex_map, [line: 26], nil}, {:edge_list, [line: 26], nil}, {:metadata, [line: 26], nil}]}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:case, [line: 34], [{:empty, [line: 34], []}]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]

15:55:43.943 [debug] Extracted fold cases: [{:->, [line: 57], [[{:case, [line: 57], [{:node, [line: 57], [{:value, [line: 57], nil}, {:left, [line: 57], nil}, {:right, [line: 57], nil}]}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:case, [line: 69], [{:leaf, [line: 69], []}]}], {0, {:state, [line: 70], nil}}]}]

15:55:43.943 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 46], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 47], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 48], [{{:., [line: 48], [{:predicate, [line: 48], nil}]}, [line: 48], [{:head, [line: 48], nil}]}, [do: {{:., [line: 49], [{:__aliases__, [line: 49], [:List]}, :cons]}, [line: 49], [{:head, [line: 49], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, ...}, {...}]], [{:value, [], ...}]}]}]}, else: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]]}]}, {:->, [line: 54], [[{:%{}, [], [variant: :null]}], {{:., [line: 55], [{:__aliases__, [line: 55], [:List]}, :null]}, [line: 55], []}]}]]]}]}]}]}

15:55:43.943 [debug] Extracting cases from list: [{:->, [line: 26], [[{:case, [line: 26], [{:graph, [line: 26], [{:vertex_map, [line: 26], nil}, {:edge_list, [line: 26], nil}, {:metadata, [line: 26], nil}]}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:case, [line: 34], [{:empty, [line: 34], []}]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:46: Chain.filter/2


15:55:43.944 [debug] Generating fold cases: [{:->, [line: 57], [[{:case, [line: 57], [{:node, [line: 57], [{:value, [line: 57], nil}, {:left, [line: 57], nil}, {:right, [line: 57], nil}]}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:case, [line: 69], [{:leaf, [line: 69], []}]}], {0, {:state, [line: 70], nil}}]}]

15:55:43.944 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

15:55:43.944 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:recu, [line: 58], [{:left, [line: 58], nil}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:recu, [line: 59], [{:right, [line: 59], nil}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}
Bindings: [value: true, left: true, right: true]
State: {:%{}, [line: 56], [{0, 1}]}


15:55:43.944 [debug] Processing recursive reference: {:recu, [line: 58], [{:left, [line: 58], nil}]}

15:55:43.944 [debug] Fold expression: {:list, [line: 61], nil}, opts: [with: {:initial, [line: 61], nil}], cases: [{:->, [line: 62], [[{:case, [line: 62], [{:cons, [line: 62], [{:head, [line: 62], nil}, {:tail, [line: 62], nil}]}]}], {:__block__, [], [{:=, [line: 63], [{{:tail_result, [line: 63], nil}, {:new_acc, [line: 63], nil}}, {:recu, [line: 63], [{:tail, [line: 63], nil}]}]}, {:=, [line: 64], [{:result, [line: 64], nil}, {{:., [line: 64], [{:reducer_fn, [line: 64], nil}]}, [line: 64], [{:head, [line: 64], nil}, {:new_acc, [line: 64], nil}]}]}, {{:result, [line: 65], nil}, {:result, [line: 65], nil}}]}]}, {:->, [line: 67], [[{:case, [line: 67], [{:null, [line: 67], []}]}], {{:state, [line: 68], nil}, {:state, [line: 68], nil}}]}]

15:55:43.944 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.944 [debug] Processing recursive reference: {:recu, [line: 59], [{:right, [line: 59], nil}]}

15:55:43.944 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.944 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

15:55:43.944 [debug] Extracted fold cases: [{:->, [line: 26], [[{:case, [line: 26], [{:graph, [line: 26], [{:vertex_map, [line: 26], nil}, {:edge_list, [line: 26], nil}, {:metadata, [line: 26], nil}]}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:case, [line: 34], [{:empty, [line: 34], []}]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]

15:55:43.944 [debug] Transforming recursive refs:
Body: {0, {:state, [line: 70], nil}}
Bindings: []
State: {:%{}, [line: 56], [{0, 1}]}


15:55:43.944 [debug] Extracting cases from list: [{:->, [line: 62], [[{:case, [line: 62], [{:cons, [line: 62], [{:head, [line: 62], nil}, {:tail, [line: 62], nil}]}]}], {:__block__, [], [{:=, [line: 63], [{{:tail_result, [line: 63], nil}, {:new_acc, [line: 63], nil}}, {:recu, [line: 63], [{:tail, [line: 63], nil}]}]}, {:=, [line: 64], [{:result, [line: 64], nil}, {{:., [line: 64], [{:reducer_fn, [line: 64], nil}]}, [line: 64], [{:head, [line: 64], nil}, {:new_acc, [line: 64], nil}]}]}, {{:result, [line: 65], nil}, {:result, [line: 65], nil}}]}]}, {:->, [line: 67], [[{:case, [line: 67], [{:null, [line: 67], []}]}], {{:state, [line: 68], nil}, {:state, [line: 68], nil}}]}]

15:55:43.944 [debug] Extracted fold cases: [{:->, [line: 62], [[{:case, [line: 62], [{:cons, [line: 62], [{:head, [line: 62], nil}, {:tail, [line: 62], nil}]}]}], {:__block__, [], [{:=, [line: 63], [{{:tail_result, [line: 63], nil}, {:new_acc, [line: 63], nil}}, {:recu, [line: 63], [{:tail, [line: 63], nil}]}]}, {:=, [line: 64], [{:result, [line: 64], nil}, {{:., [line: 64], [{:reducer_fn, [line: 64], nil}]}, [line: 64], [{:head, [line: 64], nil}, {:new_acc, [line: 64], nil}]}]}, {{:result, [line: 65], nil}, {:result, [line: 65], nil}}]}]}, {:->, [line: 67], [[{:case, [line: 67], [{:null, [line: 67], []}]}], {{:state, [line: 68], nil}, {:state, [line: 68], nil}}]}]

15:55:43.945 [debug] Generating fold cases: [{:->, [line: 26], [[{:case, [line: 26], [{:graph, [line: 26], [{:vertex_map, [line: 26], nil}, {:edge_list, [line: 26], nil}, {:metadata, [line: 26], nil}]}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:case, [line: 34], [{:empty, [line: 34], []}]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]

15:55:43.945 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

15:55:43.945 [debug] Generating fold cases: [{:->, [line: 62], [[{:case, [line: 62], [{:cons, [line: 62], [{:head, [line: 62], nil}, {:tail, [line: 62], nil}]}]}], {:__block__, [], [{:=, [line: 63], [{{:tail_result, [line: 63], nil}, {:new_acc, [line: 63], nil}}, {:recu, [line: 63], [{:tail, [line: 63], nil}]}]}, {:=, [line: 64], [{:result, [line: 64], nil}, {{:., [line: 64], [{:reducer_fn, [line: 64], nil}]}, [line: 64], [{:head, [line: 64], nil}, {:new_acc, [line: 64], nil}]}]}, {{:result, [line: 65], nil}, {:result, [line: 65], nil}}]}]}, {:->, [line: 67], [[{:case, [line: 67], [{:null, [line: 67], []}]}], {{:state, [line: 68], nil}, {:state, [line: 68], nil}}]}]

15:55:43.945 [debug] Transforming recursive refs:
Body: {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:55:43.945 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:55:43.945 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

15:55:43.945 [debug] Generated fold cases after transformation: [{:->, [line: 57], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:do_fold, [], [{:left, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:do_fold, [], [{:right, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [{:__aliases__, [line: 63], [:Map]}, :merge]}, [line: 63], [{:left_counts, [line: 63], nil}, {:right_counts, [line: 63], nil}, {:fn, [line: 63], [{:->, [line: 63], [[{:_k, [line: 63], nil}, {:v1, [line: 63], nil}, {:v2, [line: 63], nil}], {:+, [line: 63], [{:v1, [line: 63], nil}, {:v2, [line: 63], nil}]}]}]}]}, {{:., [line: 64], [{:__aliases__, [line: 64], [:Map]}, :new]}, [line: 64], [{:fn, [line: 64], [{:->, [line: 64], [[{{:k, [line: 64], nil}, {:v, [line: 64], nil}}], {{:+, [line: 64], [{:k, [line: 64], nil}, 1]}, {:v, [line: 64], nil}}]}]}]}]}, {{:., [line: 65], [{:__aliases__, [line: 65], [:Map]}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:%{}, [], [variant: :leaf]}], {0, {:state, [line: 70], nil}}]}]

15:55:43.945 [debug] Transforming recursive refs:
Body: {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}
Bindings: []
State: nil


15:55:43.945 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 63], [{{:tail_result, [line: 63], nil}, {:new_acc, [line: 63], nil}}, {:recu, [line: 63], [{:tail, [line: 63], nil}]}]}, {:=, [line: 64], [{:result, [line: 64], nil}, {{:., [line: 64], [{:reducer_fn, [line: 64], nil}]}, [line: 64], [{:head, [line: 64], nil}, {:new_acc, [line: 64], nil}]}]}, {{:result, [line: 65], nil}, {:result, [line: 65], nil}}]}
Bindings: [head: true, tail: true]
State: {:initial, [line: 61], nil}


15:55:43.945 [debug] Processing recursive reference: {:recu, [line: 63], [{:tail, [line: 63], nil}]}

15:55:43.945 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.945 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

15:55:43.945 [debug] Transforming recursive refs:
Body: {{:state, [line: 68], nil}, {:state, [line: 68], nil}}
Bindings: []
State: {:initial, [line: 61], nil}


15:55:43.945 [debug] Generated fold cases after transformation: [{:->, [line: 26], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:%{}, [], [variant: :empty]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]

15:55:43.945 [debug] Generated fold cases after transformation: [{:->, [line: 62], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [], [{:=, [line: 63], [{{:tail_result, [line: 63], nil}, {:new_acc, [line: 63], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 64], [{:result, [line: 64], nil}, {{:., [line: 64], [{:reducer_fn, [line: 64], nil}]}, [line: 64], [{:head, [line: 64], nil}, {:new_acc, [line: 64], nil}]}]}, {{:result, [line: 65], nil}, {:result, [line: 65], nil}}]}]}, {:->, [line: 67], [[{:%{}, [], [variant: :null]}], {{:state, [line: 68], nil}, {:state, [line: 68], nil}}]}]

15:55:43.945 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 25], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 26], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {{:., [line: 27], [{:__aliases__, [line: 27], [:Graph]}, :graph]}, [line: 27], [{{:., [line: 28], [{:__aliases__, [line: 28], [:Map]}, :put]}, [line: 28], [{:vertex_map, [line: 28], nil}, {:id, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [line: 28], [:Graph]}, :vertex]}, [line: 28], [{:id, [line: 28], nil}, {:props, [line: 28], nil}, {{:., [line: 28], [{:__aliases__, [...], ...}, :empty]}, [line: 28], []}]}]}, {:edge_list, [line: 29], nil}, {:metadata, [line: 30], nil}]}]}, {:->, [line: 34], [[{:%{}, [], [variant: :empty]}], {{:., [line: 35], [{:__aliases__, [line: 35], [:Graph]}, :graph]}, [line: 35], [{:%{}, [line: 36], [{{:id, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, [line: 36], [:Graph]}, :vertex]}, [line: 36], [{:id, [line: 36], nil}, {:props, [line: 36], nil}, {{:., [line: 36], [{:__aliases__, ...}, :empty]}, [line: 36], []}]}}]}, {{:., [line: 37], [{:__aliases__, [line: 37], [:Graph]}, :empty]}, [line: 37], []}, {:%{}, [line: 38], [type: :directed]}]}]}]]]}]}]}]}

15:55:43.945 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 56], nil}, {:%{}, [line: 56], [{0, 1}]}, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 57], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 58], [{{:_, [line: 58], nil}, {:left_counts, [line: 58], nil}}, {:do_fold, [], [{:left, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 59], [{{:_, [line: 59], nil}, {:right_counts, [line: 59], nil}}, {:do_fold, [], [{:right, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, ...}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 62], [{:new_counts, [line: 62], nil}, {:|>, [line: 65], [{:|>, [line: 64], [{{:., [line: 63], [...]}, [line: 63], [{...}, ...]}, {{:., [...], ...}, [line: 64], [...]}]}, {{:., [line: 65], [{:__aliases__, [...], ...}, :put]}, [line: 65], [0, 1]}]}]}, {{:value, [line: 67], nil}, {:new_counts, [line: 67], nil}}]}]}, {:->, [line: 69], [[{:%{}, [], [variant: :leaf]}], {0, {:state, [line: 70], nil}}]}]]]}]}]}]}

15:55:43.945 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 61], nil}, {:initial, [line: 61], nil}, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 62], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [], [{:=, [line: 63], [{{:tail_result, [line: 63], nil}, {:new_acc, [line: 63], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 64], [{:result, [line: 64], nil}, {{:., [line: 64], [{:reducer_fn, [line: 64], nil}]}, [line: 64], [{:head, [line: 64], nil}, {:new_acc, [line: 64], nil}]}]}, {{:result, [line: 65], nil}, {:result, [line: 65], nil}}]}]}, {:->, [line: 67], [[{:%{}, [], [variant: :null]}], {{:state, [line: 68], nil}, {:state, [line: 68], nil}}]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:25: PropGraph.add_vertex/3

warning: variable "tail_result" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:63: Chain.reduce/3


15:55:43.946 [debug] Fold expression: {:list, [line: 74], nil}, opts: [], cases: [{:->, [line: 75], [[{:case, [line: 75], [{:cons, [line: 75], [{:head, [line: 75], nil}, {:tail, [line: 75], nil}]}]}], {:+, [line: 75], [1, {:recu, [line: 75], [{:tail, [line: 75], nil}]}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:null, [line: 76], []}]}], 0]}]

15:55:43.946 [debug] Extracting cases from list: [{:->, [line: 75], [[{:case, [line: 75], [{:cons, [line: 75], [{:head, [line: 75], nil}, {:tail, [line: 75], nil}]}]}], {:+, [line: 75], [1, {:recu, [line: 75], [{:tail, [line: 75], nil}]}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:null, [line: 76], []}]}], 0]}]

15:55:43.946 [debug] Fold expression: {:graph, [line: 46], nil}, opts: [], cases: [{:->, [line: 47], [[{:case, [line: 47], [{:graph, [line: 47], [{:vertex_map, [line: 47], nil}, {:edge_list, [line: 47], nil}, {:metadata, [line: 47], nil}]}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:case, [line: 65], [{:empty, [line: 65], []}]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

15:55:43.946 [debug] Extracted fold cases: [{:->, [line: 75], [[{:case, [line: 75], [{:cons, [line: 75], [{:head, [line: 75], nil}, {:tail, [line: 75], nil}]}]}], {:+, [line: 75], [1, {:recu, [line: 75], [{:tail, [line: 75], nil}]}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:null, [line: 76], []}]}], 0]}]

15:55:43.946 [debug] Generating fold cases: [{:->, [line: 75], [[{:case, [line: 75], [{:cons, [line: 75], [{:head, [line: 75], nil}, {:tail, [line: 75], nil}]}]}], {:+, [line: 75], [1, {:recu, [line: 75], [{:tail, [line: 75], nil}]}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:null, [line: 76], []}]}], 0]}]

15:55:43.946 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

15:55:43.946 [debug] Transforming recursive refs:
Body: {:+, [line: 75], [1, {:recu, [line: 75], [{:tail, [line: 75], nil}]}]}
Bindings: [head: true, tail: true]
State: nil


15:55:43.946 [debug] Processing recursive reference: {:recu, [line: 75], [{:tail, [line: 75], nil}]}

15:55:43.946 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.946 [debug] Extracting cases from list: [{:->, [line: 47], [[{:case, [line: 47], [{:graph, [line: 47], [{:vertex_map, [line: 47], nil}, {:edge_list, [line: 47], nil}, {:metadata, [line: 47], nil}]}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:case, [line: 65], [{:empty, [line: 65], []}]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

15:55:43.946 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

15:55:43.946 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil


15:55:43.946 [debug] Generated fold cases after transformation: [{:->, [line: 75], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:+, [line: 75], [1, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 76], [[{:%{}, [], [variant: :null]}], 0]}]

15:55:43.946 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 74], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 75], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:+, [line: 75], [1, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 76], [[{:%{}, [], [variant: :null]}], 0]}]]]}]}]}]}

15:55:43.946 [debug] Fold expression: {:tree, [line: 128], nil}, opts: [], cases: [{:->, [line: 129], [[{:case, [line: 129], [{:node, [line: 129], [{:value, [line: 129], nil}, {:left, [line: 129], nil}, {:right, [line: 129], nil}]}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:case, [line: 134], [{:leaf, [line: 134], []}]}], []]}]

15:55:43.946 [debug] Extracted fold cases: [{:->, [line: 47], [[{:case, [line: 47], [{:graph, [line: 47], [{:vertex_map, [line: 47], nil}, {:edge_list, [line: 47], nil}, {:metadata, [line: 47], nil}]}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:case, [line: 65], [{:empty, [line: 65], []}]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]
warning: variable "head" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:74: Chain.length/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:74: Chain.length/1


15:55:43.947 [debug] Extracting cases from list: [{:->, [line: 129], [[{:case, [line: 129], [{:node, [line: 129], [{:value, [line: 129], nil}, {:left, [line: 129], nil}, {:right, [line: 129], nil}]}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:case, [line: 134], [{:leaf, [line: 134], []}]}], []]}]

15:55:43.947 [debug] Fold expression: {:obj, [line: 73], nil}, opts: [], cases: [{:->, [line: 74], [[{:case, [line: 74], [{:object, [line: 74], [{:props, [line: 74], nil}, {:proto, [line: 74], nil}]}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}]}, {:->, [line: 80], [[{:case, [line: 80], [{:null, [line: 80], []}]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

15:55:43.947 [debug] Generating fold cases: [{:->, [line: 47], [[{:case, [line: 47], [{:graph, [line: 47], [{:vertex_map, [line: 47], nil}, {:edge_list, [line: 47], nil}, {:metadata, [line: 47], nil}]}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:case, [line: 65], [{:empty, [line: 65], []}]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

15:55:43.947 [debug] Extracted fold cases: [{:->, [line: 129], [[{:case, [line: 129], [{:node, [line: 129], [{:value, [line: 129], nil}, {:left, [line: 129], nil}, {:right, [line: 129], nil}]}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:case, [line: 134], [{:leaf, [line: 134], []}]}], []]}]

15:55:43.947 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

15:55:43.947 [debug] Fold expression: {:list, [line: 82], nil}, opts: [with: {{:., [line: 82], [{:__aliases__, [line: 82], [:List]}, :null]}, [line: 82], []}], cases: [{:->, [line: 83], [[{:case, [line: 83], [{:cons, [line: 83], [{:head, [line: 83], nil}, {:tail, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{{:tail_result, [line: 84], nil}, {:acc, [line: 84], nil}}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, {:=, [line: 85], [{:result, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:List]}, :cons]}, [line: 85], [{:head, [line: 85], nil}, {:acc, [line: 85], nil}]}]}, {{:result, [line: 86], nil}, {:result, [line: 86], nil}}]}]}, {:->, [line: 88], [[{:case, [line: 88], [{:null, [line: 88], []}]}], {{:state, [line: 89], nil}, {:state, [line: 89], nil}}]}]

15:55:43.947 [debug] Generating fold cases: [{:->, [line: 129], [[{:case, [line: 129], [{:node, [line: 129], [{:value, [line: 129], nil}, {:left, [line: 129], nil}, {:right, [line: 129], nil}]}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:case, [line: 134], [{:leaf, [line: 134], []}]}], []]}]

15:55:43.947 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:55:43.947 [debug] Generated pattern: {:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]} for variant: :node

15:55:43.947 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:55:43.947 [debug] Transforming recursive refs:
Body: {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}
Bindings: []
State: nil


15:55:43.947 [debug] Extracting cases from list: [{:->, [line: 83], [[{:case, [line: 83], [{:cons, [line: 83], [{:head, [line: 83], nil}, {:tail, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{{:tail_result, [line: 84], nil}, {:acc, [line: 84], nil}}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, {:=, [line: 85], [{:result, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:List]}, :cons]}, [line: 85], [{:head, [line: 85], nil}, {:acc, [line: 85], nil}]}]}, {{:result, [line: 86], nil}, {:result, [line: 86], nil}}]}]}, {:->, [line: 88], [[{:case, [line: 88], [{:null, [line: 88], []}]}], {{:state, [line: 89], nil}, {:state, [line: 89], nil}}]}]

15:55:43.947 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:recu, [line: 130], [{:left, [line: 130], nil}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:recu, [line: 131], [{:right, [line: 131], nil}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}
Bindings: [value: true, left: true, right: true]
State: nil


15:55:43.947 [debug] Processing recursive reference: {:recu, [line: 130], [{:left, [line: 130], nil}]}

15:55:43.947 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.947 [debug] Extracted fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:cons, [line: 83], [{:head, [line: 83], nil}, {:tail, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{{:tail_result, [line: 84], nil}, {:acc, [line: 84], nil}}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, {:=, [line: 85], [{:result, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:List]}, :cons]}, [line: 85], [{:head, [line: 85], nil}, {:acc, [line: 85], nil}]}]}, {{:result, [line: 86], nil}, {:result, [line: 86], nil}}]}]}, {:->, [line: 88], [[{:case, [line: 88], [{:null, [line: 88], []}]}], {{:state, [line: 89], nil}, {:state, [line: 89], nil}}]}]

15:55:43.947 [debug] Processing recursive reference: {:recu, [line: 131], [{:right, [line: 131], nil}]}

15:55:43.947 [debug] Extracting cases from list: [{:->, [line: 74], [[{:case, [line: 74], [{:object, [line: 74], [{:props, [line: 74], nil}, {:proto, [line: 74], nil}]}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}]}, {:->, [line: 80], [[{:case, [line: 80], [{:null, [line: 80], []}]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

15:55:43.947 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.947 [debug] Generated pattern: {:%{}, [], [variant: :leaf]} for variant: :leaf

15:55:43.947 [debug] Generated fold cases after transformation: [{:->, [line: 47], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, [line: 49], nil}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{:reverse_edge, [line: 50], nil}, {{:., [line: 50], [{:__aliases__, [line: 50], [:Graph]}, :edge]}, [line: 50], [{:to_id, [line: 50], nil}, {:from_id, [line: 50], nil}, {:weight, [line: 50], nil}, {:props, [line: 50], nil}]}]}, [{:new_edge, [line: 51], nil}, {:reverse_edge, [line: 51], nil}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, [line: 59], [variant: :empty]}], {:hd, [line: 59], [{:all_edges, [line: 59], nil}]}]}, {:->, [line: 60], [[{:_, [line: 60], nil}], {:++, [line: 60], [{:all_edges, [line: 60], nil}, {{:., [line: 60], [{:__aliases__, [line: 60], [:List]}, :wrap]}, [line: 60], [{:edge_list, [line: 60], nil}]}]}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:%{}, [], [variant: :empty]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]

15:55:43.947 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


15:55:43.947 [debug] Generating fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:cons, [line: 83], [{:head, [line: 83], nil}, {:tail, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{{:tail_result, [line: 84], nil}, {:acc, [line: 84], nil}}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, {:=, [line: 85], [{:result, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:List]}, :cons]}, [line: 85], [{:head, [line: 85], nil}, {:acc, [line: 85], nil}]}]}, {{:result, [line: 86], nil}, {:result, [line: 86], nil}}]}]}, {:->, [line: 88], [[{:case, [line: 88], [{:null, [line: 88], []}]}], {{:state, [line: 89], nil}, {:state, [line: 89], nil}}]}]

15:55:43.948 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

15:55:43.948 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 84], [{{:tail_result, [line: 84], nil}, {:acc, [line: 84], nil}}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, {:=, [line: 85], [{:result, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:List]}, :cons]}, [line: 85], [{:head, [line: 85], nil}, {:acc, [line: 85], nil}]}]}, {{:result, [line: 86], nil}, {:result, [line: 86], nil}}]}
Bindings: [head: true, tail: true]
State: {{:., [line: 82], [{:__aliases__, [line: 82], [:List]}, :null]}, [line: 82], []}


15:55:43.948 [debug] Generated fold cases after transformation: [{:->, [line: 129], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:%{}, [], [variant: :leaf]}], []]}]

15:55:43.948 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 46], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 47], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 48], [{:all_edges, [line: 48], nil}, {:if, [line: 49], [{:==, [line: 49], [{{:., [line: 49], [{:metadata, ...}, :type]}, [no_parens: true, line: 49], []}, :undirected]}, [do: {:__block__, [], [{:=, [line: 50], [{...}, ...]}, [{:new_edge, [...], ...}, {:reverse_edge, ...}]]}, else: [{:new_edge, [line: 53], nil}]]]}]}, {:=, [line: 57], [{:new_edge_list, [line: 57], nil}, {:case, [line: 58], [{:edge_list, [line: 58], nil}, [do: [{:->, [line: 59], [[{:%{}, ...}], {:hd, ...}]}, {:->, [line: 60], [[{...}], {...}]}]]]}]}, {{:., [line: 63], [{:__aliases__, [line: 63], [:Graph]}, :graph]}, [line: 63], [{:vertex_map, [line: 63], nil}, {:new_edge_list, [line: 63], nil}, {:metadata, [line: 63], nil}]}]}]}, {:->, [line: 65], [[{:%{}, [], [variant: :empty]}], {{:., [line: 66], [{:__aliases__, [line: 66], [:Graph]}, :graph]}, [line: 66], [{:%{}, [line: 66], []}, {:new_edge, [line: 66], nil}, {:%{}, [line: 66], [type: :directed]}]}]}]]]}]}]}]}

15:55:43.948 [debug] Processing recursive reference: {:recu, [line: 84], [{:tail, [line: 84], nil}]}

15:55:43.948 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.948 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

15:55:43.948 [debug] Extracted fold cases: [{:->, [line: 74], [[{:case, [line: 74], [{:object, [line: 74], [{:props, [line: 74], nil}, {:proto, [line: 74], nil}]}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}]}, {:->, [line: 80], [[{:case, [line: 80], [{:null, [line: 80], []}]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

15:55:43.948 [debug] Transforming recursive refs:
Body: {{:state, [line: 89], nil}, {:state, [line: 89], nil}}
Bindings: []
State: {{:., [line: 82], [{:__aliases__, [line: 82], [:List]}, :null]}, [line: 82], []}

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:46: PropGraph.add_edge/5


15:55:43.948 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 128], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 129], [[{:%{}, [], [variant: :node, value: {:value, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:__block__, [], [{:=, [line: 130], [{:left_values, [line: 130], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 131], [{:right_values, [line: 131], nil}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, ...}]], [{:value, [], BenBen}]}]}]}, {:++, [line: 132], [{:left_values, [line: 132], nil}, {:++, [line: 132], [[{:value, [line: 132], nil}], {:right_values, [line: 132], nil}]}]}]}]}, {:->, [line: 134], [[{:%{}, [], [variant: :leaf]}], []]}]]]}]}]}]}

15:55:43.948 [debug] Generated fold cases after transformation: [{:->, [line: 83], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [], [{:=, [line: 84], [{{:tail_result, [line: 84], nil}, {:acc, [line: 84], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 85], [{:result, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:List]}, :cons]}, [line: 85], [{:head, [line: 85], nil}, {:acc, [line: 85], nil}]}]}, {{:result, [line: 86], nil}, {:result, [line: 86], nil}}]}]}, {:->, [line: 88], [[{:%{}, [], [variant: :null]}], {{:state, [line: 89], nil}, {:state, [line: 89], nil}}]}]

15:55:43.948 [debug] Fold expression: {:graph, [line: 72], nil}, opts: [], cases: [{:->, [line: 73], [[{:case, [line: 73], [{:graph, [line: 73], [{:vertex_map, [line: 73], nil}, {:edge_list, [line: 73], nil}, {:metadata, [line: 73], nil}]}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:empty, [line: 76], []}]}], 0]}]

15:55:43.948 [debug] Extracting cases from list: [{:->, [line: 73], [[{:case, [line: 73], [{:graph, [line: 73], [{:vertex_map, [line: 73], nil}, {:edge_list, [line: 73], nil}, {:metadata, [line: 73], nil}]}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:empty, [line: 76], []}]}], 0]}]

15:55:43.948 [debug] Extracted fold cases: [{:->, [line: 73], [[{:case, [line: 73], [{:graph, [line: 73], [{:vertex_map, [line: 73], nil}, {:edge_list, [line: 73], nil}, {:metadata, [line: 73], nil}]}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:empty, [line: 76], []}]}], 0]}]

15:55:43.948 [debug] Generating fold cases: [{:->, [line: 73], [[{:case, [line: 73], [{:graph, [line: 73], [{:vertex_map, [line: 73], nil}, {:edge_list, [line: 73], nil}, {:metadata, [line: 73], nil}]}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:case, [line: 76], [{:empty, [line: 76], []}]}], 0]}]

15:55:43.948 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

15:55:43.948 [debug] Transforming recursive refs:
Body: {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:55:43.948 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:55:43.948 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil


15:55:43.948 [debug] Generated fold cases after transformation: [{:->, [line: 73], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:%{}, [], [variant: :empty]}], 0]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/parents.ex:128: Parents.collect_values/1


15:55:43.948 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 72], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 73], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:map_size, [line: 74], [{:vertex_map, [line: 74], nil}]}]}, {:->, [line: 76], [[{:%{}, [], [variant: :empty]}], 0]}]]]}]}]}]}

15:55:43.948 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 82], nil}, {{:., [line: 82], [{:__aliases__, [line: 82], [:List]}, :null]}, [line: 82], []}, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 83], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:__block__, [], [{:=, [line: 84], [{{:tail_result, [line: 84], nil}, {:acc, [line: 84], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:=, [line: 85], [{:result, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:List]}, :cons]}, [line: 85], [{:head, [line: 85], nil}, {:acc, [line: 85], nil}]}]}, {{:result, [line: 86], nil}, {:result, [line: 86], nil}}]}]}, {:->, [line: 88], [[{:%{}, [], [variant: :null]}], {{:state, [line: 89], nil}, {:state, [line: 89], nil}}]}]]]}]}]}]}
warning: variable "edge_list" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:72: PropGraph.vertex_count/1


15:55:43.948 [debug] Generating fold cases: [{:->, [line: 74], [[{:case, [line: 74], [{:object, [line: 74], [{:props, [line: 74], nil}, {:proto, [line: 74], nil}]}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}]}, {:->, [line: 80], [[{:case, [line: 80], [{:null, [line: 80], []}]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

15:55:43.949 [debug] Generated pattern: {:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]} for variant: :object
warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:72: PropGraph.vertex_count/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:72: PropGraph.vertex_count/1

warning: variable "tail_result" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:84: Chain.reverse/1


15:55:43.949 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:recu, [line: 78], [{:proto, [line: 78], nil}]}]}
Bindings: [props: true, proto: true]
State: nil


15:55:43.949 [debug] Processing recursive reference: {:recu, [line: 78], [{:proto, [line: 78], nil}]}

15:55:43.949 [debug] Transformed recursive reference to: {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.949 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

15:55:43.949 [debug] Fold expression: {:list1, [line: 95], nil}, opts: [], cases: [{:->, [line: 96], [[{:case, [line: 96], [{:cons, [line: 96], [{:head, [line: 96], nil}, {:tail, [line: 96], nil}]}]}], {{:., [line: 97], [{:__aliases__, [line: 97], [:List]}, :cons]}, [line: 97], [{:head, [line: 97], nil}, {:recu, [line: 97], [{:tail, [line: 97], nil}]}]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:list2, [line: 100], nil}]}]

15:55:43.949 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}
Bindings: []
State: nil


15:55:43.949 [debug] Fold expression: {:graph, [line: 82], nil}, opts: [], cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertex_map, [line: 83], nil}, {:edge_list, [line: 83], nil}, {:metadata, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:case, [line: 93], [{:empty, [line: 93], []}]}], 0]}]

15:55:43.949 [debug] Extracting cases from list: [{:->, [line: 96], [[{:case, [line: 96], [{:cons, [line: 96], [{:head, [line: 96], nil}, {:tail, [line: 96], nil}]}]}], {{:., [line: 97], [{:__aliases__, [line: 97], [:List]}, :cons]}, [line: 97], [{:head, [line: 97], nil}, {:recu, [line: 97], [{:tail, [line: 97], nil}]}]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:list2, [line: 100], nil}]}]

15:55:43.949 [debug] Extracted fold cases: [{:->, [line: 96], [[{:case, [line: 96], [{:cons, [line: 96], [{:head, [line: 96], nil}, {:tail, [line: 96], nil}]}]}], {{:., [line: 97], [{:__aliases__, [line: 97], [:List]}, :cons]}, [line: 97], [{:head, [line: 97], nil}, {:recu, [line: 97], [{:tail, [line: 97], nil}]}]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:list2, [line: 100], nil}]}]

15:55:43.949 [debug] Extracting cases from list: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertex_map, [line: 83], nil}, {:edge_list, [line: 83], nil}, {:metadata, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:case, [line: 93], [{:empty, [line: 93], []}]}], 0]}]

15:55:43.949 [debug] Generating fold cases: [{:->, [line: 96], [[{:case, [line: 96], [{:cons, [line: 96], [{:head, [line: 96], nil}, {:tail, [line: 96], nil}]}]}], {{:., [line: 97], [{:__aliases__, [line: 97], [:List]}, :cons]}, [line: 97], [{:head, [line: 97], nil}, {:recu, [line: 97], [{:tail, [line: 97], nil}]}]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:list2, [line: 100], nil}]}]

15:55:43.949 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

15:55:43.949 [debug] Transforming recursive refs:
Body: {{:., [line: 97], [{:__aliases__, [line: 97], [:List]}, :cons]}, [line: 97], [{:head, [line: 97], nil}, {:recu, [line: 97], [{:tail, [line: 97], nil}]}]}
Bindings: [head: true, tail: true]
State: nil


15:55:43.949 [debug] Processing recursive reference: {:recu, [line: 97], [{:tail, [line: 97], nil}]}

15:55:43.949 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.949 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

15:55:43.949 [debug] Transforming recursive refs:
Body: {:list2, [line: 100], nil}
Bindings: []
State: nil


15:55:43.949 [debug] Generated fold cases after transformation: [{:->, [line: 74], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [line: 76], nil}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:inspect, [line: 76], [{:props, [line: 76], nil}]}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, :to_string]}, [line: 77], [{:indent, [line: 77], nil}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 80], [[{:%{}, [], [variant: :null]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, :to_string]}, [line: 82], [{:indent, [line: 82], nil}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]

15:55:43.950 [debug] Extracted fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertex_map, [line: 83], nil}, {:edge_list, [line: 83], nil}, {:metadata, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:case, [line: 93], [{:empty, [line: 93], []}]}], 0]}]

15:55:43.950 [debug] Generated fold cases after transformation: [{:->, [line: 96], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {{:., [line: 97], [{:__aliases__, [line: 97], [:List]}, :cons]}, [line: 97], [{:head, [line: 97], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 99], [[{:%{}, [], [variant: :null]}], {:list2, [line: 100], nil}]}]

15:55:43.950 [debug] Generating fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertex_map, [line: 83], nil}, {:edge_list, [line: 83], nil}, {:metadata, [line: 83], nil}]}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:case, [line: 93], [{:empty, [line: 93], []}]}], 0]}]

15:55:43.950 [debug] Final quoted expression: {:do_fold, [], [{:list1, [line: 95], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 96], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {{:., [line: 97], [{:__aliases__, [line: 97], [:List]}, :cons]}, [line: 97], [{:head, [line: 97], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 99], [[{:%{}, [], [variant: :null]}], {:list2, [line: 100], nil}]}]]]}]}]}]}

15:55:43.950 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:95: Chain.concat/2


15:55:43.950 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:55:43.950 [debug] Final quoted expression: {:do_fold, [], [{:obj, [line: 73], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 74], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:__block__, [], [{:=, [line: 75], [{:indent, [line: 75], nil}, {{:., [line: 75], [{:__aliases__, [line: 75], [:String]}, :duplicate]}, [line: 75], ["  ", {:level, [line: 75], nil}]}]}, {{:., [line: 76], [{:__aliases__, [line: 76], [:IO]}, :puts]}, [line: 76], [{:<<>>, [line: 76], [{:"::", [line: 76], [{{:., [line: 76], [Kernel, :to_string]}, [line: 76], [{:indent, [...], ...}]}, {:binary, [line: 76], nil}]}, "Properties: ", {:"::", [line: 76], [{{:., [line: 76], [...]}, [line: 76], [{...}]}, {:binary, [line: 76], nil}]}]}]}, {{:., [line: 77], [{:__aliases__, [line: 77], [:IO]}, :puts]}, [line: 77], [{:<<>>, [line: 77], [{:"::", [line: 77], [{{:., [line: 77], [Kernel, ...]}, [line: 77], [{:indent, ...}]}, {:binary, [line: 77], nil}]}, "Proto:"]}]}, {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 80], [[{:%{}, [], [variant: :null]}], {:__block__, [], [{:=, [line: 81], [{:indent, [line: 81], nil}, {{:., [line: 81], [{:__aliases__, [line: 81], [:String]}, :duplicate]}, [line: 81], ["  ", {:level, [line: 81], nil}]}]}, {{:., [line: 82], [{:__aliases__, [line: 82], [:IO]}, :puts]}, [line: 82], [{:<<>>, [line: 82], [{:"::", [line: 82], [{{:., [line: 82], [Kernel, ...]}, [line: 82], [{:indent, ...}]}, {:binary, [line: 82], nil}]}, "[End of chain]"]}]}]}]}]]]}]}]}]}

15:55:43.950 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:55:43.950 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil


15:55:43.950 [debug] Generated fold cases after transformation: [{:->, [line: 83], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:%{}, [], [variant: :empty]}], 0]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prototypal.ex:73: Prototypal.inspect_object/2


15:55:43.950 [debug] Fold expression: {:list, [line: 106], nil}, opts: [with: {:n, [line: 106], nil}], cases: [{:->, [line: 107], [[{:case, [line: 107], [{:cons, [line: 107], [{:head, [line: 107], nil}, {:tail, [line: 107], nil}]}]}], {:if, [line: 108], [{:>, [line: 108], [{:state, [line: 108], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 109], [{{:tail_result, [line: 109], nil}, {:new_count, [line: 109], nil}}, {:recu, [line: 109], [{:tail, [line: 109], nil}]}]}, {{{:., [line: 110], [{:__aliases__, [line: 110], [:List]}, :cons]}, [line: 110], [{:head, [line: 110], nil}, {:tail_result, [line: 110], nil}]}, {:-, [line: 110], [{:new_count, [line: 110], nil}, 1]}}]}, else: {{{:., [line: 112], [{:__aliases__, [line: 112], [:List]}, :null]}, [line: 112], []}, 0}]]}]}, {:->, [line: 115], [[{:case, [line: 115], [{:null, [line: 115], []}]}], {{{:., [line: 116], [{:__aliases__, [line: 116], [:List]}, :null]}, [line: 116], []}, {:state, [line: 116], nil}}]}]

15:55:43.950 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 82], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 83], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 84], [{:count, [line: 84], nil}, {:count_edges, [line: 84], [{:edge_list, [line: 84], nil}]}]}, {:if, [line: 86], [{:==, [line: 86], [{{:., [line: 86], [{:metadata, [line: 86], nil}, :type]}, [no_parens: true, line: 86], []}, :undirected]}, [do: {:div, [line: 88], [{:count, [line: 88], nil}, 2]}, else: {:count, [line: 90], nil}]]}]}]}, {:->, [line: 93], [[{:%{}, [], [variant: :empty]}], 0]}]]]}]}]}]}

15:55:43.951 [debug] Extracting cases from list: [{:->, [line: 107], [[{:case, [line: 107], [{:cons, [line: 107], [{:head, [line: 107], nil}, {:tail, [line: 107], nil}]}]}], {:if, [line: 108], [{:>, [line: 108], [{:state, [line: 108], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 109], [{{:tail_result, [line: 109], nil}, {:new_count, [line: 109], nil}}, {:recu, [line: 109], [{:tail, [line: 109], nil}]}]}, {{{:., [line: 110], [{:__aliases__, [line: 110], [:List]}, :cons]}, [line: 110], [{:head, [line: 110], nil}, {:tail_result, [line: 110], nil}]}, {:-, [line: 110], [{:new_count, [line: 110], nil}, 1]}}]}, else: {{{:., [line: 112], [{:__aliases__, [line: 112], [:List]}, :null]}, [line: 112], []}, 0}]]}]}, {:->, [line: 115], [[{:case, [line: 115], [{:null, [line: 115], []}]}], {{{:., [line: 116], [{:__aliases__, [line: 116], [:List]}, :null]}, [line: 116], []}, {:state, [line: 116], nil}}]}]
warning: variable "vertex_map" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:82: PropGraph.edge_count/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:82: PropGraph.edge_count/1


15:55:43.951 [debug] Extracted fold cases: [{:->, [line: 107], [[{:case, [line: 107], [{:cons, [line: 107], [{:head, [line: 107], nil}, {:tail, [line: 107], nil}]}]}], {:if, [line: 108], [{:>, [line: 108], [{:state, [line: 108], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 109], [{{:tail_result, [line: 109], nil}, {:new_count, [line: 109], nil}}, {:recu, [line: 109], [{:tail, [line: 109], nil}]}]}, {{{:., [line: 110], [{:__aliases__, [line: 110], [:List]}, :cons]}, [line: 110], [{:head, [line: 110], nil}, {:tail_result, [line: 110], nil}]}, {:-, [line: 110], [{:new_count, [line: 110], nil}, 1]}}]}, else: {{{:., [line: 112], [{:__aliases__, [line: 112], [:List]}, :null]}, [line: 112], []}, 0}]]}]}, {:->, [line: 115], [[{:case, [line: 115], [{:null, [line: 115], []}]}], {{{:., [line: 116], [{:__aliases__, [line: 116], [:List]}, :null]}, [line: 116], []}, {:state, [line: 116], nil}}]}]

15:55:43.951 [debug] Fold expression: {:obj, [line: 87], nil}, opts: [], cases: [{:->, [line: 88], [[{:case, [line: 88], [{:object, [line: 88], [{:props, [line: 88], nil}, {:proto, [line: 88], nil}]}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]

15:55:43.951 [debug] Generating fold cases: [{:->, [line: 107], [[{:case, [line: 107], [{:cons, [line: 107], [{:head, [line: 107], nil}, {:tail, [line: 107], nil}]}]}], {:if, [line: 108], [{:>, [line: 108], [{:state, [line: 108], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 109], [{{:tail_result, [line: 109], nil}, {:new_count, [line: 109], nil}}, {:recu, [line: 109], [{:tail, [line: 109], nil}]}]}, {{{:., [line: 110], [{:__aliases__, [line: 110], [:List]}, :cons]}, [line: 110], [{:head, [line: 110], nil}, {:tail_result, [line: 110], nil}]}, {:-, [line: 110], [{:new_count, [line: 110], nil}, 1]}}]}, else: {{{:., [line: 112], [{:__aliases__, [line: 112], [:List]}, :null]}, [line: 112], []}, 0}]]}]}, {:->, [line: 115], [[{:case, [line: 115], [{:null, [line: 115], []}]}], {{{:., [line: 116], [{:__aliases__, [line: 116], [:List]}, :null]}, [line: 116], []}, {:state, [line: 116], nil}}]}]

15:55:43.951 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

15:55:43.951 [debug] Fold expression: {:graph, [line: 99], nil}, opts: [], cases: [{:->, [line: 100], [[{:case, [line: 100], [{:graph, [line: 100], [{:vertex_map, [line: 100], nil}, {:edge_list, [line: 100], nil}, {:metadata, [line: 100], nil}]}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:case, [line: 106], [{:empty, [line: 106], []}]}], []]}]

15:55:43.951 [debug] Transforming recursive refs:
Body: {:if, [line: 108], [{:>, [line: 108], [{:state, [line: 108], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 109], [{{:tail_result, [line: 109], nil}, {:new_count, [line: 109], nil}}, {:recu, [line: 109], [{:tail, [line: 109], nil}]}]}, {{{:., [line: 110], [{:__aliases__, [line: 110], [:List]}, :cons]}, [line: 110], [{:head, [line: 110], nil}, {:tail_result, [line: 110], nil}]}, {:-, [line: 110], [{:new_count, [line: 110], nil}, 1]}}]}, else: {{{:., [line: 112], [{:__aliases__, [line: 112], [:List]}, :null]}, [line: 112], []}, 0}]]}
Bindings: [head: true, tail: true]
State: {:n, [line: 106], nil}


15:55:43.951 [debug] Processing recursive reference: {:recu, [line: 109], [{:tail, [line: 109], nil}]}

15:55:43.951 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.951 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

15:55:43.951 [debug] Extracting cases from list: [{:->, [line: 100], [[{:case, [line: 100], [{:graph, [line: 100], [{:vertex_map, [line: 100], nil}, {:edge_list, [line: 100], nil}, {:metadata, [line: 100], nil}]}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:case, [line: 106], [{:empty, [line: 106], []}]}], []]}]

15:55:43.951 [debug] Transforming recursive refs:
Body: {{{:., [line: 116], [{:__aliases__, [line: 116], [:List]}, :null]}, [line: 116], []}, {:state, [line: 116], nil}}
Bindings: []
State: {:n, [line: 106], nil}


15:55:43.951 [debug] Extracted fold cases: [{:->, [line: 100], [[{:case, [line: 100], [{:graph, [line: 100], [{:vertex_map, [line: 100], nil}, {:edge_list, [line: 100], nil}, {:metadata, [line: 100], nil}]}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:case, [line: 106], [{:empty, [line: 106], []}]}], []]}]

15:55:43.951 [debug] Extracting cases from list: [{:->, [line: 88], [[{:case, [line: 88], [{:object, [line: 88], [{:props, [line: 88], nil}, {:proto, [line: 88], nil}]}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]

15:55:43.951 [debug] Generated fold cases after transformation: [{:->, [line: 107], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 108], [{:>, [line: 108], [{:state, [line: 108], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 109], [{{:tail_result, [line: 109], nil}, {:new_count, [line: 109], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {{{:., [line: 110], [{:__aliases__, [line: 110], [:List]}, :cons]}, [line: 110], [{:head, [line: 110], nil}, {:tail_result, [line: 110], nil}]}, {:-, [line: 110], [{:new_count, [line: 110], nil}, 1]}}]}, else: {{{:., [line: 112], [{:__aliases__, [line: 112], [:List]}, :null]}, [line: 112], []}, 0}]]}]}, {:->, [line: 115], [[{:%{}, [], [variant: :null]}], {{{:., [line: 116], [{:__aliases__, [line: 116], [:List]}, :null]}, [line: 116], []}, {:state, [line: 116], nil}}]}]

15:55:43.952 [debug] Generating fold cases: [{:->, [line: 100], [[{:case, [line: 100], [{:graph, [line: 100], [{:vertex_map, [line: 100], nil}, {:edge_list, [line: 100], nil}, {:metadata, [line: 100], nil}]}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:case, [line: 106], [{:empty, [line: 106], []}]}], []]}]

15:55:43.952 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 106], nil}, {:n, [line: 106], nil}, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 107], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 108], [{:>, [line: 108], [{:state, [line: 108], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 109], [{{:tail_result, [line: 109], nil}, {:new_count, [line: 109], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, ...], [...]}, {:var!, [...], ...}]}]}, {{{:., [line: 110], [{:__aliases__, [line: 110], [:List]}, :cons]}, [line: 110], [{:head, [line: 110], nil}, {:tail_result, [line: 110], nil}]}, {:-, [line: 110], [{:new_count, [line: 110], nil}, 1]}}]}, else: {{{:., [line: 112], [{:__aliases__, [line: 112], [:List]}, :null]}, [line: 112], []}, 0}]]}]}, {:->, [line: 115], [[{:%{}, [], [variant: :null]}], {{{:., [line: 116], [{:__aliases__, [line: 116], [:List]}, :null]}, [line: 116], []}, {:state, [line: 116], nil}}]}]]]}]}]}]}

15:55:43.952 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

15:55:43.952 [debug] Transforming recursive refs:
Body: {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:55:43.952 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:55:43.952 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


15:55:43.952 [debug] Generated fold cases after transformation: [{:->, [line: 100], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:%{}, [], [variant: :empty]}], []]}]

15:55:43.952 [debug] Extracted fold cases: [{:->, [line: 88], [[{:case, [line: 88], [{:object, [line: 88], [{:props, [line: 88], nil}, {:proto, [line: 88], nil}]}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]

15:55:43.952 [debug] Fold expression: {:list, [line: 122], nil}, opts: [with: {:n, [line: 122], nil}], cases: [{:->, [line: 123], [[{:case, [line: 123], [{:cons, [line: 123], [{:head, [line: 123], nil}, {:tail, [line: 123], nil}]}]}], {:if, [line: 124], [{:>, [line: 124], [{:state, [line: 124], nil}, 0]}, [do: {:recu, [line: 125], [{:tail, [line: 125], nil}]}, else: {{{:., [line: 127], [{:__aliases__, [line: 127], [:List]}, :cons]}, [line: 127], [{:head, [line: 127], nil}, {:recu, [line: 127], [{:tail, [line: 127], nil}]}]}, 0}]]}]}, {:->, [line: 130], [[{:case, [line: 130], [{:null, [line: 130], []}]}], {{{:., [line: 131], [{:__aliases__, [line: 131], [:List]}, :null]}, [line: 131], []}, {:state, [line: 131], nil}}]}]

15:55:43.952 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 99], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 100], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 101], [{{:., [line: 101], [{:__aliases__, [line: 101], [:Map]}, :get]}, [line: 101], [{:vertex_map, [line: 101], nil}, {:vertex_id, [line: 101], nil}]}, [do: [{:->, [line: 102], [[nil], []]}, {:->, [line: 103], [[{:vertex, [line: 103], nil}], {:extract_neighbors, [line: 103], [{:edge_list, [line: 103], nil}, {:vertex_id, [line: 103], nil}]}]}]]]}]}, {:->, [line: 106], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}

15:55:43.952 [debug] Extracting cases from list: [{:->, [line: 123], [[{:case, [line: 123], [{:cons, [line: 123], [{:head, [line: 123], nil}, {:tail, [line: 123], nil}]}]}], {:if, [line: 124], [{:>, [line: 124], [{:state, [line: 124], nil}, 0]}, [do: {:recu, [line: 125], [{:tail, [line: 125], nil}]}, else: {{{:., [line: 127], [{:__aliases__, [line: 127], [:List]}, :cons]}, [line: 127], [{:head, [line: 127], nil}, {:recu, [line: 127], [{:tail, [line: 127], nil}]}]}, 0}]]}]}, {:->, [line: 130], [[{:case, [line: 130], [{:null, [line: 130], []}]}], {{{:., [line: 131], [{:__aliases__, [line: 131], [:List]}, :null]}, [line: 131], []}, {:state, [line: 131], nil}}]}]

15:55:43.952 [debug] Extracted fold cases: [{:->, [line: 123], [[{:case, [line: 123], [{:cons, [line: 123], [{:head, [line: 123], nil}, {:tail, [line: 123], nil}]}]}], {:if, [line: 124], [{:>, [line: 124], [{:state, [line: 124], nil}, 0]}, [do: {:recu, [line: 125], [{:tail, [line: 125], nil}]}, else: {{{:., [line: 127], [{:__aliases__, [line: 127], [:List]}, :cons]}, [line: 127], [{:head, [line: 127], nil}, {:recu, [line: 127], [{:tail, [line: 127], nil}]}]}, 0}]]}]}, {:->, [line: 130], [[{:case, [line: 130], [{:null, [line: 130], []}]}], {{{:., [line: 131], [{:__aliases__, [line: 131], [:List]}, :null]}, [line: 131], []}, {:state, [line: 131], nil}}]}]
warning: variable "vertex" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:103: PropGraph.get_neighbors/2

warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:99: PropGraph.get_neighbors/2


15:55:43.952 [debug] Generating fold cases: [{:->, [line: 123], [[{:case, [line: 123], [{:cons, [line: 123], [{:head, [line: 123], nil}, {:tail, [line: 123], nil}]}]}], {:if, [line: 124], [{:>, [line: 124], [{:state, [line: 124], nil}, 0]}, [do: {:recu, [line: 125], [{:tail, [line: 125], nil}]}, else: {{{:., [line: 127], [{:__aliases__, [line: 127], [:List]}, :cons]}, [line: 127], [{:head, [line: 127], nil}, {:recu, [line: 127], [{:tail, [line: 127], nil}]}]}, 0}]]}]}, {:->, [line: 130], [[{:case, [line: 130], [{:null, [line: 130], []}]}], {{{:., [line: 131], [{:__aliases__, [line: 131], [:List]}, :null]}, [line: 131], []}, {:state, [line: 131], nil}}]}]

15:55:43.952 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:99: PropGraph.get_neighbors/2


15:55:43.952 [debug] Transforming recursive refs:
Body: {:if, [line: 124], [{:>, [line: 124], [{:state, [line: 124], nil}, 0]}, [do: {:recu, [line: 125], [{:tail, [line: 125], nil}]}, else: {{{:., [line: 127], [{:__aliases__, [line: 127], [:List]}, :cons]}, [line: 127], [{:head, [line: 127], nil}, {:recu, [line: 127], [{:tail, [line: 127], nil}]}]}, 0}]]}
Bindings: [head: true, tail: true]
State: {:n, [line: 122], nil}


15:55:43.952 [debug] Processing recursive reference: {:recu, [line: 125], [{:tail, [line: 125], nil}]}

15:55:43.952 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.952 [debug] Processing recursive reference: {:recu, [line: 127], [{:tail, [line: 127], nil}]}

15:55:43.953 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.953 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

15:55:43.953 [debug] Transforming recursive refs:
Body: {{{:., [line: 131], [{:__aliases__, [line: 131], [:List]}, :null]}, [line: 131], []}, {:state, [line: 131], nil}}
Bindings: []
State: {:n, [line: 122], nil}


15:55:43.953 [debug] Fold expression: {:graph, [line: 113], nil}, opts: [], cases: [{:->, [line: 114], [[{:case, [line: 114], [{:graph, [line: 114], [{:vertex_map, [line: 114], nil}, {:edge_list, [line: 114], nil}, {:metadata, [line: 114], nil}]}]}], {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}]}, {:->, [line: 118], [[{:case, [line: 118], [{:empty, [line: 118], []}]}], []]}]

15:55:43.953 [debug] Generated fold cases after transformation: [{:->, [line: 123], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 124], [{:>, [line: 124], [{:state, [line: 124], nil}, 0]}, [do: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}, else: {{{:., [line: 127], [{:__aliases__, [line: 127], [:List]}, :cons]}, [line: 127], [{:head, [line: 127], nil}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, 0}]]}]}, {:->, [line: 130], [[{:%{}, [], [variant: :null]}], {{{:., [line: 131], [{:__aliases__, [line: 131], [:List]}, :null]}, [line: 131], []}, {:state, [line: 131], nil}}]}]

15:55:43.953 [debug] Generating fold cases: [{:->, [line: 88], [[{:case, [line: 88], [{:object, [line: 88], [{:props, [line: 88], nil}, {:proto, [line: 88], nil}]}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:case, [line: 99], [{:null, [line: 99], []}]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]

15:55:43.953 [debug] Extracting cases from list: [{:->, [line: 114], [[{:case, [line: 114], [{:graph, [line: 114], [{:vertex_map, [line: 114], nil}, {:edge_list, [line: 114], nil}, {:metadata, [line: 114], nil}]}]}], {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}]}, {:->, [line: 118], [[{:case, [line: 118], [{:empty, [line: 118], []}]}], []]}]

15:55:43.953 [debug] Generated pattern: {:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]} for variant: :object

15:55:43.953 [debug] Extracted fold cases: [{:->, [line: 114], [[{:case, [line: 114], [{:graph, [line: 114], [{:vertex_map, [line: 114], nil}, {:edge_list, [line: 114], nil}, {:metadata, [line: 114], nil}]}]}], {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}]}, {:->, [line: 118], [[{:case, [line: 118], [{:empty, [line: 118], []}]}], []]}]

15:55:43.953 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 122], nil}, {:n, [line: 122], nil}, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 123], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 124], [{:>, [line: 124], [{:state, [line: 124], nil}, 0]}, [do: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}, else: {{{:., [line: 127], [{:__aliases__, [line: 127], [:List]}, :cons]}, [line: 127], [{:head, [line: 127], nil}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{...}, ...]], [{:state, ...}]}, {:var!, [context: BenBen, imports: [...]], [{...}]}]}]}, 0}]]}]}, {:->, [line: 130], [[{:%{}, [], [variant: :null]}], {{{:., [line: 131], [{:__aliases__, [line: 131], [:List]}, :null]}, [line: 131], []}, {:state, [line: 131], nil}}]}]]]}]}]}]}

15:55:43.953 [debug] Generating fold cases: [{:->, [line: 114], [[{:case, [line: 114], [{:graph, [line: 114], [{:vertex_map, [line: 114], nil}, {:edge_list, [line: 114], nil}, {:metadata, [line: 114], nil}]}]}], {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}]}, {:->, [line: 118], [[{:case, [line: 118], [{:empty, [line: 118], []}]}], []]}]

15:55:43.953 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

15:55:43.953 [debug] Transforming recursive refs:
Body: {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:55:43.953 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:55:43.953 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


15:55:43.953 [debug] Generated fold cases after transformation: [{:->, [line: 114], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}]}, {:->, [line: 118], [[{:%{}, [], [variant: :empty]}], []]}]

15:55:43.953 [debug] Transforming recursive refs:
Body: {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:recu, [line: 92], [{:proto, [line: 92], nil}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}
Bindings: [props: true, proto: true]
State: nil


15:55:43.953 [debug] Processing recursive reference: {:recu, [line: 92], [{:proto, [line: 92], nil}]}

15:55:43.953 [debug] Transformed recursive reference to: {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

15:55:43.953 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

15:55:43.953 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 113], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 114], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{:=, [line: 115], [{:{}, [line: 115], [{:came_from, [line: 115], nil}, {:_, [line: 115], nil}, {:_, [line: 115], nil}]}, {:find_path, [line: 115], [{:vertex_map, [line: 115], nil}, {:edge_list, [line: 115], nil}, {:start_id, [line: 115], nil}, {:end_id, [line: 115], nil}]}]}, {:reconstruct_path, [line: 116], [{:came_from, [line: 116], nil}, {:end_id, [line: 116], nil}]}]}]}, {:->, [line: 118], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}

15:55:43.953 [debug] Transforming recursive refs:
Body: {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}
Bindings: []
State: nil

warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:113: PropGraph.shortest_path/3

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:113: PropGraph.shortest_path/3


15:55:43.954 [debug] Fold expression: {:graph, [line: 125], nil}, opts: [], cases: [{:->, [line: 126], [[{:case, [line: 126], [{:graph, [line: 126], [{:vertex_map, [line: 126], nil}, {:edge_list, [line: 126], nil}, {:metadata, [line: 126], nil}]}]}], {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, [line: 131], nil}, {:_, [line: 131], nil}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [line: 132], nil}, {:depth_first_search, [line: 132], [{:vertex_map, [line: 132], nil}, {:edge_list, [line: 132], nil}, {:first, [line: 132], nil}, {{:., [line: 132], [{:__aliases__, [line: 132], [:MapSet]}, :new]}, [line: 132], []}]}]}, {:==, [line: 133], [{{:., [line: 133], [{:__aliases__, [line: 133], [:MapSet]}, :size]}, [line: 133], [{:visited, [line: 133], nil}]}, {:length, [line: 133], [{:all_vertices, [line: 133], nil}]}]}]}]}]]]}]}, {:->, [line: 137], [[{:case, [line: 137], [{:empty, [line: 137], []}]}], true]}]

15:55:43.954 [debug] Generated fold cases after transformation: [{:->, [line: 88], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [line: 91], [:IO]}, :puts]}, [line: 91], [{:<<>>, [line: 91], ["Not found in ", {:"::", [line: 91], [{{:., [line: 91], [Kernel, :to_string]}, [line: 91], [{:inspect, [line: 91], [{:props, [line: 91], nil}]}]}, {:binary, [line: 91], nil}]}, ", checking prototype"]}]}, {:do_fold, [], [{:proto, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, [line: 95], [:IO]}, :puts]}, [line: 95], [{:<<>>, [line: 95], ["Found ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:key, [line: 95], nil}]}, {:binary, [line: 95], nil}]}, ": ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:val, [line: 95], nil}]}]}, {:binary, [line: 95], nil}]}, " in ", {:"::", [line: 95], [{{:., [line: 95], [Kernel, :to_string]}, [line: 95], [{:inspect, [line: 95], [{:props, [...], ...}]}]}, {:binary, [line: 95], nil}]}]}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:%{}, [], [variant: :null]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]

15:55:43.954 [debug] Extracting cases from list: [{:->, [line: 126], [[{:case, [line: 126], [{:graph, [line: 126], [{:vertex_map, [line: 126], nil}, {:edge_list, [line: 126], nil}, {:metadata, [line: 126], nil}]}]}], {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, [line: 131], nil}, {:_, [line: 131], nil}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [line: 132], nil}, {:depth_first_search, [line: 132], [{:vertex_map, [line: 132], nil}, {:edge_list, [line: 132], nil}, {:first, [line: 132], nil}, {{:., [line: 132], [{:__aliases__, [line: 132], [:MapSet]}, :new]}, [line: 132], []}]}]}, {:==, [line: 133], [{{:., [line: 133], [{:__aliases__, [line: 133], [:MapSet]}, :size]}, [line: 133], [{:visited, [line: 133], nil}]}, {:length, [line: 133], [{:all_vertices, [line: 133], nil}]}]}]}]}]]]}]}, {:->, [line: 137], [[{:case, [line: 137], [{:empty, [line: 137], []}]}], true]}]

15:55:43.954 [debug] Final quoted expression: {:do_fold, [], [{:obj, [line: 87], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 88], [[{:%{}, [], [variant: :object, props: {:props, [], nil}, proto: {:proto, [], nil}]}], {:case, [line: 89], [{{:., [line: 89], [{:__aliases__, [line: 89], [:Map]}, :get]}, [line: 89], [{:props, [line: 89], nil}, {:key, [line: 89], nil}]}, [do: [{:->, [line: 90], [[nil], {:__block__, [], [{{:., [line: 91], [{:__aliases__, [...], ...}, :puts]}, [line: 91], [{:<<>>, [line: 91], [...]}]}, {:do_fold, [], [{:proto, [], ...}, nil, {...}]}]}]}, {:->, [line: 94], [[{:val, [line: 94], nil}], {:__block__, [], [{{:., [line: 95], [{:__aliases__, ...}, :puts]}, [line: 95], [{:<<>>, [...], ...}]}, {:val, [line: 96], nil}]}]}]]]}]}, {:->, [line: 99], [[{:%{}, [], [variant: :null]}], {:__block__, [], [{{:., [line: 100], [{:__aliases__, [line: 100], [:IO]}, :puts]}, [line: 100], ["Reached end of prototype chain"]}, nil]}]}]]]}]}]}]}

15:55:43.954 [debug] Extracted fold cases: [{:->, [line: 126], [[{:case, [line: 126], [{:graph, [line: 126], [{:vertex_map, [line: 126], nil}, {:edge_list, [line: 126], nil}, {:metadata, [line: 126], nil}]}]}], {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, [line: 131], nil}, {:_, [line: 131], nil}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [line: 132], nil}, {:depth_first_search, [line: 132], [{:vertex_map, [line: 132], nil}, {:edge_list, [line: 132], nil}, {:first, [line: 132], nil}, {{:., [line: 132], [{:__aliases__, [line: 132], [:MapSet]}, :new]}, [line: 132], []}]}]}, {:==, [line: 133], [{{:., [line: 133], [{:__aliases__, [line: 133], [:MapSet]}, :size]}, [line: 133], [{:visited, [line: 133], nil}]}, {:length, [line: 133], [{:all_vertices, [line: 133], nil}]}]}]}]}]]]}]}, {:->, [line: 137], [[{:case, [line: 137], [{:empty, [line: 137], []}]}], true]}]
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prototypal.ex:87: Prototypal.debug_chain/2


15:55:43.954 [debug] Generating fold cases: [{:->, [line: 126], [[{:case, [line: 126], [{:graph, [line: 126], [{:vertex_map, [line: 126], nil}, {:edge_list, [line: 126], nil}, {:metadata, [line: 126], nil}]}]}], {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, [line: 131], nil}, {:_, [line: 131], nil}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [line: 132], nil}, {:depth_first_search, [line: 132], [{:vertex_map, [line: 132], nil}, {:edge_list, [line: 132], nil}, {:first, [line: 132], nil}, {{:., [line: 132], [{:__aliases__, [line: 132], [:MapSet]}, :new]}, [line: 132], []}]}]}, {:==, [line: 133], [{{:., [line: 133], [{:__aliases__, [line: 133], [:MapSet]}, :size]}, [line: 133], [{:visited, [line: 133], nil}]}, {:length, [line: 133], [{:all_vertices, [line: 133], nil}]}]}]}]}]]]}]}, {:->, [line: 137], [[{:case, [line: 137], [{:empty, [line: 137], []}]}], true]}]

15:55:43.955 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

15:55:43.955 [debug] Transforming recursive refs:
Body: {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, [line: 131], nil}, {:_, [line: 131], nil}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [line: 132], nil}, {:depth_first_search, [line: 132], [{:vertex_map, [line: 132], nil}, {:edge_list, [line: 132], nil}, {:first, [line: 132], nil}, {{:., [line: 132], [{:__aliases__, [line: 132], [:MapSet]}, :new]}, [line: 132], []}]}]}, {:==, [line: 133], [{{:., [line: 133], [{:__aliases__, [line: 133], [:MapSet]}, :size]}, [line: 133], [{:visited, [line: 133], nil}]}, {:length, [line: 133], [{:all_vertices, [line: 133], nil}]}]}]}]}]]]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:55:43.955 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:55:43.955 [debug] Transforming recursive refs:
Body: true
Bindings: []
State: nil


15:55:43.955 [debug] Generated fold cases after transformation: [{:->, [line: 126], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, [line: 131], nil}, {:_, [line: 131], nil}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [line: 132], nil}, {:depth_first_search, [line: 132], [{:vertex_map, [line: 132], nil}, {:edge_list, [line: 132], nil}, {:first, [line: 132], nil}, {{:., [line: 132], [{:__aliases__, [line: 132], [:MapSet]}, :new]}, [line: 132], []}]}]}, {:==, [line: 133], [{{:., [line: 133], [{:__aliases__, [line: 133], [:MapSet]}, :size]}, [line: 133], [{:visited, [line: 133], nil}]}, {:length, [line: 133], [{:all_vertices, [line: 133], nil}]}]}]}]}]]]}]}, {:->, [line: 137], [[{:%{}, [], [variant: :empty]}], true]}]

15:55:43.955 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 125], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 126], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:case, [line: 127], [{{:., [line: 127], [{:__aliases__, [line: 127], [:Map]}, :keys]}, [line: 127], [{:vertex_map, [line: 127], nil}]}, [do: [{:->, [line: 128], [[[]], true]}, {:->, [line: 131], [[{:=, [line: 131], [[{:|, [line: 131], [{:first, ...}, {...}]}], {:all_vertices, [line: 131], nil}]}], {:__block__, [], [{:=, [line: 132], [{:visited, [...], ...}, {:depth_first_search, ...}]}, {:==, [line: 133], [{{...}, ...}, {...}]}]}]}]]]}]}, {:->, [line: 137], [[{:%{}, [], [variant: :empty]}], true]}]]]}]}]}]}
warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:125: PropGraph.is_connected?/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/prop_graph.ex:125: PropGraph.is_connected?/1

warning: function merge_counts/2 is unused
  lib/examples/parents.ex:75

warning: function merge_with_level_increment/2 is unused
  lib/examples/parents.ex:80


15:55:44.011 [debug] Fold expression: {{:., [line: 154], [{:state, [line: 154], nil}, :graph]}, [no_parens: true, line: 154], []}, opts: [], cases: [{:->, [line: 155], [[{:case, [line: 155], [{:graph, [line: 155], [{:vertex_map, [line: 155], nil}, {:edge_list, [line: 155], nil}, {:metadata, [line: 155], nil}]}]}], {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, :to_string]}, [line: 157], [{:inspect, [line: 157], [{:vertex_map, [line: 157], nil}]}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [Kernel, :to_string]}, [line: 158], [{:inspect, [line: 158], [{:edge_list, [line: 158], nil}]}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., [line: 161], [Kernel, :to_string]}, [line: 161], [{:inspect, [line: 161], [{:edges, [line: 161], nil}]}]}, {:binary, [line: 161], nil}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{{:., [line: 164], [Kernel, :to_string]}, [line: 164], [{:inspect, [line: 164], [{:results, [line: 164], nil}]}]}, {:binary, [line: 164], nil}]}]}]}, {:results, [line: 166], nil}]}]}, {:->, [line: 168], [[{:case, [line: 168], [{:empty, [line: 168], []}]}], {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}]}]

15:55:44.011 [debug] Extracting cases from list: [{:->, [line: 155], [[{:case, [line: 155], [{:graph, [line: 155], [{:vertex_map, [line: 155], nil}, {:edge_list, [line: 155], nil}, {:metadata, [line: 155], nil}]}]}], {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, :to_string]}, [line: 157], [{:inspect, [line: 157], [{:vertex_map, [line: 157], nil}]}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [Kernel, :to_string]}, [line: 158], [{:inspect, [line: 158], [{:edge_list, [line: 158], nil}]}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., [line: 161], [Kernel, :to_string]}, [line: 161], [{:inspect, [line: 161], [{:edges, [line: 161], nil}]}]}, {:binary, [line: 161], nil}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{{:., [line: 164], [Kernel, :to_string]}, [line: 164], [{:inspect, [line: 164], [{:results, [line: 164], nil}]}]}, {:binary, [line: 164], nil}]}]}]}, {:results, [line: 166], nil}]}]}, {:->, [line: 168], [[{:case, [line: 168], [{:empty, [line: 168], []}]}], {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}]}]

15:55:44.012 [debug] Extracted fold cases: [{:->, [line: 155], [[{:case, [line: 155], [{:graph, [line: 155], [{:vertex_map, [line: 155], nil}, {:edge_list, [line: 155], nil}, {:metadata, [line: 155], nil}]}]}], {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, :to_string]}, [line: 157], [{:inspect, [line: 157], [{:vertex_map, [line: 157], nil}]}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [Kernel, :to_string]}, [line: 158], [{:inspect, [line: 158], [{:edge_list, [line: 158], nil}]}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., [line: 161], [Kernel, :to_string]}, [line: 161], [{:inspect, [line: 161], [{:edges, [line: 161], nil}]}]}, {:binary, [line: 161], nil}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{{:., [line: 164], [Kernel, :to_string]}, [line: 164], [{:inspect, [line: 164], [{:results, [line: 164], nil}]}]}, {:binary, [line: 164], nil}]}]}]}, {:results, [line: 166], nil}]}]}, {:->, [line: 168], [[{:case, [line: 168], [{:empty, [line: 168], []}]}], {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}]}]

15:55:44.012 [debug] Generating fold cases: [{:->, [line: 155], [[{:case, [line: 155], [{:graph, [line: 155], [{:vertex_map, [line: 155], nil}, {:edge_list, [line: 155], nil}, {:metadata, [line: 155], nil}]}]}], {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, :to_string]}, [line: 157], [{:inspect, [line: 157], [{:vertex_map, [line: 157], nil}]}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [Kernel, :to_string]}, [line: 158], [{:inspect, [line: 158], [{:edge_list, [line: 158], nil}]}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., [line: 161], [Kernel, :to_string]}, [line: 161], [{:inspect, [line: 161], [{:edges, [line: 161], nil}]}]}, {:binary, [line: 161], nil}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{{:., [line: 164], [Kernel, :to_string]}, [line: 164], [{:inspect, [line: 164], [{:results, [line: 164], nil}]}]}, {:binary, [line: 164], nil}]}]}]}, {:results, [line: 166], nil}]}]}, {:->, [line: 168], [[{:case, [line: 168], [{:empty, [line: 168], []}]}], {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}]}]

15:55:44.012 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]} for variant: :graph

15:55:44.012 [debug] Transforming recursive refs:
Body: {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, :to_string]}, [line: 157], [{:inspect, [line: 157], [{:vertex_map, [line: 157], nil}]}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [Kernel, :to_string]}, [line: 158], [{:inspect, [line: 158], [{:edge_list, [line: 158], nil}]}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., [line: 161], [Kernel, :to_string]}, [line: 161], [{:inspect, [line: 161], [{:edges, [line: 161], nil}]}]}, {:binary, [line: 161], nil}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{{:., [line: 164], [Kernel, :to_string]}, [line: 164], [{:inspect, [line: 164], [{:results, [line: 164], nil}]}]}, {:binary, [line: 164], nil}]}]}]}, {:results, [line: 166], nil}]}
Bindings: [vertex_map: true, edge_list: true, metadata: true]
State: nil


15:55:44.012 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

15:55:44.013 [debug] Transforming recursive refs:
Body: {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}
Bindings: []
State: nil


15:55:44.013 [debug] Generated fold cases after transformation: [{:->, [line: 155], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, :to_string]}, [line: 157], [{:inspect, [line: 157], [{:vertex_map, [line: 157], nil}]}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [Kernel, :to_string]}, [line: 158], [{:inspect, [line: 158], [{:edge_list, [line: 158], nil}]}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., [line: 161], [Kernel, :to_string]}, [line: 161], [{:inspect, [line: 161], [{:edges, [line: 161], nil}]}]}, {:binary, [line: 161], nil}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{{:., [line: 164], [Kernel, :to_string]}, [line: 164], [{:inspect, [line: 164], [{:results, [line: 164], nil}]}]}, {:binary, [line: 164], nil}]}]}]}, {:results, [line: 166], nil}]}]}, {:->, [line: 168], [[{:%{}, [], [variant: :empty]}], {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}]}]

15:55:44.013 [debug] Final quoted expression: {:do_fold, [], [{{:., [line: 154], [{:state, [line: 154], nil}, :graph]}, [no_parens: true, line: 154], []}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 155], [[{:%{}, [], [variant: :graph, vertex_map: {:vertex_map, [], nil}, edge_list: {:edge_list, [], nil}, metadata: {:metadata, [], nil}]}], {:__block__, [], [{{:., [line: 156], [{:__aliases__, [line: 156], [:Logger]}, :debug]}, [line: 156], ["Processing graph with:"]}, {{:., [line: 157], [{:__aliases__, [line: 157], [:Logger]}, :debug]}, [line: 157], [{:<<>>, [line: 157], ["  vertex_map: ", {:"::", [line: 157], [{{:., [line: 157], [Kernel, ...]}, [line: 157], [{:inspect, ...}]}, {:binary, [line: 157], nil}]}]}]}, {{:., [line: 158], [{:__aliases__, [line: 158], [:Logger]}, :debug]}, [line: 158], [{:<<>>, [line: 158], ["  edge_list: ", {:"::", [line: 158], [{{:., [line: 158], [...]}, [line: 158], [{...}]}, {:binary, [line: 158], nil}]}]}]}, {:=, [line: 160], [{:edges, [line: 160], nil}, {:extract_edges, [line: 160], [{:edge_list, [line: 160], nil}]}]}, {{:., [line: 161], [{:__aliases__, [line: 161], [:Logger]}, :debug]}, [line: 161], [{:<<>>, [line: 161], ["Extracted edges: ", {:"::", [line: 161], [{{:., ...}, [...], ...}, {:binary, ...}]}]}]}, {:=, [line: 163], [{:results, [line: 163], nil}, {:execute_query, [line: 163], [{:pattern, [line: 163], nil}, {:vertex_map, [line: 163], nil}, {:edges, [line: 163], nil}]}]}, {{:., [line: 164], [{:__aliases__, [line: 164], [:Logger]}, :debug]}, [line: 164], [{:<<>>, [line: 164], ["Query results: ", {:"::", [line: 164], [{...}, ...]}]}]}, {:results, [line: 166], nil}]}]}, {:->, [line: 168], [[{:%{}, [], [variant: :empty]}], {:__block__, [], [{{:., [line: 169], [{:__aliases__, [line: 169], [:Logger]}, :debug]}, [line: 169], ["Empty graph, returning empty results"]}, []]}]}]]]}]}]}]}
warning: variable "metadata" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/graffiti.ex:154: Graffiti.query/2

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  lib/examples/graffiti.ex:154: Graffiti.query/2

Excluding tags: [:skip]

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  test/examples/graffiti_test.exs:52: GraffitiTest."test basic transaction operations successful transaction"/1

warning: variable "reason" is unused (if the variable is not meant to be used, prefix it with an underscore)
  test/examples/graffiti_test.exs:75: GraffitiTest."test basic transaction operations transaction rollback"/1

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  test/examples/graffiti_test.exs:85: GraffitiTest."test basic transaction operations schema validation"/1

warning: variable "state" is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used)
  test/examples/graffiti_test.exs:143: GraffitiTest."test advanced transaction operations vertex operations are applied before edge validation"/1

15:55:44.291 [debug] Setting up test state
15:55:44.293 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
15:55:44.293 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.293 [debug] Returning context with state
15:55:44.299 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
15:55:44.299 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.299 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.299 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.299 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
15:55:44.299 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
15:55:44.299 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
15:55:44.299 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
15:55:44.299 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
15:55:44.299 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.299 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.299 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.299 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.300 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.300 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.300 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.300 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.300 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.300 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.300 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.300 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.300 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
15:55:44.300 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.300 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.300 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.301 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.301 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.301 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.301 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.301 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.301 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, variant_type: :graph, state: nil
15:55:44.301 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
15:55:44.301 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.301 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.301 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.301 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.301 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.302 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.302 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.302 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.302 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.302 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.303 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.303 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.303 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.303 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.303 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.303 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.303 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.303 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.303 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.303 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.303 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.303 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.304 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.304 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.304 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.305 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.305 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.305 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.306 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.306 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.307 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.307 [debug] Executing query with pattern: [:person, :reports_to, :person]
15:55:44.308 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1736978144307, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
15:55:44.308 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.309 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.309 [debug] Processing graph with:
15:55:44.309 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
15:55:44.309 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.310 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.310 [debug] Processing list of edges
15:55:44.310 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
15:55:44.310 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
15:55:44.310 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
15:55:44.310 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
15:55:44.310 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
15:55:44.310 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.310 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.310 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.310 [debug] Executing query with pattern: [:person, :reports_to, :person]
15:55:44.310 [debug] Querying with pattern:
  From: :person
  Edge: :reports_to
  To: :person

15:55:44.310 [debug] Query results: []
15:55:44.310 [debug] Executing query with pattern: [%{role: "Designer"}, :works_at, %{industry: "Software"}]
15:55:44.311 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1736978144307, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
15:55:44.311 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.311 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.311 [debug] Processing graph with:
15:55:44.312 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
15:55:44.312 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.312 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.312 [debug] Processing list of edges
15:55:44.312 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
15:55:44.312 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
15:55:44.312 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
15:55:44.312 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
15:55:44.312 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
15:55:44.312 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.312 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.313 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.313 [debug] Executing query with pattern: [%{role: "Designer"}, :works_at, %{industry: "Software"}]
15:55:44.313 [debug] Querying with pattern:
  From: %{role: "Designer"}
  Edge: :works_at
  To: %{industry: "Software"}

15:55:44.313 [debug] Pattern match failed for p2 -> c1
15:55:44.314 [debug] Pattern match failed for p1 -> c1
15:55:44.314 [debug] Query results: []
.15:55:44.314 [debug] Setting up test state
15:55:44.314 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
15:55:44.314 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.314 [debug] Returning context with state
15:55:44.314 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
15:55:44.314 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.314 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.314 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.314 [debug] Recursive field result for edge_list: 0
.15:55:44.314 [debug] Setting up test state
15:55:44.314 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
15:55:44.314 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.314 [debug] Returning context with state
15:55:44.315 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
15:55:44.315 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.315 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.315 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.315 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
15:55:44.315 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
15:55:44.315 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
15:55:44.315 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
15:55:44.315 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
15:55:44.315 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.315 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.315 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.315 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.315 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.315 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.315 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.315 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.315 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.315 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.315 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.315 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.315 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
15:55:44.315 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.316 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.316 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.316 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.316 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.316 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.316 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.316 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.316 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, variant_type: :graph, state: nil
15:55:44.316 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
15:55:44.316 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.316 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.316 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.316 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.316 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.316 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.317 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.317 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.317 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.318 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.318 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.318 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.318 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.318 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.318 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.318 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.318 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.318 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.318 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.318 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.318 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.319 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.319 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.319 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.320 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.320 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.320 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.321 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.321 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.322 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.322 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.322 [debug] Executing query with pattern: [:person, :works_at, %{industry: "Software"}]
15:55:44.323 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1736978144322, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
15:55:44.323 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.324 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.324 [debug] Processing graph with:
15:55:44.324 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
15:55:44.324 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.324 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.325 [debug] Processing list of edges
15:55:44.325 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
15:55:44.325 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
15:55:44.325 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
15:55:44.325 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
15:55:44.325 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
15:55:44.325 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.325 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.325 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.325 [debug] Executing query with pattern: [:person, :works_at, %{industry: "Software"}]
15:55:44.325 [debug] Querying with pattern:
  From: :person
  Edge: :works_at
  To: %{industry: "Software"}

15:55:44.325 [debug] Found matching pattern for p2 -> c1
15:55:44.325 [debug] Found matching pattern for p1 -> c1
15:55:44.325 [debug] Query results: [{"p2", :works_at, "c1"}, {"p1", :works_at, "c1"}]
15:55:44.325 [debug] Executing query with pattern: [%{role: "Developer"}, :works_at, :company]
15:55:44.326 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1736978144322, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
15:55:44.326 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.327 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.327 [debug] Processing graph with:
15:55:44.327 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
15:55:44.327 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.328 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.328 [debug] Processing list of edges
15:55:44.328 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
15:55:44.328 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
15:55:44.328 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
15:55:44.328 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
15:55:44.328 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
15:55:44.328 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.328 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.328 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.328 [debug] Executing query with pattern: [%{role: "Developer"}, :works_at, :company]
15:55:44.328 [debug] Querying with pattern:
  From: %{role: "Developer"}
  Edge: :works_at
  To: :company

15:55:44.328 [debug] Pattern match failed for p2 -> c1
15:55:44.328 [debug] Found matching pattern for p1 -> c1
15:55:44.328 [debug] Query results: [{"p1", :works_at, "c1"}]
.15:55:44.328 [debug] Setting up test state
15:55:44.328 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
15:55:44.328 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.328 [debug] Returning context with state
15:55:44.329 [debug] Starting multiple transactions test with state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.329 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
15:55:44.329 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.329 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.329 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.329 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:55:44.329 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
15:55:44.329 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:55:44.329 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
15:55:44.329 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:55:44.329 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.329 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.329 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.329 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.329 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:55:44.329 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.329 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:55:44.329 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.329 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:55:44.329 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.329 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.329 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.329 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.330 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.330 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
.15:55:44.330 [debug] Setting up test state
15:55:44.330 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
15:55:44.330 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.330 [debug] Returning context with state
15:55:44.330 [debug] Starting query operations test with state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.330 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
15:55:44.330 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.330 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.330 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.330 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:55:44.330 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
15:55:44.330 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:55:44.330 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
15:55:44.330 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:55:44.330 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.330 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.330 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.331 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.331 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:55:44.331 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.331 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:55:44.331 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.331 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:55:44.331 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.331 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.331 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.331 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.331 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.331 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.331 [debug] Executing query with pattern: [:person, :knows, :person]
15:55:44.331 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, transactions: %{1 => %{changes: [{:edge_added, "1", "2"}, {:vertex_added, "2"}, {:vertex_added, "1"}], timestamp: 1736978144331, variant: :committed}}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 1}
15:55:44.332 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:55:44.332 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.332 [debug] Processing graph with:
15:55:44.332 [debug]   vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}
15:55:44.332 [debug]   edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}]
15:55:44.332 [debug] Extracting edges from: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}]
15:55:44.332 [debug] Processing list of edges
15:55:44.332 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}
15:55:44.332 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.332 [debug] Extracted edges result: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}]
15:55:44.332 [debug] Extracted edges: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}]
15:55:44.332 [debug] Executing query with pattern: [:person, :knows, :person]
15:55:44.332 [debug] Querying with pattern:
  From: :person
  Edge: :knows
  To: :person

15:55:44.332 [debug] Found matching pattern for 1 -> 2
15:55:44.332 [debug] Query results: [{"1", :knows, "2"}]
.15:55:44.332 [debug] Setting up test state
15:55:44.332 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
15:55:44.332 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.332 [debug] Returning context with state
15:55:44.332 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
15:55:44.332 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.332 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.332 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.332 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:55:44.333 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
15:55:44.333 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:55:44.333 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
15:55:44.333 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:55:44.333 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.333 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.333 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.333 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.333 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:55:44.333 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.333 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:55:44.333 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.333 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:55:44.333 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.333 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.333 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.333 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.333 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.333 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
.15:55:44.334 [debug] Setting up test state
15:55:44.334 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
15:55:44.334 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.334 [debug] Returning context with state
15:55:44.334 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.334 [debug] Transaction started with id: 1
15:55:44.334 [debug] First vertex added, state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{1 => %{operations: [{:add_vertex, :person, "1", %{age: 30, name: "Alice"}}], timestamp: 1736978144334, variant: :pending}}, locks: %{{:vertex, "1"} => 1}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 1}
15:55:44.334 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
15:55:44.334 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.334 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.334 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.334 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:55:44.334 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
15:55:44.334 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:55:44.334 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}, variant_type: :graph, state: nil
15:55:44.334 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}}}
15:55:44.334 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.334 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.334 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.334 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.334 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:55:44.334 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.335 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:55:44.335 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.335 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}, variant_type: :graph, state: nil
15:55:44.335 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.335 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.335 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.335 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.335 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
15:55:44.335 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "1", target_id: "2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", type: :person}, variant: :vertex, vertex_id: "1"}, "2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", type: :person}, variant: :vertex, vertex_id: "2"}}}
.15:55:44.335 [debug] Setting up test state
15:55:44.335 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
15:55:44.335 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.335 [debug] Returning context with state
15:55:44.335 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
15:55:44.335 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.335 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.335 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.335 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
15:55:44.335 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
15:55:44.335 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
15:55:44.335 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
15:55:44.335 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
15:55:44.336 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.336 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.336 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.336 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.336 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.336 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.336 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.336 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.336 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.336 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.336 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.336 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.336 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
15:55:44.336 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.336 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.336 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.336 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.337 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.337 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.337 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.337 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.337 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, variant_type: :graph, state: nil
15:55:44.337 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
15:55:44.337 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.337 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.337 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.337 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.337 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.337 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.337 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.337 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.338 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.338 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.338 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.338 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.338 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.338 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.338 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.338 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.338 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.338 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.338 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.338 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.338 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.338 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.338 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.339 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.339 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.339 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.340 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.340 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.340 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.340 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.341 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.341 [debug] Executing query with pattern: [:person, :knows, :person]
15:55:44.341 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1736978144341, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
15:55:44.341 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.342 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.342 [debug] Processing graph with:
15:55:44.342 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
15:55:44.342 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.342 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.342 [debug] Processing list of edges
15:55:44.342 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
15:55:44.342 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
15:55:44.342 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
15:55:44.342 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
15:55:44.342 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
15:55:44.342 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.343 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.343 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.343 [debug] Executing query with pattern: [:person, :knows, :person]
15:55:44.343 [debug] Querying with pattern:
  From: :person
  Edge: :knows
  To: :person

15:55:44.343 [debug] Found matching pattern for p1 -> p2
15:55:44.343 [debug] Query results: [{"p1", :knows, "p2"}]
15:55:44.343 [debug] Executing query with pattern: [:person, :works_at, :company]
15:55:44.343 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1736978144341, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
15:55:44.343 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.344 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.344 [debug] Processing graph with:
15:55:44.344 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
15:55:44.344 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.344 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.344 [debug] Processing list of edges
15:55:44.344 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
15:55:44.344 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
15:55:44.344 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
15:55:44.344 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
15:55:44.344 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
15:55:44.345 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.345 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.345 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.345 [debug] Executing query with pattern: [:person, :works_at, :company]
15:55:44.345 [debug] Querying with pattern:
  From: :person
  Edge: :works_at
  To: :company

15:55:44.345 [debug] Found matching pattern for p2 -> c1
15:55:44.345 [debug] Found matching pattern for p1 -> c1
15:55:44.345 [debug] Query results: [{"p2", :works_at, "c1"}, {"p1", :works_at, "c1"}]
15:55:44.345 [debug] Executing query with pattern: [:company, :owns, :project]
15:55:44.346 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1736978144341, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
15:55:44.346 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.346 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.346 [debug] Processing graph with:
15:55:44.347 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
15:55:44.347 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.347 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.347 [debug] Processing list of edges
15:55:44.347 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
15:55:44.347 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
15:55:44.347 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
15:55:44.347 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
15:55:44.347 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
15:55:44.348 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.348 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.348 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.348 [debug] Executing query with pattern: [:company, :owns, :project]
15:55:44.348 [debug] Querying with pattern:
  From: :company
  Edge: :owns
  To: :project

15:55:44.348 [debug] Found matching pattern for c1 -> proj1
15:55:44.348 [debug] Query results: [{"c1", :owns, "proj1"}]
.15:55:44.348 [debug] Setting up test state
15:55:44.348 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
15:55:44.348 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.348 [debug] Returning context with state
15:55:44.348 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, variant_type: :graph, state: nil
15:55:44.348 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.349 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.349 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.349 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
15:55:44.349 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
15:55:44.349 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
15:55:44.349 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}, variant_type: :graph, state: nil
15:55:44.349 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}}}
15:55:44.349 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.349 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.349 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.349 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.349 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.349 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.349 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.349 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.349 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.349 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.349 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.349 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.349 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
15:55:44.349 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.349 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.349 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.350 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.350 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.350 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.350 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}, variant_type: :graph, state: nil
15:55:44.350 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}}}
15:55:44.350 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}, variant_type: :graph, state: nil
15:55:44.350 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}}}
15:55:44.350 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.350 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.350 [debug] Recursive field result for edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.350 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.350 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.350 [debug] Recursive field result for edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.350 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.351 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.351 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.351 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.351 [debug] do_fold called with data: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.351 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.351 [debug] do_fold called with data: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.351 [debug] Processing recursive fields of: %{edge_list: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.351 [debug] do_fold called with data: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.351 [debug] Processing recursive fields of: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.351 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
15:55:44.351 [debug] Processing recursive fields of: %{variant: :empty}
15:55:44.351 [debug] Recursive field result for edge_list: %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}
15:55:44.351 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.351 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.351 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.352 [debug] Recursive field result for edge_list: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.352 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.352 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.353 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.353 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.353 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.353 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.354 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.354 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.354 [debug] Executing query with pattern: [%{role: "Developer"}, :works_at, %{industry: "Software"}]
15:55:44.354 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1736978144354, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
15:55:44.355 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.355 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.355 [debug] Processing graph with:
15:55:44.355 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
15:55:44.355 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.356 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.356 [debug] Processing list of edges
15:55:44.356 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
15:55:44.356 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
15:55:44.356 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
15:55:44.356 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
15:55:44.356 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
15:55:44.356 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.356 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.356 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.356 [debug] Executing query with pattern: [%{role: "Developer"}, :works_at, %{industry: "Software"}]
15:55:44.356 [debug] Querying with pattern:
  From: %{role: "Developer"}
  Edge: :works_at
  To: %{industry: "Software"}

15:55:44.356 [debug] Pattern match failed for p2 -> c1
15:55:44.356 [debug] Found matching pattern for p1 -> c1
15:55:44.356 [debug] Query results: [{"p1", :works_at, "c1"}]
15:55:44.356 [debug] Executing query with pattern: [%{role: "Manager"}, :works_on, %{status: "Active"}]
15:55:44.356 [debug] Current state: %Graffiti.State{graph: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, transactions: %{1 => %{changes: [{:edge_added, "c1", "proj1"}, {:edge_added, "p1", "proj1"}, {:edge_added, "p2", "c1"}, {:edge_added, "p1", "c1"}, {:edge_added, "p1", "p2"}, {:vertex_added, "proj1"}, {:vertex_added, "c1"}, {:vertex_added, "p2"}, {:vertex_added, "p1"}], timestamp: 1736978144354, variant: :committed}}, locks: %{}, schema: %{company: %{properties: [name: [type: :string, required: true], industry: [type: :string, required: true]], required: [:name, :industry]}, person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}, project: %{properties: [name: [type: :string, required: true], status: [type: :string, required: true]], required: [:name, :status]}}, transaction_counter: 1}
15:55:44.357 [debug] do_fold called with data: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}, variant_type: :graph, state: nil
15:55:44.357 [debug] Processing recursive fields of: %{edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.357 [debug] Processing graph with:
15:55:44.357 [debug]   vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}
15:55:44.357 [debug]   edge_list: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.358 [debug] Extracting edges from: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}]
15:55:44.358 [debug] Processing list of edges
15:55:44.358 [debug] Found edge: %{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}
15:55:44.358 [debug] Found edge: %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}
15:55:44.358 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}
15:55:44.358 [debug] Found edge: %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}
15:55:44.358 [debug] Found edge: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}
15:55:44.358 [debug] Skipping non-edge: %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: [%{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, %{edge_list: %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}], metadata: %{type: :directed}, variant: :graph, vertex_map: %{"c1" => %{adjacency: %{variant: :empty}, properties: %{industry: "Software", name: "TechCorp", type: :company}, variant: :vertex, vertex_id: "c1"}, "p1" => %{adjacency: %{variant: :empty}, properties: %{age: 30, name: "Alice", role: "Developer", type: :person}, variant: :vertex, vertex_id: "p1"}, "p2" => %{adjacency: %{variant: :empty}, properties: %{age: 25, name: "Bob", role: "Manager", type: :person}, variant: :vertex, vertex_id: "p2"}, "proj1" => %{adjacency: %{variant: :empty}, properties: %{name: "GraphDB", status: "Active", type: :project}, variant: :vertex, vertex_id: "proj1"}}}
15:55:44.358 [debug] Extracted edges result: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.358 [debug] Extracted edges: [%{edge_props: %{type: :owns}, edge_weight: 1, source_id: "c1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_on}, edge_weight: 1, source_id: "p1", target_id: "proj1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p2", target_id: "c1", variant: :edge}, %{edge_props: %{type: :works_at}, edge_weight: 1, source_id: "p1", target_id: "c1", variant: :edge}, %{edge_props: %{type: :knows}, edge_weight: 1, source_id: "p1", target_id: "p2", variant: :edge}]
15:55:44.358 [debug] Executing query with pattern: [%{role: "Manager"}, :works_on, %{status: "Active"}]
15:55:44.358 [debug] Querying with pattern:
  From: %{role: "Manager"}
  Edge: :works_on
  To: %{status: "Active"}

15:55:44.358 [debug] Pattern match failed for p1 -> proj1
15:55:44.358 [debug] Query results: []
.15:55:44.358 [debug] Setting up test state
15:55:44.358 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
15:55:44.358 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.358 [debug] Returning context with state
.15:55:44.358 [debug] Setting up test state
15:55:44.358 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
15:55:44.359 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.359 [debug] Returning context with state
.15:55:44.359 [debug] Setting up test state
15:55:44.359 [debug] Initial state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{}, transaction_counter: 0}
15:55:44.359 [debug] State after schema definition: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
15:55:44.359 [debug] Returning context with state
15:55:44.359 [debug] Starting edge validation test with state: %Graffiti.State{graph: %{edge_list: %{variant: :empty}, metadata: %{type: :directed}, variant: :graph, vertex_map: %{}}, transactions: %{}, locks: %{}, schema: %{person: %{properties: [name: [type: :string, required: true], age: [type: :integer, required: true]], required: [:name, :age]}}, transaction_counter: 0}
.
Finished in 0.1 seconds (0.00s async, 0.1s sync)
12 tests, 0 failures

Randomized with seed 201326
