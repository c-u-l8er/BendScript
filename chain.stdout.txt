Generated graphrenia app
Excluding tags: [:skip]

13:43:56.566 [debug] Bend initial value: [5, 4, 3, 2, 1]
13:43:56.569 [debug] Executing bend with initial: [5, 4, 3, 2, 1]
13:43:56.569 [debug] Executing fun with value: [5, 4, 3, 2, 1]
13:43:56.569 [debug] Evaluating bend block with value: [5, 4, 3, 2, 1]
13:43:56.571 [debug] Block returned: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.571 [debug] Fun returned result: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.571 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.571 [debug] Executing bend with initial: [4, 3, 2, 1]
13:43:56.571 [debug] Executing fun with value: [4, 3, 2, 1]
13:43:56.571 [debug] Evaluating bend block with value: [4, 3, 2, 1]
13:43:56.571 [debug] Block returned: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.571 [debug] Fun returned result: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.571 [debug] Processing constructed value: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.571 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.571 [debug] Executing fun with value: [3, 2, 1]
13:43:56.571 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.571 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.571 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.571 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.571 [debug] Executing bend with initial: [2, 1]
13:43:56.571 [debug] Executing fun with value: [2, 1]
13:43:56.571 [debug] Evaluating bend block with value: [2, 1]
13:43:56.571 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.571 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.571 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.571 [debug] Executing bend with initial: [1]
13:43:56.571 [debug] Executing fun with value: [1]
13:43:56.571 [debug] Evaluating bend block with value: [1]
13:43:56.571 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.571 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.571 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.571 [debug] Executing bend with initial: []
13:43:56.571 [debug] Executing fun with value: []
13:43:56.571 [debug] Evaluating bend block with value: []
13:43:56.571 [debug] Block returned: %{variant: :null}
13:43:56.571 [debug] Fun returned result: %{variant: :null}
13:43:56.571 [debug] Processing constructed value: %{variant: :null}
13:43:56.571 [debug] do_bend final result: %{variant: :null}
13:43:56.571 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.571 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.571 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.571 [debug] do_bend final result: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.571 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.571 [debug] Final bend result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.571 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: %{variant: :null}
13:43:56.571 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.571 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: %{variant: :null}
13:43:56.571 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.571 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: %{variant: :null}
13:43:56.571 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.571 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: %{variant: :null}
13:43:56.571 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.571 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: %{variant: :null}
13:43:56.572 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.572 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: %{variant: :null}
13:43:56.572 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.572 [debug] Recursive field result for tail: {%{variant: :null}, %{variant: :null}}
13:43:56.572 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: %{variant: :null}
13:43:56.572 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.574 [debug] Bend initial value: []
13:43:56.574 [debug] Executing bend with initial: []
13:43:56.574 [debug] Executing fun with value: []
13:43:56.574 [debug] Evaluating bend block with value: []
13:43:56.574 [debug] Block returned: %{variant: :null}
13:43:56.574 [debug] Fun returned result: %{variant: :null}
13:43:56.574 [debug] Processing constructed value: %{variant: :null}
13:43:56.574 [debug] do_bend final result: %{variant: :null}
13:43:56.574 [debug] Final bend result: %{variant: :null}
13:43:56.574 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.574 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.574 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.574 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.574 [debug] Bend initial value: [5, 4, 3, 2, 1]
13:43:56.574 [debug] Executing bend with initial: [5, 4, 3, 2, 1]
13:43:56.574 [debug] Executing fun with value: [5, 4, 3, 2, 1]
13:43:56.574 [debug] Evaluating bend block with value: [5, 4, 3, 2, 1]
13:43:56.574 [debug] Block returned: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.574 [debug] Fun returned result: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.574 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.574 [debug] Executing bend with initial: [4, 3, 2, 1]
13:43:56.574 [debug] Executing fun with value: [4, 3, 2, 1]
13:43:56.574 [debug] Evaluating bend block with value: [4, 3, 2, 1]
13:43:56.574 [debug] Block returned: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.574 [debug] Fun returned result: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.574 [debug] Processing constructed value: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.574 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.574 [debug] Executing fun with value: [3, 2, 1]
13:43:56.574 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.574 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.574 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.574 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.574 [debug] Executing bend with initial: [2, 1]
13:43:56.574 [debug] Executing fun with value: [2, 1]
13:43:56.574 [debug] Evaluating bend block with value: [2, 1]
13:43:56.574 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.574 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.574 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.574 [debug] Executing bend with initial: [1]
13:43:56.574 [debug] Executing fun with value: [1]
13:43:56.574 [debug] Evaluating bend block with value: [1]
13:43:56.574 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.574 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.574 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.574 [debug] Executing bend with initial: []
13:43:56.574 [debug] Executing fun with value: []
13:43:56.574 [debug] Evaluating bend block with value: []
13:43:56.574 [debug] Block returned: %{variant: :null}
13:43:56.574 [debug] Fun returned result: %{variant: :null}
13:43:56.574 [debug] Processing constructed value: %{variant: :null}
13:43:56.574 [debug] do_bend final result: %{variant: :null}
13:43:56.574 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.574 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.574 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.574 [debug] do_bend final result: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.575 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.575 [debug] Final bend result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.575 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 3
13:43:56.575 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.575 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 3
13:43:56.575 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.575 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 3
13:43:56.575 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.575 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 3
13:43:56.575 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.575 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 3
13:43:56.575 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.575 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 3
13:43:56.575 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.575 [debug] Recursive field result for tail: {%{variant: :null}, 3}
13:43:56.575 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 3
13:43:56.575 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.575 [debug] Bend initial value: []
13:43:56.575 [debug] Executing bend with initial: []
13:43:56.575 [debug] Executing fun with value: []
13:43:56.575 [debug] Evaluating bend block with value: []
13:43:56.575 [debug] Block returned: %{variant: :null}
13:43:56.575 [debug] Fun returned result: %{variant: :null}
13:43:56.575 [debug] Processing constructed value: %{variant: :null}
13:43:56.575 [debug] do_bend final result: %{variant: :null}
13:43:56.575 [debug] Final bend result: %{variant: :null}
13:43:56.575 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.575 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.575 [debug] Bend initial value: []
13:43:56.575 [debug] Executing bend with initial: []
13:43:56.575 [debug] Executing fun with value: []
13:43:56.575 [debug] Evaluating bend block with value: []
13:43:56.575 [debug] Block returned: %{variant: :null}
13:43:56.575 [debug] Fun returned result: %{variant: :null}
13:43:56.575 [debug] Processing constructed value: %{variant: :null}
13:43:56.575 [debug] do_bend final result: %{variant: :null}
13:43:56.575 [debug] Final bend result: %{variant: :null}
13:43:56.575 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.575 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.575 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.575 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.577 [debug] Bend initial value: ["c", "b", "a"]
13:43:56.577 [debug] Executing bend with initial: ["c", "b", "a"]
13:43:56.577 [debug] Executing fun with value: ["c", "b", "a"]
13:43:56.577 [debug] Evaluating bend block with value: ["c", "b", "a"]
13:43:56.577 [debug] Block returned: %{head: "c", tail: {:fork, ["b", "a"]}, variant: :cons}
13:43:56.577 [debug] Fun returned result: %{head: "c", tail: {:fork, ["b", "a"]}, variant: :cons}
13:43:56.577 [debug] Processing constructed value: %{head: "c", tail: {:fork, ["b", "a"]}, variant: :cons}
13:43:56.577 [debug] Executing bend with initial: ["b", "a"]
13:43:56.577 [debug] Executing fun with value: ["b", "a"]
13:43:56.577 [debug] Evaluating bend block with value: ["b", "a"]
13:43:56.577 [debug] Block returned: %{head: "b", tail: {:fork, ["a"]}, variant: :cons}
13:43:56.577 [debug] Fun returned result: %{head: "b", tail: {:fork, ["a"]}, variant: :cons}
13:43:56.577 [debug] Processing constructed value: %{head: "b", tail: {:fork, ["a"]}, variant: :cons}
13:43:56.577 [debug] Executing bend with initial: ["a"]
13:43:56.577 [debug] Executing fun with value: ["a"]
13:43:56.577 [debug] Evaluating bend block with value: ["a"]
13:43:56.577 [debug] Block returned: %{head: "a", tail: {:fork, []}, variant: :cons}
13:43:56.577 [debug] Fun returned result: %{head: "a", tail: {:fork, []}, variant: :cons}
13:43:56.577 [debug] Processing constructed value: %{head: "a", tail: {:fork, []}, variant: :cons}
13:43:56.577 [debug] Executing bend with initial: []
13:43:56.577 [debug] Executing fun with value: []
13:43:56.577 [debug] Evaluating bend block with value: []
13:43:56.577 [debug] Block returned: %{variant: :null}
13:43:56.577 [debug] Fun returned result: %{variant: :null}
13:43:56.577 [debug] Processing constructed value: %{variant: :null}
13:43:56.577 [debug] do_bend final result: %{variant: :null}
13:43:56.577 [debug] do_bend final result: %{head: "a", tail: %{variant: :null}, variant: :cons}
13:43:56.577 [debug] do_bend final result: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.577 [debug] do_bend final result: %{head: "c", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.577 [debug] Final bend result: %{head: "c", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.578 [debug] do_fold called with data: %{head: "c", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: ""
13:43:56.578 [debug] Processing recursive fields of: %{head: "c", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.578 [debug] do_fold called with data: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: ""
13:43:56.578 [debug] Processing recursive fields of: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.578 [debug] do_fold called with data: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: ""
13:43:56.578 [debug] Processing recursive fields of: %{head: "a", tail: %{variant: :null}, variant: :cons}
13:43:56.578 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: ""
13:43:56.578 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.578 [debug] Recursive field result for tail: {"", ""}
13:43:56.578 [debug] do_fold called with non-variant data: ""
13:43:56.578 [debug] Recursive field result for tail: {"a", "a"}
13:43:56.578 [debug] do_fold called with non-variant data: "a"
13:43:56.578 [debug] Recursive field result for tail: {"ab", "ab"}
13:43:56.578 [debug] do_fold called with non-variant data: "ab"
13:43:56.578 [debug] Bend initial value: [3, 2, 1]
13:43:56.578 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.578 [debug] Executing fun with value: [3, 2, 1]
13:43:56.578 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.578 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.578 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.578 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.578 [debug] Executing bend with initial: [2, 1]
13:43:56.578 [debug] Executing fun with value: [2, 1]
13:43:56.578 [debug] Evaluating bend block with value: [2, 1]
13:43:56.578 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.578 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.578 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.578 [debug] Executing bend with initial: [1]
13:43:56.578 [debug] Executing fun with value: [1]
13:43:56.578 [debug] Evaluating bend block with value: [1]
13:43:56.578 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.578 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.578 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.578 [debug] Executing bend with initial: []
13:43:56.578 [debug] Executing fun with value: []
13:43:56.578 [debug] Evaluating bend block with value: []
13:43:56.578 [debug] Block returned: %{variant: :null}
13:43:56.578 [debug] Fun returned result: %{variant: :null}
13:43:56.578 [debug] Processing constructed value: %{variant: :null}
13:43:56.578 [debug] do_bend final result: %{variant: :null}
13:43:56.578 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.578 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.578 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.578 [debug] Final bend result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.578 [debug] Bend initial value: [6, 5, 4]
13:43:56.578 [debug] Executing bend with initial: [6, 5, 4]
13:43:56.578 [debug] Executing fun with value: [6, 5, 4]
13:43:56.578 [debug] Evaluating bend block with value: [6, 5, 4]
13:43:56.578 [debug] Block returned: %{head: 6, tail: {:fork, [5, 4]}, variant: :cons}
13:43:56.578 [debug] Fun returned result: %{head: 6, tail: {:fork, [5, 4]}, variant: :cons}
13:43:56.578 [debug] Processing constructed value: %{head: 6, tail: {:fork, [5, 4]}, variant: :cons}
13:43:56.578 [debug] Executing bend with initial: [5, 4]
13:43:56.578 [debug] Executing fun with value: [5, 4]
13:43:56.578 [debug] Evaluating bend block with value: [5, 4]
13:43:56.578 [debug] Block returned: %{head: 5, tail: {:fork, [4]}, variant: :cons}
13:43:56.578 [debug] Fun returned result: %{head: 5, tail: {:fork, [4]}, variant: :cons}
13:43:56.578 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4]}, variant: :cons}
13:43:56.578 [debug] Executing bend with initial: [4]
13:43:56.578 [debug] Executing fun with value: [4]
13:43:56.578 [debug] Evaluating bend block with value: [4]
13:43:56.578 [debug] Block returned: %{head: 4, tail: {:fork, []}, variant: :cons}
13:43:56.578 [debug] Fun returned result: %{head: 4, tail: {:fork, []}, variant: :cons}
13:43:56.578 [debug] Processing constructed value: %{head: 4, tail: {:fork, []}, variant: :cons}
13:43:56.578 [debug] Executing bend with initial: []
13:43:56.578 [debug] Executing fun with value: []
13:43:56.578 [debug] Evaluating bend block with value: []
13:43:56.578 [debug] Block returned: %{variant: :null}
13:43:56.578 [debug] Fun returned result: %{variant: :null}
13:43:56.578 [debug] Processing constructed value: %{variant: :null}
13:43:56.578 [debug] do_bend final result: %{variant: :null}
13:43:56.578 [debug] do_bend final result: %{head: 4, tail: %{variant: :null}, variant: :cons}
13:43:56.578 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.578 [debug] do_bend final result: %{head: 6, tail: %{head: 5, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.578 [debug] Final bend result: %{head: 6, tail: %{head: 5, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.578 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.578 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.578 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.578 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.578 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.578 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.578 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.578 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.578 [debug] Recursive field result for tail: %{head: 6, tail: %{head: 5, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.578 [debug] do_fold called with data: %{head: 6, tail: %{head: 5, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.579 [debug] Processing recursive fields of: %{head: 6, tail: %{head: 5, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.579 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.579 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.579 [debug] do_fold called with data: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.579 [debug] Processing recursive fields of: %{head: 4, tail: %{variant: :null}, variant: :cons}
13:43:56.579 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.579 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.579 [debug] Bend initial value: [5, 4, 3, 2, 1]
13:43:56.579 [debug] Executing bend with initial: [5, 4, 3, 2, 1]
13:43:56.579 [debug] Executing fun with value: [5, 4, 3, 2, 1]
13:43:56.579 [debug] Evaluating bend block with value: [5, 4, 3, 2, 1]
13:43:56.579 [debug] Block returned: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.579 [debug] Fun returned result: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.579 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.579 [debug] Executing bend with initial: [4, 3, 2, 1]
13:43:56.579 [debug] Executing fun with value: [4, 3, 2, 1]
13:43:56.579 [debug] Evaluating bend block with value: [4, 3, 2, 1]
13:43:56.579 [debug] Block returned: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.579 [debug] Fun returned result: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.579 [debug] Processing constructed value: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.579 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.579 [debug] Executing fun with value: [3, 2, 1]
13:43:56.579 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.579 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.579 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.579 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.579 [debug] Executing bend with initial: [2, 1]
13:43:56.579 [debug] Executing fun with value: [2, 1]
13:43:56.579 [debug] Evaluating bend block with value: [2, 1]
13:43:56.579 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.579 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.579 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.579 [debug] Executing bend with initial: [1]
13:43:56.579 [debug] Executing fun with value: [1]
13:43:56.579 [debug] Evaluating bend block with value: [1]
13:43:56.579 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.579 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.579 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.579 [debug] Executing bend with initial: []
13:43:56.579 [debug] Executing fun with value: []
13:43:56.579 [debug] Evaluating bend block with value: []
13:43:56.579 [debug] Block returned: %{variant: :null}
13:43:56.579 [debug] Fun returned result: %{variant: :null}
13:43:56.579 [debug] Processing constructed value: %{variant: :null}
13:43:56.579 [debug] do_bend final result: %{variant: :null}
13:43:56.579 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.579 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.579 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.579 [debug] do_bend final result: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.579 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.579 [debug] Final bend result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.579 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
13:43:56.579 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.579 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
13:43:56.579 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.580 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
13:43:56.580 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.580 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
13:43:56.580 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.580 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 10
13:43:56.580 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.580 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 10
13:43:56.580 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.580 [debug] Recursive field result for tail: {%{variant: :null}, 10}
13:43:56.580 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 10
13:43:56.580 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.580 [debug] Bend initial value: []
13:43:56.580 [debug] Executing bend with initial: []
13:43:56.580 [debug] Executing fun with value: []
13:43:56.580 [debug] Evaluating bend block with value: []
13:43:56.580 [debug] Block returned: %{variant: :null}
13:43:56.580 [debug] Fun returned result: %{variant: :null}
13:43:56.580 [debug] Processing constructed value: %{variant: :null}
13:43:56.580 [debug] do_bend final result: %{variant: :null}
13:43:56.580 [debug] Final bend result: %{variant: :null}
13:43:56.580 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.580 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.580 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.580 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.580 [debug] Bend initial value: []
13:43:56.580 [debug] Executing bend with initial: []
13:43:56.580 [debug] Executing fun with value: []
13:43:56.580 [debug] Evaluating bend block with value: []
13:43:56.580 [debug] Block returned: %{variant: :null}
13:43:56.580 [debug] Fun returned result: %{variant: :null}
13:43:56.580 [debug] Processing constructed value: %{variant: :null}
13:43:56.580 [debug] do_bend final result: %{variant: :null}
13:43:56.580 [debug] Final bend result: %{variant: :null}
13:43:56.580 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.580 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.580 [debug] Bend initial value: []
13:43:56.580 [debug] Executing bend with initial: []
13:43:56.580 [debug] Executing fun with value: []
13:43:56.580 [debug] Evaluating bend block with value: []
13:43:56.580 [debug] Block returned: %{variant: :null}
13:43:56.580 [debug] Fun returned result: %{variant: :null}
13:43:56.580 [debug] Processing constructed value: %{variant: :null}
13:43:56.580 [debug] do_bend final result: %{variant: :null}
13:43:56.580 [debug] Final bend result: %{variant: :null}
13:43:56.580 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 3
13:43:56.580 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.580 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.581 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.581 [debug] Bend initial value: [5, 4, 3, 2, 1]
13:43:56.581 [debug] Executing bend with initial: [5, 4, 3, 2, 1]
13:43:56.581 [debug] Executing fun with value: [5, 4, 3, 2, 1]
13:43:56.581 [debug] Evaluating bend block with value: [5, 4, 3, 2, 1]
13:43:56.581 [debug] Block returned: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.581 [debug] Fun returned result: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.581 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.581 [debug] Executing bend with initial: [4, 3, 2, 1]
13:43:56.581 [debug] Executing fun with value: [4, 3, 2, 1]
13:43:56.581 [debug] Evaluating bend block with value: [4, 3, 2, 1]
13:43:56.581 [debug] Block returned: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.581 [debug] Fun returned result: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.581 [debug] Processing constructed value: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.581 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.581 [debug] Executing fun with value: [3, 2, 1]
13:43:56.581 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.581 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.581 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.581 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.581 [debug] Executing bend with initial: [2, 1]
13:43:56.581 [debug] Executing fun with value: [2, 1]
13:43:56.581 [debug] Evaluating bend block with value: [2, 1]
13:43:56.581 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.581 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.581 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.581 [debug] Executing bend with initial: [1]
13:43:56.581 [debug] Executing fun with value: [1]
13:43:56.581 [debug] Evaluating bend block with value: [1]
13:43:56.581 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.581 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.581 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.581 [debug] Executing bend with initial: []
13:43:56.581 [debug] Executing fun with value: []
13:43:56.581 [debug] Evaluating bend block with value: []
13:43:56.581 [debug] Block returned: %{variant: :null}
13:43:56.581 [debug] Fun returned result: %{variant: :null}
13:43:56.581 [debug] Processing constructed value: %{variant: :null}
13:43:56.581 [debug] do_bend final result: %{variant: :null}
13:43:56.581 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.581 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.581 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.581 [debug] do_bend final result: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.581 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.581 [debug] Final bend result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}


  1) test breaker/1 converts after operations (ChainTest)
     test/examples/chain_test.exs:178
     ** (BadFunctionError) expected a function, got: %{head: 1, tail: %{variant: :null}, variant: :cons}
     code: {reversed, _} = Chain.reverse(list)
     stacktrace:
       (graphrenia 0.1.0) lib/ben_ben.ex:277: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/examples/chain.ex:82: anonymous fn/2 in Chain.reverse/1
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       test/examples/chain_test.exs:180: (test)

.13:43:56.581 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 5
13:43:56.581 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.581 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 5
13:43:56.581 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.581 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 5
13:43:56.581 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.581 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 5
13:43:56.581 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.581 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 5
13:43:56.581 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.581 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 5
13:43:56.581 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.581 [debug] Recursive field result for tail: {%{variant: :null}, 5}
13:43:56.582 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 5
13:43:56.582 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.582 [debug] Bend initial value: []
13:43:56.582 [debug] Executing bend with initial: []
13:43:56.582 [debug] Executing fun with value: []
13:43:56.582 [debug] Evaluating bend block with value: []
13:43:56.582 [debug] Block returned: %{variant: :null}
13:43:56.582 [debug] Fun returned result: %{variant: :null}
13:43:56.582 [debug] Processing constructed value: %{variant: :null}
13:43:56.582 [debug] do_bend final result: %{variant: :null}
13:43:56.582 [debug] Final bend result: %{variant: :null}
13:43:56.582 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 0
13:43:56.582 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.582 [debug] Bend initial value: [5, 4, 3, 2, 1]
13:43:56.582 [debug] Executing bend with initial: [5, 4, 3, 2, 1]
13:43:56.582 [debug] Executing fun with value: [5, 4, 3, 2, 1]
13:43:56.582 [debug] Evaluating bend block with value: [5, 4, 3, 2, 1]
13:43:56.582 [debug] Block returned: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.582 [debug] Fun returned result: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.582 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.582 [debug] Executing bend with initial: [4, 3, 2, 1]
13:43:56.582 [debug] Executing fun with value: [4, 3, 2, 1]
13:43:56.582 [debug] Evaluating bend block with value: [4, 3, 2, 1]
13:43:56.582 [debug] Block returned: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}


  2) test take/2 takes less than list length (ChainTest)
     test/examples/chain_test.exs:129
     ** (BadFunctionError) expected a function, got: %{head: 1, tail: %{variant: :null}, variant: :cons}
     code: {result, _} = Chain.take(list, 3)
     stacktrace:
       (graphrenia 0.1.0) lib/ben_ben.ex:277: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/examples/chain.ex:106: anonymous fn/2 in Chain.take/2
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       test/examples/chain_test.exs:131: (test)

13:43:56.582 [debug] Fun returned result: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.582 [debug] Processing constructed value: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.582 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.582 [debug] Executing fun with value: [3, 2, 1]
13:43:56.582 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.582 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.582 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.582 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.582 [debug] Executing bend with initial: [2, 1]
13:43:56.582 [debug] Executing fun with value: [2, 1]
13:43:56.582 [debug] Evaluating bend block with value: [2, 1]
13:43:56.582 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.582 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
...13:43:56.582 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.582 [debug] Executing bend with initial: [1]
13:43:56.582 [debug] Executing fun with value: [1]
13:43:56.582 [debug] Evaluating bend block with value: [1]
13:43:56.582 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.582 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.582 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.582 [debug] Executing bend with initial: []
13:43:56.582 [debug] Executing fun with value: []
13:43:56.582 [debug] Evaluating bend block with value: []
13:43:56.582 [debug] Block returned: %{variant: :null}
13:43:56.582 [debug] Fun returned result: %{variant: :null}
13:43:56.582 [debug] Processing constructed value: %{variant: :null}
13:43:56.582 [debug] do_bend final result: %{variant: :null}
13:43:56.582 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.582 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.582 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.582 [debug] do_bend final result: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.582 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.582 [debug] Final bend result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.582 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.582 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.582 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.582 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.582 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.582 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.582 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.583 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.583 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.583 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.583 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.583 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.583 [debug] Recursive field result for tail: %{variant: :null}
13:43:56.583 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.583 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.583 [debug] Bend initial value: [5, 4, 3, 2, 1]
13:43:56.583 [debug] Executing bend with initial: [5, 4, 3, 2, 1]
13:43:56.583 [debug] Executing fun with value: [5, 4, 3, 2, 1]
13:43:56.583 [debug] Evaluating bend block with value: [5, 4, 3, 2, 1]
13:43:56.583 [debug] Block returned: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.583 [debug] Fun returned result: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.583 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.583 [debug] Executing bend with initial: [4, 3, 2, 1]
13:43:56.583 [debug] Executing fun with value: [4, 3, 2, 1]
13:43:56.583 [debug] Evaluating bend block with value: [4, 3, 2, 1]
13:43:56.583 [debug] Block returned: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.583 [debug] Fun returned result: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}


  3) test concat/2 concatenates two non-empty lists (ChainTest)
     test/examples/chain_test.exs:115
     ** (BadFunctionError) expected a function, got: %{head: 1, tail: %{head: 6, tail: %{head: 5, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
     code: result = Chain.concat(list1, list2)
     stacktrace:
       (graphrenia 0.1.0) lib/ben_ben.ex:277: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/examples/chain.ex:95: anonymous fn/3 in Chain.concat/2
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       test/examples/chain_test.exs:118: (test)

13:43:56.583 [debug] Processing constructed value: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.583 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.583 [debug] Executing fun with value: [3, 2, 1]
13:43:56.583 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.583 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.583 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.583 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.583 [debug] Executing bend with initial: [2, 1]
13:43:56.583 [debug] Executing fun with value: [2, 1]
13:43:56.583 [debug] Evaluating bend block with value: [2, 1]
13:43:56.583 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.583 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.583 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.583 [debug] Executing bend with initial: [1]
13:43:56.583 [debug] Executing fun with value: [1]
13:43:56.583 [debug] Evaluating bend block with value: [1]
13:43:56.583 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.583 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.583 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.583 [debug] Executing bend with initial: []
13:43:56.583 [debug] Executing fun with value: []
13:43:56.583 [debug] Evaluating bend block with value: []
13:43:56.583 [debug] Block returned: %{variant: :null}
13:43:56.583 [debug] Fun returned result: %{variant: :null}
13:43:56.583 [debug] Processing constructed value: %{variant: :null}
13:43:56.583 [debug] do_bend final result: %{variant: :null}
13:43:56.583 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.583 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.583 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.583 [debug] do_bend final result: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.583 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.583 [debug] Final bend result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.583 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 2
13:43:56.583 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.583 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 2
13:43:56.583 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.583 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 2
13:43:56.583 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.583 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 2


13:43:56.583 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.583 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 2
13:43:56.583 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.583 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 2
13:43:56.583 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.583 [debug] Recursive field result for tail: {%{variant: :null}, 2}
13:43:56.583 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 2
13:43:56.583 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.583 [debug] Bend initial value: [5, 4, 3, 2, 1]
13:43:56.583 [debug] Executing bend with initial: [5, 4, 3, 2, 1]
13:43:56.583 [debug] Executing fun with value: [5, 4, 3, 2, 1]
13:43:56.583 [debug] Evaluating bend block with value: [5, 4, 3, 2, 1]
  4) test drop/2 drops more than list length (ChainTest)
     test/examples/chain_test.exs:160
     ** (BadFunctionError) expected a function, got: %{head: 1, tail: %{variant: :null}, variant: :cons}
     code: {result, _} = Chain.drop(list, 10)
     stacktrace:
       (graphrenia 0.1.0) lib/ben_ben.ex:277: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/examples/chain.ex:122: anonymous fn/2 in Chain.drop/2
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       test/examples/chain_test.exs:162: (test)

13:43:56.583 [debug] Block returned: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
.13:43:56.583 [debug] Fun returned result: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.583 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.583 [debug] Executing bend with initial: [4, 3, 2, 1]
13:43:56.583 [debug] Executing fun with value: [4, 3, 2, 1]
.13:43:56.584 [debug] Evaluating bend block with value: [4, 3, 2, 1]
.13:43:56.584 [debug] Block returned: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.584 [debug] Fun returned result: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.584 [debug] Processing constructed value: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.584 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.584 [debug] Executing fun with value: [3, 2, 1]
13:43:56.584 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.584 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.584 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.584 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.584 [debug] Executing bend with initial: [2, 1]
13:43:56.584 [debug] Executing fun with value: [2, 1]
13:43:56.584 [debug] Evaluating bend block with value: [2, 1]
13:43:56.584 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.584 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.584 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.584 [debug] Executing bend with initial: [1]
13:43:56.584 [debug] Executing fun with value: [1]
13:43:56.584 [debug] Evaluating bend block with value: [1]
13:43:56.584 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.584 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.584 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.584 [debug] Executing bend with initial: []
13:43:56.584 [debug] Executing fun with value: []
13:43:56.584 [debug] Evaluating bend block with value: []
13:43:56.584 [debug] Block returned: %{variant: :null}
13:43:56.584 [debug] Fun returned result: %{variant: :null}
13:43:56.584 [debug] Processing constructed value: %{variant: :null}
13:43:56.584 [debug] do_bend final result: %{variant: :null}
13:43:56.584 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.584 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.584 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.584 [debug] do_bend final result: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.584 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.584 [debug] Final bend result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.584 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil


  5) test drop/2 drops exact list length (ChainTest)
     test/examples/chain_test.exs:154
     ** (BadFunctionError) expected a function, got: %{head: 1, tail: %{variant: :null}, variant: :cons}
     code: {result, _} = Chain.drop(list, 5)
     stacktrace:
       (graphrenia 0.1.0) lib/ben_ben.ex:277: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/examples/chain.ex:122: anonymous fn/2 in Chain.drop/2
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       test/examples/chain_test.exs:156: (test)

.13:43:56.584 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.584 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.584 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.584 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.584 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.584 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.584 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.584 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.584 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.584 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.584 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.584 [debug] Recursive field result for tail: 0
13:43:56.584 [debug] do_fold called with non-variant data: 0
13:43:56.584 [debug] Recursive field result for tail: 1
13:43:56.584 [debug] do_fold called with non-variant data: 1
13:43:56.584 [debug] Recursive field result for tail: 2
13:43:56.584 [debug] do_fold called with non-variant data: 2
13:43:56.584 [debug] Recursive field result for tail: 3
13:43:56.584 [debug] do_fold called with non-variant data: 3
13:43:56.584 [debug] Recursive field result for tail: 4
13:43:56.584 [debug] do_fold called with non-variant data: 4
13:43:56.584 [debug] Bend initial value: []
13:43:56.584 [debug] Executing bend with initial: []
13:43:56.584 [debug] Executing fun with value: []
13:43:56.584 [debug] Evaluating bend block with value: []
13:43:56.584 [debug] Block returned: %{variant: :null}
13:43:56.584 [debug] Fun returned result: %{variant: :null}
13:43:56.584 [debug] Processing constructed value: %{variant: :null}


13:43:56.584 [debug] do_bend final result: %{variant: :null}
13:43:56.584 [debug] Final bend result: %{variant: :null}
  6) test map/2 maps list with transform function (ChainTest)
     test/examples/chain_test.exs:29
     ** (BadFunctionError) expected a function, got: %{head: 1, tail: %{variant: :null}, variant: :cons}
     code: result = Chain.map(list, &(&1 * 2))
     stacktrace:
       (graphrenia 0.1.0) lib/ben_ben.ex:277: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/examples/chain.ex:35: anonymous fn/3 in Chain.map/2
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       test/examples/chain_test.exs:31: (test)

13:43:56.584 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 3
13:43:56.585 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.585 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.585 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.585 [debug] Bend initial value: [3, 2, 1]
13:43:56.585 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.585 [debug] Executing fun with value: [3, 2, 1]
13:43:56.585 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.585 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.585 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.585 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.585 [debug] Executing bend with initial: [2, 1]
13:43:56.585 [debug] Executing fun with value: [2, 1]
13:43:56.585 [debug] Evaluating bend block with value: [2, 1]
13:43:56.585 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.585 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.585 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.585 [debug] Executing bend with initial: [1]
13:43:56.585 [debug] Executing fun with value: [1]
13:43:56.585 [debug] Evaluating bend block with value: [1]
13:43:56.585 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.585 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.585 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.585 [debug] Executing bend with initial: []
13:43:56.585 [debug] Executing fun with value: []
13:43:56.585 [debug] Evaluating bend block with value: []
13:43:56.585 [debug] Block returned: %{variant: :null}
13:43:56.585 [debug] Fun returned result: %{variant: :null}
13:43:56.585 [debug] Processing constructed value: %{variant: :null}
13:43:56.585 [debug] do_bend final result: %{variant: :null}
13:43:56.585 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.585 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.585 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.585 [debug] Final bend result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.585 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.585 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.585 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.585 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.585 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.585 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.585 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.585 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.585 [debug] Recursive field result for tail: []
13:43:56.585 [debug] do_fold called with non-variant data: []
13:43:56.585 [debug] Recursive field result for tail: [1]
13:43:56.585 [debug] do_fold called with non-variant data: [1]
13:43:56.585 [debug] Recursive field result for tail: [2, 1]
13:43:56.585 [debug] do_fold called with non-variant data: [2, 1]


  7) test drop/2 drops less than list length (ChainTest)
     test/examples/chain_test.exs:148
     ** (BadFunctionError) expected a function, got: %{head: 1, tail: %{variant: :null}, variant: :cons}
     code: {result, _} = Chain.drop(list, 2)
     stacktrace:
       (graphrenia 0.1.0) lib/ben_ben.ex:277: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/examples/chain.ex:122: anonymous fn/2 in Chain.drop/2
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       test/examples/chain_test.exs:150: (test)

..13:43:56.586 [debug] Bend initial value: ["c", "b", "a"]
13:43:56.586 [debug] Executing bend with initial: ["c", "b", "a"]
13:43:56.586 [debug] Executing fun with value: ["c", "b", "a"]
13:43:56.586 [debug] Evaluating bend block with value: ["c", "b", "a"]
13:43:56.586 [debug] Block returned: %{head: "c", tail: {:fork, ["b", "a"]}, variant: :cons}
13:43:56.586 [debug] Fun returned result: %{head: "c", tail: {:fork, ["b", "a"]}, variant: :cons}
13:43:56.586 [debug] Processing constructed value: %{head: "c", tail: {:fork, ["b", "a"]}, variant: :cons}
13:43:56.586 [debug] Executing bend with initial: ["b", "a"]
13:43:56.586 [debug] Executing fun with value: ["b", "a"]
13:43:56.586 [debug] Evaluating bend block with value: ["b", "a"]
13:43:56.586 [debug] Block returned: %{head: "b", tail: {:fork, ["a"]}, variant: :cons}
13:43:56.586 [debug] Fun returned result: %{head: "b", tail: {:fork, ["a"]}, variant: :cons}
13:43:56.586 [debug] Processing constructed value: %{head: "b", tail: {:fork, ["a"]}, variant: :cons}
13:43:56.586 [debug] Executing bend with initial: ["a"]
13:43:56.586 [debug] Executing fun with value: ["a"]
13:43:56.586 [debug] Evaluating bend block with value: ["a"]
13:43:56.586 [debug] Block returned: %{head: "a", tail: {:fork, []}, variant: :cons}


13:43:56.586 [debug] Fun returned result: %{head: "a", tail: {:fork, []}, variant: :cons}
13:43:56.586 [debug] Processing constructed value: %{head: "a", tail: {:fork, []}, variant: :cons}
13:43:56.586 [debug] Executing bend with initial: []
13:43:56.586 [debug] Executing fun with value: []
  8) test tool/1 creates list from range (ChainTest)
     test/examples/chain_test.exs:15
     Assertion with == failed
     code:  assert Chain.breaker(Chain.tool(1..3)) == [1, 2, 3]
     left:  [3, 2, 1]
     right: [1, 2, 3]
     stacktrace:
       test/examples/chain_test.exs:16: (test)

13:43:56.586 [debug] Evaluating bend block with value: []
13:43:56.586 [debug] Block returned: %{variant: :null}
13:43:56.586 [debug] Fun returned result: %{variant: :null}
13:43:56.586 [debug] Processing constructed value: %{variant: :null}
13:43:56.586 [debug] do_bend final result: %{variant: :null}
13:43:56.586 [debug] do_bend final result: %{head: "a", tail: %{variant: :null}, variant: :cons}
13:43:56.586 [debug] do_bend final result: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.586 [debug] do_bend final result: %{head: "c", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.586 [debug] Final bend result: %{head: "c", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.586 [debug] do_fold called with data: %{head: "c", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.586 [debug] Processing recursive fields of: %{head: "c", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.586 [debug] do_fold called with data: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.586 [debug] Processing recursive fields of: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.586 [debug] do_fold called with data: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.586 [debug] Processing recursive fields of: %{head: "a", tail: %{variant: :null}, variant: :cons}
13:43:56.586 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.586 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.587 [debug] Recursive field result for tail: []
13:43:56.587 [debug] do_fold called with non-variant data: []
13:43:56.587 [debug] Recursive field result for tail: ["a"]
13:43:56.587 [debug] do_fold called with non-variant data: ["a"]
13:43:56.587 [debug] Recursive field result for tail: ["b", "a"]
13:43:56.587 [debug] do_fold called with non-variant data: ["b", "a"]
13:43:56.587 [debug] Bend initial value: []
13:43:56.587 [debug] Executing bend with initial: []
13:43:56.587 [debug] Executing fun with value: []
13:43:56.587 [debug] Evaluating bend block with value: []
13:43:56.587 [debug] Block returned: %{variant: :null}
13:43:56.587 [debug] Fun returned result: %{variant: :null}
13:43:56.587 [debug] Processing constructed value: %{variant: :null}
13:43:56.587 [debug] do_bend final result: %{variant: :null}
13:43:56.587 [debug] Final bend result: %{variant: :null}
13:43:56.587 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: %{variant: :null}
13:43:56.587 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.587 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.587 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.587 [debug] Bend initial value: [5, 4, 3, 2, 1]
13:43:56.587 [debug] Executing bend with initial: [5, 4, 3, 2, 1]


13:43:56.587 [debug] Executing fun with value: [5, 4, 3, 2, 1]
13:43:56.587 [debug] Evaluating bend block with value: [5, 4, 3, 2, 1]
  9) test tool/1 creates list from arbitrary enum (ChainTest)
     test/examples/chain_test.exs:19
     Assertion with == failed
     code:  assert Chain.breaker(Chain.tool(["a", "b", "c"])) == ["a", "b", "c"]
     left:  ["c", "b", "a"]
     right: ["a", "b", "c"]
     stacktrace:
       test/examples/chain_test.exs:20: (test)

.13:43:56.587 [debug] Block returned: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.587 [debug] Fun returned result: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.587 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.587 [debug] Executing bend with initial: [4, 3, 2, 1]
13:43:56.587 [debug] Executing fun with value: [4, 3, 2, 1]
13:43:56.587 [debug] Evaluating bend block with value: [4, 3, 2, 1]
13:43:56.587 [debug] Block returned: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.587 [debug] Fun returned result: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.587 [debug] Processing constructed value: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.587 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.587 [debug] Executing fun with value: [3, 2, 1]
13:43:56.587 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.587 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.587 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.587 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.587 [debug] Executing bend with initial: [2, 1]
13:43:56.587 [debug] Executing fun with value: [2, 1]
13:43:56.587 [debug] Evaluating bend block with value: [2, 1]
13:43:56.587 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.587 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.587 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.587 [debug] Executing bend with initial: [1]
13:43:56.587 [debug] Executing fun with value: [1]
13:43:56.587 [debug] Evaluating bend block with value: [1]
13:43:56.587 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.587 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.587 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.587 [debug] Executing bend with initial: []
13:43:56.587 [debug] Executing fun with value: []
13:43:56.587 [debug] Evaluating bend block with value: []
13:43:56.587 [debug] Block returned: %{variant: :null}
13:43:56.587 [debug] Fun returned result: %{variant: :null}
13:43:56.587 [debug] Processing constructed value: %{variant: :null}
13:43:56.588 [debug] do_bend final result: %{variant: :null}
13:43:56.588 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.588 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] do_bend final result: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] Final bend result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.588 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.588 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.588 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.588 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.588 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.588 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.588 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.588 [debug] Recursive field result for tail: %{variant: :null}
13:43:56.588 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.588 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.588 [debug] Bend initial value: [5, 4, 3, 2, 1]
13:43:56.588 [debug] Executing bend with initial: [5, 4, 3, 2, 1]
13:43:56.588 [debug] Executing fun with value: [5, 4, 3, 2, 1]
13:43:56.588 [debug] Evaluating bend block with value: [5, 4, 3, 2, 1]
13:43:56.588 [debug] Block returned: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.588 [debug] Fun returned result: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.588 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.588 [debug] Executing bend with initial: [4, 3, 2, 1]
13:43:56.588 [debug] Executing fun with value: [4, 3, 2, 1]
13:43:56.588 [debug] Evaluating bend block with value: [4, 3, 2, 1]
13:43:56.588 [debug] Block returned: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.588 [debug] Fun returned result: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.588 [debug] Processing constructed value: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.588 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.588 [debug] Executing fun with value: [3, 2, 1]
13:43:56.588 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.588 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.588 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.588 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.588 [debug] Executing bend with initial: [2, 1]
13:43:56.588 [debug] Executing fun with value: [2, 1]
13:43:56.588 [debug] Evaluating bend block with value: [2, 1]
13:43:56.588 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.588 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.588 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.588 [debug] Executing bend with initial: [1]
13:43:56.588 [debug] Executing fun with value: [1]
13:43:56.588 [debug] Evaluating bend block with value: [1]
13:43:56.588 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.588 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.588 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.588 [debug] Executing bend with initial: []
13:43:56.588 [debug] Executing fun with value: []
13:43:56.588 [debug] Evaluating bend block with value: []
13:43:56.588 [debug] Block returned: %{variant: :null}
13:43:56.588 [debug] Fun returned result: %{variant: :null}
13:43:56.588 [debug] Processing constructed value: %{variant: :null}
13:43:56.588 [debug] do_bend final result: %{variant: :null}
13:43:56.588 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.588 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] do_bend final result: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] Final bend result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.588 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
13:43:56.588 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.589 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
13:43:56.589 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.589 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10


13:43:56.589 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
 10) test filter/2 filters even numbers (ChainTest)
     test/examples/chain_test.exs:47
     ** (BadFunctionError) expected a function, got: %{head: 1, tail: %{variant: :null}, variant: :cons}
     code: result = Chain.filter(list, &(rem(&1, 2) == 0))
     stacktrace:
       (graphrenia 0.1.0) lib/ben_ben.ex:277: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       test/examples/chain_test.exs:49: (test)

13:43:56.589 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
13:43:56.589 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.589 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 10
13:43:56.589 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.589 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 10
13:43:56.589 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.589 [debug] Recursive field result for tail: {%{variant: :null}, 10}
13:43:56.589 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 10
13:43:56.589 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.589 [debug] Bend initial value: [5, 4, 3, 2, 1]
13:43:56.589 [debug] Executing bend with initial: [5, 4, 3, 2, 1]
13:43:56.589 [debug] Executing fun with value: [5, 4, 3, 2, 1]
13:43:56.589 [debug] Evaluating bend block with value: [5, 4, 3, 2, 1]
13:43:56.589 [debug] Block returned: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.589 [debug] Fun returned result: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.589 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.589 [debug] Executing bend with initial: [4, 3, 2, 1]
13:43:56.589 [debug] Executing fun with value: [4, 3, 2, 1]
13:43:56.589 [debug] Evaluating bend block with value: [4, 3, 2, 1]
13:43:56.589 [debug] Block returned: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.589 [debug] Fun returned result: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.589 [debug] Processing constructed value: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.589 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.589 [debug] Executing fun with value: [3, 2, 1]
13:43:56.589 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.589 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.589 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.589 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.589 [debug] Executing bend with initial: [2, 1]
13:43:56.589 [debug] Executing fun with value: [2, 1]
13:43:56.589 [debug] Evaluating bend block with value: [2, 1]
13:43:56.589 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.589 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.589 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.589 [debug] Executing bend with initial: [1]
13:43:56.589 [debug] Executing fun with value: [1]
13:43:56.589 [debug] Evaluating bend block with value: [1]
13:43:56.589 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.589 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.589 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.589 [debug] Executing bend with initial: []
13:43:56.589 [debug] Executing fun with value: []
13:43:56.589 [debug] Evaluating bend block with value: []
13:43:56.589 [debug] Block returned: %{variant: :null}
13:43:56.589 [debug] Fun returned result: %{variant: :null}
13:43:56.589 [debug] Processing constructed value: %{variant: :null}
13:43:56.589 [debug] do_bend final result: %{variant: :null}
13:43:56.589 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.589 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.589 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.589 [debug] do_bend final result: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.589 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.589 [debug] Final bend result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}


13:43:56.589 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 0
13:43:56.589 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.589 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 0
13:43:56.589 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.589 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 0
13:43:56.589 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.589 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 0
13:43:56.589 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.589 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 0
13:43:56.589 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.589 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 0
13:43:56.589 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.589 [debug] Recursive field result for tail: {0, 0}
13:43:56.589 [debug] do_fold called with non-variant data: 0
13:43:56.589 [debug] Recursive field result for tail: {1, 1}
13:43:56.589 [debug] do_fold called with non-variant data: 1
13:43:56.589 [debug] Recursive field result for tail: {3, 3}
13:43:56.589 [debug] do_fold called with non-variant data: 3
13:43:56.589 [debug] Recursive field result for tail: {6, 6}
13:43:56.589 [debug] do_fold called with non-variant data: 6
13:43:56.589 [debug] Recursive field result for tail: {10, 10}
13:43:56.590 [debug] do_fold called with non-variant data: 10
13:43:56.590 [debug] Bend initial value: [5, 4, 3, 2, 1]
13:43:56.590 [debug] Executing bend with initial: [5, 4, 3, 2, 1]
13:43:56.590 [debug] Executing fun with value: [5, 4, 3, 2, 1]
13:43:56.590 [debug] Evaluating bend block with value: [5, 4, 3, 2, 1]
13:43:56.590 [debug] Block returned: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.590 [debug] Fun returned result: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.590 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.590 [debug] Executing bend with initial: [4, 3, 2, 1]
13:43:56.590 [debug] Executing fun with value: [4, 3, 2, 1]
13:43:56.590 [debug] Evaluating bend block with value: [4, 3, 2, 1]
13:43:56.590 [debug] Block returned: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
 11) test take/2 takes more than list length (ChainTest)
     test/examples/chain_test.exs:135
     ** (BadFunctionError) expected a function, got: %{head: 1, tail: %{variant: :null}, variant: :cons}
     code: {result, _} = Chain.take(list, 10)
     stacktrace:
       (graphrenia 0.1.0) lib/ben_ben.ex:277: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/examples/chain.ex:106: anonymous fn/2 in Chain.take/2
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       test/examples/chain_test.exs:137: (test)

13:43:56.590 [debug] Fun returned result: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.590 [debug] Processing constructed value: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.590 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.590 [debug] Executing fun with value: [3, 2, 1]
13:43:56.590 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.590 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.590 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.590 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.590 [debug] Executing bend with initial: [2, 1]
13:43:56.590 [debug] Executing fun with value: [2, 1]
13:43:56.590 [debug] Evaluating bend block with value: [2, 1]
13:43:56.590 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.590 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.590 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.590 [debug] Executing bend with initial: [1]
13:43:56.590 [debug] Executing fun with value: [1]
13:43:56.590 [debug] Evaluating bend block with value: [1]
13:43:56.590 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
.13:43:56.590 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.590 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.590 [debug] Executing bend with initial: []
13:43:56.590 [debug] Executing fun with value: []
13:43:56.590 [debug] Evaluating bend block with value: []
13:43:56.590 [debug] Block returned: %{variant: :null}
13:43:56.590 [debug] Fun returned result: %{variant: :null}
13:43:56.590 [debug] Processing constructed value: %{variant: :null}
13:43:56.590 [debug] do_bend final result: %{variant: :null}
13:43:56.590 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.590 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.590 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.590 [debug] do_bend final result: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.590 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.590 [debug] Final bend result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.590 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.590 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.590 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.590 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.590 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.590 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.590 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.590 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.590 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.590 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.590 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.590 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.590 [debug] Recursive field result for tail: []
13:43:56.590 [debug] do_fold called with non-variant data: []
13:43:56.590 [debug] Recursive field result for tail: [1]
13:43:56.590 [debug] do_fold called with non-variant data: [1]
13:43:56.590 [debug] Recursive field result for tail: [2, 1]
13:43:56.590 [debug] do_fold called with non-variant data: [2, 1]
13:43:56.590 [debug] Recursive field result for tail: [3, 2, 1]
13:43:56.590 [debug] do_fold called with non-variant data: [3, 2, 1]
13:43:56.590 [debug] Recursive field result for tail: [4, 3, 2, 1]
13:43:56.590 [debug] do_fold called with non-variant data: [4, 3, 2, 1]


13:43:56.590 [debug] Bend initial value: [5, 4, 3, 2, 1]
 12) test breaker/1 converts non-empty list (ChainTest)
     test/examples/chain_test.exs:172
     Assertion with == failed
     code:  assert Chain.breaker(list) == original
     left:  [5, 4, 3, 2, 1]
     right: [1, 2, 3, 4, 5]
     stacktrace:
       test/examples/chain_test.exs:175: (test)

13:43:56.590 [debug] Executing bend with initial: [5, 4, 3, 2, 1]
13:43:56.590 [debug] Executing fun with value: [5, 4, 3, 2, 1]
13:43:56.590 [debug] Evaluating bend block with value: [5, 4, 3, 2, 1]
13:43:56.590 [debug] Block returned: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.590 [debug] Fun returned result: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.590 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.590 [debug] Executing bend with initial: [4, 3, 2, 1]
13:43:56.590 [debug] Executing fun with value: [4, 3, 2, 1]
13:43:56.590 [debug] Evaluating bend block with value: [4, 3, 2, 1]
13:43:56.590 [debug] Block returned: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.590 [debug] Fun returned result: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.591 [debug] Processing constructed value: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.591 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.591 [debug] Executing fun with value: [3, 2, 1]
13:43:56.591 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.591 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.591 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.591 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.591 [debug] Executing bend with initial: [2, 1]
13:43:56.591 [debug] Executing fun with value: [2, 1]
13:43:56.591 [debug] Evaluating bend block with value: [2, 1]
13:43:56.591 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.591 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.591 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.591 [debug] Executing bend with initial: [1]
13:43:56.591 [debug] Executing fun with value: [1]
13:43:56.591 [debug] Evaluating bend block with value: [1]
13:43:56.591 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.591 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.591 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.591 [debug] Executing bend with initial: []
13:43:56.591 [debug] Executing fun with value: []
13:43:56.591 [debug] Evaluating bend block with value: []
13:43:56.591 [debug] Block returned: %{variant: :null}
13:43:56.591 [debug] Fun returned result: %{variant: :null}
13:43:56.591 [debug] Processing constructed value: %{variant: :null}
13:43:56.591 [debug] do_bend final result: %{variant: :null}
13:43:56.591 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.591 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.591 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.591 [debug] do_bend final result: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.591 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.591 [debug] Final bend result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.591 [debug] Bend initial value: []
13:43:56.591 [debug] Executing bend with initial: []
13:43:56.591 [debug] Executing fun with value: []
13:43:56.591 [debug] Evaluating bend block with value: []
13:43:56.591 [debug] Block returned: %{variant: :null}
13:43:56.591 [debug] Fun returned result: %{variant: :null}
13:43:56.591 [debug] Processing constructed value: %{variant: :null}
13:43:56.591 [debug] do_bend final result: %{variant: :null}
13:43:56.591 [debug] Final bend result: %{variant: :null}
13:43:56.591 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.591 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.591 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.591 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.591 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.591 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.591 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.591 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.591 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.591 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.591 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.591 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.591 [debug] Recursive field result for tail: %{variant: :null}
13:43:56.591 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.591 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.591 [debug] Bend initial value: ["c", "b", "a"]
13:43:56.591 [debug] Executing bend with initial: ["c", "b", "a"]
13:43:56.591 [debug] Executing fun with value: ["c", "b", "a"]
13:43:56.591 [debug] Evaluating bend block with value: ["c", "b", "a"]
13:43:56.591 [debug] Block returned: %{head: "c", tail: {:fork, ["b", "a"]}, variant: :cons}
13:43:56.591 [debug] Fun returned result: %{head: "c", tail: {:fork, ["b", "a"]}, variant: :cons}
13:43:56.591 [debug] Processing constructed value: %{head: "c", tail: {:fork, ["b", "a"]}, variant: :cons}
13:43:56.591 [debug] Executing bend with initial: ["b", "a"]
13:43:56.591 [debug] Executing fun with value: ["b", "a"]
13:43:56.591 [debug] Evaluating bend block with value: ["b", "a"]
13:43:56.591 [debug] Block returned: %{head: "b", tail: {:fork, ["a"]}, variant: :cons}
13:43:56.591 [debug] Fun returned result: %{head: "b", tail: {:fork, ["a"]}, variant: :cons}
13:43:56.591 [debug] Processing constructed value: %{head: "b", tail: {:fork, ["a"]}, variant: :cons}
13:43:56.591 [debug] Executing bend with initial: ["a"]
13:43:56.591 [debug] Executing fun with value: ["a"]
13:43:56.591 [debug] Evaluating bend block with value: ["a"]
13:43:56.591 [debug] Block returned: %{head: "a", tail: {:fork, []}, variant: :cons}
13:43:56.591 [debug] Fun returned result: %{head: "a", tail: {:fork, []}, variant: :cons}
13:43:56.591 [debug] Processing constructed value: %{head: "a", tail: {:fork, []}, variant: :cons}
13:43:56.591 [debug] Executing bend with initial: []
13:43:56.591 [debug] Executing fun with value: []
13:43:56.591 [debug] Evaluating bend block with value: []
13:43:56.592 [debug] Block returned: %{variant: :null}
13:43:56.592 [debug] Fun returned result: %{variant: :null}
13:43:56.592 [debug] Processing constructed value: %{variant: :null}
13:43:56.592 [debug] do_bend final result: %{variant: :null}
13:43:56.592 [debug] do_bend final result: %{head: "a", tail: %{variant: :null}, variant: :cons}
13:43:56.592 [debug] do_bend final result: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.592 [debug] do_bend final result: %{head: "c", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.592 [debug] Final bend result: %{head: "c", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.592 [debug] do_fold called with data: %{head: "c", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.592 [debug] Processing recursive fields of: %{head: "c", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.592 [debug] do_fold called with data: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.592 [debug] Processing recursive fields of: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.592 [debug] do_fold called with data: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.592 [debug] Processing recursive fields of: %{head: "a", tail: %{variant: :null}, variant: :cons}
13:43:56.592 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.592 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.592 [debug] Recursive field result for tail: %{variant: :null}


 13) test concat/2 concatenates list with empty list (ChainTest)
     test/examples/chain_test.exs:108
     ** (BadFunctionError) expected a function, got: %{head: 1, tail: %{variant: :null}, variant: :cons}
     code: assert Chain.breaker(Chain.concat(list, empty)) == [1, 2, 3, 4, 5]
     stacktrace:
       (graphrenia 0.1.0) lib/ben_ben.ex:277: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/examples/chain.ex:95: anonymous fn/3 in Chain.concat/2
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       test/examples/chain_test.exs:111: (test)

13:43:56.599 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.599 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.599 [debug] Bend initial value: []
13:43:56.599 [debug] Executing bend with initial: []
13:43:56.599 [debug] Executing fun with value: []
13:43:56.599 [debug] Evaluating bend block with value: []
13:43:56.599 [debug] Block returned: %{variant: :null}
13:43:56.599 [debug] Fun returned result: %{variant: :null}
13:43:56.599 [debug] Processing constructed value: %{variant: :null}
13:43:56.599 [debug] do_bend final result: %{variant: :null}
13:43:56.600 [debug] Final bend result: %{variant: :null}
13:43:56.600 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.600 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.600 [debug] Bend initial value: ["aaa", "bb", "aa", "b", "a"]
13:43:56.600 [debug] Executing bend with initial: ["aaa", "bb", "aa", "b", "a"]
13:43:56.600 [debug] Executing fun with value: ["aaa", "bb", "aa", "b", "a"]
13:43:56.600 [debug] Evaluating bend block with value: ["aaa", "bb", "aa", "b", "a"]
13:43:56.600 [debug] Block returned: %{head: "aaa", tail: {:fork, ["bb", "aa", "b", "a"]}, variant: :cons}
13:43:56.600 [debug] Fun returned result: %{head: "aaa", tail: {:fork, ["bb", "aa", "b", "a"]}, variant: :cons}
13:43:56.600 [debug] Processing constructed value: %{head: "aaa", tail: {:fork, ["bb", "aa", "b", "a"]}, variant: :cons}
13:43:56.600 [debug] Executing bend with initial: ["bb", "aa", "b", "a"]
13:43:56.600 [debug] Executing fun with value: ["bb", "aa", "b", "a"]
13:43:56.600 [debug] Evaluating bend block with value: ["bb", "aa", "b", "a"]
13:43:56.600 [debug] Block returned: %{head: "bb", tail: {:fork, ["aa", "b", "a"]}, variant: :cons}
13:43:56.600 [debug] Fun returned result: %{head: "bb", tail: {:fork, ["aa", "b", "a"]}, variant: :cons}
13:43:56.600 [debug] Processing constructed value: %{head: "bb", tail: {:fork, ["aa", "b", "a"]}, variant: :cons}
13:43:56.600 [debug] Executing bend with initial: ["aa", "b", "a"]
13:43:56.600 [debug] Executing fun with value: ["aa", "b", "a"]
13:43:56.600 [debug] Evaluating bend block with value: ["aa", "b", "a"]
13:43:56.600 [debug] Block returned: %{head: "aa", tail: {:fork, ["b", "a"]}, variant: :cons}
13:43:56.600 [debug] Fun returned result: %{head: "aa", tail: {:fork, ["b", "a"]}, variant: :cons}
13:43:56.600 [debug] Processing constructed value: %{head: "aa", tail: {:fork, ["b", "a"]}, variant: :cons}
13:43:56.600 [debug] Executing bend with initial: ["b", "a"]
13:43:56.600 [debug] Executing fun with value: ["b", "a"]


13:43:56.600 [debug] Evaluating bend block with value: ["b", "a"]
 14) test map/2 maps with complex transform (ChainTest)
     test/examples/chain_test.exs:35
     ** (BadFunctionError) expected a function, got: %{head: "a", tail: %{variant: :null}, variant: :cons}
     code: result = Chain.map(list, &String.upcase/1)
     stacktrace:
       (graphrenia 0.1.0) lib/ben_ben.ex:277: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/examples/chain.ex:35: anonymous fn/3 in Chain.map/2
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       test/examples/chain_test.exs:37: (test)

13:43:56.600 [debug] Block returned: %{head: "b", tail: {:fork, ["a"]}, variant: :cons}
13:43:56.600 [debug] Fun returned result: %{head: "b", tail: {:fork, ["a"]}, variant: :cons}
.13:43:56.600 [debug] Processing constructed value: %{head: "b", tail: {:fork, ["a"]}, variant: :cons}
13:43:56.600 [debug] Executing bend with initial: ["a"]
13:43:56.600 [debug] Executing fun with value: ["a"]
13:43:56.600 [debug] Evaluating bend block with value: ["a"]
13:43:56.600 [debug] Block returned: %{head: "a", tail: {:fork, []}, variant: :cons}
13:43:56.600 [debug] Fun returned result: %{head: "a", tail: {:fork, []}, variant: :cons}
13:43:56.600 [debug] Processing constructed value: %{head: "a", tail: {:fork, []}, variant: :cons}
13:43:56.600 [debug] Executing bend with initial: []
13:43:56.600 [debug] Executing fun with value: []
13:43:56.600 [debug] Evaluating bend block with value: []
13:43:56.600 [debug] Block returned: %{variant: :null}
13:43:56.600 [debug] Fun returned result: %{variant: :null}
13:43:56.600 [debug] Processing constructed value: %{variant: :null}
13:43:56.600 [debug] do_bend final result: %{variant: :null}
13:43:56.600 [debug] do_bend final result: %{head: "a", tail: %{variant: :null}, variant: :cons}
13:43:56.600 [debug] do_bend final result: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.600 [debug] do_bend final result: %{head: "aa", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.600 [debug] do_bend final result: %{head: "bb", tail: %{head: "aa", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.600 [debug] do_bend final result: %{head: "aaa", tail: %{head: "bb", tail: %{head: "aa", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.600 [debug] Final bend result: %{head: "aaa", tail: %{head: "bb", tail: %{head: "aa", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.600 [debug] do_fold called with data: %{head: "aaa", tail: %{head: "bb", tail: %{head: "aa", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.600 [debug] Processing recursive fields of: %{head: "aaa", tail: %{head: "bb", tail: %{head: "aa", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.600 [debug] do_fold called with data: %{head: "bb", tail: %{head: "aa", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.600 [debug] Processing recursive fields of: %{head: "bb", tail: %{head: "aa", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.600 [debug] do_fold called with data: %{head: "aa", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.600 [debug] Processing recursive fields of: %{head: "aa", tail: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.600 [debug] do_fold called with data: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.600 [debug] Processing recursive fields of: %{head: "b", tail: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.600 [debug] do_fold called with data: %{head: "a", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
13:43:56.600 [debug] Processing recursive fields of: %{head: "a", tail: %{variant: :null}, variant: :cons}
13:43:56.600 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.600 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.600 [debug] Recursive field result for tail: %{variant: :null}
13:43:56.601 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
13:43:56.601 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.601 [debug] Bend initial value: [5, 4, 3, 2, 1]
13:43:56.601 [debug] Executing bend with initial: [5, 4, 3, 2, 1]
13:43:56.601 [debug] Executing fun with value: [5, 4, 3, 2, 1]
13:43:56.601 [debug] Evaluating bend block with value: [5, 4, 3, 2, 1]
13:43:56.601 [debug] Block returned: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.601 [debug] Fun returned result: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.601 [debug] Processing constructed value: %{head: 5, tail: {:fork, [4, 3, 2, 1]}, variant: :cons}
13:43:56.601 [debug] Executing bend with initial: [4, 3, 2, 1]
13:43:56.601 [debug] Executing fun with value: [4, 3, 2, 1]
13:43:56.601 [debug] Evaluating bend block with value: [4, 3, 2, 1]
13:43:56.601 [debug] Block returned: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.601 [debug] Fun returned result: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.601 [debug] Processing constructed value: %{head: 4, tail: {:fork, [3, 2, 1]}, variant: :cons}
13:43:56.601 [debug] Executing bend with initial: [3, 2, 1]
13:43:56.601 [debug] Executing fun with value: [3, 2, 1]
13:43:56.601 [debug] Evaluating bend block with value: [3, 2, 1]
13:43:56.601 [debug] Block returned: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.601 [debug] Fun returned result: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.601 [debug] Processing constructed value: %{head: 3, tail: {:fork, [2, 1]}, variant: :cons}
13:43:56.601 [debug] Executing bend with initial: [2, 1]
13:43:56.601 [debug] Executing fun with value: [2, 1]


13:43:56.601 [debug] Evaluating bend block with value: [2, 1]
 15) test filter/2 filters with complex predicate (ChainTest)
     test/examples/chain_test.exs:53
     ** (BadFunctionError) expected a function, got: %{head: "a", tail: %{variant: :null}, variant: :cons}
     code: result = Chain.filter(list, &(String.length(&1) > 1))
     stacktrace:
       (graphrenia 0.1.0) lib/ben_ben.ex:277: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       test/examples/chain_test.exs:55: (test)

13:43:56.601 [debug] Block returned: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.601 [debug] Fun returned result: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.601 [debug] Processing constructed value: %{head: 2, tail: {:fork, [1]}, variant: :cons}
13:43:56.601 [debug] Executing bend with initial: [1]
13:43:56.601 [debug] Executing fun with value: [1]
13:43:56.601 [debug] Evaluating bend block with value: [1]
13:43:56.601 [debug] Block returned: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.601 [debug] Fun returned result: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.601 [debug] Processing constructed value: %{head: 1, tail: {:fork, []}, variant: :cons}
13:43:56.601 [debug] Executing bend with initial: []
13:43:56.601 [debug] Executing fun with value: []
13:43:56.601 [debug] Evaluating bend block with value: []
13:43:56.601 [debug] Block returned: %{variant: :null}
13:43:56.601 [debug] Fun returned result: %{variant: :null}
13:43:56.601 [debug] Processing constructed value: %{variant: :null}
13:43:56.601 [debug] do_bend final result: %{variant: :null}
13:43:56.601 [debug] do_bend final result: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.601 [debug] do_bend final result: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.601 [debug] do_bend final result: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.601 [debug] do_bend final result: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.601 [debug] do_bend final result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.601 [debug] Final bend result: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.601 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: %{variant: :null}
13:43:56.601 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.601 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: %{variant: :null}
13:43:56.601 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.601 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: %{variant: :null}
13:43:56.601 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
13:43:56.601 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: %{variant: :null}
13:43:56.601 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
13:43:56.601 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: %{variant: :null}
13:43:56.601 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
13:43:56.601 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: %{variant: :null}
13:43:56.601 [debug] Processing recursive fields of: %{variant: :null}
13:43:56.601 [debug] Recursive field result for tail: {%{variant: :null}, %{variant: :null}}
13:43:56.601 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: %{variant: :null}
13:43:56.601 [debug] Processing recursive fields of: %{variant: :null}


 16) test reverse/1 reverses non-empty list (ChainTest)
     test/examples/chain_test.exs:95
     ** (BadFunctionError) expected a function, got: %{head: 1, tail: %{variant: :null}, variant: :cons}
     code: {result, _} = Chain.reverse(list)
     stacktrace:
       (graphrenia 0.1.0) lib/ben_ben.ex:277: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/examples/chain.ex:82: anonymous fn/2 in Chain.reverse/1
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       (graphrenia 0.1.0) lib/ben_ben.ex:305: anonymous fn/3 in BenBen.process_recursive_fields/3
       (elixir 1.14.0) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       (graphrenia 0.1.0) lib/ben_ben.ex:274: BenBen.do_fold/3
       test/examples/chain_test.exs:97: (test)


Finished in 0.1 seconds (0.00s async, 0.1s sync)
29 tests, 16 failures

Randomized with seed 482087
