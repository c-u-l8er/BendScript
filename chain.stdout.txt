Excluding tags: [:test, :skip]
Including tags: [run: "true"]

11:32:59.971 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:32:59.975 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:32:59.975 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:32:59.975 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:32:59.978 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:32:59.978 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:32:59.978 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:32:59.978 [debug] Executing bend with initial: [2, 3, 4, 5]
11:32:59.978 [debug] Executing fun with value: [2, 3, 4, 5]
11:32:59.978 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:32:59.978 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:32:59.978 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:32:59.978 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:32:59.978 [debug] Executing bend with initial: [3, 4, 5]
11:32:59.978 [debug] Executing fun with value: [3, 4, 5]
11:32:59.978 [debug] Evaluating bend block with value: [3, 4, 5]
11:32:59.978 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:32:59.978 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:32:59.978 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:32:59.978 [debug] Executing bend with initial: [4, 5]
11:32:59.978 [debug] Executing fun with value: [4, 5]
11:32:59.978 [debug] Evaluating bend block with value: [4, 5]
11:32:59.978 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:32:59.978 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:32:59.978 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:32:59.978 [debug] Executing bend with initial: [5]
11:32:59.978 [debug] Executing fun with value: [5]
11:32:59.978 [debug] Evaluating bend block with value: [5]
11:32:59.978 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:32:59.978 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:32:59.978 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:32:59.978 [debug] Executing bend with initial: []
11:32:59.978 [debug] Executing fun with value: []
11:32:59.978 [debug] Evaluating bend block with value: []
11:32:59.978 [debug] Block returned: %{variant: :null}
11:32:59.978 [debug] Fun returned result: %{variant: :null}
11:32:59.978 [debug] Processing constructed value: %{variant: :null}
11:32:59.978 [debug] do_bend final result: %{variant: :null}
11:32:59.978 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:32:59.978 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:32:59.978 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.978 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.978 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.978 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.978 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 2
11:32:59.978 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.978 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 2
11:32:59.978 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.978 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 2
11:32:59.978 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.978 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 2
11:32:59.978 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:32:59.978 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 2
11:32:59.978 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:32:59.978 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 2
11:32:59.978 [debug] Processing recursive fields of: %{variant: :null}
11:32:59.978 [debug] Recursive field result for tail: {%{variant: :null}, 2}
11:32:59.978 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 2, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:32:59.978 [debug] Recursive field result for tail: {%{variant: :null}, 1}
11:32:59.978 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 1, non_fun: %{head: 4, tail: %{variant: :null}, variant: :cons}
11:32:59.978 [debug] Recursive field result for tail: {%{variant: :null}, 0}
11:32:59.978 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 0, non_fun: %{head: 3, tail: %{variant: :null}, variant: :cons}
11:32:59.978 [debug] Recursive field result for tail: {%{head: 3, tail: %{variant: :null}, variant: :cons}, 0}
11:32:59.979 [debug] do_fold called with non-function: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 0, non_fun: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:32:59.979 [debug] Recursive field result for tail: {%{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 0}
11:32:59.979 [debug] do_fold called with non-function: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 0, non_fun: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.979 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:32:59.979 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.979 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
11:32:59.979 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:32:59.979 [debug] do_fold called with data: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
11:32:59.979 [debug] Processing recursive fields of: %{head: 3, tail: %{variant: :null}, variant: :cons}
11:32:59.979 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:32:59.979 [debug] Processing recursive fields of: %{variant: :null}
11:32:59.979 [debug] Recursive field result for tail: []
11:32:59.979 [debug] do_fold called with non-variant data: []
11:32:59.979 [debug] Recursive field result for tail: [3]
11:32:59.979 [debug] do_fold called with non-variant data: [3]
11:32:59.979 [debug] Recursive field result for tail: [2, 3]
11:32:59.979 [debug] do_fold called with non-variant data: [2, 3]
11:32:59.982 [debug] Bend initial value: [1, 2, 3, 4, 5]
11:32:59.982 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
11:32:59.982 [debug] Executing fun with value: [1, 2, 3, 4, 5]
11:32:59.982 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
11:32:59.982 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:32:59.982 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:32:59.982 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
11:32:59.982 [debug] Executing bend with initial: [2, 3, 4, 5]
11:32:59.982 [debug] Executing fun with value: [2, 3, 4, 5]
11:32:59.982 [debug] Evaluating bend block with value: [2, 3, 4, 5]
11:32:59.982 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:32:59.982 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:32:59.982 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
11:32:59.982 [debug] Executing bend with initial: [3, 4, 5]
11:32:59.982 [debug] Executing fun with value: [3, 4, 5]
11:32:59.982 [debug] Evaluating bend block with value: [3, 4, 5]
11:32:59.982 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:32:59.982 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:32:59.982 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
11:32:59.982 [debug] Executing bend with initial: [4, 5]
11:32:59.982 [debug] Executing fun with value: [4, 5]
11:32:59.982 [debug] Evaluating bend block with value: [4, 5]
11:32:59.982 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:32:59.982 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:32:59.982 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
11:32:59.982 [debug] Executing bend with initial: [5]
11:32:59.983 [debug] Executing fun with value: [5]
11:32:59.983 [debug] Evaluating bend block with value: [5]
11:32:59.983 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
11:32:59.983 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
11:32:59.983 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
11:32:59.983 [debug] Executing bend with initial: []
11:32:59.983 [debug] Executing fun with value: []
11:32:59.983 [debug] Evaluating bend block with value: []
11:32:59.983 [debug] Block returned: %{variant: :null}
11:32:59.983 [debug] Fun returned result: %{variant: :null}
11:32:59.983 [debug] Processing constructed value: %{variant: :null}
11:32:59.983 [debug] do_bend final result: %{variant: :null}
11:32:59.983 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:32:59.983 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:32:59.983 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.983 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.983 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.983 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.983 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 3
11:32:59.983 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.983 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 3
11:32:59.983 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.983 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 3
11:32:59.983 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.983 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 3
11:32:59.983 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:32:59.983 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 3
11:32:59.983 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:32:59.983 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 3
11:32:59.983 [debug] Processing recursive fields of: %{variant: :null}
11:32:59.983 [debug] Recursive field result for tail: {%{variant: :null}, 3}
11:32:59.983 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 3, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
11:32:59.983 [debug] Recursive field result for tail: {%{head: 5, tail: %{variant: :null}, variant: :cons}, 2}
11:32:59.984 [debug] do_fold called with non-function: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 2, non_fun: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
11:32:59.984 [debug] Recursive field result for tail: {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 1}
11:32:59.984 [debug] do_fold called with non-function: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 1, non_fun: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
11:32:59.984 [debug] Recursive field result for tail: {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 0}
11:32:59.984 [debug] Recursive field result for tail: {%{variant: :null}, 0}
11:32:59.984 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
11:32:59.984 [debug] Processing recursive fields of: %{variant: :null}


  1) test drop/2 drops less than list length (ChainTest)
     test/examples/chain_test.exs:153
     Assertion with == failed
     code:  assert Chain.breaker(result) == [3, 4, 5]
     left:  [1, 2, 3]
     right: [3, 4, 5]
     stacktrace:
       test/examples/chain_test.exs:156: (test)



  2) test take/2 takes less than list length (ChainTest)
     test/examples/chain_test.exs:133
     Assertion with == failed
     code:  assert Chain.breaker(result) == [1, 2, 3]
     left:  []
     right: [1, 2, 3]
     stacktrace:
       test/examples/chain_test.exs:136: (test)


Finished in 0.07 seconds (0.00s async, 0.07s sync)
29 tests, 2 failures, 27 excluded

Randomized with seed 887105
