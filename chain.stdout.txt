Compiling 1 file (.ex)

10:55:21.682 [debug] Defining type {:__aliases__, [line: 7], [:List]} with block: {:__block__, [], [{:cons, [line: 8], [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]}, {:null, [line: 9], []}]}

10:55:21.685 [debug] Extracted variants: [{:cons, [line: 8], [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]}, {:null, [line: 9], []}]

10:55:21.685 [debug] Generating constructors for variants: [{:cons, [line: 8], [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]}, {:null, [line: 9], []}]

10:55:21.685 [debug] Processing variant: {:cons, [line: 8], [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]}

10:55:21.685 [debug] Constructor: :cons, meta: [line: 8], args: [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]

10:55:21.685 [debug] Extracting constructor args from: [{:head, [line: 8], nil}, {:recu, [line: 8], [{:tail, [line: 8], nil}]}]

10:55:21.685 [debug] Found value arg: :head

10:55:21.685 [debug] Found recursive arg: :tail

10:55:21.685 [debug] Extracted arg_names: [:head, :tail]

10:55:21.685 [debug] Generated arg vars: [{:head, [], nil}, {:tail, [], nil}]

10:55:21.685 [debug] Field pairs: [head: {:head, [], nil}, tail: {:tail, [], nil}]

10:55:21.685 [debug] Processing variant: {:null, [line: 9], []}

10:55:21.685 [debug] Constructor: :null, meta: [line: 9], args: []

10:55:21.685 [debug] Extracting constructor args from: []

10:55:21.685 [debug] Extracted arg_names: []

10:55:21.685 [debug] Generated arg vars: []

10:55:21.685 [debug] Field pairs: []

10:55:21.698 [debug] Bend operation with var: :val, initial: {:enum, [line: 14], nil}

10:55:21.703 [debug] Fork operation with expression: {:tail, [line: 17], nil}

10:55:21.703 [debug] Fold expression: {:list, [line: 40], nil}, opts: [], cases: [{:->, [line: 41], [[{:case, [line: 41], [{:cons, [line: 41], [{:head, [line: 41], nil}, {:tail, [line: 41], nil}]}]}], [{:|, [line: 41], [{:head, [line: 41], nil}, {:recu, [line: 41], [{:tail, [line: 41], nil}]}]}]]}, {:->, [line: 42], [[{:case, [line: 42], [{:null, [line: 42], []}]}], []]}]

10:55:21.703 [debug] Extracting cases from list: [{:->, [line: 41], [[{:case, [line: 41], [{:cons, [line: 41], [{:head, [line: 41], nil}, {:tail, [line: 41], nil}]}]}], [{:|, [line: 41], [{:head, [line: 41], nil}, {:recu, [line: 41], [{:tail, [line: 41], nil}]}]}]]}, {:->, [line: 42], [[{:case, [line: 42], [{:null, [line: 42], []}]}], []]}]

10:55:21.703 [debug] Extracted fold cases: [{:->, [line: 41], [[{:case, [line: 41], [{:cons, [line: 41], [{:head, [line: 41], nil}, {:tail, [line: 41], nil}]}]}], [{:|, [line: 41], [{:head, [line: 41], nil}, {:recu, [line: 41], [{:tail, [line: 41], nil}]}]}]]}, {:->, [line: 42], [[{:case, [line: 42], [{:null, [line: 42], []}]}], []]}]

10:55:21.703 [debug] Generating fold cases: [{:->, [line: 41], [[{:case, [line: 41], [{:cons, [line: 41], [{:head, [line: 41], nil}, {:tail, [line: 41], nil}]}]}], [{:|, [line: 41], [{:head, [line: 41], nil}, {:recu, [line: 41], [{:tail, [line: 41], nil}]}]}]]}, {:->, [line: 42], [[{:case, [line: 42], [{:null, [line: 42], []}]}], []]}]

10:55:21.703 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

10:55:21.703 [debug] Transforming recursive refs:
Body: [{:|, [line: 41], [{:head, [line: 41], nil}, {:recu, [line: 41], [{:tail, [line: 41], nil}]}]}]
Bindings: [head: true, tail: true]
State: nil


10:55:21.703 [debug] Processing recursive reference: {:recu, [line: 41], [{:tail, [line: 41], nil}]}

10:55:21.703 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

10:55:21.703 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

10:55:21.704 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


10:55:21.704 [debug] Generated fold cases after transformation: [{:->, [line: 41], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], [{:|, [line: 41], [{:head, [line: 41], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]]}, {:->, [line: 42], [[{:%{}, [], [variant: :null]}], []]}]

10:55:21.704 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 40], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 41], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], [{:|, [line: 41], [{:head, [line: 41], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]]}, {:->, [line: 42], [[{:%{}, [], [variant: :null]}], []]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:40: Chain.breaker/1


10:55:21.708 [debug] Fold expression: {:list, [line: 47], nil}, opts: [], cases: [{:->, [line: 48], [[{:case, [line: 48], [{:cons, [line: 48], [{:head, [line: 48], nil}, {:tail, [line: 48], nil}]}]}], [{:|, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}]]}, {:->, [line: 51], [[{:case, [line: 51], [{:null, [line: 51], []}]}], []]}]

10:55:21.708 [debug] Extracting cases from list: [{:->, [line: 48], [[{:case, [line: 48], [{:cons, [line: 48], [{:head, [line: 48], nil}, {:tail, [line: 48], nil}]}]}], [{:|, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}]]}, {:->, [line: 51], [[{:case, [line: 51], [{:null, [line: 51], []}]}], []]}]

10:55:21.708 [debug] Extracted fold cases: [{:->, [line: 48], [[{:case, [line: 48], [{:cons, [line: 48], [{:head, [line: 48], nil}, {:tail, [line: 48], nil}]}]}], [{:|, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}]]}, {:->, [line: 51], [[{:case, [line: 51], [{:null, [line: 51], []}]}], []]}]

10:55:21.708 [debug] Generating fold cases: [{:->, [line: 48], [[{:case, [line: 48], [{:cons, [line: 48], [{:head, [line: 48], nil}, {:tail, [line: 48], nil}]}]}], [{:|, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}]]}, {:->, [line: 51], [[{:case, [line: 51], [{:null, [line: 51], []}]}], []]}]

10:55:21.708 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

10:55:21.708 [debug] Transforming recursive refs:
Body: [{:|, [line: 49], [{:head, [line: 49], nil}, {:recu, [line: 49], [{:tail, [line: 49], nil}]}]}]
Bindings: [head: true, tail: true]
State: nil


10:55:21.708 [debug] Processing recursive reference: {:recu, [line: 49], [{:tail, [line: 49], nil}]}

10:55:21.708 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

10:55:21.708 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

10:55:21.708 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


10:55:21.708 [debug] Generated fold cases after transformation: [{:->, [line: 48], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], [{:|, [line: 49], [{:head, [line: 49], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]]}, {:->, [line: 51], [[{:%{}, [], [variant: :null]}], []]}]

10:55:21.708 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 47], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 48], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], [{:|, [line: 49], [{:head, [line: 49], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]]}, {:->, [line: 51], [[{:%{}, [], [variant: :null]}], []]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:47: Chain.breaker/1


10:55:21.709 [debug] Fold expression: {:list, [line: 67], nil}, opts: [], cases: [{:->, [line: 68], [[{:case, [line: 68], [{:cons, [line: 68], [{:head, [line: 68], nil}, {:tail, [line: 68], nil}]}]}], {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:recu, [line: 69], [{:tail, [line: 69], nil}]}]}]}, {:->, [line: 71], [[{:case, [line: 71], [{:null, [line: 71], []}]}], {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}]}]

10:55:21.709 [debug] Extracting cases from list: [{:->, [line: 68], [[{:case, [line: 68], [{:cons, [line: 68], [{:head, [line: 68], nil}, {:tail, [line: 68], nil}]}]}], {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:recu, [line: 69], [{:tail, [line: 69], nil}]}]}]}, {:->, [line: 71], [[{:case, [line: 71], [{:null, [line: 71], []}]}], {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}]}]

10:55:21.709 [debug] Extracted fold cases: [{:->, [line: 68], [[{:case, [line: 68], [{:cons, [line: 68], [{:head, [line: 68], nil}, {:tail, [line: 68], nil}]}]}], {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:recu, [line: 69], [{:tail, [line: 69], nil}]}]}]}, {:->, [line: 71], [[{:case, [line: 71], [{:null, [line: 71], []}]}], {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}]}]

10:55:21.709 [debug] Generating fold cases: [{:->, [line: 68], [[{:case, [line: 68], [{:cons, [line: 68], [{:head, [line: 68], nil}, {:tail, [line: 68], nil}]}]}], {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:recu, [line: 69], [{:tail, [line: 69], nil}]}]}]}, {:->, [line: 71], [[{:case, [line: 71], [{:null, [line: 71], []}]}], {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}]}]

10:55:21.709 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

10:55:21.709 [debug] Transforming recursive refs:
Body: {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:recu, [line: 69], [{:tail, [line: 69], nil}]}]}
Bindings: [head: true, tail: true]
State: nil


10:55:21.709 [debug] Processing recursive reference: {:recu, [line: 69], [{:tail, [line: 69], nil}]}

10:55:21.709 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

10:55:21.709 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

10:55:21.709 [debug] Transforming recursive refs:
Body: {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}
Bindings: []
State: nil


10:55:21.709 [debug] Generated fold cases after transformation: [{:->, [line: 68], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 71], [[{:%{}, [], [variant: :null]}], {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}]}]

10:55:21.710 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 67], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 68], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {{:., [line: 69], [{:__aliases__, [line: 69], [:List]}, :cons]}, [line: 69], [{{:., [line: 69], [{:transform_fn, [line: 69], nil}]}, [line: 69], [{:head, [line: 69], nil}]}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 71], [[{:%{}, [], [variant: :null]}], {{:., [line: 72], [{:__aliases__, [line: 72], [:List]}, :null]}, [line: 72], []}]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:67: Chain.map/2


10:55:21.710 [debug] Fold expression: {:list, [line: 81], nil}, opts: [], cases: [{:->, [line: 82], [[{:case, [line: 82], [{:cons, [line: 82], [{:head, [line: 82], nil}, {:tail, [line: 82], nil}]}]}], {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, else: {:recu, [line: 86], [{:tail, [line: 86], nil}]}]]}]}, {:->, [line: 89], [[{:case, [line: 89], [{:null, [line: 89], []}]}], {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}]}]

10:55:21.710 [debug] Extracting cases from list: [{:->, [line: 82], [[{:case, [line: 82], [{:cons, [line: 82], [{:head, [line: 82], nil}, {:tail, [line: 82], nil}]}]}], {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, else: {:recu, [line: 86], [{:tail, [line: 86], nil}]}]]}]}, {:->, [line: 89], [[{:case, [line: 89], [{:null, [line: 89], []}]}], {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}]}]

10:55:21.710 [debug] Extracted fold cases: [{:->, [line: 82], [[{:case, [line: 82], [{:cons, [line: 82], [{:head, [line: 82], nil}, {:tail, [line: 82], nil}]}]}], {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, else: {:recu, [line: 86], [{:tail, [line: 86], nil}]}]]}]}, {:->, [line: 89], [[{:case, [line: 89], [{:null, [line: 89], []}]}], {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}]}]

10:55:21.710 [debug] Generating fold cases: [{:->, [line: 82], [[{:case, [line: 82], [{:cons, [line: 82], [{:head, [line: 82], nil}, {:tail, [line: 82], nil}]}]}], {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, else: {:recu, [line: 86], [{:tail, [line: 86], nil}]}]]}]}, {:->, [line: 89], [[{:case, [line: 89], [{:null, [line: 89], []}]}], {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}]}]

10:55:21.710 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

10:55:21.710 [debug] Transforming recursive refs:
Body: {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:recu, [line: 84], [{:tail, [line: 84], nil}]}]}, else: {:recu, [line: 86], [{:tail, [line: 86], nil}]}]]}
Bindings: [head: true, tail: true]
State: nil


10:55:21.710 [debug] Processing recursive reference: {:recu, [line: 84], [{:tail, [line: 84], nil}]}

10:55:21.710 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

10:55:21.710 [debug] Processing recursive reference: {:recu, [line: 86], [{:tail, [line: 86], nil}]}

10:55:21.710 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

10:55:21.710 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

10:55:21.710 [debug] Transforming recursive refs:
Body: {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}
Bindings: []
State: nil


10:55:21.711 [debug] Generated fold cases after transformation: [{:->, [line: 82], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, else: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]]}]}, {:->, [line: 89], [[{:%{}, [], [variant: :null]}], {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}]}]

10:55:21.711 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 81], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 82], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 83], [{{:., [line: 83], [{:predicate, [line: 83], nil}]}, [line: 83], [{:head, [line: 83], nil}]}, [do: {{:., [line: 84], [{:__aliases__, [line: 84], [:List]}, :cons]}, [line: 84], [{:head, [line: 84], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, ...}, {...}]], [{:value, [], ...}]}]}]}, else: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]]}]}, {:->, [line: 89], [[{:%{}, [], [variant: :null]}], {{:., [line: 90], [{:__aliases__, [line: 90], [:List]}, :null]}, [line: 90], []}]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:81: Chain.filter/2


10:55:21.711 [debug] Fold expression: {:list, [line: 115], nil}, opts: [], cases: [{:->, [line: 116], [[{:case, [line: 116], [{:cons, [line: 116], [{:head, [line: 116], nil}, {:tail, [line: 116], nil}]}]}], {:+, [line: 116], [1, {:recu, [line: 116], [{:tail, [line: 116], nil}]}]}]}, {:->, [line: 117], [[{:case, [line: 117], [{:null, [line: 117], []}]}], 0]}]

10:55:21.711 [debug] Extracting cases from list: [{:->, [line: 116], [[{:case, [line: 116], [{:cons, [line: 116], [{:head, [line: 116], nil}, {:tail, [line: 116], nil}]}]}], {:+, [line: 116], [1, {:recu, [line: 116], [{:tail, [line: 116], nil}]}]}]}, {:->, [line: 117], [[{:case, [line: 117], [{:null, [line: 117], []}]}], 0]}]

10:55:21.711 [debug] Extracted fold cases: [{:->, [line: 116], [[{:case, [line: 116], [{:cons, [line: 116], [{:head, [line: 116], nil}, {:tail, [line: 116], nil}]}]}], {:+, [line: 116], [1, {:recu, [line: 116], [{:tail, [line: 116], nil}]}]}]}, {:->, [line: 117], [[{:case, [line: 117], [{:null, [line: 117], []}]}], 0]}]

10:55:21.711 [debug] Generating fold cases: [{:->, [line: 116], [[{:case, [line: 116], [{:cons, [line: 116], [{:head, [line: 116], nil}, {:tail, [line: 116], nil}]}]}], {:+, [line: 116], [1, {:recu, [line: 116], [{:tail, [line: 116], nil}]}]}]}, {:->, [line: 117], [[{:case, [line: 117], [{:null, [line: 117], []}]}], 0]}]

10:55:21.711 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

10:55:21.711 [debug] Transforming recursive refs:
Body: {:+, [line: 116], [1, {:recu, [line: 116], [{:tail, [line: 116], nil}]}]}
Bindings: [head: true, tail: true]
State: nil


10:55:21.711 [debug] Processing recursive reference: {:recu, [line: 116], [{:tail, [line: 116], nil}]}

10:55:21.711 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

10:55:21.711 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

10:55:21.711 [debug] Transforming recursive refs:
Body: 0
Bindings: []
State: nil


10:55:21.712 [debug] Generated fold cases after transformation: [{:->, [line: 116], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:+, [line: 116], [1, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 117], [[{:%{}, [], [variant: :null]}], 0]}]

10:55:21.712 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 115], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 116], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:+, [line: 116], [1, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 117], [[{:%{}, [], [variant: :null]}], 0]}]]]}]}]}]}
warning: variable "head" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:115: Chain.length/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:115: Chain.length/1


10:55:21.712 [debug] Bend operation with var: :val, initial: {{:list, [line: 125], nil}, {{:., [line: 125], [{:__aliases__, [line: 125], [:List]}, :null]}, [line: 125], []}}

10:55:21.712 [debug] Fork operation with expression: {:tail, [line: 131], nil}
warning: clauses with the same name and arity (number of arguments) should be grouped together, "def reverse/1" was previously defined (lib/examples/chain.ex:96)
  lib/examples/chain.ex:122


10:55:21.712 [debug] Fold expression: {:list1, [line: 153], nil}, opts: [], cases: [{:->, [line: 154], [[{:case, [line: 154], [{:cons, [line: 154], [{:head, [line: 154], nil}, {:tail, [line: 154], nil}]}]}], {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:recu, [line: 155], [{:tail, [line: 155], nil}]}]}]}, {:->, [line: 157], [[{:case, [line: 157], [{:null, [line: 157], []}]}], {:list2, [line: 158], nil}]}]

10:55:21.712 [debug] Extracting cases from list: [{:->, [line: 154], [[{:case, [line: 154], [{:cons, [line: 154], [{:head, [line: 154], nil}, {:tail, [line: 154], nil}]}]}], {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:recu, [line: 155], [{:tail, [line: 155], nil}]}]}]}, {:->, [line: 157], [[{:case, [line: 157], [{:null, [line: 157], []}]}], {:list2, [line: 158], nil}]}]

10:55:21.712 [debug] Extracted fold cases: [{:->, [line: 154], [[{:case, [line: 154], [{:cons, [line: 154], [{:head, [line: 154], nil}, {:tail, [line: 154], nil}]}]}], {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:recu, [line: 155], [{:tail, [line: 155], nil}]}]}]}, {:->, [line: 157], [[{:case, [line: 157], [{:null, [line: 157], []}]}], {:list2, [line: 158], nil}]}]

10:55:21.712 [debug] Generating fold cases: [{:->, [line: 154], [[{:case, [line: 154], [{:cons, [line: 154], [{:head, [line: 154], nil}, {:tail, [line: 154], nil}]}]}], {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:recu, [line: 155], [{:tail, [line: 155], nil}]}]}]}, {:->, [line: 157], [[{:case, [line: 157], [{:null, [line: 157], []}]}], {:list2, [line: 158], nil}]}]

10:55:21.712 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

10:55:21.712 [debug] Transforming recursive refs:
Body: {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:recu, [line: 155], [{:tail, [line: 155], nil}]}]}
Bindings: [head: true, tail: true]
State: nil


10:55:21.712 [debug] Processing recursive reference: {:recu, [line: 155], [{:tail, [line: 155], nil}]}

10:55:21.712 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

10:55:21.712 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

10:55:21.712 [debug] Transforming recursive refs:
Body: {:list2, [line: 158], nil}
Bindings: []
State: nil


10:55:21.713 [debug] Generated fold cases after transformation: [{:->, [line: 154], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 157], [[{:%{}, [], [variant: :null]}], {:list2, [line: 158], nil}]}]

10:55:21.713 [debug] Final quoted expression: {:do_fold, [], [{:list1, [line: 153], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 154], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {{:., [line: 155], [{:__aliases__, [line: 155], [:List]}, :cons]}, [line: 155], [{:head, [line: 155], nil}, {:do_fold, [], [{:tail, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 157], [[{:%{}, [], [variant: :null]}], {:list2, [line: 158], nil}]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/chain.ex:153: Chain.concat/2


10:55:21.713 [debug] Fold expression: {:list, [line: 166], nil}, opts: [with: {:n, [line: 166], nil}], cases: [{:->, [line: 167], [[{:case, [line: 167], [{:cons, [line: 167], [{:head, [line: 167], nil}, {:tail, [line: 167], nil}]}]}], {:if, [line: 168], [{:>, [line: 168], [{:state, [line: 168], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 169], [{{:tail_result, [line: 169], nil}, {:new_count, [line: 169], nil}}, {:recu, [line: 169], [{:tail, [line: 169], nil}]}]}, {{{:., [line: 170], [{:__aliases__, [line: 170], [:List]}, :cons]}, [line: 170], [{:head, [line: 170], nil}, {:tail_result, [line: 170], nil}]}, {:-, [line: 170], [{:new_count, [line: 170], nil}, 1]}}]}, else: {{{:., [line: 172], [{:__aliases__, [line: 172], [:List]}, :null]}, [line: 172], []}, 0}]]}]}, {:->, [line: 175], [[{:case, [line: 175], [{:null, [line: 175], []}]}], {{{:., [line: 176], [{:__aliases__, [line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}]}]

10:55:21.713 [debug] Extracting cases from list: [{:->, [line: 167], [[{:case, [line: 167], [{:cons, [line: 167], [{:head, [line: 167], nil}, {:tail, [line: 167], nil}]}]}], {:if, [line: 168], [{:>, [line: 168], [{:state, [line: 168], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 169], [{{:tail_result, [line: 169], nil}, {:new_count, [line: 169], nil}}, {:recu, [line: 169], [{:tail, [line: 169], nil}]}]}, {{{:., [line: 170], [{:__aliases__, [line: 170], [:List]}, :cons]}, [line: 170], [{:head, [line: 170], nil}, {:tail_result, [line: 170], nil}]}, {:-, [line: 170], [{:new_count, [line: 170], nil}, 1]}}]}, else: {{{:., [line: 172], [{:__aliases__, [line: 172], [:List]}, :null]}, [line: 172], []}, 0}]]}]}, {:->, [line: 175], [[{:case, [line: 175], [{:null, [line: 175], []}]}], {{{:., [line: 176], [{:__aliases__, [line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}]}]

10:55:21.713 [debug] Extracted fold cases: [{:->, [line: 167], [[{:case, [line: 167], [{:cons, [line: 167], [{:head, [line: 167], nil}, {:tail, [line: 167], nil}]}]}], {:if, [line: 168], [{:>, [line: 168], [{:state, [line: 168], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 169], [{{:tail_result, [line: 169], nil}, {:new_count, [line: 169], nil}}, {:recu, [line: 169], [{:tail, [line: 169], nil}]}]}, {{{:., [line: 170], [{:__aliases__, [line: 170], [:List]}, :cons]}, [line: 170], [{:head, [line: 170], nil}, {:tail_result, [line: 170], nil}]}, {:-, [line: 170], [{:new_count, [line: 170], nil}, 1]}}]}, else: {{{:., [line: 172], [{:__aliases__, [line: 172], [:List]}, :null]}, [line: 172], []}, 0}]]}]}, {:->, [line: 175], [[{:case, [line: 175], [{:null, [line: 175], []}]}], {{{:., [line: 176], [{:__aliases__, [line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}]}]

10:55:21.713 [debug] Generating fold cases: [{:->, [line: 167], [[{:case, [line: 167], [{:cons, [line: 167], [{:head, [line: 167], nil}, {:tail, [line: 167], nil}]}]}], {:if, [line: 168], [{:>, [line: 168], [{:state, [line: 168], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 169], [{{:tail_result, [line: 169], nil}, {:new_count, [line: 169], nil}}, {:recu, [line: 169], [{:tail, [line: 169], nil}]}]}, {{{:., [line: 170], [{:__aliases__, [line: 170], [:List]}, :cons]}, [line: 170], [{:head, [line: 170], nil}, {:tail_result, [line: 170], nil}]}, {:-, [line: 170], [{:new_count, [line: 170], nil}, 1]}}]}, else: {{{:., [line: 172], [{:__aliases__, [line: 172], [:List]}, :null]}, [line: 172], []}, 0}]]}]}, {:->, [line: 175], [[{:case, [line: 175], [{:null, [line: 175], []}]}], {{{:., [line: 176], [{:__aliases__, [line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}]}]

10:55:21.713 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

10:55:21.713 [debug] Transforming recursive refs:
Body: {:if, [line: 168], [{:>, [line: 168], [{:state, [line: 168], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 169], [{{:tail_result, [line: 169], nil}, {:new_count, [line: 169], nil}}, {:recu, [line: 169], [{:tail, [line: 169], nil}]}]}, {{{:., [line: 170], [{:__aliases__, [line: 170], [:List]}, :cons]}, [line: 170], [{:head, [line: 170], nil}, {:tail_result, [line: 170], nil}]}, {:-, [line: 170], [{:new_count, [line: 170], nil}, 1]}}]}, else: {{{:., [line: 172], [{:__aliases__, [line: 172], [:List]}, :null]}, [line: 172], []}, 0}]]}
Bindings: [head: true, tail: true]
State: {:n, [line: 166], nil}


10:55:21.713 [debug] Processing recursive reference: {:recu, [line: 169], [{:tail, [line: 169], nil}]}

10:55:21.713 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

10:55:21.713 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

10:55:21.713 [debug] Transforming recursive refs:
Body: {{{:., [line: 176], [{:__aliases__, [line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}
Bindings: []
State: {:n, [line: 166], nil}


10:55:21.714 [debug] Generated fold cases after transformation: [{:->, [line: 167], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 168], [{:>, [line: 168], [{:state, [line: 168], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 169], [{{:tail_result, [line: 169], nil}, {:new_count, [line: 169], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {{{:., [line: 170], [{:__aliases__, [line: 170], [:List]}, :cons]}, [line: 170], [{:head, [line: 170], nil}, {:tail_result, [line: 170], nil}]}, {:-, [line: 170], [{:new_count, [line: 170], nil}, 1]}}]}, else: {{{:., [line: 172], [{:__aliases__, [line: 172], [:List]}, :null]}, [line: 172], []}, 0}]]}]}, {:->, [line: 175], [[{:%{}, [], [variant: :null]}], {{{:., [line: 176], [{:__aliases__, [line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}]}]

10:55:21.714 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 166], nil}, {:n, [line: 166], nil}, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 167], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 168], [{:>, [line: 168], [{:state, [line: 168], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 169], [{{:tail_result, [line: 169], nil}, {:new_count, [line: 169], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, ...], [...]}, {:var!, [...], ...}]}]}, {{{:., [line: 170], [{:__aliases__, [line: 170], [:List]}, :cons]}, [line: 170], [{:head, [line: 170], nil}, {:tail_result, [line: 170], nil}]}, {:-, [line: 170], [{:new_count, [line: 170], nil}, 1]}}]}, else: {{{:., [line: 172], [{:__aliases__, [line: 172], [:List]}, :null]}, [line: 172], []}, 0}]]}]}, {:->, [line: 175], [[{:%{}, [], [variant: :null]}], {{{:., [line: 176], [{:__aliases__, [line: 176], [:List]}, :null]}, [line: 176], []}, {:state, [line: 176], nil}}]}]]]}]}]}]}

10:55:21.714 [debug] Fold expression: {:list, [line: 182], nil}, opts: [with: {:n, [line: 182], nil}], cases: [{:->, [line: 183], [[{:case, [line: 183], [{:cons, [line: 183], [{:head, [line: 183], nil}, {:tail, [line: 183], nil}]}]}], {:if, [line: 184], [{:>, [line: 184], [{:state, [line: 184], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 185], [{{:result, [line: 185], nil}, {:new_state, [line: 185], nil}}, {:recu, [line: 185], [{:tail, [line: 185], nil}]}]}, {{:result, [line: 186], nil}, {:-, [line: 186], [{:new_state, [line: 186], nil}, 1]}}]}, else: {{{:., [line: 188], [{:__aliases__, [line: 188], [:List]}, :cons]}, [line: 188], [{:head, [line: 188], nil}, {:recu, [line: 188], [{:tail, [line: 188], nil}]}]}, 0}]]}]}, {:->, [line: 191], [[{:case, [line: 191], [{:null, [line: 191], []}]}], {{{:., [line: 192], [{:__aliases__, [line: 192], [:List]}, :null]}, [line: 192], []}, {:state, [line: 192], nil}}]}]

10:55:21.714 [debug] Extracting cases from list: [{:->, [line: 183], [[{:case, [line: 183], [{:cons, [line: 183], [{:head, [line: 183], nil}, {:tail, [line: 183], nil}]}]}], {:if, [line: 184], [{:>, [line: 184], [{:state, [line: 184], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 185], [{{:result, [line: 185], nil}, {:new_state, [line: 185], nil}}, {:recu, [line: 185], [{:tail, [line: 185], nil}]}]}, {{:result, [line: 186], nil}, {:-, [line: 186], [{:new_state, [line: 186], nil}, 1]}}]}, else: {{{:., [line: 188], [{:__aliases__, [line: 188], [:List]}, :cons]}, [line: 188], [{:head, [line: 188], nil}, {:recu, [line: 188], [{:tail, [line: 188], nil}]}]}, 0}]]}]}, {:->, [line: 191], [[{:case, [line: 191], [{:null, [line: 191], []}]}], {{{:., [line: 192], [{:__aliases__, [line: 192], [:List]}, :null]}, [line: 192], []}, {:state, [line: 192], nil}}]}]

10:55:21.714 [debug] Extracted fold cases: [{:->, [line: 183], [[{:case, [line: 183], [{:cons, [line: 183], [{:head, [line: 183], nil}, {:tail, [line: 183], nil}]}]}], {:if, [line: 184], [{:>, [line: 184], [{:state, [line: 184], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 185], [{{:result, [line: 185], nil}, {:new_state, [line: 185], nil}}, {:recu, [line: 185], [{:tail, [line: 185], nil}]}]}, {{:result, [line: 186], nil}, {:-, [line: 186], [{:new_state, [line: 186], nil}, 1]}}]}, else: {{{:., [line: 188], [{:__aliases__, [line: 188], [:List]}, :cons]}, [line: 188], [{:head, [line: 188], nil}, {:recu, [line: 188], [{:tail, [line: 188], nil}]}]}, 0}]]}]}, {:->, [line: 191], [[{:case, [line: 191], [{:null, [line: 191], []}]}], {{{:., [line: 192], [{:__aliases__, [line: 192], [:List]}, :null]}, [line: 192], []}, {:state, [line: 192], nil}}]}]

10:55:21.714 [debug] Generating fold cases: [{:->, [line: 183], [[{:case, [line: 183], [{:cons, [line: 183], [{:head, [line: 183], nil}, {:tail, [line: 183], nil}]}]}], {:if, [line: 184], [{:>, [line: 184], [{:state, [line: 184], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 185], [{{:result, [line: 185], nil}, {:new_state, [line: 185], nil}}, {:recu, [line: 185], [{:tail, [line: 185], nil}]}]}, {{:result, [line: 186], nil}, {:-, [line: 186], [{:new_state, [line: 186], nil}, 1]}}]}, else: {{{:., [line: 188], [{:__aliases__, [line: 188], [:List]}, :cons]}, [line: 188], [{:head, [line: 188], nil}, {:recu, [line: 188], [{:tail, [line: 188], nil}]}]}, 0}]]}]}, {:->, [line: 191], [[{:case, [line: 191], [{:null, [line: 191], []}]}], {{{:., [line: 192], [{:__aliases__, [line: 192], [:List]}, :null]}, [line: 192], []}, {:state, [line: 192], nil}}]}]

10:55:21.714 [debug] Generated pattern: {:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]} for variant: :cons

10:55:21.714 [debug] Transforming recursive refs:
Body: {:if, [line: 184], [{:>, [line: 184], [{:state, [line: 184], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 185], [{{:result, [line: 185], nil}, {:new_state, [line: 185], nil}}, {:recu, [line: 185], [{:tail, [line: 185], nil}]}]}, {{:result, [line: 186], nil}, {:-, [line: 186], [{:new_state, [line: 186], nil}, 1]}}]}, else: {{{:., [line: 188], [{:__aliases__, [line: 188], [:List]}, :cons]}, [line: 188], [{:head, [line: 188], nil}, {:recu, [line: 188], [{:tail, [line: 188], nil}]}]}, 0}]]}
Bindings: [head: true, tail: true]
State: {:n, [line: 182], nil}


10:55:21.714 [debug] Processing recursive reference: {:recu, [line: 185], [{:tail, [line: 185], nil}]}

10:55:21.714 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

10:55:21.714 [debug] Processing recursive reference: {:recu, [line: 188], [{:tail, [line: 188], nil}]}

10:55:21.714 [debug] Transformed recursive reference to: {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

10:55:21.714 [debug] Generated pattern: {:%{}, [], [variant: :null]} for variant: :null

10:55:21.714 [debug] Transforming recursive refs:
Body: {{{:., [line: 192], [{:__aliases__, [line: 192], [:List]}, :null]}, [line: 192], []}, {:state, [line: 192], nil}}
Bindings: []
State: {:n, [line: 182], nil}


10:55:21.715 [debug] Generated fold cases after transformation: [{:->, [line: 183], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 184], [{:>, [line: 184], [{:state, [line: 184], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 185], [{{:result, [line: 185], nil}, {:new_state, [line: 185], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {{:result, [line: 186], nil}, {:-, [line: 186], [{:new_state, [line: 186], nil}, 1]}}]}, else: {{{:., [line: 188], [{:__aliases__, [line: 188], [:List]}, :cons]}, [line: 188], [{:head, [line: 188], nil}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, 0}]]}]}, {:->, [line: 191], [[{:%{}, [], [variant: :null]}], {{{:., [line: 192], [{:__aliases__, [line: 192], [:List]}, :null]}, [line: 192], []}, {:state, [line: 192], nil}}]}]

10:55:21.715 [debug] Final quoted expression: {:do_fold, [], [{:list, [line: 182], nil}, {:n, [line: 182], nil}, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 183], [[{:%{}, [], [variant: :cons, head: {:head, [], nil}, tail: {:tail, [], nil}]}], {:if, [line: 184], [{:>, [line: 184], [{:state, [line: 184], nil}, 0]}, [do: {:__block__, [], [{:=, [line: 185], [{{:result, [line: 185], nil}, {:new_state, [line: 185], nil}}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, ...], [...]}, {:var!, [...], ...}]}]}, {{:result, [line: 186], nil}, {:-, [line: 186], [{:new_state, [line: 186], nil}, 1]}}]}, else: {{{:., [line: 188], [{:__aliases__, [line: 188], [:List]}, :cons]}, [line: 188], [{:head, [line: 188], nil}, {:do_fold, [], [{:tail, [], nil}, {:var!, [context: BenBen, imports: [{...}, ...]], [{:state, ...}]}, {:var!, [context: BenBen, imports: [...]], [{...}]}]}]}, 0}]]}]}, {:->, [line: 191], [[{:%{}, [], [variant: :null]}], {{{:., [line: 192], [{:__aliases__, [line: 192], [:List]}, :null]}, [line: 192], []}, {:state, [line: 192], nil}}]}]]]}]}]}]}
warning: this clause for reverse/1 cannot match because a previous clause at line 96 always matches
  lib/examples/chain.ex:122

Excluding tags: [:skip]

warning: Chain.reduce/3 is undefined or private
Invalid call found at 3 locations:
  test/examples/chain_test.exs:62: ChainTest."test reduce/3 reduces empty list"/1
  test/examples/chain_test.exs:68: ChainTest."test reduce/3 reduces list to sum"/1
  test/examples/chain_test.exs:74: ChainTest."test reduce/3 reduces with string concatenation"/1

10:55:21.880 [debug] Bend initial value: []
10:55:21.881 [debug] Executing bend with initial: []
10:55:21.881 [debug] Executing fun with value: []
10:55:21.881 [debug] Evaluating bend block with value: []
10:55:21.882 [debug] Block returned: %{variant: :null}
10:55:21.882 [debug] Fun returned result: %{variant: :null}
10:55:21.882 [debug] Processing constructed value: %{variant: :null}
10:55:21.882 [debug] do_bend final result: %{variant: :null}
10:55:21.882 [debug] Final bend result: %{variant: :null}
10:55:21.882 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 3
10:55:21.882 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.882 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.882 [debug] Processing recursive fields of: %{variant: :null}
.10:55:21.882 [debug] Bend initial value: []
10:55:21.882 [debug] Executing bend with initial: []
10:55:21.882 [debug] Executing fun with value: []
10:55:21.882 [debug] Evaluating bend block with value: []
10:55:21.882 [debug] Block returned: %{variant: :null}
10:55:21.882 [debug] Fun returned result: %{variant: :null}
10:55:21.882 [debug] Processing constructed value: %{variant: :null}
10:55:21.882 [debug] do_bend final result: %{variant: :null}
10:55:21.882 [debug] Final bend result: %{variant: :null}
10:55:21.884 [debug] Bend initial value: [1, 2, 3, 4, 5]
10:55:21.884 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
10:55:21.884 [debug] Executing fun with value: [1, 2, 3, 4, 5]
10:55:21.884 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
10:55:21.884 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.884 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.884 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.884 [debug] Executing bend with initial: [2, 3, 4, 5]
10:55:21.884 [debug] Executing fun with value: [2, 3, 4, 5]
10:55:21.884 [debug] Evaluating bend block with value: [2, 3, 4, 5]
10:55:21.884 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.884 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.884 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.884 [debug] Executing bend with initial: [3, 4, 5]
10:55:21.884 [debug] Executing fun with value: [3, 4, 5]
10:55:21.884 [debug] Evaluating bend block with value: [3, 4, 5]
10:55:21.884 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.884 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.884 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.884 [debug] Executing bend with initial: [4, 5]
10:55:21.884 [debug] Executing fun with value: [4, 5]
10:55:21.884 [debug] Evaluating bend block with value: [4, 5]
10:55:21.884 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.884 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.884 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.884 [debug] Executing bend with initial: [5]
10:55:21.884 [debug] Executing fun with value: [5]
10:55:21.884 [debug] Evaluating bend block with value: [5]
10:55:21.884 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.884 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.884 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.884 [debug] Executing bend with initial: []
10:55:21.884 [debug] Executing fun with value: []
10:55:21.884 [debug] Evaluating bend block with value: []
10:55:21.884 [debug] Block returned: %{variant: :null}
10:55:21.884 [debug] Fun returned result: %{variant: :null}
10:55:21.884 [debug] Processing constructed value: %{variant: :null}
10:55:21.884 [debug] do_bend final result: %{variant: :null}
10:55:21.884 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.884 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.884 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.884 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.884 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.884 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.884 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
10:55:21.884 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.885 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
10:55:21.885 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.885 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
10:55:21.885 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.885 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
10:55:21.885 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.885 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 10
10:55:21.885 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.885 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 10
10:55:21.885 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.885 [debug] Recursive field result for tail: {%{variant: :null}, 10}
10:55:21.885 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 10, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.885 [debug] Recursive field result for tail: {%{head: 5, tail: %{variant: :null}, variant: :cons}, 9}
10:55:21.885 [debug] do_fold called with non-function: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 9, non_fun: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.885 [debug] Recursive field result for tail: {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 8}
10:55:21.885 [debug] do_fold called with non-function: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 8, non_fun: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.885 [debug] Recursive field result for tail: {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 7}
10:55:21.885 [debug] do_fold called with non-function: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 7, non_fun: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.885 [debug] Recursive field result for tail: {%{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 6}
10:55:21.885 [debug] do_fold called with non-function: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 6, non_fun: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.885 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.885 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.885 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.885 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.885 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.885 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.885 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.885 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.885 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.885 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.885 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.885 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.885 [debug] Recursive field result for tail: []
10:55:21.885 [debug] do_fold called with non-variant data: []
10:55:21.885 [debug] Recursive field result for tail: [5]
10:55:21.885 [debug] do_fold called with non-variant data: [5]
10:55:21.885 [debug] Recursive field result for tail: [4, 5]
10:55:21.885 [debug] do_fold called with non-variant data: [4, 5]
10:55:21.885 [debug] Recursive field result for tail: [3, 4, 5]
10:55:21.885 [debug] do_fold called with non-variant data: [3, 4, 5]
10:55:21.885 [debug] Recursive field result for tail: [2, 3, 4, 5]
10:55:21.885 [debug] do_fold called with non-variant data: [2, 3, 4, 5]
10:55:21.885 [debug] Bend initial value: []
10:55:21.886 [debug] Executing bend with initial: []
10:55:21.886 [debug] Executing fun with value: []
10:55:21.886 [debug] Evaluating bend block with value: []
10:55:21.886 [debug] Block returned: %{variant: :null}
10:55:21.886 [debug] Fun returned result: %{variant: :null}
10:55:21.886 [debug] Processing constructed value: %{variant: :null}
10:55:21.886 [debug] do_bend final result: %{variant: :null}
10:55:21.886 [debug] Final bend result: %{variant: :null}
10:55:21.886 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.886 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.886 [debug] Bend initial value: [1, 2, 3, 4, 5]
10:55:21.886 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
10:55:21.886 [debug] Executing fun with value: [1, 2, 3, 4, 5]
10:55:21.886 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
10:55:21.886 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.886 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.886 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.886 [debug] Executing bend with initial: [2, 3, 4, 5]
10:55:21.886 [debug] Executing fun with value: [2, 3, 4, 5]
10:55:21.886 [debug] Evaluating bend block with value: [2, 3, 4, 5]
10:55:21.886 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.886 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.886 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.886 [debug] Executing bend with initial: [3, 4, 5]
10:55:21.886 [debug] Executing fun with value: [3, 4, 5]
10:55:21.886 [debug] Evaluating bend block with value: [3, 4, 5]
10:55:21.886 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.886 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.886 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.886 [debug] Executing bend with initial: [4, 5]
10:55:21.886 [debug] Executing fun with value: [4, 5]
10:55:21.886 [debug] Evaluating bend block with value: [4, 5]
10:55:21.886 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.886 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.886 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.886 [debug] Executing bend with initial: [5]
10:55:21.886 [debug] Executing fun with value: [5]
10:55:21.886 [debug] Evaluating bend block with value: [5]
10:55:21.886 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.886 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.886 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.886 [debug] Executing bend with initial: []
10:55:21.886 [debug] Executing fun with value: []
10:55:21.886 [debug] Evaluating bend block with value: []
10:55:21.886 [debug] Block returned: %{variant: :null}
10:55:21.886 [debug] Fun returned result: %{variant: :null}
10:55:21.886 [debug] Processing constructed value: %{variant: :null}
10:55:21.886 [debug] do_bend final result: %{variant: :null}
10:55:21.886 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.886 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.887 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.887 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.887 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.887 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.887 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.887 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.887 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.887 [debug] Recursive field result for tail: %{variant: :null}
10:55:21.887 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.887 [debug] Recursive field result for tail: %{head: 10, tail: %{variant: :null}, variant: :cons}
10:55:21.887 [debug] do_fold called with non-function: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 4, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] Recursive field result for tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_fold called with non-function: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 3, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] Recursive field result for tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_fold called with non-function: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 2, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] Recursive field result for tail: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_fold called with non-function: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 1, tail: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_fold called with data: %{head: 2, tail: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.887 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_fold called with data: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.887 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_fold called with data: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.887 [debug] Processing recursive fields of: %{head: 6, tail: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_fold called with data: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.887 [debug] Processing recursive fields of: %{head: 8, tail: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.887 [debug] do_fold called with data: %{head: 10, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.887 [debug] Processing recursive fields of: %{head: 10, tail: %{variant: :null}, variant: :cons}
10:55:21.887 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.887 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.887 [debug] Recursive field result for tail: []
10:55:21.887 [debug] do_fold called with non-variant data: []
10:55:21.887 [debug] Recursive field result for tail: '\n'
10:55:21.887 [debug] do_fold called with non-variant data: '\n'
10:55:21.887 [debug] Recursive field result for tail: '\b\n'
10:55:21.888 [debug] do_fold called with non-variant data: '\b\n'
10:55:21.888 [debug] Recursive field result for tail: [6, 8, 10]
10:55:21.888 [debug] do_fold called with non-variant data: [6, 8, 10]
10:55:21.888 [debug] Recursive field result for tail: [4, 6, 8, 10]
10:55:21.888 [debug] do_fold called with non-variant data: [4, 6, 8, 10]
10:55:21.888 [debug] Bend initial value: []
10:55:21.888 [debug] Executing bend with initial: []
10:55:21.888 [debug] Executing fun with value: []
10:55:21.888 [debug] Evaluating bend block with value: []
10:55:21.888 [debug] Block returned: %{variant: :null}
10:55:21.888 [debug] Fun returned result: %{variant: :null}
10:55:21.888 [debug] Processing constructed value: %{variant: :null}
10:55:21.888 [debug] do_bend final result: %{variant: :null}
10:55:21.888 [debug] Final bend result: %{variant: :null}
10:55:21.888 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 3
10:55:21.888 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.888 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.888 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.889 [debug] Bend initial value: ["a", "b", "c"]
10:55:21.889 [debug] Executing bend with initial: ["a", "b", "c"]
10:55:21.889 [debug] Executing fun with value: ["a", "b", "c"]
10:55:21.889 [debug] Evaluating bend block with value: ["a", "b", "c"]
10:55:21.889 [debug] Block returned: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
10:55:21.889 [debug] Fun returned result: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
10:55:21.889 [debug] Processing constructed value: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
10:55:21.889 [debug] Executing bend with initial: ["b", "c"]
10:55:21.889 [debug] Executing fun with value: ["b", "c"]
10:55:21.889 [debug] Evaluating bend block with value: ["b", "c"]
10:55:21.889 [debug] Block returned: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
10:55:21.889 [debug] Fun returned result: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
10:55:21.889 [debug] Processing constructed value: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
10:55:21.889 [debug] Executing bend with initial: ["c"]
10:55:21.889 [debug] Executing fun with value: ["c"]
10:55:21.889 [debug] Evaluating bend block with value: ["c"]
10:55:21.889 [debug] Block returned: %{head: "c", tail: {:fork, []}, variant: :cons}
10:55:21.889 [debug] Fun returned result: %{head: "c", tail: {:fork, []}, variant: :cons}
10:55:21.889 [debug] Processing constructed value: %{head: "c", tail: {:fork, []}, variant: :cons}
10:55:21.889 [debug] Executing bend with initial: []
10:55:21.889 [debug] Executing fun with value: []
10:55:21.889 [debug] Evaluating bend block with value: []
10:55:21.889 [debug] Block returned: %{variant: :null}
10:55:21.889 [debug] Fun returned result: %{variant: :null}
10:55:21.889 [debug] Processing constructed value: %{variant: :null}
10:55:21.889 [debug] do_bend final result: %{variant: :null}
10:55:21.889 [debug] do_bend final result: %{head: "c", tail: %{variant: :null}, variant: :cons}
10:55:21.889 [debug] do_bend final result: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.889 [debug] do_bend final result: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.889 [debug] Final bend result: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.889 [debug] do_fold called with data: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.889 [debug] Processing recursive fields of: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.889 [debug] do_fold called with data: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.890 [debug] Processing recursive fields of: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.890 [debug] do_fold called with data: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.890 [debug] Processing recursive fields of: %{head: "c", tail: %{variant: :null}, variant: :cons}
10:55:21.890 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.890 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.890 [debug] Recursive field result for tail: %{variant: :null}
10:55:21.895 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: "c", tail: %{variant: :null}, variant: :cons}
10:55:21.895 [debug] Recursive field result for tail: %{head: "C", tail: %{variant: :null}, variant: :cons}
10:55:21.895 [debug] do_fold called with non-function: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: "b", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.895 [debug] Recursive field result for tail: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.895 [debug] do_fold called with non-function: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: "a", tail: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.895 [debug] do_fold called with data: %{head: "A", tail: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.895 [debug] Processing recursive fields of: %{head: "A", tail: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.895 [debug] do_fold called with data: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.895 [debug] Processing recursive fields of: %{head: "B", tail: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.895 [debug] do_fold called with data: %{head: "C", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.895 [debug] Processing recursive fields of: %{head: "C", tail: %{variant: :null}, variant: :cons}
10:55:21.895 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.895 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.895 [debug] Recursive field result for tail: []
10:55:21.895 [debug] do_fold called with non-variant data: []
10:55:21.895 [debug] Recursive field result for tail: ["C"]
10:55:21.895 [debug] do_fold called with non-variant data: ["C"]
10:55:21.895 [debug] Recursive field result for tail: ["B", "C"]
10:55:21.895 [debug] do_fold called with non-variant data: ["B", "C"]


10:55:21.896 [debug] Bend initial value: []
  1) test reduce/3 reduces empty list (ChainTest)
     test/examples/chain_test.exs:61
     ** (UndefinedFunctionError) function Chain.reduce/3 is undefined or private
     code: {result, _} = Chain.reduce(Chain.tool([]), 0, &(&1 + &2))
     stacktrace:
       (graphrenia 0.1.0) Chain.reduce(%{variant: :null}, 0, &:erlang.+/2)
       test/examples/chain_test.exs:62: (test)

10:55:21.896 [debug] Executing bend with initial: []
10:55:21.896 [debug] Executing fun with value: []
10:55:21.896 [debug] Evaluating bend block with value: []
10:55:21.896 [debug] Block returned: %{variant: :null}
10:55:21.896 [debug] Fun returned result: %{variant: :null}
10:55:21.896 [debug] Processing constructed value: %{variant: :null}
10:55:21.896 [debug] do_bend final result: %{variant: :null}
10:55:21.896 [debug] Final bend result: %{variant: :null}
10:55:21.896 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.896 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.896 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.896 [debug] Processing recursive fields of: %{variant: :null}
....10:55:21.896 [debug] Bend initial value: [1, 2, 3, 4, 5]
.10:55:21.896 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
10:55:21.896 [debug] Executing fun with value: [1, 2, 3, 4, 5]
10:55:21.896 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
10:55:21.896 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.896 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.896 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.896 [debug] Executing bend with initial: [2, 3, 4, 5]
10:55:21.896 [debug] Executing fun with value: [2, 3, 4, 5]
10:55:21.896 [debug] Evaluating bend block with value: [2, 3, 4, 5]
10:55:21.896 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
.10:55:21.896 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.896 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.896 [debug] Executing bend with initial: [3, 4, 5]
10:55:21.896 [debug] Executing fun with value: [3, 4, 5]
10:55:21.896 [debug] Evaluating bend block with value: [3, 4, 5]
10:55:21.896 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.896 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.896 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.896 [debug] Executing bend with initial: [4, 5]
10:55:21.896 [debug] Executing fun with value: [4, 5]
10:55:21.896 [debug] Evaluating bend block with value: [4, 5]
10:55:21.896 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.896 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.896 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.896 [debug] Executing bend with initial: [5]
10:55:21.896 [debug] Executing fun with value: [5]
10:55:21.896 [debug] Evaluating bend block with value: [5]
10:55:21.896 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.896 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.896 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.896 [debug] Executing bend with initial: []
10:55:21.896 [debug] Executing fun with value: []
10:55:21.896 [debug] Evaluating bend block with value: []
10:55:21.896 [debug] Block returned: %{variant: :null}
10:55:21.896 [debug] Fun returned result: %{variant: :null}
10:55:21.896 [debug] Processing constructed value: %{variant: :null}
10:55:21.896 [debug] do_bend final result: %{variant: :null}
10:55:21.896 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.896 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.896 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.897 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.897 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.897 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.897 [debug] Bend initial value: ["a", "b", "c"]
10:55:21.897 [debug] Executing bend with initial: ["a", "b", "c"]
10:55:21.897 [debug] Executing fun with value: ["a", "b", "c"]
10:55:21.897 [debug] Evaluating bend block with value: ["a", "b", "c"]
10:55:21.897 [debug] Block returned: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
10:55:21.897 [debug] Fun returned result: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
10:55:21.897 [debug] Processing constructed value: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
10:55:21.897 [debug] Executing bend with initial: ["b", "c"]
10:55:21.897 [debug] Executing fun with value: ["b", "c"]
10:55:21.897 [debug] Evaluating bend block with value: ["b", "c"]
10:55:21.897 [debug] Block returned: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
10:55:21.897 [debug] Fun returned result: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
10:55:21.897 [debug] Processing constructed value: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
10:55:21.897 [debug] Executing bend with initial: ["c"]
10:55:21.897 [debug] Executing fun with value: ["c"]
10:55:21.897 [debug] Evaluating bend block with value: ["c"]
10:55:21.897 [debug] Block returned: %{head: "c", tail: {:fork, []}, variant: :cons}
10:55:21.897 [debug] Fun returned result: %{head: "c", tail: {:fork, []}, variant: :cons}
10:55:21.897 [debug] Processing constructed value: %{head: "c", tail: {:fork, []}, variant: :cons}


10:55:21.897 [debug] Executing bend with initial: []
  2) test reduce/3 reduces list to sum (ChainTest)
     test/examples/chain_test.exs:66
     ** (UndefinedFunctionError) function Chain.reduce/3 is undefined or private
     code: {result, _} = Chain.reduce(list, 0, &(&1 + &2))
     stacktrace:
       (graphrenia 0.1.0) Chain.reduce(%{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, 0, &:erlang.+/2)
       test/examples/chain_test.exs:68: (test)

10:55:21.897 [debug] Executing fun with value: []
10:55:21.897 [debug] Evaluating bend block with value: []
10:55:21.897 [debug] Block returned: %{variant: :null}
10:55:21.897 [debug] Fun returned result: %{variant: :null}
10:55:21.897 [debug] Processing constructed value: %{variant: :null}
10:55:21.897 [debug] do_bend final result: %{variant: :null}
10:55:21.897 [debug] do_bend final result: %{head: "c", tail: %{variant: :null}, variant: :cons}
10:55:21.897 [debug] do_bend final result: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.897 [debug] do_bend final result: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.897 [debug] Final bend result: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.897 [debug] do_fold called with data: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.897 [debug] Processing recursive fields of: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.897 [debug] do_fold called with data: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.897 [debug] Processing recursive fields of: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.897 [debug] do_fold called with data: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.897 [debug] Processing recursive fields of: %{head: "c", tail: %{variant: :null}, variant: :cons}
10:55:21.897 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.897 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.897 [debug] Recursive field result for tail: []
10:55:21.897 [debug] do_fold called with non-variant data: []
10:55:21.897 [debug] Recursive field result for tail: ["c"]
10:55:21.897 [debug] do_fold called with non-variant data: ["c"]
10:55:21.897 [debug] Recursive field result for tail: ["b", "c"]
10:55:21.897 [debug] do_fold called with non-variant data: ["b", "c"]
.10:55:21.897 [debug] Bend initial value: [1, 2, 3, 4, 5]
10:55:21.897 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
10:55:21.897 [debug] Executing fun with value: [1, 2, 3, 4, 5]
10:55:21.897 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
10:55:21.898 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.898 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.898 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.898 [debug] Executing bend with initial: [2, 3, 4, 5]
10:55:21.898 [debug] Executing fun with value: [2, 3, 4, 5]
10:55:21.898 [debug] Evaluating bend block with value: [2, 3, 4, 5]
10:55:21.898 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.898 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.898 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.898 [debug] Executing bend with initial: [3, 4, 5]
10:55:21.898 [debug] Executing fun with value: [3, 4, 5]
10:55:21.898 [debug] Evaluating bend block with value: [3, 4, 5]
10:55:21.898 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.898 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.898 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.898 [debug] Executing bend with initial: [4, 5]
10:55:21.898 [debug] Executing fun with value: [4, 5]
10:55:21.898 [debug] Evaluating bend block with value: [4, 5]
10:55:21.898 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.898 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.898 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.898 [debug] Executing bend with initial: [5]
10:55:21.898 [debug] Executing fun with value: [5]
10:55:21.898 [debug] Evaluating bend block with value: [5]
10:55:21.898 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.898 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.898 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.898 [debug] Executing bend with initial: []
10:55:21.898 [debug] Executing fun with value: []
10:55:21.898 [debug] Evaluating bend block with value: []
10:55:21.898 [debug] Block returned: %{variant: :null}
10:55:21.898 [debug] Fun returned result: %{variant: :null}
10:55:21.898 [debug] Processing constructed value: %{variant: :null}
10:55:21.898 [debug] do_bend final result: %{variant: :null}
10:55:21.898 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.898 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.898 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.898 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.898 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.898 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.898 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.898 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.898 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.898 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.898 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.898 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.898 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.898 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.898 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.898 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.898 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.898 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.898 [debug] Recursive field result for tail: %{variant: :null}
10:55:21.898 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.898 [debug] Recursive field result for tail: %{variant: :null}
10:55:21.898 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: 4, tail: %{variant: :null}, variant: :cons}
10:55:21.898 [debug] Recursive field result for tail: %{head: 4, tail: %{variant: :null}, variant: :cons}
10:55:21.899 [debug] do_fold called with non-function: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 3, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.899 [debug] Recursive field result for tail: %{head: 4, tail: %{variant: :null}, variant: :cons}
10:55:21.899 [debug] do_fold called with non-function: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 2, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.899 [debug] Recursive field result for tail: %{head: 2, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.899 [debug] do_fold called with non-function: %{head: 2, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 1, tail: %{head: 2, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.899 [debug] do_fold called with data: %{head: 2, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.899 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.899 [debug] do_fold called with data: %{head: 4, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.899 [debug] Processing recursive fields of: %{head: 4, tail: %{variant: :null}, variant: :cons}
10:55:21.899 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.899 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.899 [debug] Recursive field result for tail: []
10:55:21.899 [debug] do_fold called with non-variant data: []
10:55:21.899 [debug] Recursive field result for tail: [4]
10:55:21.899 [debug] do_fold called with non-variant data: [4]
.10:55:21.899 [debug] Bend initial value: []
10:55:21.899 [debug] Executing bend with initial: []
10:55:21.899 [debug] Executing fun with value: []
10:55:21.899 [debug] Evaluating bend block with value: []
10:55:21.899 [debug] Block returned: %{variant: :null}
10:55:21.899 [debug] Fun returned result: %{variant: :null}
10:55:21.899 [debug] Processing constructed value: %{variant: :null}
10:55:21.899 [debug] do_bend final result: %{variant: :null}
10:55:21.899 [debug] Final bend result: %{variant: :null}
10:55:21.899 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.899 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.899 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.899 [debug] Processing recursive fields of: %{variant: :null}
.10:55:21.899 [debug] Bend initial value: [1, 2, 3, 4, 5]
10:55:21.899 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
10:55:21.899 [debug] Executing fun with value: [1, 2, 3, 4, 5]
10:55:21.899 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
10:55:21.899 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.899 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.899 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.899 [debug] Executing bend with initial: [2, 3, 4, 5]
10:55:21.899 [debug] Executing fun with value: [2, 3, 4, 5]
10:55:21.899 [debug] Evaluating bend block with value: [2, 3, 4, 5]
10:55:21.899 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.899 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.899 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.899 [debug] Executing bend with initial: [3, 4, 5]
10:55:21.899 [debug] Executing fun with value: [3, 4, 5]
10:55:21.899 [debug] Evaluating bend block with value: [3, 4, 5]
10:55:21.899 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.899 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.899 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.899 [debug] Executing bend with initial: [4, 5]
10:55:21.899 [debug] Executing fun with value: [4, 5]
10:55:21.899 [debug] Evaluating bend block with value: [4, 5]
10:55:21.899 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.900 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.900 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.900 [debug] Executing bend with initial: [5]
10:55:21.900 [debug] Executing fun with value: [5]
10:55:21.900 [debug] Evaluating bend block with value: [5]
10:55:21.900 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.900 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.900 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.900 [debug] Executing bend with initial: []
10:55:21.900 [debug] Executing fun with value: []
10:55:21.900 [debug] Evaluating bend block with value: []
10:55:21.900 [debug] Block returned: %{variant: :null}
10:55:21.900 [debug] Fun returned result: %{variant: :null}
10:55:21.900 [debug] Processing constructed value: %{variant: :null}
10:55:21.900 [debug] do_bend final result: %{variant: :null}
10:55:21.900 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.900 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.900 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.900 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.900 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.900 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.900 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 3
10:55:21.900 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.900 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 3
10:55:21.900 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.900 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 3
10:55:21.900 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.900 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 3
10:55:21.900 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.900 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 3
10:55:21.900 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.900 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 3
10:55:21.900 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.900 [debug] Recursive field result for tail: {%{variant: :null}, 3}
10:55:21.900 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 3, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.900 [debug] Recursive field result for tail: {%{head: 5, tail: %{variant: :null}, variant: :cons}, 2}
10:55:21.900 [debug] do_fold called with non-function: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 2, non_fun: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.900 [debug] Recursive field result for tail: {%{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, 1}
10:55:21.900 [debug] do_fold called with non-function: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 1, non_fun: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.900 [debug] Recursive field result for tail: {%{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, 0}
10:55:21.900 [debug] Recursive field result for tail: {%{variant: :null}, 0}
10:55:21.900 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.900 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.901 [debug] Bend initial value: ["a", "b", "c"]
10:55:21.901 [debug] Executing bend with initial: ["a", "b", "c"]
10:55:21.901 [debug] Executing fun with value: ["a", "b", "c"]
10:55:21.901 [debug] Evaluating bend block with value: ["a", "b", "c"]
10:55:21.901 [debug] Block returned: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
10:55:21.901 [debug] Fun returned result: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
10:55:21.901 [debug] Processing constructed value: %{head: "a", tail: {:fork, ["b", "c"]}, variant: :cons}
10:55:21.901 [debug] Executing bend with initial: ["b", "c"]
10:55:21.901 [debug] Executing fun with value: ["b", "c"]
10:55:21.901 [debug] Evaluating bend block with value: ["b", "c"]
10:55:21.901 [debug] Block returned: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
10:55:21.901 [debug] Fun returned result: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}


10:55:21.901 [debug] Processing constructed value: %{head: "b", tail: {:fork, ["c"]}, variant: :cons}
10:55:21.901 [debug] Executing bend with initial: ["c"]
10:55:21.901 [debug] Executing fun with value: ["c"]
10:55:21.901 [debug] Evaluating bend block with value: ["c"]
10:55:21.901 [debug] Block returned: %{head: "c", tail: {:fork, []}, variant: :cons}
10:55:21.901 [debug] Fun returned result: %{head: "c", tail: {:fork, []}, variant: :cons}
10:55:21.901 [debug] Processing constructed value: %{head: "c", tail: {:fork, []}, variant: :cons}
10:55:21.901 [debug] Executing bend with initial: []
  3) test take/2 takes less than list length (ChainTest)
     test/examples/chain_test.exs:130
     Assertion with == failed
     code:  assert Chain.breaker(result) == [1, 2, 3]
     left:  []
     right: [1, 2, 3]
     stacktrace:
       test/examples/chain_test.exs:133: (test)

10:55:21.901 [debug] Executing fun with value: []
10:55:21.901 [debug] Evaluating bend block with value: []
10:55:21.901 [debug] Block returned: %{variant: :null}
10:55:21.901 [debug] Fun returned result: %{variant: :null}
10:55:21.901 [debug] Processing constructed value: %{variant: :null}
10:55:21.901 [debug] do_bend final result: %{variant: :null}
10:55:21.901 [debug] do_bend final result: %{head: "c", tail: %{variant: :null}, variant: :cons}
10:55:21.901 [debug] do_bend final result: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.901 [debug] do_bend final result: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.901 [debug] Final bend result: %{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.901 [debug] Bend initial value: [1, 2, 3]
10:55:21.901 [debug] Executing bend with initial: [1, 2, 3]
10:55:21.901 [debug] Executing fun with value: [1, 2, 3]
10:55:21.901 [debug] Evaluating bend block with value: [1, 2, 3]
10:55:21.901 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3]}, variant: :cons}
10:55:21.902 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3]}, variant: :cons}
10:55:21.902 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3]}, variant: :cons}
10:55:21.902 [debug] Executing bend with initial: [2, 3]
10:55:21.902 [debug] Executing fun with value: [2, 3]


10:55:21.902 [debug] Evaluating bend block with value: [2, 3]
10:55:21.902 [debug] Block returned: %{head: 2, tail: {:fork, [3]}, variant: :cons}
10:55:21.902 [debug] Fun returned result: %{head: 2, tail: {:fork, [3]}, variant: :cons}
10:55:21.902 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3]}, variant: :cons}
10:55:21.902 [debug] Executing bend with initial: [3]
10:55:21.902 [debug] Executing fun with value: [3]
10:55:21.902 [debug] Evaluating bend block with value: [3]
10:55:21.902 [debug] Block returned: %{head: 3, tail: {:fork, []}, variant: :cons}
10:55:21.902 [debug] Fun returned result: %{head: 3, tail: {:fork, []}, variant: :cons}
10:55:21.902 [debug] Processing constructed value: %{head: 3, tail: {:fork, []}, variant: :cons}
10:55:21.902 [debug] Executing bend with initial: []
10:55:21.902 [debug] Executing fun with value: []
10:55:21.902 [debug] Evaluating bend block with value: []
  4) test reduce/3 reduces with string concatenation (ChainTest)
     test/examples/chain_test.exs:72
     ** (UndefinedFunctionError) function Chain.reduce/3 is undefined or private
     code: {result, _} = Chain.reduce(list, "", &(&2 <> &1))
     stacktrace:
       (graphrenia 0.1.0) Chain.reduce(%{head: "a", tail: %{head: "b", tail: %{head: "c", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, "", #Function<6.101790195/2 in ChainTest."test reduce/3 reduces with string concatenation"/1>)
       test/examples/chain_test.exs:74: (test)

10:55:21.902 [debug] Block returned: %{variant: :null}
10:55:21.902 [debug] Fun returned result: %{variant: :null}
10:55:21.902 [debug] Processing constructed value: %{variant: :null}
10:55:21.902 [debug] do_bend final result: %{variant: :null}
10:55:21.902 [debug] do_bend final result: %{head: 3, tail: %{variant: :null}, variant: :cons}
10:55:21.902 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.902 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.902 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.902 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.902 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.902 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.902 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.902 [debug] do_fold called with data: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.902 [debug] Processing recursive fields of: %{head: 3, tail: %{variant: :null}, variant: :cons}
10:55:21.902 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.902 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.902 [debug] Recursive field result for tail: []
10:55:21.902 [debug] do_fold called with non-variant data: []
10:55:21.902 [debug] Recursive field result for tail: [3]
10:55:21.902 [debug] do_fold called with non-variant data: [3]
10:55:21.902 [debug] Recursive field result for tail: [2, 3]
10:55:21.902 [debug] do_fold called with non-variant data: [2, 3]
.10:55:21.902 [debug] Bend initial value: [1, 2, 3, 4, 5]
10:55:21.902 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
10:55:21.902 [debug] Executing fun with value: [1, 2, 3, 4, 5]
10:55:21.902 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
10:55:21.902 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.902 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.902 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.902 [debug] Executing bend with initial: [2, 3, 4, 5]
10:55:21.902 [debug] Executing fun with value: [2, 3, 4, 5]
10:55:21.902 [debug] Evaluating bend block with value: [2, 3, 4, 5]
10:55:21.902 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.903 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.903 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.903 [debug] Executing bend with initial: [3, 4, 5]
10:55:21.903 [debug] Executing fun with value: [3, 4, 5]
10:55:21.903 [debug] Evaluating bend block with value: [3, 4, 5]
10:55:21.903 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.903 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.903 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.903 [debug] Executing bend with initial: [4, 5]
10:55:21.903 [debug] Executing fun with value: [4, 5]
10:55:21.903 [debug] Evaluating bend block with value: [4, 5]
10:55:21.903 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.903 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.903 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.903 [debug] Executing bend with initial: [5]
10:55:21.903 [debug] Executing fun with value: [5]
10:55:21.903 [debug] Evaluating bend block with value: [5]
10:55:21.903 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.903 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.903 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.903 [debug] Executing bend with initial: []
10:55:21.903 [debug] Executing fun with value: []
10:55:21.903 [debug] Evaluating bend block with value: []
10:55:21.903 [debug] Block returned: %{variant: :null}
10:55:21.903 [debug] Fun returned result: %{variant: :null}
10:55:21.903 [debug] Processing constructed value: %{variant: :null}
10:55:21.903 [debug] do_bend final result: %{variant: :null}
10:55:21.903 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.903 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.903 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.903 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.903 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.903 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.903 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.903 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.903 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.903 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.903 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.903 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.903 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.903 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.903 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.903 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.903 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.903 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.903 [debug] Recursive field result for tail: 0
10:55:21.903 [debug] do_fold called with non-variant data: 0
10:55:21.903 [debug] Recursive field result for tail: 1
10:55:21.903 [debug] do_fold called with non-variant data: 1
10:55:21.903 [debug] Recursive field result for tail: 2
10:55:21.903 [debug] do_fold called with non-variant data: 2
10:55:21.903 [debug] Recursive field result for tail: 3
10:55:21.903 [debug] do_fold called with non-variant data: 3
10:55:21.903 [debug] Recursive field result for tail: 4
10:55:21.903 [debug] do_fold called with non-variant data: 4
.10:55:21.903 [debug] Bend initial value: [1, 2, 3, 4, 5]
10:55:21.903 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
10:55:21.903 [debug] Executing fun with value: [1, 2, 3, 4, 5]
10:55:21.903 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
10:55:21.903 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.903 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.903 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.903 [debug] Executing bend with initial: [2, 3, 4, 5]
10:55:21.903 [debug] Executing fun with value: [2, 3, 4, 5]
10:55:21.903 [debug] Evaluating bend block with value: [2, 3, 4, 5]
10:55:21.903 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.903 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.903 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.903 [debug] Executing bend with initial: [3, 4, 5]
10:55:21.903 [debug] Executing fun with value: [3, 4, 5]
10:55:21.903 [debug] Evaluating bend block with value: [3, 4, 5]
10:55:21.903 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.904 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.904 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.904 [debug] Executing bend with initial: [4, 5]
10:55:21.904 [debug] Executing fun with value: [4, 5]
10:55:21.904 [debug] Evaluating bend block with value: [4, 5]
10:55:21.904 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.904 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.904 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.904 [debug] Executing bend with initial: [5]
10:55:21.904 [debug] Executing fun with value: [5]
10:55:21.904 [debug] Evaluating bend block with value: [5]
10:55:21.904 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.904 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.904 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.904 [debug] Executing bend with initial: []
10:55:21.904 [debug] Executing fun with value: []
10:55:21.904 [debug] Evaluating bend block with value: []
10:55:21.904 [debug] Block returned: %{variant: :null}
10:55:21.904 [debug] Fun returned result: %{variant: :null}
10:55:21.904 [debug] Processing constructed value: %{variant: :null}
10:55:21.904 [debug] do_bend final result: %{variant: :null}
10:55:21.904 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.904 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.904 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.904 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.904 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.904 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.904 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 2
10:55:21.904 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.904 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 2
10:55:21.904 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.904 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 2
10:55:21.904 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.904 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 2
10:55:21.904 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.904 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 2
10:55:21.904 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.904 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 2
10:55:21.904 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.904 [debug] Recursive field result for tail: {%{variant: :null}, 2}
10:55:21.904 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 2, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.904 [debug] Recursive field result for tail: {%{variant: :null}, 1}
10:55:21.904 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 1, non_fun: %{head: 4, tail: %{variant: :null}, variant: :cons}
10:55:21.904 [debug] Recursive field result for tail: {%{variant: :null}, 0}
10:55:21.904 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 0, non_fun: %{head: 3, tail: %{variant: :null}, variant: :cons}
10:55:21.904 [debug] Recursive field result for tail: {%{head: 3, tail: {%{variant: :null}, 0}, variant: :cons}, 0}
10:55:21.904 [debug] do_fold called with non-function: %{head: 3, tail: {%{variant: :null}, 0}, variant: :cons}, variant_type: :cons, state: 0, non_fun: %{head: 2, tail: %{head: 3, tail: {%{variant: :null}, 0}, variant: :cons}, variant: :cons}
10:55:21.904 [debug] Recursive field result for tail: {%{head: 2, tail: {%{head: 3, tail: {%{variant: :null}, 0}, variant: :cons}, 0}, variant: :cons}, 0}
10:55:21.904 [debug] do_fold called with non-function: %{head: 2, tail: {%{head: 3, tail: {%{variant: :null}, 0}, variant: :cons}, 0}, variant: :cons}, variant_type: :cons, state: 0, non_fun: %{head: 1, tail: %{head: 2, tail: {%{head: 3, tail: {%{variant: :null}, 0}, variant: :cons}, 0}, variant: :cons}, variant: :cons}
10:55:21.904 [debug] do_fold called with data: %{head: 1, tail: {%{head: 2, tail: {%{head: 3, tail: {%{variant: :null}, 0}, variant: :cons}, 0}, variant: :cons}, 0}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.904 [debug] Processing recursive fields of: %{head: 1, tail: {%{head: 2, tail: {%{head: 3, tail: {%{variant: :null}, 0}, variant: :cons}, 0}, variant: :cons}, 0}, variant: :cons}
10:55:21.904 [debug] do_fold called with non-variant data: {%{head: 2, tail: {%{head: 3, tail: {%{variant: :null}, 0}, variant: :cons}, 0}, variant: :cons}, 0}
10:55:21.905 [debug] Bend initial value: [1, 2, 3, 4, 5]


  5) test drop/2 drops less than list length (ChainTest)
     test/examples/chain_test.exs:149
     Assertion with == failed
     code:  assert Chain.breaker(result) == [3, 4, 5]
     left:  [1 | {%{head: 2, tail: {%{head: 3, tail: {%{variant: :null}, 0}, variant: :cons}, 0}, variant: :cons}, 0}]
     right: [3, 4, 5]
     stacktrace:
       test/examples/chain_test.exs:152: (test)

10:55:21.905 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
10:55:21.905 [debug] Executing fun with value: [1, 2, 3, 4, 5]
10:55:21.905 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
10:55:21.905 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.905 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.905 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.905 [debug] Executing bend with initial: [2, 3, 4, 5]
10:55:21.905 [debug] Executing fun with value: [2, 3, 4, 5]
10:55:21.905 [debug] Evaluating bend block with value: [2, 3, 4, 5]
10:55:21.905 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.905 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.905 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.905 [debug] Executing bend with initial: [3, 4, 5]
10:55:21.905 [debug] Executing fun with value: [3, 4, 5]
10:55:21.905 [debug] Evaluating bend block with value: [3, 4, 5]
10:55:21.905 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.905 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.905 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.905 [debug] Executing bend with initial: [4, 5]
10:55:21.905 [debug] Executing fun with value: [4, 5]
10:55:21.905 [debug] Evaluating bend block with value: [4, 5]
10:55:21.905 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.905 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.905 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.905 [debug] Executing bend with initial: [5]
10:55:21.905 [debug] Executing fun with value: [5]
10:55:21.905 [debug] Evaluating bend block with value: [5]
10:55:21.905 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.905 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.905 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.905 [debug] Executing bend with initial: []
10:55:21.905 [debug] Executing fun with value: []
10:55:21.905 [debug] Evaluating bend block with value: []
10:55:21.905 [debug] Block returned: %{variant: :null}
10:55:21.905 [debug] Fun returned result: %{variant: :null}
10:55:21.905 [debug] Processing constructed value: %{variant: :null}
10:55:21.905 [debug] do_bend final result: %{variant: :null}
10:55:21.905 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.905 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.905 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.905 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.905 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.905 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.905 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 5
10:55:21.905 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.905 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 5
10:55:21.905 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.905 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 5
10:55:21.905 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.905 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 5
10:55:21.905 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.905 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 5
10:55:21.905 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.905 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 5
10:55:21.905 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.905 [debug] Recursive field result for tail: {%{variant: :null}, 5}
10:55:21.905 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 5, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.905 [debug] Recursive field result for tail: {%{variant: :null}, 4}
10:55:21.905 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 4, non_fun: %{head: 4, tail: %{variant: :null}, variant: :cons}
10:55:21.905 [debug] Recursive field result for tail: {%{variant: :null}, 3}
10:55:21.905 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 3, non_fun: %{head: 3, tail: %{variant: :null}, variant: :cons}
10:55:21.905 [debug] Recursive field result for tail: {%{variant: :null}, 2}
10:55:21.905 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 2, non_fun: %{head: 2, tail: %{variant: :null}, variant: :cons}
10:55:21.905 [debug] Recursive field result for tail: {%{variant: :null}, 1}
10:55:21.905 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 1, non_fun: %{head: 1, tail: %{variant: :null}, variant: :cons}
10:55:21.906 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.906 [debug] Processing recursive fields of: %{variant: :null}
.10:55:21.906 [debug] Bend initial value: [1, 2, 3, 4, 5]
10:55:21.906 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
10:55:21.906 [debug] Executing fun with value: [1, 2, 3, 4, 5]
10:55:21.906 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
10:55:21.906 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.906 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.906 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.906 [debug] Executing bend with initial: [2, 3, 4, 5]
10:55:21.906 [debug] Executing fun with value: [2, 3, 4, 5]
10:55:21.906 [debug] Evaluating bend block with value: [2, 3, 4, 5]
10:55:21.906 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.906 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.906 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.906 [debug] Executing bend with initial: [3, 4, 5]
10:55:21.906 [debug] Executing fun with value: [3, 4, 5]
10:55:21.906 [debug] Evaluating bend block with value: [3, 4, 5]
10:55:21.906 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.906 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.906 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.906 [debug] Executing bend with initial: [4, 5]
10:55:21.906 [debug] Executing fun with value: [4, 5]
10:55:21.906 [debug] Evaluating bend block with value: [4, 5]
10:55:21.906 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.906 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.906 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.906 [debug] Executing bend with initial: [5]
10:55:21.906 [debug] Executing fun with value: [5]
10:55:21.906 [debug] Evaluating bend block with value: [5]
10:55:21.906 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.906 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.906 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.906 [debug] Executing bend with initial: []
10:55:21.906 [debug] Executing fun with value: []
10:55:21.906 [debug] Evaluating bend block with value: []
10:55:21.906 [debug] Block returned: %{variant: :null}
10:55:21.906 [debug] Fun returned result: %{variant: :null}
10:55:21.906 [debug] Processing constructed value: %{variant: :null}
10:55:21.906 [debug] do_bend final result: %{variant: :null}
10:55:21.906 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.906 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.906 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.906 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.906 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.906 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.906 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.906 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.906 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.906 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.906 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.906 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.906 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.906 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.906 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.906 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
10:55:21.906 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.906 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.906 [debug] Recursive field result for tail: %{variant: :null}
10:55:21.906 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: 1, tail: %{variant: :null}, variant: :cons}
10:55:21.906 [debug] Recursive field result for tail: %{head: 2, tail: %{variant: :null}, variant: :cons}
10:55:21.906 [debug] do_fold called with non-function: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 2, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.907 [debug] Recursive field result for tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.907 [debug] do_fold called with non-function: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 3, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.907 [debug] Recursive field result for tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.907 [debug] do_fold called with non-function: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 4, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.907 [debug] Recursive field result for tail: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.907 [debug] do_fold called with non-function: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 5, tail: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.907 [debug] do_fold called with data: %{head: 10, tail: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.907 [debug] Processing recursive fields of: %{head: 10, tail: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.907 [debug] do_fold called with data: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.907 [debug] Processing recursive fields of: %{head: 8, tail: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.907 [debug] do_fold called with data: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.907 [debug] Processing recursive fields of: %{head: 6, tail: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.907 [debug] do_fold called with data: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.907 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.907 [debug] do_fold called with data: %{head: 2, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.907 [debug] Processing recursive fields of: %{head: 2, tail: %{variant: :null}, variant: :cons}
10:55:21.907 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.907 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.907 [debug] Recursive field result for tail: []
10:55:21.907 [debug] do_fold called with non-variant data: []
10:55:21.907 [debug] Recursive field result for tail: [2]
10:55:21.907 [debug] do_fold called with non-variant data: [2]
10:55:21.907 [debug] Recursive field result for tail: [4, 2]
10:55:21.907 [debug] do_fold called with non-variant data: [4, 2]
10:55:21.907 [debug] Recursive field result for tail: [6, 4, 2]
10:55:21.907 [debug] do_fold called with non-variant data: [6, 4, 2]
10:55:21.907 [debug] Recursive field result for tail: [8, 6, 4, 2]
10:55:21.907 [debug] do_fold called with non-variant data: [8, 6, 4, 2]
.10:55:21.907 [debug] Bend initial value: [1, 2, 3, 4, 5]
10:55:21.907 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
10:55:21.907 [debug] Executing fun with value: [1, 2, 3, 4, 5]
10:55:21.907 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
10:55:21.907 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.907 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.907 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.907 [debug] Executing bend with initial: [2, 3, 4, 5]
10:55:21.907 [debug] Executing fun with value: [2, 3, 4, 5]
10:55:21.907 [debug] Evaluating bend block with value: [2, 3, 4, 5]
10:55:21.907 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.907 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.907 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.907 [debug] Executing bend with initial: [3, 4, 5]
10:55:21.907 [debug] Executing fun with value: [3, 4, 5]
10:55:21.907 [debug] Evaluating bend block with value: [3, 4, 5]
10:55:21.907 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.907 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.907 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.907 [debug] Executing bend with initial: [4, 5]
10:55:21.907 [debug] Executing fun with value: [4, 5]
10:55:21.907 [debug] Evaluating bend block with value: [4, 5]
10:55:21.907 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.907 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.907 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.907 [debug] Executing bend with initial: [5]
10:55:21.907 [debug] Executing fun with value: [5]
10:55:21.907 [debug] Evaluating bend block with value: [5]
10:55:21.907 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.907 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.908 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.908 [debug] Executing bend with initial: []
10:55:21.908 [debug] Executing fun with value: []
10:55:21.908 [debug] Evaluating bend block with value: []
10:55:21.908 [debug] Block returned: %{variant: :null}
10:55:21.908 [debug] Fun returned result: %{variant: :null}
10:55:21.908 [debug] Processing constructed value: %{variant: :null}
10:55:21.908 [debug] do_bend final result: %{variant: :null}
10:55:21.908 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.908 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.908 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.908 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.908 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.908 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.908 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
10:55:21.908 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.908 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
10:55:21.908 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.908 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
10:55:21.908 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.908 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: 10
10:55:21.908 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.908 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: 10
10:55:21.908 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.908 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: 10
10:55:21.908 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.908 [debug] Recursive field result for tail: {%{variant: :null}, 10}
10:55:21.908 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 10, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.908 [debug] Recursive field result for tail: {%{variant: :null}, 9}
10:55:21.908 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 9, non_fun: %{head: 4, tail: %{variant: :null}, variant: :cons}
10:55:21.908 [debug] Recursive field result for tail: {%{variant: :null}, 8}
10:55:21.908 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 8, non_fun: %{head: 3, tail: %{variant: :null}, variant: :cons}
10:55:21.908 [debug] Recursive field result for tail: {%{variant: :null}, 7}
10:55:21.908 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 7, non_fun: %{head: 2, tail: %{variant: :null}, variant: :cons}
10:55:21.908 [debug] Recursive field result for tail: {%{variant: :null}, 6}
10:55:21.908 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: 6, non_fun: %{head: 1, tail: %{variant: :null}, variant: :cons}
10:55:21.908 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.908 [debug] Processing recursive fields of: %{variant: :null}
.10:55:21.908 [debug] Bend initial value: []
10:55:21.908 [debug] Executing bend with initial: []
10:55:21.908 [debug] Executing fun with value: []
10:55:21.908 [debug] Evaluating bend block with value: []
10:55:21.908 [debug] Block returned: %{variant: :null}
10:55:21.908 [debug] Fun returned result: %{variant: :null}
10:55:21.908 [debug] Processing constructed value: %{variant: :null}
10:55:21.908 [debug] do_bend final result: %{variant: :null}
10:55:21.908 [debug] Final bend result: %{variant: :null}
10:55:21.908 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.908 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.908 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.908 [debug] Processing recursive fields of: %{variant: :null}
.10:55:21.908 [debug] Bend initial value: []
10:55:21.908 [debug] Executing bend with initial: []
10:55:21.908 [debug] Executing fun with value: []
10:55:21.908 [debug] Evaluating bend block with value: []
10:55:21.908 [debug] Block returned: %{variant: :null}
10:55:21.908 [debug] Fun returned result: %{variant: :null}
10:55:21.908 [debug] Processing constructed value: %{variant: :null}
10:55:21.908 [debug] do_bend final result: %{variant: :null}
10:55:21.908 [debug] Final bend result: %{variant: :null}
10:55:21.908 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.908 [debug] Processing recursive fields of: %{variant: :null}
.10:55:21.908 [debug] Bend initial value: [1, 2, 3]
10:55:21.908 [debug] Executing bend with initial: [1, 2, 3]
10:55:21.908 [debug] Executing fun with value: [1, 2, 3]
10:55:21.908 [debug] Evaluating bend block with value: [1, 2, 3]
10:55:21.908 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3]}, variant: :cons}
10:55:21.908 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3]}, variant: :cons}
10:55:21.908 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3]}, variant: :cons}
10:55:21.908 [debug] Executing bend with initial: [2, 3]
10:55:21.908 [debug] Executing fun with value: [2, 3]
10:55:21.908 [debug] Evaluating bend block with value: [2, 3]
10:55:21.908 [debug] Block returned: %{head: 2, tail: {:fork, [3]}, variant: :cons}
10:55:21.908 [debug] Fun returned result: %{head: 2, tail: {:fork, [3]}, variant: :cons}
10:55:21.908 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3]}, variant: :cons}
10:55:21.908 [debug] Executing bend with initial: [3]
10:55:21.908 [debug] Executing fun with value: [3]
10:55:21.908 [debug] Evaluating bend block with value: [3]
10:55:21.909 [debug] Block returned: %{head: 3, tail: {:fork, []}, variant: :cons}
10:55:21.909 [debug] Fun returned result: %{head: 3, tail: {:fork, []}, variant: :cons}
10:55:21.909 [debug] Processing constructed value: %{head: 3, tail: {:fork, []}, variant: :cons}
10:55:21.909 [debug] Executing bend with initial: []
10:55:21.909 [debug] Executing fun with value: []
10:55:21.909 [debug] Evaluating bend block with value: []
10:55:21.909 [debug] Block returned: %{variant: :null}
10:55:21.909 [debug] Fun returned result: %{variant: :null}
10:55:21.909 [debug] Processing constructed value: %{variant: :null}
10:55:21.909 [debug] do_bend final result: %{variant: :null}
10:55:21.909 [debug] do_bend final result: %{head: 3, tail: %{variant: :null}, variant: :cons}
10:55:21.909 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] Bend initial value: [4, 5, 6]
10:55:21.909 [debug] Executing bend with initial: [4, 5, 6]
10:55:21.909 [debug] Executing fun with value: [4, 5, 6]
10:55:21.909 [debug] Evaluating bend block with value: [4, 5, 6]
10:55:21.909 [debug] Block returned: %{head: 4, tail: {:fork, [5, 6]}, variant: :cons}
10:55:21.909 [debug] Fun returned result: %{head: 4, tail: {:fork, [5, 6]}, variant: :cons}
10:55:21.909 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5, 6]}, variant: :cons}
10:55:21.909 [debug] Executing bend with initial: [5, 6]
10:55:21.909 [debug] Executing fun with value: [5, 6]
10:55:21.909 [debug] Evaluating bend block with value: [5, 6]
10:55:21.909 [debug] Block returned: %{head: 5, tail: {:fork, [6]}, variant: :cons}
10:55:21.909 [debug] Fun returned result: %{head: 5, tail: {:fork, [6]}, variant: :cons}
10:55:21.909 [debug] Processing constructed value: %{head: 5, tail: {:fork, [6]}, variant: :cons}
10:55:21.909 [debug] Executing bend with initial: [6]
10:55:21.909 [debug] Executing fun with value: [6]
10:55:21.909 [debug] Evaluating bend block with value: [6]
10:55:21.909 [debug] Block returned: %{head: 6, tail: {:fork, []}, variant: :cons}
10:55:21.909 [debug] Fun returned result: %{head: 6, tail: {:fork, []}, variant: :cons}
10:55:21.909 [debug] Processing constructed value: %{head: 6, tail: {:fork, []}, variant: :cons}
10:55:21.909 [debug] Executing bend with initial: []
10:55:21.909 [debug] Executing fun with value: []
10:55:21.909 [debug] Evaluating bend block with value: []
10:55:21.909 [debug] Block returned: %{variant: :null}
10:55:21.909 [debug] Fun returned result: %{variant: :null}
10:55:21.909 [debug] Processing constructed value: %{variant: :null}
10:55:21.909 [debug] do_bend final result: %{variant: :null}
10:55:21.909 [debug] do_bend final result: %{head: 6, tail: %{variant: :null}, variant: :cons}
10:55:21.909 [debug] do_bend final result: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] Final bend result: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.909 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.909 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] do_fold called with data: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.909 [debug] Processing recursive fields of: %{head: 3, tail: %{variant: :null}, variant: :cons}
10:55:21.909 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.909 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.909 [debug] Recursive field result for tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] do_fold called with non-function: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] Recursive field result for tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] do_fold called with non-function: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] Recursive field result for tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] do_fold called with non-function: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.909 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.909 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.909 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.909 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.909 [debug] do_fold called with data: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.910 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.910 [debug] do_fold called with data: %{head: 6, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.910 [debug] Processing recursive fields of: %{head: 6, tail: %{variant: :null}, variant: :cons}
10:55:21.910 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.910 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.910 [debug] Recursive field result for tail: []
10:55:21.910 [debug] do_fold called with non-variant data: []
10:55:21.910 [debug] Recursive field result for tail: [6]
10:55:21.910 [debug] do_fold called with non-variant data: [6]
10:55:21.910 [debug] Recursive field result for tail: [5, 6]
10:55:21.910 [debug] do_fold called with non-variant data: [5, 6]
10:55:21.910 [debug] Recursive field result for tail: [4, 5, 6]
10:55:21.910 [debug] do_fold called with non-variant data: [4, 5, 6]
10:55:21.910 [debug] Recursive field result for tail: [3, 4, 5, 6]
10:55:21.910 [debug] do_fold called with non-variant data: [3, 4, 5, 6]
10:55:21.910 [debug] Recursive field result for tail: [2, 3, 4, 5, 6]
10:55:21.910 [debug] do_fold called with non-variant data: [2, 3, 4, 5, 6]
.10:55:21.910 [debug] Bend initial value: [1, 2, 3, 4, 5]
10:55:21.910 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
10:55:21.910 [debug] Executing fun with value: [1, 2, 3, 4, 5]
10:55:21.910 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
10:55:21.910 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.910 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.910 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.910 [debug] Executing bend with initial: [2, 3, 4, 5]
10:55:21.910 [debug] Executing fun with value: [2, 3, 4, 5]
10:55:21.910 [debug] Evaluating bend block with value: [2, 3, 4, 5]
10:55:21.910 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.910 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.910 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.910 [debug] Executing bend with initial: [3, 4, 5]
10:55:21.910 [debug] Executing fun with value: [3, 4, 5]
10:55:21.910 [debug] Evaluating bend block with value: [3, 4, 5]
10:55:21.910 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.910 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.910 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.910 [debug] Executing bend with initial: [4, 5]
10:55:21.910 [debug] Executing fun with value: [4, 5]
10:55:21.910 [debug] Evaluating bend block with value: [4, 5]
10:55:21.910 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.910 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.910 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.910 [debug] Executing bend with initial: [5]
10:55:21.910 [debug] Executing fun with value: [5]
10:55:21.910 [debug] Evaluating bend block with value: [5]
10:55:21.910 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.910 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.910 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.910 [debug] Executing bend with initial: []
10:55:21.910 [debug] Executing fun with value: []
10:55:21.910 [debug] Evaluating bend block with value: []
10:55:21.910 [debug] Block returned: %{variant: :null}
10:55:21.910 [debug] Fun returned result: %{variant: :null}
10:55:21.910 [debug] Processing constructed value: %{variant: :null}
10:55:21.910 [debug] do_bend final result: %{variant: :null}
10:55:21.910 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.910 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.910 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.910 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.910 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.910 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.910 [debug] Bend initial value: []
10:55:21.910 [debug] Executing bend with initial: []
10:55:21.910 [debug] Executing fun with value: []
10:55:21.910 [debug] Evaluating bend block with value: []
10:55:21.910 [debug] Block returned: %{variant: :null}
10:55:21.910 [debug] Fun returned result: %{variant: :null}
10:55:21.911 [debug] Processing constructed value: %{variant: :null}
10:55:21.911 [debug] do_bend final result: %{variant: :null}
10:55:21.911 [debug] Final bend result: %{variant: :null}
10:55:21.911 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.911 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.911 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.911 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.911 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.911 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.911 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.911 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.911 [debug] Recursive field result for tail: %{variant: :null}
10:55:21.911 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.911 [debug] Recursive field result for tail: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.911 [debug] do_fold called with non-function: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] Recursive field result for tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] do_fold called with non-function: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] Recursive field result for tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] do_fold called with non-function: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] Recursive field result for tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] do_fold called with non-function: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.911 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.911 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.911 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.911 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.911 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.911 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.911 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.912 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.912 [debug] Recursive field result for tail: []
10:55:21.912 [debug] do_fold called with non-variant data: []
10:55:21.912 [debug] Recursive field result for tail: [5]
10:55:21.912 [debug] do_fold called with non-variant data: [5]
10:55:21.912 [debug] Recursive field result for tail: [4, 5]
10:55:21.912 [debug] do_fold called with non-variant data: [4, 5]
10:55:21.912 [debug] Recursive field result for tail: [3, 4, 5]
10:55:21.912 [debug] do_fold called with non-variant data: [3, 4, 5]
10:55:21.912 [debug] Recursive field result for tail: [2, 3, 4, 5]
10:55:21.912 [debug] do_fold called with non-variant data: [2, 3, 4, 5]
10:55:21.912 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.912 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.912 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.912 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.912 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.912 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.912 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.912 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.912 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.912 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.912 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.912 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.912 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.912 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.912 [debug] Recursive field result for tail: []
10:55:21.912 [debug] do_fold called with non-variant data: []
10:55:21.912 [debug] Recursive field result for tail: [5]
10:55:21.912 [debug] do_fold called with non-variant data: [5]
10:55:21.912 [debug] Recursive field result for tail: [4, 5]
10:55:21.912 [debug] do_fold called with non-variant data: [4, 5]
10:55:21.912 [debug] Recursive field result for tail: [3, 4, 5]
10:55:21.912 [debug] do_fold called with non-variant data: [3, 4, 5]
10:55:21.912 [debug] Recursive field result for tail: [2, 3, 4, 5]
10:55:21.912 [debug] do_fold called with non-variant data: [2, 3, 4, 5]
.10:55:21.912 [debug] Bend initial value: [1, 2, 3, 4, 5]
10:55:21.912 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
10:55:21.912 [debug] Executing fun with value: [1, 2, 3, 4, 5]
10:55:21.912 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
10:55:21.912 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.912 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.912 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.912 [debug] Executing bend with initial: [2, 3, 4, 5]
10:55:21.912 [debug] Executing fun with value: [2, 3, 4, 5]
10:55:21.912 [debug] Evaluating bend block with value: [2, 3, 4, 5]
10:55:21.912 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.912 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.912 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.912 [debug] Executing bend with initial: [3, 4, 5]
10:55:21.912 [debug] Executing fun with value: [3, 4, 5]
10:55:21.912 [debug] Evaluating bend block with value: [3, 4, 5]
10:55:21.912 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.912 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.912 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.912 [debug] Executing bend with initial: [4, 5]
10:55:21.912 [debug] Executing fun with value: [4, 5]
10:55:21.912 [debug] Evaluating bend block with value: [4, 5]
10:55:21.912 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.912 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.912 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.912 [debug] Executing bend with initial: [5]
10:55:21.912 [debug] Executing fun with value: [5]
10:55:21.912 [debug] Evaluating bend block with value: [5]
10:55:21.912 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.912 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.912 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.912 [debug] Executing bend with initial: []
10:55:21.912 [debug] Executing fun with value: []
10:55:21.912 [debug] Evaluating bend block with value: []
10:55:21.912 [debug] Block returned: %{variant: :null}
10:55:21.913 [debug] Fun returned result: %{variant: :null}
10:55:21.913 [debug] Processing constructed value: %{variant: :null}
10:55:21.913 [debug] do_bend final result: %{variant: :null}
10:55:21.913 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.913 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.913 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.913 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.913 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.913 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.913 [debug] do_fold called with data: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.913 [debug] Processing recursive fields of: %{head: 5, tail: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.913 [debug] do_fold called with data: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.913 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.913 [debug] do_fold called with data: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.913 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.913 [debug] do_fold called with data: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.913 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.913 [debug] do_fold called with data: %{head: 1, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.913 [debug] Processing recursive fields of: %{head: 1, tail: %{variant: :null}, variant: :cons}
10:55:21.913 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.913 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.913 [debug] Recursive field result for tail: []
10:55:21.913 [debug] do_fold called with non-variant data: []
.10:55:21.913 [debug] Recursive field result for tail: [1]
10:55:21.913 [debug] do_fold called with non-variant data: [1]
10:55:21.913 [debug] Recursive field result for tail: [2, 1]
10:55:21.913 [debug] do_fold called with non-variant data: [2, 1]
10:55:21.913 [debug] Recursive field result for tail: [3, 2, 1]
10:55:21.913 [debug] do_fold called with non-variant data: [3, 2, 1]
10:55:21.913 [debug] Recursive field result for tail: [4, 3, 2, 1]
10:55:21.913 [debug] do_fold called with non-variant data: [4, 3, 2, 1]
10:55:21.913 [debug] Bend initial value: ["a", "b", "aa", "bb", "aaa"]
10:55:21.913 [debug] Executing bend with initial: ["a", "b", "aa", "bb", "aaa"]
10:55:21.913 [debug] Executing fun with value: ["a", "b", "aa", "bb", "aaa"]
10:55:21.913 [debug] Evaluating bend block with value: ["a", "b", "aa", "bb", "aaa"]
10:55:21.913 [debug] Block returned: %{head: "a", tail: {:fork, ["b", "aa", "bb", "aaa"]}, variant: :cons}
10:55:21.913 [debug] Fun returned result: %{head: "a", tail: {:fork, ["b", "aa", "bb", "aaa"]}, variant: :cons}
10:55:21.913 [debug] Processing constructed value: %{head: "a", tail: {:fork, ["b", "aa", "bb", "aaa"]}, variant: :cons}
10:55:21.913 [debug] Executing bend with initial: ["b", "aa", "bb", "aaa"]
10:55:21.913 [debug] Executing fun with value: ["b", "aa", "bb", "aaa"]
10:55:21.913 [debug] Evaluating bend block with value: ["b", "aa", "bb", "aaa"]
10:55:21.913 [debug] Block returned: %{head: "b", tail: {:fork, ["aa", "bb", "aaa"]}, variant: :cons}
10:55:21.913 [debug] Fun returned result: %{head: "b", tail: {:fork, ["aa", "bb", "aaa"]}, variant: :cons}
10:55:21.913 [debug] Processing constructed value: %{head: "b", tail: {:fork, ["aa", "bb", "aaa"]}, variant: :cons}
10:55:21.913 [debug] Executing bend with initial: ["aa", "bb", "aaa"]
10:55:21.913 [debug] Executing fun with value: ["aa", "bb", "aaa"]
10:55:21.913 [debug] Evaluating bend block with value: ["aa", "bb", "aaa"]
10:55:21.913 [debug] Block returned: %{head: "aa", tail: {:fork, ["bb", "aaa"]}, variant: :cons}
10:55:21.913 [debug] Fun returned result: %{head: "aa", tail: {:fork, ["bb", "aaa"]}, variant: :cons}
10:55:21.913 [debug] Processing constructed value: %{head: "aa", tail: {:fork, ["bb", "aaa"]}, variant: :cons}
10:55:21.913 [debug] Executing bend with initial: ["bb", "aaa"]
10:55:21.913 [debug] Executing fun with value: ["bb", "aaa"]
10:55:21.913 [debug] Evaluating bend block with value: ["bb", "aaa"]
10:55:21.913 [debug] Block returned: %{head: "bb", tail: {:fork, ["aaa"]}, variant: :cons}
10:55:21.913 [debug] Fun returned result: %{head: "bb", tail: {:fork, ["aaa"]}, variant: :cons}
10:55:21.913 [debug] Processing constructed value: %{head: "bb", tail: {:fork, ["aaa"]}, variant: :cons}
10:55:21.914 [debug] Executing bend with initial: ["aaa"]
10:55:21.914 [debug] Executing fun with value: ["aaa"]
10:55:21.914 [debug] Evaluating bend block with value: ["aaa"]
10:55:21.914 [debug] Block returned: %{head: "aaa", tail: {:fork, []}, variant: :cons}
10:55:21.914 [debug] Fun returned result: %{head: "aaa", tail: {:fork, []}, variant: :cons}
10:55:21.914 [debug] Processing constructed value: %{head: "aaa", tail: {:fork, []}, variant: :cons}
10:55:21.914 [debug] Executing bend with initial: []
10:55:21.914 [debug] Executing fun with value: []
10:55:21.914 [debug] Evaluating bend block with value: []
10:55:21.914 [debug] Block returned: %{variant: :null}
10:55:21.914 [debug] Fun returned result: %{variant: :null}
10:55:21.914 [debug] Processing constructed value: %{variant: :null}
10:55:21.914 [debug] do_bend final result: %{variant: :null}
10:55:21.914 [debug] do_bend final result: %{head: "aaa", tail: %{variant: :null}, variant: :cons}
10:55:21.914 [debug] do_bend final result: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_bend final result: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_bend final result: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_bend final result: %{head: "a", tail: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] Final bend result: %{head: "a", tail: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_fold called with data: %{head: "a", tail: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.914 [debug] Processing recursive fields of: %{head: "a", tail: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_fold called with data: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.914 [debug] Processing recursive fields of: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_fold called with data: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.914 [debug] Processing recursive fields of: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_fold called with data: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.914 [debug] Processing recursive fields of: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_fold called with data: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.914 [debug] Processing recursive fields of: %{head: "aaa", tail: %{variant: :null}, variant: :cons}
10:55:21.914 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.914 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.914 [debug] Recursive field result for tail: %{variant: :null}
10:55:21.914 [debug] do_fold called with non-function: %{variant: :null}, variant_type: :null, state: nil, non_fun: %{head: "aaa", tail: %{variant: :null}, variant: :cons}
10:55:21.914 [debug] Recursive field result for tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}
10:55:21.914 [debug] do_fold called with non-function: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] Recursive field result for tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_fold called with non-function: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] Recursive field result for tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_fold called with non-function: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: "b", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] Recursive field result for tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_fold called with non-function: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil, non_fun: %{head: "a", tail: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_fold called with data: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.914 [debug] Processing recursive fields of: %{head: "aa", tail: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_fold called with data: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.914 [debug] Processing recursive fields of: %{head: "bb", tail: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.914 [debug] do_fold called with data: %{head: "aaa", tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.914 [debug] Processing recursive fields of: %{head: "aaa", tail: %{variant: :null}, variant: :cons}
10:55:21.915 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.915 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.915 [debug] Recursive field result for tail: []
10:55:21.915 [debug] do_fold called with non-variant data: []
10:55:21.915 [debug] Recursive field result for tail: ["aaa"]
10:55:21.915 [debug] do_fold called with non-variant data: ["aaa"]
10:55:21.915 [debug] Recursive field result for tail: ["bb", "aaa"]
10:55:21.915 [debug] do_fold called with non-variant data: ["bb", "aaa"]
.10:55:21.915 [debug] Bend initial value: []
10:55:21.915 [debug] Executing bend with initial: []
10:55:21.915 [debug] Executing fun with value: []
10:55:21.915 [debug] Evaluating bend block with value: []
10:55:21.915 [debug] Block returned: %{variant: :null}
10:55:21.915 [debug] Fun returned result: %{variant: :null}
10:55:21.915 [debug] Processing constructed value: %{variant: :null}
10:55:21.915 [debug] do_bend final result: %{variant: :null}
10:55:21.915 [debug] Final bend result: %{variant: :null}
10:55:21.915 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.915 [debug] Processing recursive fields of: %{variant: :null}
.10:55:21.915 [debug] Bend initial value: []
10:55:21.915 [debug] Executing bend with initial: []
10:55:21.915 [debug] Executing fun with value: []
10:55:21.915 [debug] Evaluating bend block with value: []
10:55:21.915 [debug] Block returned: %{variant: :null}
10:55:21.915 [debug] Fun returned result: %{variant: :null}
10:55:21.915 [debug] Processing constructed value: %{variant: :null}
10:55:21.915 [debug] do_bend final result: %{variant: :null}
10:55:21.915 [debug] Final bend result: %{variant: :null}
10:55:21.915 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.915 [debug] Processing recursive fields of: %{variant: :null}
.10:55:21.915 [debug] Bend initial value: [1, 2, 3, 4, 5]
10:55:21.915 [debug] Executing bend with initial: [1, 2, 3, 4, 5]
10:55:21.915 [debug] Executing fun with value: [1, 2, 3, 4, 5]
10:55:21.915 [debug] Evaluating bend block with value: [1, 2, 3, 4, 5]
10:55:21.915 [debug] Block returned: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.915 [debug] Fun returned result: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.915 [debug] Processing constructed value: %{head: 1, tail: {:fork, [2, 3, 4, 5]}, variant: :cons}
10:55:21.915 [debug] Executing bend with initial: [2, 3, 4, 5]
10:55:21.915 [debug] Executing fun with value: [2, 3, 4, 5]
10:55:21.915 [debug] Evaluating bend block with value: [2, 3, 4, 5]
10:55:21.915 [debug] Block returned: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.915 [debug] Fun returned result: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.915 [debug] Processing constructed value: %{head: 2, tail: {:fork, [3, 4, 5]}, variant: :cons}
10:55:21.915 [debug] Executing bend with initial: [3, 4, 5]
10:55:21.915 [debug] Executing fun with value: [3, 4, 5]
10:55:21.915 [debug] Evaluating bend block with value: [3, 4, 5]
10:55:21.915 [debug] Block returned: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.915 [debug] Fun returned result: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.915 [debug] Processing constructed value: %{head: 3, tail: {:fork, [4, 5]}, variant: :cons}
10:55:21.915 [debug] Executing bend with initial: [4, 5]
10:55:21.915 [debug] Executing fun with value: [4, 5]
10:55:21.915 [debug] Evaluating bend block with value: [4, 5]
10:55:21.915 [debug] Block returned: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.915 [debug] Fun returned result: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.915 [debug] Processing constructed value: %{head: 4, tail: {:fork, [5]}, variant: :cons}
10:55:21.915 [debug] Executing bend with initial: [5]
10:55:21.915 [debug] Executing fun with value: [5]
10:55:21.915 [debug] Evaluating bend block with value: [5]
10:55:21.915 [debug] Block returned: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.915 [debug] Fun returned result: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.915 [debug] Processing constructed value: %{head: 5, tail: {:fork, []}, variant: :cons}
10:55:21.915 [debug] Executing bend with initial: []
10:55:21.915 [debug] Executing fun with value: []
10:55:21.915 [debug] Evaluating bend block with value: []
10:55:21.915 [debug] Block returned: %{variant: :null}
10:55:21.916 [debug] Fun returned result: %{variant: :null}
10:55:21.916 [debug] Processing constructed value: %{variant: :null}
10:55:21.916 [debug] do_bend final result: %{variant: :null}
10:55:21.916 [debug] do_bend final result: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.916 [debug] do_bend final result: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.916 [debug] do_bend final result: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.916 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.916 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.916 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.916 [debug] do_fold called with data: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.916 [debug] Processing recursive fields of: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.916 [debug] do_fold called with data: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.916 [debug] Processing recursive fields of: %{head: 2, tail: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.916 [debug] do_fold called with data: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.916 [debug] Processing recursive fields of: %{head: 3, tail: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
10:55:21.916 [debug] do_fold called with data: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.916 [debug] Processing recursive fields of: %{head: 4, tail: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant: :cons}
10:55:21.916 [debug] do_fold called with data: %{head: 5, tail: %{variant: :null}, variant: :cons}, variant_type: :cons, state: nil
10:55:21.916 [debug] Processing recursive fields of: %{head: 5, tail: %{variant: :null}, variant: :cons}
10:55:21.916 [debug] do_fold called with data: %{variant: :null}, variant_type: :null, state: nil
10:55:21.916 [debug] Processing recursive fields of: %{variant: :null}
10:55:21.916 [debug] Recursive field result for tail: []
10:55:21.916 [debug] do_fold called with non-variant data: []
10:55:21.916 [debug] Recursive field result for tail: [5]
10:55:21.916 [debug] do_fold called with non-variant data: [5]
10:55:21.916 [debug] Recursive field result for tail: [4, 5]
10:55:21.916 [debug] do_fold called with non-variant data: [4, 5]
10:55:21.916 [debug] Recursive field result for tail: [3, 4, 5]
10:55:21.916 [debug] do_fold called with non-variant data: [3, 4, 5]
10:55:21.916 [debug] Recursive field result for tail: [2, 3, 4, 5]
10:55:21.916 [debug] do_fold called with non-variant data: [2, 3, 4, 5]
.
Finished in 0.09 seconds (0.00s async, 0.09s sync)
29 tests, 5 failures

Randomized with seed 797271
