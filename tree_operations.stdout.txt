     warning: clauses with the same name and arity (number of arguments) should be grouped together, "defp generate_fold_cases/2" was previously defined (lib/ben_ben.ex:127)
     │
 164 │   defp generate_fold_cases({:__block__, _meta, cases}, state) do
     │        ~
     │
     └─ lib/ben_ben.ex:164:8

     warning: variable "other" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 364 │           other ->
     │           ~
     │
     └─ lib/ben_ben.ex:364:11: BenBen.process_constructed/2

     warning: function generate_pattern_match/1 is unused
     │
 215 │   defp generate_pattern_match({name, _, args}) when is_list(args) do
     │        ~
     │
     └─ lib/ben_ben.ex:215:8: BenBen (module)

     warning: function extract_bindings/1 is unused
     │
 240 │   defp extract_bindings(args) do
     │        ~
     │
     └─ lib/ben_ben.ex:240:8: BenBen (module)

    warning: variable "id" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 13 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/my_graph.ex:13: MyGraph.sum/1

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 13 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/my_graph.ex:13: MyGraph.sum/1

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 10 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/my_tree.ex:10: MyTree.sum/1

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 26 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/tree_operations.ex:26: TreeOperations.map_tree/2

    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 38 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/tree_operations.ex:38: TreeOperations.filter_tree/2

     warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 128 │     fold tree do
     │     ~~~~~~~~~~~~
     │
     └─ lib/examples/tree_operations.ex:128: TreeOperations.collect_values/1

    warning: function merge_with_level_increment/2 is unused
    │
 80 │   defp merge_with_level_increment(left_counts, right_counts) do
    │        ~
    │
    └─ lib/examples/tree_operations.ex:80:8: TreeOperations (module)

    warning: function merge_counts/2 is unused
    │
 75 │   defp merge_counts(left_counts, right_counts) do
    │        ~
    │
    └─ lib/examples/tree_operations.ex:75:8: TreeOperations (module)

Running ExUnit with seed: 292628, max_cases: 48


12:33:23.369 [debug] Bend initial value: 0

12:33:23.397 [debug] Executing bend with initial: 0

12:33:23.397 [debug] Executing fun with value: 0

12:33:23.397 [debug] Evaluating bend block with value: 0

12:33:23.399 [debug] Block returned: %{value: 0, left: {:fork, 1}, right: {:fork, 1}, variant: :node}

12:33:23.399 [debug] Fun returned result: %{value: 0, left: {:fork, 1}, right: {:fork, 1}, variant: :node}

12:33:23.399 [debug] Processing constructed value: %{value: 0, left: {:fork, 1}, right: {:fork, 1}, variant: :node}

12:33:23.399 [debug] Executing bend with initial: 1

12:33:23.400 [debug] Executing fun with value: 1

12:33:23.400 [debug] Evaluating bend block with value: 1

12:33:23.400 [debug] Block returned: %{value: 2, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.400 [debug] Fun returned result: %{value: 2, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.400 [debug] Processing constructed value: %{value: 2, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.400 [debug] Executing bend with initial: 2

12:33:23.400 [debug] Executing fun with value: 2

12:33:23.400 [debug] Evaluating bend block with value: 2

12:33:23.400 [debug] Block returned: %{value: 4, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.400 [debug] Fun returned result: %{value: 4, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.400 [debug] Processing constructed value: %{value: 4, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.400 [debug] Executing bend with initial: 3

12:33:23.400 [debug] Executing fun with value: 3

12:33:23.400 [debug] Evaluating bend block with value: 3

12:33:23.400 [debug] Block returned: %{variant: :leaf}

12:33:23.400 [debug] Fun returned result: %{variant: :leaf}

12:33:23.400 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.400 [debug] do_bend final result: %{variant: :leaf}

12:33:23.400 [debug] Executing bend with initial: 3

12:33:23.400 [debug] Executing fun with value: 3

12:33:23.400 [debug] Evaluating bend block with value: 3

12:33:23.400 [debug] Block returned: %{variant: :leaf}

12:33:23.400 [debug] Fun returned result: %{variant: :leaf}

12:33:23.400 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.400 [debug] do_bend final result: %{variant: :leaf}

12:33:23.400 [debug] do_bend final result: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.400 [debug] Executing bend with initial: 2

12:33:23.400 [debug] Executing fun with value: 2

12:33:23.400 [debug] Evaluating bend block with value: 2

12:33:23.400 [debug] Block returned: %{value: 4, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.400 [debug] Fun returned result: %{value: 4, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.400 [debug] Processing constructed value: %{value: 4, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.400 [debug] Executing bend with initial: 3

12:33:23.400 [debug] Executing fun with value: 3

12:33:23.400 [debug] Evaluating bend block with value: 3

12:33:23.400 [debug] Block returned: %{variant: :leaf}

12:33:23.400 [debug] Fun returned result: %{variant: :leaf}

12:33:23.400 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.400 [debug] do_bend final result: %{variant: :leaf}

12:33:23.400 [debug] Executing bend with initial: 3

12:33:23.400 [debug] Executing fun with value: 3

12:33:23.400 [debug] Evaluating bend block with value: 3

12:33:23.400 [debug] Block returned: %{variant: :leaf}

12:33:23.400 [debug] Fun returned result: %{variant: :leaf}

12:33:23.400 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.400 [debug] do_bend final result: %{variant: :leaf}

12:33:23.400 [debug] do_bend final result: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.400 [debug] do_bend final result: %{value: 2, left: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.400 [debug] Executing bend with initial: 1

12:33:23.400 [debug] Executing fun with value: 1

12:33:23.400 [debug] Evaluating bend block with value: 1

12:33:23.400 [debug] Block returned: %{value: 2, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.400 [debug] Fun returned result: %{value: 2, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.400 [debug] Processing constructed value: %{value: 2, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.400 [debug] Executing bend with initial: 2

12:33:23.400 [debug] Executing fun with value: 2

12:33:23.400 [debug] Evaluating bend block with value: 2

12:33:23.400 [debug] Block returned: %{value: 4, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.400 [debug] Fun returned result: %{value: 4, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.400 [debug] Processing constructed value: %{value: 4, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.400 [debug] Executing bend with initial: 3

12:33:23.400 [debug] Executing fun with value: 3

12:33:23.400 [debug] Evaluating bend block with value: 3

12:33:23.400 [debug] Block returned: %{variant: :leaf}

12:33:23.400 [debug] Fun returned result: %{variant: :leaf}

12:33:23.400 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.400 [debug] do_bend final result: %{variant: :leaf}

12:33:23.400 [debug] Executing bend with initial: 3

12:33:23.400 [debug] Executing fun with value: 3

12:33:23.400 [debug] Evaluating bend block with value: 3

12:33:23.400 [debug] Block returned: %{variant: :leaf}

12:33:23.400 [debug] Fun returned result: %{variant: :leaf}

12:33:23.400 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.400 [debug] do_bend final result: %{variant: :leaf}

12:33:23.400 [debug] do_bend final result: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.400 [debug] Executing bend with initial: 2

12:33:23.400 [debug] Executing fun with value: 2

12:33:23.400 [debug] Evaluating bend block with value: 2

12:33:23.400 [debug] Block returned: %{value: 4, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.400 [debug] Fun returned result: %{value: 4, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.400 [debug] Processing constructed value: %{value: 4, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.400 [debug] Executing bend with initial: 3

12:33:23.400 [debug] Executing fun with value: 3

12:33:23.400 [debug] Evaluating bend block with value: 3

12:33:23.400 [debug] Block returned: %{variant: :leaf}

12:33:23.400 [debug] Fun returned result: %{variant: :leaf}

12:33:23.400 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.400 [debug] do_bend final result: %{variant: :leaf}

12:33:23.400 [debug] Executing bend with initial: 3

12:33:23.400 [debug] Executing fun with value: 3

12:33:23.400 [debug] Evaluating bend block with value: 3

12:33:23.400 [debug] Block returned: %{variant: :leaf}

12:33:23.400 [debug] Fun returned result: %{variant: :leaf}

12:33:23.400 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.400 [debug] do_bend final result: %{variant: :leaf}

12:33:23.400 [debug] do_bend final result: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.400 [debug] do_bend final result: %{value: 2, left: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.401 [debug] do_bend final result: %{value: 0, left: %{value: 2, left: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, right: %{value: 2, left: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant: :node}

12:33:23.401 [debug] Final bend result: %{value: 0, left: %{value: 2, left: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, right: %{value: 2, left: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 4, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant: :node}
.
12:33:23.401 [debug] Bend initial value: 0

12:33:23.401 [debug] Executing bend with initial: 0

12:33:23.401 [debug] Executing fun with value: 0

12:33:23.401 [debug] Evaluating bend block with value: 0

12:33:23.401 [debug] Block returned: %{value: 0, left: {:fork, 1}, right: {:fork, 1}, variant: :node}

12:33:23.401 [debug] Fun returned result: %{value: 0, left: {:fork, 1}, right: {:fork, 1}, variant: :node}

12:33:23.401 [debug] Processing constructed value: %{value: 0, left: {:fork, 1}, right: {:fork, 1}, variant: :node}

12:33:23.401 [debug] Executing bend with initial: 1

12:33:23.401 [debug] Executing fun with value: 1

12:33:23.401 [debug] Evaluating bend block with value: 1

12:33:23.401 [debug] Block returned: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.401 [debug] Fun returned result: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.401 [debug] Processing constructed value: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.401 [debug] Executing bend with initial: 2

12:33:23.401 [debug] Executing fun with value: 2

12:33:23.401 [debug] Evaluating bend block with value: 2

12:33:23.401 [debug] Block returned: %{variant: :leaf}

12:33:23.401 [debug] Fun returned result: %{variant: :leaf}

12:33:23.401 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.401 [debug] do_bend final result: %{variant: :leaf}

12:33:23.401 [debug] Executing bend with initial: 2

12:33:23.401 [debug] Executing fun with value: 2

12:33:23.401 [debug] Evaluating bend block with value: 2

12:33:23.401 [debug] Block returned: %{variant: :leaf}

12:33:23.401 [debug] Fun returned result: %{variant: :leaf}

12:33:23.401 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.401 [debug] do_bend final result: %{variant: :leaf}

12:33:23.401 [debug] do_bend final result: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.401 [debug] Executing bend with initial: 1

12:33:23.401 [debug] Executing fun with value: 1

12:33:23.401 [debug] Evaluating bend block with value: 1

12:33:23.401 [debug] Block returned: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.401 [debug] Fun returned result: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.402 [debug] Processing constructed value: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.402 [debug] Executing bend with initial: 2

12:33:23.402 [debug] Executing fun with value: 2

12:33:23.402 [debug] Evaluating bend block with value: 2

12:33:23.402 [debug] Block returned: %{variant: :leaf}

12:33:23.402 [debug] Fun returned result: %{variant: :leaf}

12:33:23.402 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.402 [debug] do_bend final result: %{variant: :leaf}

12:33:23.402 [debug] Executing bend with initial: 2

12:33:23.402 [debug] Executing fun with value: 2

12:33:23.402 [debug] Evaluating bend block with value: 2

12:33:23.402 [debug] Block returned: %{variant: :leaf}

12:33:23.402 [debug] Fun returned result: %{variant: :leaf}

12:33:23.402 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.402 [debug] do_bend final result: %{variant: :leaf}

12:33:23.402 [debug] do_bend final result: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.402 [debug] do_bend final result: %{value: 0, left: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.402 [debug] Final bend result: %{value: 0, left: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.402 [debug] do_fold called with data: %{value: 0, left: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant_type: :node, state: nil

12:33:23.402 [debug] Processing recursive fields of: %{value: 0, left: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.402 [debug] do_fold called with data: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant_type: :node, state: nil

12:33:23.402 [debug] Processing recursive fields of: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.402 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.402 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.402 [debug] Recursive field result for left: %{variant: :leaf}

12:33:23.402 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.402 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.402 [debug] Recursive field result for right: %{variant: :leaf}

12:33:23.402 [debug] Recursive field result for left: %{value: 3, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.402 [debug] do_fold called with data: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant_type: :node, state: nil

12:33:23.402 [debug] Processing recursive fields of: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.402 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.402 [debug] Processing recursive fields of: %{variant: :leaf}
.
12:33:23.402 [debug] Recursive field result for left: %{variant: :leaf}

12:33:23.402 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.402 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.402 [debug] Recursive field result for right: %{variant: :leaf}

12:33:23.402 [debug] Recursive field result for right: %{value: 3, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.402 [debug] do_fold called with data: %{value: 2, left: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 3, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant_type: :node, state: nil

12:33:23.402 [debug] Processing recursive fields of: %{value: 2, left: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 3, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.402 [debug] do_fold called with data: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant_type: :node, state: nil

12:33:23.402 [debug] Processing recursive fields of: %{value: 1, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.402 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.402 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.402 [debug] Recursive field result for left: []

12:33:23.402 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.402 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.402 [debug] Recursive field result for right: []

12:33:23.402 [debug] do_fold called with non-variant data: []

12:33:23.402 [debug] do_fold called with non-variant data: []

12:33:23.402 [debug] Recursive field result for left: [1]

12:33:23.402 [debug] do_fold called with data: %{value: 3, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant_type: :node, state: nil

12:33:23.403 [debug] Processing recursive fields of: %{value: 3, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.403 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.403 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.403 [debug] Recursive field result for left: []

12:33:23.403 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.403 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.403 [debug] Recursive field result for right: []

12:33:23.403 [debug] do_fold called with non-variant data: []
.
12:33:23.403 [debug] do_fold called with non-variant data: []

12:33:23.403 [debug] Recursive field result for right: [3]

12:33:23.403 [debug] do_fold called with non-variant data: [1]

12:33:23.403 [debug] do_fold called with non-variant data: [3]

12:33:23.403 [debug] Bend initial value: 0

12:33:23.403 [debug] Executing bend with initial: 0

12:33:23.403 [debug] Executing fun with value: 0

12:33:23.403 [debug] Evaluating bend block with value: 0

12:33:23.403 [debug] Block returned: %{value: 0, left: {:fork, 1}, right: {:fork, 1}, variant: :node}

12:33:23.403 [debug] Fun returned result: %{value: 0, left: {:fork, 1}, right: {:fork, 1}, variant: :node}

12:33:23.403 [debug] Processing constructed value: %{value: 0, left: {:fork, 1}, right: {:fork, 1}, variant: :node}

12:33:23.403 [debug] Executing bend with initial: 1

12:33:23.403 [debug] Executing fun with value: 1

12:33:23.403 [debug] Evaluating bend block with value: 1

12:33:23.403 [debug] Block returned: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.403 [debug] Fun returned result: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.403 [debug] Processing constructed value: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.403 [debug] Executing bend with initial: 2

12:33:23.403 [debug] Executing fun with value: 2

12:33:23.403 [debug] Evaluating bend block with value: 2

12:33:23.403 [debug] Block returned: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.403 [debug] Fun returned result: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.403 [debug] Processing constructed value: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.403 [debug] Executing bend with initial: 3

12:33:23.403 [debug] Executing fun with value: 3

12:33:23.403 [debug] Evaluating bend block with value: 3

12:33:23.403 [debug] Block returned: %{variant: :leaf}

12:33:23.403 [debug] Fun returned result: %{variant: :leaf}

12:33:23.403 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.403 [debug] do_bend final result: %{variant: :leaf}

12:33:23.403 [debug] Executing bend with initial: 3

12:33:23.403 [debug] Executing fun with value: 3

12:33:23.403 [debug] Evaluating bend block with value: 3

12:33:23.403 [debug] Block returned: %{variant: :leaf}

12:33:23.403 [debug] Fun returned result: %{variant: :leaf}

12:33:23.403 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.403 [debug] do_bend final result: %{variant: :leaf}

12:33:23.403 [debug] do_bend final result: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.403 [debug] Executing bend with initial: 2

12:33:23.403 [debug] Executing fun with value: 2

12:33:23.403 [debug] Evaluating bend block with value: 2

12:33:23.403 [debug] Block returned: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.403 [debug] Fun returned result: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.403 [debug] Processing constructed value: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.403 [debug] Executing bend with initial: 3

12:33:23.403 [debug] Executing fun with value: 3

12:33:23.403 [debug] Evaluating bend block with value: 3

12:33:23.403 [debug] Block returned: %{variant: :leaf}

12:33:23.403 [debug] Fun returned result: %{variant: :leaf}

12:33:23.403 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.403 [debug] do_bend final result: %{variant: :leaf}

12:33:23.403 [debug] Executing bend with initial: 3

12:33:23.403 [debug] Executing fun with value: 3

12:33:23.403 [debug] Evaluating bend block with value: 3

12:33:23.403 [debug] Block returned: %{variant: :leaf}

12:33:23.403 [debug] Fun returned result: %{variant: :leaf}

12:33:23.403 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.403 [debug] do_bend final result: %{variant: :leaf}

12:33:23.403 [debug] do_bend final result: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.403 [debug] do_bend final result: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.403 [debug] Executing bend with initial: 1

12:33:23.403 [debug] Executing fun with value: 1

12:33:23.403 [debug] Evaluating bend block with value: 1

12:33:23.403 [debug] Block returned: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.403 [debug] Fun returned result: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.403 [debug] Processing constructed value: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.403 [debug] Executing bend with initial: 2

12:33:23.403 [debug] Executing fun with value: 2

12:33:23.403 [debug] Evaluating bend block with value: 2

12:33:23.403 [debug] Block returned: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.403 [debug] Fun returned result: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.403 [debug] Processing constructed value: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.403 [debug] Executing bend with initial: 3

12:33:23.403 [debug] Executing fun with value: 3

12:33:23.403 [debug] Evaluating bend block with value: 3

12:33:23.403 [debug] Block returned: %{variant: :leaf}

12:33:23.403 [debug] Fun returned result: %{variant: :leaf}

12:33:23.403 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.403 [debug] do_bend final result: %{variant: :leaf}

12:33:23.403 [debug] Executing bend with initial: 3

12:33:23.403 [debug] Executing fun with value: 3

12:33:23.403 [debug] Evaluating bend block with value: 3

12:33:23.403 [debug] Block returned: %{variant: :leaf}

12:33:23.403 [debug] Fun returned result: %{variant: :leaf}

12:33:23.403 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.403 [debug] do_bend final result: %{variant: :leaf}

12:33:23.403 [debug] do_bend final result: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.403 [debug] Executing bend with initial: 2

12:33:23.403 [debug] Executing fun with value: 2

12:33:23.403 [debug] Evaluating bend block with value: 2

12:33:23.404 [debug] Block returned: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.404 [debug] Fun returned result: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.404 [debug] Processing constructed value: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.404 [debug] Executing bend with initial: 3

12:33:23.404 [debug] Executing fun with value: 3

12:33:23.404 [debug] Evaluating bend block with value: 3

12:33:23.404 [debug] Block returned: %{variant: :leaf}

12:33:23.404 [debug] Fun returned result: %{variant: :leaf}

12:33:23.404 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.404 [debug] do_bend final result: %{variant: :leaf}

12:33:23.404 [debug] Executing bend with initial: 3

12:33:23.404 [debug] Executing fun with value: 3

12:33:23.404 [debug] Evaluating bend block with value: 3

12:33:23.404 [debug] Block returned: %{variant: :leaf}

12:33:23.404 [debug] Fun returned result: %{variant: :leaf}

12:33:23.404 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.404 [debug] do_bend final result: %{variant: :leaf}

12:33:23.404 [debug] do_bend final result: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.404 [debug] do_bend final result: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.404 [debug] do_bend final result: %{value: 0, left: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, right: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant: :node}

12:33:23.404 [debug] Final bend result: %{value: 0, left: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, right: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant: :node}

12:33:23.404 [debug] do_fold called with data: %{value: 0, left: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, right: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant: :node}, variant_type: :node, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{value: 0, left: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, right: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant: :node}

12:33:23.404 [debug] do_fold called with data: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant_type: :node, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.404 [debug] do_fold called with data: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant_type: :node, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.404 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.404 [debug] Recursive field result for left: %{variant: :leaf}

12:33:23.404 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.404 [debug] Recursive field result for right: %{variant: :leaf}

12:33:23.404 [debug] Recursive field result for left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.404 [debug] do_fold called with data: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant_type: :node, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.404 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.404 [debug] Recursive field result for left: %{variant: :leaf}

12:33:23.404 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.404 [debug] Recursive field result for right: %{variant: :leaf}

12:33:23.404 [debug] Recursive field result for right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.404 [debug] Recursive field result for left: %{value: 0, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.404 [debug] do_fold called with data: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant_type: :node, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.404 [debug] do_fold called with data: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant_type: :node, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.404 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.404 [debug] Recursive field result for left: %{variant: :leaf}

12:33:23.404 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.404 [debug] Recursive field result for right: %{variant: :leaf}

12:33:23.404 [debug] Recursive field result for left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.404 [debug] do_fold called with data: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant_type: :node, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.404 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil

12:33:23.404 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.404 [debug] Recursive field result for left: %{variant: :leaf}

12:33:23.404 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: nil
.
12:33:23.404 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.404 [debug] Recursive field result for right: %{variant: :leaf}

12:33:23.404 [debug] Recursive field result for right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.404 [debug] Recursive field result for right: %{value: 0, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.404 [debug] Bend initial value: 0

12:33:23.405 [debug] Executing bend with initial: 0

12:33:23.405 [debug] Executing fun with value: 0

12:33:23.405 [debug] Evaluating bend block with value: 0

12:33:23.405 [debug] Block returned: %{value: 0, left: {:fork, 1}, right: {:fork, 1}, variant: :node}

12:33:23.405 [debug] Fun returned result: %{value: 0, left: {:fork, 1}, right: {:fork, 1}, variant: :node}

12:33:23.405 [debug] Processing constructed value: %{value: 0, left: {:fork, 1}, right: {:fork, 1}, variant: :node}

12:33:23.405 [debug] Executing bend with initial: 1

12:33:23.405 [debug] Executing fun with value: 1

12:33:23.405 [debug] Evaluating bend block with value: 1

12:33:23.405 [debug] Block returned: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.405 [debug] Fun returned result: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.405 [debug] Processing constructed value: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.405 [debug] Executing bend with initial: 2

12:33:23.405 [debug] Executing fun with value: 2

12:33:23.405 [debug] Evaluating bend block with value: 2

12:33:23.405 [debug] Block returned: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.405 [debug] Fun returned result: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.405 [debug] Processing constructed value: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.405 [debug] Executing bend with initial: 3

12:33:23.405 [debug] Executing fun with value: 3

12:33:23.405 [debug] Evaluating bend block with value: 3

12:33:23.405 [debug] Block returned: %{variant: :leaf}

12:33:23.405 [debug] Fun returned result: %{variant: :leaf}

12:33:23.405 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.405 [debug] do_bend final result: %{variant: :leaf}

12:33:23.405 [debug] Executing bend with initial: 3

12:33:23.405 [debug] Executing fun with value: 3

12:33:23.405 [debug] Evaluating bend block with value: 3

12:33:23.405 [debug] Block returned: %{variant: :leaf}

12:33:23.405 [debug] Fun returned result: %{variant: :leaf}

12:33:23.405 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.405 [debug] do_bend final result: %{variant: :leaf}

12:33:23.405 [debug] do_bend final result: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.405 [debug] Executing bend with initial: 2

12:33:23.405 [debug] Executing fun with value: 2

12:33:23.405 [debug] Evaluating bend block with value: 2

12:33:23.405 [debug] Block returned: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.405 [debug] Fun returned result: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.405 [debug] Processing constructed value: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.405 [debug] Executing bend with initial: 3

12:33:23.405 [debug] Executing fun with value: 3

12:33:23.405 [debug] Evaluating bend block with value: 3

12:33:23.405 [debug] Block returned: %{variant: :leaf}

12:33:23.405 [debug] Fun returned result: %{variant: :leaf}

12:33:23.405 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.405 [debug] do_bend final result: %{variant: :leaf}

12:33:23.405 [debug] Executing bend with initial: 3

12:33:23.405 [debug] Executing fun with value: 3

12:33:23.405 [debug] Evaluating bend block with value: 3

12:33:23.405 [debug] Block returned: %{variant: :leaf}

12:33:23.405 [debug] Fun returned result: %{variant: :leaf}

12:33:23.405 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.405 [debug] do_bend final result: %{variant: :leaf}

12:33:23.405 [debug] do_bend final result: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.405 [debug] do_bend final result: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.405 [debug] Executing bend with initial: 1

12:33:23.405 [debug] Executing fun with value: 1

12:33:23.405 [debug] Evaluating bend block with value: 1

12:33:23.405 [debug] Block returned: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.405 [debug] Fun returned result: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.405 [debug] Processing constructed value: %{value: 1, left: {:fork, 2}, right: {:fork, 2}, variant: :node}

12:33:23.405 [debug] Executing bend with initial: 2

12:33:23.405 [debug] Executing fun with value: 2

12:33:23.405 [debug] Evaluating bend block with value: 2

12:33:23.405 [debug] Block returned: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.405 [debug] Fun returned result: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.405 [debug] Processing constructed value: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.405 [debug] Executing bend with initial: 3

12:33:23.405 [debug] Executing fun with value: 3

12:33:23.405 [debug] Evaluating bend block with value: 3

12:33:23.405 [debug] Block returned: %{variant: :leaf}

12:33:23.405 [debug] Fun returned result: %{variant: :leaf}

12:33:23.405 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.405 [debug] do_bend final result: %{variant: :leaf}

12:33:23.405 [debug] Executing bend with initial: 3

12:33:23.405 [debug] Executing fun with value: 3

12:33:23.405 [debug] Evaluating bend block with value: 3

12:33:23.405 [debug] Block returned: %{variant: :leaf}

12:33:23.406 [debug] Fun returned result: %{variant: :leaf}

12:33:23.406 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.406 [debug] do_bend final result: %{variant: :leaf}

12:33:23.406 [debug] do_bend final result: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.406 [debug] Executing bend with initial: 2

12:33:23.406 [debug] Executing fun with value: 2

12:33:23.406 [debug] Evaluating bend block with value: 2

12:33:23.406 [debug] Block returned: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.406 [debug] Fun returned result: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.406 [debug] Processing constructed value: %{value: 2, left: {:fork, 3}, right: {:fork, 3}, variant: :node}

12:33:23.406 [debug] Executing bend with initial: 3

12:33:23.406 [debug] Executing fun with value: 3

12:33:23.406 [debug] Evaluating bend block with value: 3

12:33:23.406 [debug] Block returned: %{variant: :leaf}

12:33:23.406 [debug] Fun returned result: %{variant: :leaf}

12:33:23.406 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.406 [debug] do_bend final result: %{variant: :leaf}

12:33:23.406 [debug] Executing bend with initial: 3

12:33:23.406 [debug] Executing fun with value: 3

12:33:23.406 [debug] Evaluating bend block with value: 3

12:33:23.406 [debug] Block returned: %{variant: :leaf}

12:33:23.406 [debug] Fun returned result: %{variant: :leaf}

12:33:23.406 [debug] Processing constructed value: %{variant: :leaf}

12:33:23.406 [debug] do_bend final result: %{variant: :leaf}

12:33:23.406 [debug] do_bend final result: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.406 [debug] do_bend final result: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.406 [debug] do_bend final result: %{value: 0, left: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, right: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant: :node}

12:33:23.406 [debug] Final bend result: %{value: 0, left: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, right: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant: :node}

12:33:23.406 [debug] do_fold called with data: %{value: 0, left: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, right: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant: :node}, variant_type: :node, state: %{0 => 1}

12:33:23.406 [debug] Processing recursive fields of: %{value: 0, left: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, right: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant: :node}

12:33:23.406 [debug] do_fold called with data: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant_type: :node, state: %{0 => 1}

12:33:23.406 [debug] Processing recursive fields of: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.406 [debug] do_fold called with data: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant_type: :node, state: %{0 => 1}

12:33:23.406 [debug] Processing recursive fields of: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1}

12:33:23.406 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.406 [debug] Recursive field result for left: {0, %{0 => 1}}

12:33:23.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1}

12:33:23.406 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.406 [debug] Recursive field result for right: {0, %{0 => 1}}

12:33:23.406 [debug] do_fold called with non-variant data: 0

12:33:23.406 [debug] do_fold called with non-variant data: 0

12:33:23.406 [debug] Recursive field result for left: {2, %{0 => 1, 1 => 2}}

12:33:23.406 [debug] do_fold called with data: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant_type: :node, state: %{0 => 1, 1 => 2}

12:33:23.406 [debug] Processing recursive fields of: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1, 1 => 2}

12:33:23.406 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.406 [debug] Recursive field result for left: {0, %{0 => 1, 1 => 2}}

12:33:23.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1, 1 => 2}

12:33:23.406 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.406 [debug] Recursive field result for right: {0, %{0 => 1, 1 => 2}}

12:33:23.406 [debug] do_fold called with non-variant data: 0

12:33:23.406 [debug] do_fold called with non-variant data: 0

12:33:23.406 [debug] Recursive field result for right: {2, %{0 => 1, 1 => 2, 2 => 4}}

12:33:23.406 [debug] do_fold called with non-variant data: 2

12:33:23.406 [debug] do_fold called with non-variant data: 2

12:33:23.406 [debug] Recursive field result for left: {1, %{0 => 1, 1 => 2, 2 => 4, 3 => 8}}

12:33:23.406 [debug] do_fold called with data: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}, variant_type: :node, state: %{0 => 1, 1 => 2, 2 => 4, 3 => 8}

12:33:23.406 [debug] Processing recursive fields of: %{value: 1, left: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, right: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant: :node}

12:33:23.406 [debug] do_fold called with data: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}, variant_type: :node, state: %{0 => 1, 1 => 2, 2 => 4, 3 => 8}

12:33:23.406 [debug] Processing recursive fields of: %{value: 2, left: %{variant: :leaf}, right: %{variant: :leaf}, variant: :node}

12:33:23.406 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1, 1 => 2, 2 => 4, 3 => 8}

12:33:23.406 [debug] Processing recursive fields of: %{variant: :leaf}

12:33:23.406 [debug] Recursive field result for left: {0, %{0 => 1, 1 => 2, 2 => 4, 3 => 8}}

12:33:23.407 [debug] do_fold called with data: %{variant: :leaf}, variant_type: :leaf, state: %{0 => 1, 1 => 2, 2 => 4, 3 => 8}

12:33:23.407 [debug] Processing recursive fields of: %{variant: :leaf}
.
Finished in 0.09 seconds (0.00s async, 0.09s sync)
5 tests, 0 failures
