Compiling 3 files (.ex)
     warning: variable "other" is unused (if the variable is not meant to be used, prefix it with an underscore)
     │
 351 │           other ->
     │           ~
     │
     └─ lib/ben_ben.ex:351:11: BenBen.process_constructed/2


07:38:15.941 [debug] Defining type {:__aliases__, [line: 4, column: 11], [:MyGraph]} with block: {:__block__, [], [{:vertex, [line: 6, column: 5], [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]}, {:edge, [line: 8, column: 5], [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]}]}

07:38:15.941 [debug] Defining type {:__aliases__, [line: 4, column: 11], [:MyTree]} with block: {:__block__, [], [{:node, [line: 5, column: 5], [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]}, {:leaf, [line: 6, column: 5], []}]}

07:38:15.942 [debug] Extracted variants: [{:node, [line: 5, column: 5], [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]}, {:leaf, [line: 6, column: 5], []}]

07:38:15.942 [debug] Generating constructors for variants: [{:node, [line: 5, column: 5], [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]}, {:leaf, [line: 6, column: 5], []}]

07:38:15.942 [debug] Extracted variants: [{:vertex, [line: 6, column: 5], [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]}, {:edge, [line: 8, column: 5], [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]}]

07:38:15.942 [debug] Processing variant: {:node, [line: 5, column: 5], [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]}

07:38:15.942 [debug] Generating constructors for variants: [{:vertex, [line: 6, column: 5], [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]}, {:edge, [line: 8, column: 5], [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]}]

07:38:15.942 [debug] Constructor: :node, meta: [line: 5, column: 5], args: [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]

07:38:15.942 [debug] Processing variant: {:vertex, [line: 6, column: 5], [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]}

07:38:15.942 [debug] Extracting constructor args from: [{:val, [line: 5, column: 10], nil}, {:recu, [line: 5, column: 15], [{:left, [line: 5, column: 20], nil}]}, {:recu, [line: 5, column: 27], [{:right, [line: 5, column: 32], nil}]}]

07:38:15.942 [debug] Found value arg: :val

07:38:15.942 [debug] Constructor: :vertex, meta: [line: 6, column: 5], args: [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]

07:38:15.942 [debug] Found recursive arg: :left

07:38:15.942 [debug] Found recursive arg: :right

07:38:15.942 [debug] Extracting constructor args from: [{:id, [line: 6, column: 12], nil}, {:value, [line: 6, column: 16], nil}, {:recu, [line: 6, column: 23], [{:edges, [line: 6, column: 28], nil}]}]

07:38:15.942 [debug] Extracted arg_names: [:val, :left, :right]

07:38:15.942 [debug] Found value arg: :id

07:38:15.942 [debug] Found value arg: :value

07:38:15.942 [debug] Found recursive arg: :edges

07:38:15.942 [debug] Extracted arg_names: [:id, :value, :edges]

07:38:15.942 [debug] Generated arg vars: [{:val, [], nil}, {:left, [], nil}, {:right, [], nil}]

07:38:15.942 [debug] Generated arg vars: [{:id, [], nil}, {:value, [], nil}, {:edges, [], nil}]

07:38:15.942 [debug] Field pairs: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]

07:38:15.942 [debug] Field pairs: [id: {:id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]

07:38:15.942 [debug] Processing variant: {:leaf, [line: 6, column: 5], []}

07:38:15.942 [debug] Constructor: :leaf, meta: [line: 6, column: 5], args: []

07:38:15.942 [debug] Extracting constructor args from: []

07:38:15.942 [debug] Extracted arg_names: []

07:38:15.942 [debug] Generated arg vars: []

07:38:15.942 [debug] Processing variant: {:edge, [line: 8, column: 5], [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]}

07:38:15.942 [debug] Field pairs: []

07:38:15.942 [debug] Constructor: :edge, meta: [line: 8, column: 5], args: [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]

07:38:15.942 [debug] Extracting constructor args from: [{:to_id, [line: 8, column: 10], nil}, {:weight, [line: 8, column: 17], nil}]

07:38:15.942 [debug] Found value arg: :to_id

07:38:15.942 [debug] Found value arg: :weight

07:38:15.942 [debug] Extracted arg_names: [:to_id, :weight]

07:38:15.942 [debug] Generated arg vars: [{:to_id, [], nil}, {:weight, [], nil}]

07:38:15.942 [debug] Field pairs: [to_id: {:to_id, [], nil}, weight: {:weight, [], nil}]

07:38:15.952 [debug] Fold expression: {:tree, [line: 10, column: 10], nil}, opts: [], cases: [{:->, [line: 11, column: 36], [[{:case, [line: 11, column: 7], [{:node, [line: 11, column: 12], [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]}]}, {:->, [line: 12, column: 20], [[{:case, [line: 12, column: 7], [{:leaf, [line: 12, column: 12], []}]}], 0]}]

07:38:15.952 [debug] Fold expression: {:graph, [line: 13, column: 10], nil}, opts: [], cases: [{:->, [line: 14, column: 39], [[{:case, [line: 14, column: 7], [{:vertex, [line: 14, column: 12], [{:_id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 24], nil}, {:edges, [line: 14, column: 31], nil}]}]}], {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:recu, [line: 16, column: 17], [{:edges, [line: 16, column: 22], nil}]}]}]}, {:->, [line: 18, column: 34], [[{:case, [line: 18, column: 7], [{:edge, [line: 18, column: 12], [{:_to_id, [line: 18, column: 17], nil}, {:weight, [line: 18, column: 25], nil}]}]}], {:weight, [line: 20, column: 9], nil}]}]

07:38:15.952 [debug] Extracting cases from list: [{:->, [line: 14, column: 39], [[{:case, [line: 14, column: 7], [{:vertex, [line: 14, column: 12], [{:_id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 24], nil}, {:edges, [line: 14, column: 31], nil}]}]}], {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:recu, [line: 16, column: 17], [{:edges, [line: 16, column: 22], nil}]}]}]}, {:->, [line: 18, column: 34], [[{:case, [line: 18, column: 7], [{:edge, [line: 18, column: 12], [{:_to_id, [line: 18, column: 17], nil}, {:weight, [line: 18, column: 25], nil}]}]}], {:weight, [line: 20, column: 9], nil}]}]

07:38:15.952 [debug] Extracting cases from list: [{:->, [line: 11, column: 36], [[{:case, [line: 11, column: 7], [{:node, [line: 11, column: 12], [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]}]}, {:->, [line: 12, column: 20], [[{:case, [line: 12, column: 7], [{:leaf, [line: 12, column: 12], []}]}], 0]}]

07:38:15.952 [debug] Extracted fold cases: [{:->, [line: 14, column: 39], [[{:case, [line: 14, column: 7], [{:vertex, [line: 14, column: 12], [{:_id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 24], nil}, {:edges, [line: 14, column: 31], nil}]}]}], {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:recu, [line: 16, column: 17], [{:edges, [line: 16, column: 22], nil}]}]}]}, {:->, [line: 18, column: 34], [[{:case, [line: 18, column: 7], [{:edge, [line: 18, column: 12], [{:_to_id, [line: 18, column: 17], nil}, {:weight, [line: 18, column: 25], nil}]}]}], {:weight, [line: 20, column: 9], nil}]}]

07:38:15.952 [debug] Extracted fold cases: [{:->, [line: 11, column: 36], [[{:case, [line: 11, column: 7], [{:node, [line: 11, column: 12], [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]}]}, {:->, [line: 12, column: 20], [[{:case, [line: 12, column: 7], [{:leaf, [line: 12, column: 12], []}]}], 0]}]

07:38:15.952 [debug] Generating fold cases: [{:->, [line: 14, column: 39], [[{:case, [line: 14, column: 7], [{:vertex, [line: 14, column: 12], [{:_id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 24], nil}, {:edges, [line: 14, column: 31], nil}]}]}], {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:recu, [line: 16, column: 17], [{:edges, [line: 16, column: 22], nil}]}]}]}, {:->, [line: 18, column: 34], [[{:case, [line: 18, column: 7], [{:edge, [line: 18, column: 12], [{:_to_id, [line: 18, column: 17], nil}, {:weight, [line: 18, column: 25], nil}]}]}], {:weight, [line: 20, column: 9], nil}]}]

07:38:15.952 [debug] Generating pattern match for :vertex with args: [{:_id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 24], nil}, {:edges, [line: 14, column: 31], nil}]

07:38:15.952 [debug] Extracting bindings from args: [{:_id, [line: 14, column: 19], nil}, {:value, [line: 14, column: 24], nil}, {:edges, [line: 14, column: 31], nil}]

07:38:15.952 [debug] Generating fold cases: [{:->, [line: 11, column: 36], [[{:case, [line: 11, column: 7], [{:node, [line: 11, column: 12], [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]}]}, {:->, [line: 12, column: 20], [[{:case, [line: 12, column: 7], [{:leaf, [line: 12, column: 12], []}]}], 0]}]

07:38:15.952 [debug] Transforming recursive refs in body: {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:recu, [line: 16, column: 17], [{:edges, [line: 16, column: 22], nil}]}]} with bindings: [_id: {:_id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}], state: nil

07:38:15.953 [debug] Generating pattern match for :node with args: [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]

07:38:15.953 [debug] Processing recursive reference: {:recu, [line: 16, column: 17], [{:edges, [line: 16, column: 22], nil}]}

07:38:15.953 [debug] Extracting bindings from args: [{:val, [line: 11, column: 17], nil}, {:left, [line: 11, column: 22], nil}, {:right, [line: 11, column: 28], nil}]

07:38:15.953 [debug] Transformed recursive reference to: {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

07:38:15.953 [debug] Generating pattern match for :edge with args: [{:_to_id, [line: 18, column: 17], nil}, {:weight, [line: 18, column: 25], nil}]

07:38:15.953 [debug] Transforming recursive refs in body: {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}]}, {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}]} with bindings: [val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}], state: nil

07:38:15.953 [debug] Processing recursive reference: {:recu, [line: 11, column: 45], [{:left, [line: 11, column: 50], nil}]}

07:38:15.953 [debug] Extracting bindings from args: [{:_to_id, [line: 18, column: 17], nil}, {:weight, [line: 18, column: 25], nil}]

07:38:15.953 [debug] Transforming recursive refs in body: {:weight, [line: 20, column: 9], nil} with bindings: [_to_id: {:_to_id, [], nil}, weight: {:weight, [], nil}], state: nil

07:38:15.953 [debug] Transformed recursive reference to: {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

07:38:15.953 [debug] Processing recursive reference: {:recu, [line: 11, column: 58], [{:right, [line: 11, column: 63], nil}]}

07:38:15.953 [debug] Transformed recursive reference to: {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}

07:38:15.953 [debug] Generating pattern match for :leaf with args: []

07:38:15.953 [debug] Generated fold cases after transformation: [{:->, [line: 14, column: 39], [[{:%{}, [], [variant: :vertex, _id: {:_id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]}], {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 18, column: 34], [[{:%{}, [], [variant: :edge, _to_id: {:_to_id, [], nil}, weight: {:weight, [], nil}]}], {:weight, [line: 20, column: 9], nil}]}]

07:38:15.953 [debug] Extracting bindings from args: []

07:38:15.953 [debug] Transforming recursive refs in body: 0 with bindings: [], state: nil

07:38:15.953 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 13, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 14, column: 39], [[{:%{}, [], [variant: :vertex, _id: {:_id, [], nil}, value: {:value, [], nil}, edges: {:edges, [], nil}]}], {:+, [line: 16, column: 15], [{:value, [line: 16, column: 9], nil}, {:do_fold, [], [{:edges, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 18, column: 34], [[{:%{}, [], [variant: :edge, _to_id: {:_to_id, [], nil}, weight: {:weight, [], nil}]}], {:weight, [line: 20, column: 9], nil}]}]]]}]}]}]}

07:38:15.953 [debug] Generated fold cases after transformation: [{:->, [line: 11, column: 36], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 12, column: 20], [[{:%{}, [], [variant: :leaf]}], 0]}]

07:38:15.953 [debug] Bend operation with var: :vertex_id, initial: 1

07:38:15.953 [debug] Final quoted expression: {:do_fold, [], [{:tree, [line: 10, column: 10], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 11, column: 36], [[{:%{}, [], [variant: :node, val: {:val, [], nil}, left: {:left, [], nil}, right: {:right, [], nil}]}], {:+, [line: 11, column: 56], [{:+, [line: 11, column: 43], [{:val, [line: 11, column: 39], nil}, {:do_fold, [], [{:left, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}, {:do_fold, [], [{:right, [], nil}, nil, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}]}]}]}, {:->, [line: 12, column: 20], [[{:%{}, [], [variant: :leaf]}], 0]}]]]}]}]}]}
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 13 │     fold graph do
    │     ~~~~~~~~~~~~~
    │
    └─ lib/examples/my_graph.ex:13: MyGraph.sum/1


07:38:15.953 [debug] Bend operation with var: :val, initial: 0
    warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
    │
 10 │     fold tree do
    │     ~~~~~~~~~~~~
    │
    └─ lib/examples/my_tree.ex:10: MyTree.sum/1


07:38:15.953 [debug] Bend operation with var: :to_id, initial: 1

07:38:15.954 [debug] Fork operation with expression: {:+, [line: 19, column: 35], [{:val, [line: 19, column: 31], nil}, 1]}

07:38:15.954 [debug] Fork operation with expression: {:+, [line: 19, column: 50], [{:val, [line: 19, column: 46], nil}, 1]}

07:38:15.954 [debug] Fork operation with expression: {:+, [line: 52, column: 22], [{:to_id, [line: 52, column: 16], nil}, 1]}
Generated ben_ben app

07:38:15.999 [debug] Defining type {:__aliases__, [line: 6, column: 11], [:LinkedList]} with block: {:__block__, [], [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]}

07:38:15.999 [debug] Extracted variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

07:38:15.999 [debug] Generating constructors for variants: [{:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}, {:null, [line: 8, column: 5], []}]

07:38:15.999 [debug] Processing variant: {:cons, [line: 7, column: 5], [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]}

07:38:15.999 [debug] Constructor: :cons, meta: [line: 7, column: 5], args: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

07:38:15.999 [debug] Extracting constructor args from: [{:head, [line: 7, column: 10], nil}, {:recu, [line: 7, column: 16], [{:tail, [line: 7, column: 21], nil}]}]

07:38:15.999 [debug] Found value arg: :head

07:38:15.999 [debug] Found recursive arg: :tail

07:38:15.999 [debug] Extracted arg_names: [:head, :tail]

07:38:15.999 [debug] Generated arg vars: [{:head, [], nil}, {:tail, [], nil}]

07:38:15.999 [debug] Field pairs: [head: {:head, [], nil}, tail: {:tail, [], nil}]

07:38:15.999 [debug] Processing variant: {:null, [line: 8, column: 5], []}

07:38:15.999 [debug] Constructor: :null, meta: [line: 8, column: 5], args: []

07:38:15.999 [debug] Extracting constructor args from: []

07:38:15.999 [debug] Extracted arg_names: []

07:38:15.999 [debug] Generated arg vars: []

07:38:15.999 [debug] Field pairs: []
Running ExUnit with seed: 991218, max_cases: 48


07:38:16.009 [debug] Bend operation with var: :val, initial: 1

07:38:16.009 [debug] Fork operation with expression: {:+, [line: 16, column: 43], [{:val, [line: 16, column: 39], nil}, 1]}

07:38:16.039 [debug] Bend initial value: 1

07:38:16.039 [debug] Executing bend with initial: 1

07:38:16.039 [debug] Executing fun with value: 1

07:38:16.039 [debug] Evaluating bend block with value: 1

07:38:16.040 [debug] Block returned: %{head: 1, tail: {:fork, 2}, variant: :cons}

07:38:16.040 [debug] Fun returned result: %{head: 1, tail: {:fork, 2}, variant: :cons}

07:38:16.040 [debug] Processing constructed value: %{head: 1, tail: {:fork, 2}, variant: :cons}

07:38:16.040 [debug] Executing bend with initial: 2

07:38:16.040 [debug] Executing fun with value: 2

07:38:16.040 [debug] Evaluating bend block with value: 2

07:38:16.040 [debug] Block returned: %{head: 2, tail: {:fork, 3}, variant: :cons}

07:38:16.040 [debug] Fun returned result: %{head: 2, tail: {:fork, 3}, variant: :cons}

07:38:16.040 [debug] Processing constructed value: %{head: 2, tail: {:fork, 3}, variant: :cons}

07:38:16.040 [debug] Executing bend with initial: 3

07:38:16.040 [debug] Executing fun with value: 3

07:38:16.040 [debug] Evaluating bend block with value: 3

07:38:16.040 [debug] Block returned: %{head: 3, tail: {:fork, 4}, variant: :cons}

07:38:16.040 [debug] Fun returned result: %{head: 3, tail: {:fork, 4}, variant: :cons}

07:38:16.040 [debug] Processing constructed value: %{head: 3, tail: {:fork, 4}, variant: :cons}

07:38:16.040 [debug] Executing bend with initial: 4

07:38:16.040 [debug] Executing fun with value: 4

07:38:16.040 [debug] Evaluating bend block with value: 4

07:38:16.040 [debug] Block returned: %{variant: :null}

07:38:16.040 [debug] Fun returned result: %{variant: :null}
.
07:38:16.040 [debug] Processing constructed value: %{variant: :null}

07:38:16.040 [debug] do_bend final result: %{variant: :null}


07:38:16.040 [debug] do_bend final result: %{head: 3, tail: %{variant: :null}, variant: :cons}

07:38:16.040 [debug] do_bend final result: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}

07:38:16.040 [debug] do_bend final result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}

07:38:16.040 [debug] Final bend result: %{head: 1, tail: %{head: 2, tail: %{head: 3, tail: %{variant: :null}, variant: :cons}, variant: :cons}, variant: :cons}
Finished in 0.03 seconds (0.00s async, 0.03s sync)
1 test, 0 failures
