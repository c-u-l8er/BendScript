Compiling 1 file (.ex)

14:10:58.863 [debug] Defining type {:__aliases__, [line: 5], [:Graph]} with block: {:__block__, [], [{:graph, [line: 6], [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 7], [{:from, [line: 7], nil}, {:to, [line: 7], nil}]}, {:empty, [line: 8], []}]}

14:10:58.865 [debug] Extracted variants: [{:graph, [line: 6], [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 7], [{:from, [line: 7], nil}, {:to, [line: 7], nil}]}, {:empty, [line: 8], []}]

14:10:58.865 [debug] Generating constructors for variants: [{:graph, [line: 6], [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}, {:edge, [line: 7], [{:from, [line: 7], nil}, {:to, [line: 7], nil}]}, {:empty, [line: 8], []}]

14:10:58.865 [debug] Processing variant: {:graph, [line: 6], [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]}

14:10:58.865 [debug] Constructor: :graph, meta: [line: 6], args: [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]

14:10:58.865 [debug] Extracting constructor args from: [{:vertices, [line: 6], nil}, {:recu, [line: 6], [{:edges, [line: 6], nil}]}]

14:10:58.865 [debug] Found value arg: :vertices

14:10:58.865 [debug] Found recursive arg: :edges

14:10:58.865 [debug] Extracted arg_names: [:vertices, :edges]

14:10:58.865 [debug] Generated arg vars: [{:vertices, [], nil}, {:edges, [], nil}]

14:10:58.866 [debug] Field pairs: [vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]

14:10:58.866 [debug] Processing variant: {:edge, [line: 7], [{:from, [line: 7], nil}, {:to, [line: 7], nil}]}

14:10:58.866 [debug] Constructor: :edge, meta: [line: 7], args: [{:from, [line: 7], nil}, {:to, [line: 7], nil}]

14:10:58.866 [debug] Extracting constructor args from: [{:from, [line: 7], nil}, {:to, [line: 7], nil}]

14:10:58.866 [debug] Found value arg: :from

14:10:58.866 [debug] Found value arg: :to

14:10:58.866 [debug] Extracted arg_names: [:from, :to]

14:10:58.866 [debug] Generated arg vars: [{:from, [], nil}, {:to, [], nil}]

14:10:58.866 [debug] Field pairs: [from: {:from, [], nil}, to: {:to, [], nil}]

14:10:58.866 [debug] Processing variant: {:empty, [line: 8], []}

14:10:58.866 [debug] Constructor: :empty, meta: [line: 8], args: []

14:10:58.866 [debug] Extracting constructor args from: []

14:10:58.866 [debug] Extracted arg_names: []

14:10:58.866 [debug] Generated arg vars: []

14:10:58.866 [debug] Field pairs: []

14:10:58.875 [debug] Fold expression: {:graph, [line: 16], nil}, opts: [], cases: [{:->, [line: 17], [[{:case, [line: 17], [{:graph, [line: 17], [{:vertices, [line: 17], nil}, {:edges, [line: 17], nil}]}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:case, [line: 20], [{:empty, [line: 20], []}]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

14:10:58.876 [debug] Extracting cases from list: [{:->, [line: 17], [[{:case, [line: 17], [{:graph, [line: 17], [{:vertices, [line: 17], nil}, {:edges, [line: 17], nil}]}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:case, [line: 20], [{:empty, [line: 20], []}]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

14:10:58.876 [debug] Extracted fold cases: [{:->, [line: 17], [[{:case, [line: 17], [{:graph, [line: 17], [{:vertices, [line: 17], nil}, {:edges, [line: 17], nil}]}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:case, [line: 20], [{:empty, [line: 20], []}]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

14:10:58.876 [debug] Generating fold cases: [{:->, [line: 17], [[{:case, [line: 17], [{:graph, [line: 17], [{:vertices, [line: 17], nil}, {:edges, [line: 17], nil}]}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:case, [line: 20], [{:empty, [line: 20], []}]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

14:10:58.876 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

14:10:58.876 [debug] Transforming recursive refs:
Body: {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}
Bindings: [vertices: true, edges: true]
State: nil


14:10:58.876 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

14:10:58.876 [debug] Transforming recursive refs:
Body: {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}
Bindings: []
State: nil


14:10:58.876 [debug] Generated fold cases after transformation: [{:->, [line: 17], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:%{}, [], [variant: :empty]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]

14:10:58.876 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 16], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 17], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {{:., [line: 18], [{:__aliases__, [line: 18], [:Graph]}, :graph]}, [line: 18], [{{:., [line: 18], [{:__aliases__, [line: 18], [:MapSet]}, :put]}, [line: 18], [{:vertices, [line: 18], nil}, {:vertex, [line: 18], nil}]}, {:edges, [line: 18], nil}]}]}, {:->, [line: 20], [[{:%{}, [], [variant: :empty]}], {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :graph]}, [line: 21], [{{:., [line: 21], [{:__aliases__, [line: 21], [:MapSet]}, :new]}, [line: 21], [[{:vertex, [line: 21], nil}]]}, {{:., [line: 21], [{:__aliases__, [line: 21], [:Graph]}, :empty]}, [line: 21], []}]}]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/simple_graph.ex:16: SimpleGraph.add_vertex/2


14:10:58.880 [debug] Fold expression: {:graph, [line: 26], nil}, opts: [], cases: [{:->, [line: 27], [[{:case, [line: 27], [{:graph, [line: 27], [{:vertices, [line: 27], nil}, {:edges, [line: 27], nil}]}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:empty, [line: 39], []}]}], {:graph, [line: 40], nil}]}]

14:10:58.880 [debug] Extracting cases from list: [{:->, [line: 27], [[{:case, [line: 27], [{:graph, [line: 27], [{:vertices, [line: 27], nil}, {:edges, [line: 27], nil}]}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:empty, [line: 39], []}]}], {:graph, [line: 40], nil}]}]

14:10:58.880 [debug] Extracted fold cases: [{:->, [line: 27], [[{:case, [line: 27], [{:graph, [line: 27], [{:vertices, [line: 27], nil}, {:edges, [line: 27], nil}]}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:empty, [line: 39], []}]}], {:graph, [line: 40], nil}]}]

14:10:58.881 [debug] Generating fold cases: [{:->, [line: 27], [[{:case, [line: 27], [{:graph, [line: 27], [{:vertices, [line: 27], nil}, {:edges, [line: 27], nil}]}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:case, [line: 39], [{:empty, [line: 39], []}]}], {:graph, [line: 40], nil}]}]

14:10:58.881 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

14:10:58.881 [debug] Transforming recursive refs:
Body: {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}
Bindings: [vertices: true, edges: true]
State: nil


14:10:58.881 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

14:10:58.881 [debug] Transforming recursive refs:
Body: {:graph, [line: 40], nil}
Bindings: []
State: nil


14:10:58.881 [debug] Generated fold cases after transformation: [{:->, [line: 27], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [:Graph]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{:%{}, [line: 32], [variant: :empty]}], {{:., [line: 32], [{:__aliases__, [line: 32], [:Graph]}, :graph]}, [line: 32], [{:vertices, [line: 32], nil}, {:new_edge, [line: 32], nil}]}]}, {:->, [line: 33], [[{:_, [line: 33], nil}], {{:., [line: 33], [{:__aliases__, [line: 33], [:Graph]}, :graph]}, [line: 33], [{:vertices, [line: 33], nil}, [{:|, [line: 33], [{:new_edge, [line: 33], nil}, {{:., [line: 33], [{:__aliases__, [line: 33], [:List]}, :wrap]}, [line: 33], [{:edges, [line: 33], nil}]}]}]]}]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:%{}, [], [variant: :empty]}], {:graph, [line: 40], nil}]}]

14:10:58.881 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 26], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 27], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 28], [{:and, [line: 28], [{{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:from, [line: 28], nil}]}, {{:., [line: 28], [{:__aliases__, [line: 28], [:MapSet]}, :member?]}, [line: 28], [{:vertices, [line: 28], nil}, {:to, [line: 28], nil}]}]}, [do: {:__block__, [], [{:=, [line: 29], [{:new_edge, [line: 29], nil}, {{:., [line: 29], [{:__aliases__, [line: 29], [...]}, :edge]}, [line: 29], [{:from, [line: 29], nil}, {:to, [line: 29], nil}]}]}, {:case, [line: 31], [{:edges, [line: 31], nil}, [do: [{:->, [line: 32], [[{...}], {...}]}, {:->, [line: 33], [[...], ...]}]]]}]}, else: {:graph, [line: 36], nil}]]}]}, {:->, [line: 39], [[{:%{}, [], [variant: :empty]}], {:graph, [line: 40], nil}]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/simple_graph.ex:26: SimpleGraph.add_edge/3


14:10:58.882 [debug] Fold expression: {:graph, [line: 45], nil}, opts: [], cases: [{:->, [line: 46], [[{:case, [line: 46], [{:graph, [line: 46], [{:vertices, [line: 46], nil}, {:edges, [line: 46], nil}]}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:case, [line: 47], [{:empty, [line: 47], []}]}], []]}]

14:10:58.882 [debug] Extracting cases from list: [{:->, [line: 46], [[{:case, [line: 46], [{:graph, [line: 46], [{:vertices, [line: 46], nil}, {:edges, [line: 46], nil}]}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:case, [line: 47], [{:empty, [line: 47], []}]}], []]}]

14:10:58.882 [debug] Extracted fold cases: [{:->, [line: 46], [[{:case, [line: 46], [{:graph, [line: 46], [{:vertices, [line: 46], nil}, {:edges, [line: 46], nil}]}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:case, [line: 47], [{:empty, [line: 47], []}]}], []]}]

14:10:58.882 [debug] Generating fold cases: [{:->, [line: 46], [[{:case, [line: 46], [{:graph, [line: 46], [{:vertices, [line: 46], nil}, {:edges, [line: 46], nil}]}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:case, [line: 47], [{:empty, [line: 47], []}]}], []]}]

14:10:58.882 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

14:10:58.882 [debug] Transforming recursive refs:
Body: {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}
Bindings: [vertices: true, edges: true]
State: nil


14:10:58.882 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

14:10:58.882 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


14:10:58.882 [debug] Generated fold cases after transformation: [{:->, [line: 46], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:%{}, [], [variant: :empty]}], []]}]

14:10:58.882 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 45], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 46], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {{:., [line: 46], [{:__aliases__, [line: 46], [:MapSet]}, :to_list]}, [line: 46], [{:vertices, [line: 46], nil}]}]}, {:->, [line: 47], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}
warning: variable "edges" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/simple_graph.ex:45: SimpleGraph.vertices/1

warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/simple_graph.ex:45: SimpleGraph.vertices/1


14:10:58.883 [debug] Fold expression: {:graph, [line: 52], nil}, opts: [], cases: [{:->, [line: 53], [[{:case, [line: 53], [{:graph, [line: 53], [{:vertices, [line: 53], nil}, {:edges, [line: 53], nil}]}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:case, [line: 60], [{:empty, [line: 60], []}]}], []]}]

14:10:58.883 [debug] Extracting cases from list: [{:->, [line: 53], [[{:case, [line: 53], [{:graph, [line: 53], [{:vertices, [line: 53], nil}, {:edges, [line: 53], nil}]}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:case, [line: 60], [{:empty, [line: 60], []}]}], []]}]

14:10:58.883 [debug] Extracted fold cases: [{:->, [line: 53], [[{:case, [line: 53], [{:graph, [line: 53], [{:vertices, [line: 53], nil}, {:edges, [line: 53], nil}]}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:case, [line: 60], [{:empty, [line: 60], []}]}], []]}]

14:10:58.883 [debug] Generating fold cases: [{:->, [line: 53], [[{:case, [line: 53], [{:graph, [line: 53], [{:vertices, [line: 53], nil}, {:edges, [line: 53], nil}]}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:case, [line: 60], [{:empty, [line: 60], []}]}], []]}]

14:10:58.883 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

14:10:58.883 [debug] Transforming recursive refs:
Body: {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}
Bindings: [vertices: true, edges: true]
State: nil


14:10:58.883 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

14:10:58.883 [debug] Transforming recursive refs:
Body: []
Bindings: []
State: nil


14:10:58.883 [debug] Generated fold cases after transformation: [{:->, [line: 53], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:%{}, [], [variant: :empty]}], []]}]

14:10:58.883 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 52], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 53], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 54], [{{:., [line: 54], [{:__aliases__, [line: 54], [:MapSet]}, :member?]}, [line: 54], [{:vertices, [line: 54], nil}, {:vertex, [line: 54], nil}]}, [do: {:find_neighbors, [line: 55], [{:edges, [line: 55], nil}, {:vertex, [line: 55], nil}]}, else: []]]}]}, {:->, [line: 60], [[{:%{}, [], [variant: :empty]}], []]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/simple_graph.ex:52: SimpleGraph.neighbors/2


14:10:58.884 [debug] Fold expression: {:graph, [line: 82], nil}, opts: [], cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertices, [line: 83], nil}, {:edges, [line: 83], nil}]}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:case, [line: 90], [{:empty, [line: 90], []}]}], false]}]

14:10:58.884 [debug] Extracting cases from list: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertices, [line: 83], nil}, {:edges, [line: 83], nil}]}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:case, [line: 90], [{:empty, [line: 90], []}]}], false]}]

14:10:58.884 [debug] Extracted fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertices, [line: 83], nil}, {:edges, [line: 83], nil}]}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:case, [line: 90], [{:empty, [line: 90], []}]}], false]}]

14:10:58.884 [debug] Generating fold cases: [{:->, [line: 83], [[{:case, [line: 83], [{:graph, [line: 83], [{:vertices, [line: 83], nil}, {:edges, [line: 83], nil}]}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:case, [line: 90], [{:empty, [line: 90], []}]}], false]}]

14:10:58.884 [debug] Generated pattern: {:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]} for variant: :graph

14:10:58.884 [debug] Transforming recursive refs:
Body: {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}
Bindings: [vertices: true, edges: true]
State: nil


14:10:58.884 [debug] Generated pattern: {:%{}, [], [variant: :empty]} for variant: :empty

14:10:58.884 [debug] Transforming recursive refs:
Body: false
Bindings: []
State: nil


14:10:58.885 [debug] Generated fold cases after transformation: [{:->, [line: 83], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:%{}, [], [variant: :empty]}], false]}]

14:10:58.885 [debug] Final quoted expression: {:do_fold, [], [{:graph, [line: 82], nil}, nil, {:fn, [], [{:->, [], [[{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, {:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:state, [], BenBen}]}], {:case, [], [{:var!, [context: BenBen, imports: [{1, Kernel}, {2, Kernel}]], [{:value, [], BenBen}]}, [do: [{:->, [line: 83], [[{:%{}, [], [variant: :graph, vertices: {:vertices, [], nil}, edges: {:edges, [], nil}]}], {:if, [line: 84], [{:and, [line: 84], [{{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:start, [line: 84], nil}]}, {{:., [line: 84], [{:__aliases__, [line: 84], [:MapSet]}, :member?]}, [line: 84], [{:vertices, [line: 84], nil}, {:target, [line: 84], nil}]}]}, [do: {:dfs, [line: 85], [{:edges, [line: 85], nil}, {:start, [line: 85], nil}, {:target, [line: 85], nil}, {{:., [line: 85], [{:__aliases__, [line: 85], [:MapSet]}, :new]}, [line: 85], []}]}, else: false]]}]}, {:->, [line: 90], [[{:%{}, [], [variant: :empty]}], false]}]]]}]}]}]}
warning: variable "state" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/examples/simple_graph.ex:82: SimpleGraph.has_path?/3

Generated graphrenia app
Excluding tags: [:skip]

14:10:59.045 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
14:10:59.045 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
14:10:59.045 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.045 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.045 [debug] Recursive field result for edges: []
.14:10:59.045 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
.14:10:59.045 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
14:10:59.045 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.045 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.045 [debug] Recursive field result for edges: []
14:10:59.045 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
14:10:59.045 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
14:10:59.045 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.045 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.045 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.045 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.045 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.045 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.045 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.046 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.046 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.046 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
14:10:59.046 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.046 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
14:10:59.046 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.046 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
14:10:59.046 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.046 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant_type: :graph, state: nil
14:10:59.046 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
14:10:59.046 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.046 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.046 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
14:10:59.046 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
14:10:59.046 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.046 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
14:10:59.046 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.046 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
14:10:59.046 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.046 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant_type: :graph, state: nil
14:10:59.046 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
14:10:59.046 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant_type: :graph, state: nil
14:10:59.046 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
14:10:59.046 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.046 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.046 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.046 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.046 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.046 [debug] Recursive field result for edges: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.046 [debug] do_fold called with data: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
14:10:59.046 [debug] Processing recursive fields of: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.046 [debug] do_fold called with data: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
14:10:59.046 [debug] Processing recursive fields of: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.046 [debug] do_fold called with data: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
14:10:59.046 [debug] Processing recursive fields of: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.046 [debug] do_fold called with data: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}], variant: :graph, vertices: MapSet.new([:a, :b, :c])}
.14:10:59.047 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
14:10:59.047 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.047 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.047 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.047 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.047 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.047 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
14:10:59.047 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.047 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.047 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.047 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant_type: :graph, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
14:10:59.047 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.047 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
14:10:59.047 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
14:10:59.047 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.047 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.047 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.047 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant_type: :graph, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
14:10:59.047 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant_type: :graph, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
14:10:59.047 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.047 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.047 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}
14:10:59.047 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}
14:10:59.047 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}
14:10:59.048 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.048 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
14:10:59.048 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.048 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
14:10:59.048 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.048 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant_type: :graph, state: nil
14:10:59.048 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}
14:10:59.048 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant_type: :graph, state: nil
14:10:59.048 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}
14:10:59.048 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant_type: :graph, state: nil
14:10:59.048 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}
14:10:59.048 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.048 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.048 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.048 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.048 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.048 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.048 [debug] Recursive field result for edges: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.048 [debug] do_fold called with data: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
14:10:59.048 [debug] Processing recursive fields of: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.048 [debug] do_fold called with data: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
14:10:59.049 [debug] Processing recursive fields of: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.049 [debug] do_fold called with data: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
14:10:59.049 [debug] Processing recursive fields of: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.049 [debug] do_fold called with data: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
14:10:59.049 [debug] Processing recursive fields of: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.049 [debug] do_fold called with data: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
14:10:59.049 [debug] Processing recursive fields of: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.049 [debug] do_fold called with data: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
14:10:59.049 [debug] Processing recursive fields of: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
.14:10:59.049 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
14:10:59.049 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
14:10:59.049 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.049 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.049 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.049 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.049 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.049 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.050 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.050 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.050 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.050 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
14:10:59.050 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.050 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
14:10:59.050 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.050 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
14:10:59.050 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.050 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant_type: :graph, state: nil
14:10:59.050 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
14:10:59.050 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.050 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.050 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.050 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.050 [debug] Recursive field result for edges: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.050 [debug] do_fold called with data: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
14:10:59.050 [debug] Processing recursive fields of: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.050 [debug] do_fold called with data: %{edges: [%{from: :a, to: :b, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
14:10:59.050 [debug] Processing recursive fields of: %{edges: [%{from: :a, to: :b, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}], variant: :graph, vertices: MapSet.new([:a, :b])}
.14:10:59.050 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
14:10:59.050 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
14:10:59.050 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.050 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.050 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.050 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.050 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.050 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.050 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.050 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.050 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.050 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
14:10:59.051 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.051 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.051 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.051 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant_type: :graph, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
14:10:59.051 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.051 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
14:10:59.051 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
14:10:59.051 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.051 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.051 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.051 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant_type: :graph, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
14:10:59.051 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant_type: :graph, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
14:10:59.051 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.051 [debug] Recursive field result for edges: []
14:10:59.051 [debug] Recursive field result for edges: [:c]
14:10:59.051 [debug] Recursive field result for edges: [:b, :c]
14:10:59.051 [debug] Recursive field result for edges: [:a, :b, :c]
.14:10:59.051 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
14:10:59.051 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.051 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.051 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.051 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.051 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.051 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.051 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.051 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.052 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.052 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.052 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.052 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.052 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.052 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.052 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.052 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.052 [debug] Recursive field result for edges: []
14:10:59.052 [debug] Recursive field result for edges: []
.14:10:59.052 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
14:10:59.052 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.052 [debug] Recursive field result for edges: false
.14:10:59.052 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}, variant_type: :graph, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([])}
14:10:59.052 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.052 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.052 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.052 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}, variant_type: :graph, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:a])}
14:10:59.052 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.052 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
14:10:59.052 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.052 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.052 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}, variant_type: :graph, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant: :graph, vertices: MapSet.new([:a, :b])}
14:10:59.052 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}, variant_type: :graph, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:b])}
14:10:59.052 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.052 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.052 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
14:10:59.052 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
14:10:59.052 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.053 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
14:10:59.053 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.053 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}, variant_type: :graph, state: nil
14:10:59.053 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant: :graph, vertices: MapSet.new([:a, :b, :c])}
14:10:59.053 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}, variant_type: :graph, state: nil
14:10:59.053 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant: :graph, vertices: MapSet.new([:b, :c])}
14:10:59.053 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}, variant_type: :graph, state: nil
14:10:59.053 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:c])}
14:10:59.053 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.053 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.053 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}
14:10:59.053 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}
14:10:59.053 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}
14:10:59.053 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.053 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
14:10:59.053 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.053 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}, variant_type: :graph, state: nil
14:10:59.053 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d])}
14:10:59.053 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}, variant_type: :graph, state: nil
14:10:59.053 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant: :graph, vertices: MapSet.new([:b, :c, :d])}
14:10:59.053 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}, variant_type: :graph, state: nil
14:10:59.053 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant: :graph, vertices: MapSet.new([:c, :d])}
14:10:59.053 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}, variant_type: :graph, state: nil
14:10:59.053 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:d])}
14:10:59.053 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.053 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.053 [debug] Recursive field result for edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}
14:10:59.053 [debug] Recursive field result for edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}
14:10:59.053 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}
14:10:59.053 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}
14:10:59.053 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.053 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
14:10:59.054 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.054 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
14:10:59.054 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.054 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant_type: :graph, state: nil
14:10:59.054 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}
14:10:59.054 [debug] do_fold called with data: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant_type: :graph, state: nil
14:10:59.054 [debug] Processing recursive fields of: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}
14:10:59.054 [debug] do_fold called with data: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant_type: :graph, state: nil
14:10:59.054 [debug] Processing recursive fields of: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}
14:10:59.054 [debug] do_fold called with data: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant_type: :graph, state: nil
14:10:59.054 [debug] Processing recursive fields of: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}
14:10:59.054 [debug] do_fold called with data: %{variant: :empty}, variant_type: :empty, state: nil
14:10:59.054 [debug] Processing recursive fields of: %{variant: :empty}
14:10:59.054 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.054 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.054 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.054 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.054 [debug] Recursive field result for edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.054 [debug] Recursive field result for edges: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.054 [debug] do_fold called with data: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
14:10:59.054 [debug] Processing recursive fields of: %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.055 [debug] do_fold called with data: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
14:10:59.055 [debug] Processing recursive fields of: %{edges: [%{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.055 [debug] do_fold called with data: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
14:10:59.055 [debug] Processing recursive fields of: %{edges: [%{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.055 [debug] do_fold called with data: %{edges: [%{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
14:10:59.055 [debug] Processing recursive fields of: %{edges: [%{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.055 [debug] do_fold called with data: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
14:10:59.055 [debug] Processing recursive fields of: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.055 [debug] do_fold called with data: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
14:10:59.055 [debug] Processing recursive fields of: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.055 [debug] do_fold called with data: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
14:10:59.056 [debug] Processing recursive fields of: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.056 [debug] do_fold called with data: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
14:10:59.056 [debug] Processing recursive fields of: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
14:10:59.056 [debug] do_fold called with data: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant_type: :graph, state: nil
14:10:59.056 [debug] Processing recursive fields of: %{edges: [%{from: :e, to: :d, variant: :edge}, %{from: :b, to: :e, variant: :edge}, %{from: :c, to: :d, variant: :edge}, %{from: :b, to: :c, variant: :edge}, %{from: :a, to: :b, variant: :edge}, %{edges: [%{from: :a, to: :b, variant: :edge}, %{edges: %{edges: %{edges: %{edges: %{edges: %{edges: %{variant: :empty}, variant: :graph, vertices: MapSet.new([:e])}, variant: :graph, vertices: MapSet.new([:d, :e])}, variant: :graph, vertices: MapSet.new([:c, :d, :e])}, variant: :graph, vertices: MapSet.new([:b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}, variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}], variant: :graph, vertices: MapSet.new([:a, :b, :c, :d, :e])}
.
Finished in 0.04 seconds (0.00s async, 0.04s sync)
9 tests, 0 failures

Randomized with seed 987386
